properties:


  - name: event_source
    type: ALLEGRO_EVENT_SOURCE
    init_with: ''
    getter_ref: true

  - name: initialized
    type: bool
    init_with: false
    getter: true


functions:


  - name: initialize
    guards: [ al_is_system_installed(), (!get_initialized()) ]
    body: |
      al_init_user_event_source(&event_source);
      initialized = true;
      return;


  - name: emit_event
    parameters:
      - name: type
        type: unsigned int
        default_argument: 0
      - name: data1
        type: intptr_t
        default_argument: 0
      - name: data2
        type: intptr_t
        default_argument: 0
      - name: data3
        type: intptr_t
        default_argument: 0
      - name: data4
        type: intptr_t
        default_argument: 0
    guards: [ initialized ]
    body: |
      ALLEGRO_EVENT event;
      event.user.type = type; //SCREEN_MANAGER_SWITCH_SCREEN_EVENT;
      event.user.data1 = data1; //SCREEN_TITLE_SCREEN;
      event.user.data2 = data2;
      event.user.data3 = data3;
      event.user.data4 = data4;
      al_emit_user_event(&event_source, &event, NULL);
      return;


  - name: emit_screen_switch_event
    parameters:
      - name: screen_identifier_to_switch_to
        type: std::string
        default_argument: 0
    guards: [ initialized ]
    body: |
      // should be "disable screen", "enable screen", "shutdown screen", etc...
      // TODO: implement this:
      // std::string *data_to_pass = new std::string(screen_identifier_to_switch_to);
      //emit_event(SCREEN_MANAGER_SWITCH_SCREEN_EVENT, data_to_pass);
      return;
    body_dependency_symbols:
      - ALLEGRO_FLARE_SCREEN_SWITCH_EVENT 


  - name: emit_exit_game_event
    guards: [ initialized ]
    body: |
      emit_event(ALLEGRO_FLARE_EVENT_EXIT_GAME);
      return;
    body_dependency_symbols:
      - ALLEGRO_FLARE_EVENT_EXIT_GAME


  - name: emit_play_sound_effect_event
    parameters:
      - name: sound_effect_identifier
        type: std::string
        default_argument: '"[unset-sound-effect-identifier]"'
    guards: [ initialized ]
    body: |
      intptr_t data_to_pass = (intptr_t)(void *)(new std::string(sound_effect_identifier));
      emit_event(ALLEGRO_FLARE_EVENT_PLAY_SOUND_EFFECT, data_to_pass);
      return;
    body_dependency_symbols:
      - ALLEGRO_FLARE_EVENT_EXIT_GAME


  - name: emit_play_music_track_event
    parameters:
      - name: music_track_identifier
        type: std::string
        default_argument: '"[unset-music-track-identifier]"'
    guards: [ initialized ]
    body: |
      //std::string *data_to_pass = new std::string(music_track_identifier);
      //emit_event(ALLEGRO_FLARE_EVENT_PLAY_MUSIC_TRACK, (intptr_t)data_to_pass);
      return;
    body_dependency_symbols:
      - ALLEGRO_FLARE_EVENT_EXIT_GAME


  - name: emit_virtual_controls_button_up_event
    parameters:
      - name: virtual_button_num
        type: int
        default_argument: 0
    guards: [ initialized ]
    body: |
      emit_event(ALLEGRO_FLARE_EVENT_VIRTUAL_CONTROL_BUTTON_UP, virtual_button_num);
      return;
 

  - name: emit_virtual_controls_button_down_event
    parameters:
      - name: virtual_button_num
        type: int
        default_argument: 0
    guards: [ initialized ]
    body: |
      emit_event(ALLEGRO_FLARE_EVENT_VIRTUAL_CONTROL_BUTTON_DOWN, virtual_button_num);
      return;
 

  - name: emit_virtual_controls_axis_change_event
    parameters:
      - name: stick
        type: int
        default_argument: 0
      - name: axis
        type: int
        default_argument: 0
      - name: position
        type: float
        default_argument: 0.0f
    guards: [ initialized ]
    body: |
      // TODO: not implemented (not tested!)
      emit_event(ALLEGRO_FLARE_EVENT_VIRTUAL_CONTROL_AXIS_CHANGE, stick, axis, (int)(position * 255));
      return;


  - name: TODO
    body: |
      // note this class is based on DragonWrath/UserEventEmitter
      return;


dependencies:


  - symbol: ALLEGRO_EVENT_SOURCE
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_FLARE_EVENT_EXIT_GAME 
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: ALLEGRO_FLARE_SCREEN_SWITCH_EVENT 
    headers: [ AllegroFlare/EventNames.hpp ]


