properties:


  - name: event_source
    type: ALLEGRO_EVENT_SOURCE
    init_with: ''
    getter_ref: true

  - name: initialized
    type: bool
    init_with: false
    getter: true


functions:


  - name: initialize
    guards: [ al_is_system_installed(), (!get_initialized()) ]
    body: |
      al_init_user_event_source(&event_source);
      initialized = true;
      return;


  - name: emit_event
    parameters:
      - name: type
        type: uint32_t
        default_argument: 0
      - name: data1
        type: intptr_t
        default_argument: 0
      - name: data2
        type: intptr_t
        default_argument: 0
      - name: data3
        type: intptr_t
        default_argument: 0
      - name: data4
        type: intptr_t
        default_argument: 0
    guards: [ initialized ]
    body: |
      ALLEGRO_EVENT event;
      event.user.type = type; //SCREEN_MANAGER_SWITCH_SCREEN_EVENT;
      event.user.data1 = data1; //SCREEN_TITLE_SCREEN;
      event.user.data2 = data2;
      event.user.data3 = data3;
      event.user.data4 = data4;
      al_emit_user_event(&event_source, &event, NULL);
      return;


  - name: emit_router_event
    parameters:
      - name: router_event
        type: uint32_t
        default_argument: 0
      - name: route_event_data
        type: AllegroFlare::RouteEventDatas::Base*
        default_argument: nullptr
      - name: time_now
        type: float
        default_argument: 0.0f
    guards: [ initialized ]
    body: |
      float *time_now_ptr = new float(time_now);
      emit_event(ALLEGRO_FLARE_EVENT_ROUTER, router_event, (intptr_t)route_event_data, (intptr_t)time_now_ptr);
      return;
    body_dependency_symbols:
      - ALLEGRO_FLARE_EVENT_ROUTER


  - name: emit_dialog_open_event
    parameters:
      - name: dialog_node_name_to_open
        type: std::string
        default_argument: '"[unset-dialog_node_name_to_open]"'
    guards: [ initialized ]
    body: |
      // TODO: Add test for this emission
      intptr_t data_to_pass = (intptr_t)(void *)(new std::string(dialog_node_name_to_open));
      emit_event(ALLEGRO_FLARE_EVENT_DIALOG_OPEN, data_to_pass);
      return;
    body_dependency_symbols:
      - AllegroFlare::EventNames


  - name: emit_dialog_close_event
    guards: [ initialized ]
    body: |
      // TODO: Add test for this emission
      emit_event(ALLEGRO_FLARE_EVENT_DIALOG_CLOSE);
      return;
    body_dependency_symbols:
      - AllegroFlare::EventNames


  - name: emit_dialog_next_page
    guards: [ initialized ]
    body: |
      // TODO: Add test for this emission
      emit_event(ALLEGRO_FLARE_EVENT_DIALOG_NEXT_PAGE);
      return;
    body_dependency_symbols:
      - AllegroFlare::EventNames


  - name: emit_switch_screen_event
    parameters:
      - name: screen_identifier_to_switch_to
        type: std::string
        default_argument: 0
    guards: [ initialized ]
    body: |
      // TODO: consider "disable screen", "enable screen", "shutdown screen", etc...
      intptr_t data_to_pass = (intptr_t)(void *)(new std::string(screen_identifier_to_switch_to));
      emit_event(ALLEGRO_FLARE_EVENT_SWITCH_SCREEN, data_to_pass);
      return;
    body_dependency_symbols:
      - ALLEGRO_FLARE_EVENT_SWITCH_SCREEN


  - name: emit_exit_game_event
    guards: [ initialized ]
    body: |
      emit_event(ALLEGRO_FLARE_EVENT_EXIT_GAME);
      return;
    body_dependency_symbols:
      - ALLEGRO_FLARE_EVENT_EXIT_GAME


  - name: emit_show_input_hints_bar_event
    body: |
      emit_event(ALLEGRO_FLARE_EVENT_SHOW_INPUT_HINTS_BAR);
    body_dependency_symbols:
      - ALLEGRO_FLARE_EVENT_SHOW_INPUT_HINTS_BAR


  - name: emit_hide_input_hints_bar_event
    body: |
      emit_event(ALLEGRO_FLARE_EVENT_HIDE_INPUT_HINTS_BAR);
    body_dependency_symbols:
      - ALLEGRO_FLARE_EVENT_HIDE_INPUT_HINTS_BAR


  - name: emit_set_input_hints_bar_event
    parameters:
      - name: tokens
        type: std::vector<std::string>
        default_argument: '{}'
    body: |
      intptr_t data_to_pass = (intptr_t)(void *)(new std::vector<std::string>(tokens));
      emit_event(ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR, data_to_pass);
    body_dependency_symbols:
      - ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR


  - name: emit_set_input_hints_bar_text_opacity_event
    parameters:
      - name: opacity
        type: float
        default_argument: 1.0f
    body: |
      intptr_t data_to_pass = (intptr_t)(void *)(new float(opacity));
      emit_event(ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR_TEXT_OPACITY, data_to_pass);
    body_dependency_symbols:
      - ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR_TEXT_OPACITY


  - name: emit_set_input_hints_bar_backfill_opacity_event
    parameters:
      - name: opacity
        type: float
        default_argument: 0.35f
    body: |
      // TODO: use a shared constant for the default value
      intptr_t data_to_pass = (intptr_t)(void *)(new float(opacity));
      emit_event(ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR_BACKFILL_OPACITY, data_to_pass);
    body_dependency_symbols:
      - ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR_BACKFILL_OPACITY


  - name: emit_set_input_hints_bar_height_event
    parameters:
      - name: height
        type: float
        default_argument: 60.0f
    body: |
      intptr_t data_to_pass = (intptr_t)(void *)(new float(height));
      emit_event(ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR_HEIGHT, data_to_pass);
    body_dependency_symbols:
      - ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR_HEIGHT


  - name: emit_set_shader_target_for_hotloading_event
    parameters:
      - name: shader
        type: AllegroFlare::Shaders::Base*
        default_argument: nullptr
    body: |
      // TODO: add test for this function
      intptr_t data_to_pass = (intptr_t)(void *)(shader);
      emit_event(ALLEGRO_FLARE_EVENT_SET_SHADER_TARGET_FOR_HOTLOADING, data_to_pass);
    body_dependency_symbols:
      - ALLEGRO_FLARE_EVENT_SET_SHADER_TARGET_FOR_HOTLOADING


  - name: emit_poll_hotload_shader_source_for_change_event
    body: |
      // TODO: add test for this function
      emit_event(ALLEGRO_FLARE_EVENT_POLL_HOTLOAD_SHADER_SOURCE_FOR_CHANGE);
    body_dependency_symbols:
      - ALLEGRO_FLARE_EVENT_POLL_HOTLOAD_SHADER_SOURCE_FOR_CHANGE


  - name: emit_hotload_shader_source_event
    parameters:
      - name: vertex_shader_source
        type: std::string
        default_argument: '"[unset-vertex_shader_source]"'
      - name: fragment_shader_source
        type: std::string
        default_argument: '"[unset-fragment_shader_source]"'
      - name: shader
        type: AllegroFlare::Shaders::Base*
        default_argument: nullptr
    body: |
      // TODO: add test for this function
      intptr_t vertex_shader_source_data = (intptr_t)(void *)(new std::string(vertex_shader_source));
      intptr_t fragment_shader_source_data = (intptr_t)(void *)(new std::string(fragment_shader_source));
      emit_event(
         ALLEGRO_FLARE_EVENT_HOTLOAD_SHADER_SOURCE,
         vertex_shader_source_data,
         fragment_shader_source_data,
         (intptr_t)shader
      );
    body_dependency_symbols:
      - ALLEGRO_FLARE_EVENT_HOTLOAD_SHADER_SOURCE


  - name: emit_post_unlocked_achievement_notification_event
    parameters:
      - name: achievement_name
        type: std::string
        default_argument: '"[unset-achievement_name]"'
    guards: [ initialized ]
    body: |
      intptr_t data_to_pass = (intptr_t)(void *)(new std::string(achievement_name));
      emit_event(ALLEGRO_FLARE_EVENT_POST_ACHIEVEMENT_UNLOCKED_NOTIFICATION, data_to_pass);
    body_dependency_symbols:
      - ALLEGRO_FLARE_EVENT_POST_ACHIEVEMENT_UNLOCKED_NOTIFICATION


  - name: emit_play_sound_effect_event
    parameters:
      - name: sound_effect_identifier
        type: std::string
        default_argument: '"[unset-sound-effect-identifier]"'
    guards: [ initialized ]
    body: |
      intptr_t data_to_pass = (intptr_t)(void *)(new std::string(sound_effect_identifier));
      emit_event(ALLEGRO_FLARE_EVENT_PLAY_SOUND_EFFECT, data_to_pass);
      return;
    body_dependency_symbols:
      - ALLEGRO_FLARE_EVENT_EXIT_GAME


  - name: emit_play_music_track_event
    parameters:
      - name: music_track_identifier
        type: std::string
        default_argument: '"[unset-music-track-identifier]"'
    guards: [ initialized ]
    body: |
      std::string *data_to_pass = new std::string(music_track_identifier);
      emit_event(ALLEGRO_FLARE_EVENT_PLAY_MUSIC_TRACK, (intptr_t)data_to_pass);
      return;
    body_dependency_symbols:
      - ALLEGRO_FLARE_EVENT_EXIT_GAME


  - name: emit_stop_all_music_tracks_event
    guards: [ initialized ]
    body: |
      emit_event(ALLEGRO_FLARE_EVENT_STOP_ALL_MUSIC_TRACKS);
      return;
    body_dependency_symbols:
      - ALLEGRO_FLARE_EVENT_STOP_ALL_MUSIC_TRACKS


  - name: emit_game_event
    parameters:
      - name: game_event
        type: AllegroFlare::GameEvent
        default_argument: '{}'
    guards: [ initialized ]
    body: |
      AllegroFlare::GameEvent *game_event_copy = new AllegroFlare::GameEvent(game_event);
      emit_event(ALLEGRO_FLARE_EVENT_GAME_EVENT, (intptr_t)game_event_copy);
      return;


  - name: TODO
    body: |
      // note this class is based on DragonWrath/UserEventEmitter
      return;


dependencies:


  - symbol: ALLEGRO_FLARE_EVENT_ROUTER
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: ALLEGRO_FLARE_EVENT_POLL_HOTLOAD_SHADER_SOURCE_FOR_CHANGE
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: ALLEGRO_FLARE_EVENT_SET_SHADER_TARGET_FOR_HOTLOADING
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: ALLEGRO_FLARE_EVENT_HOTLOAD_SHADER_SOURCE
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: ALLEGRO_FLARE_EVENT_POST_ACHIEVEMENT_UNLOCKED_NOTIFICATION
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: ALLEGRO_FLARE_EVENT_SHOW_INPUT_HINTS_BAR
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: ALLEGRO_FLARE_EVENT_HIDE_INPUT_HINTS_BAR
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR_TEXT_OPACITY
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR_BACKFILL_OPACITY
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: ALLEGRO_FLARE_EVENT_STOP_ALL_MUSIC_TRACKS
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR_HEIGHT
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: ALLEGRO_EVENT_SOURCE
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_FLARE_EVENT_EXIT_GAME 
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: ALLEGRO_FLARE_EVENT_SWITCH_SCREEN
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: AllegroFlare::EventNames
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: AllegroFlare::GameEvent
    headers: [ AllegroFlare/GameEvent.hpp ]
  - symbol: AllegroFlare::GameEventDatas::Base*
    headers: [ AllegroFlare/GameEventDatas/Base.hpp ]
  - symbol: AllegroFlare::Shaders::Base
    headers: [ AllegroFlare/Shaders/Base.hpp ]
  - symbol: AllegroFlare::RouteEventDatas::Base
    headers: [ AllegroFlare/RouteEventDatas/Base.hpp ]


