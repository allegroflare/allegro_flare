properties:


  - name: messages_json
    type: std::vector<std::string>
    constructor_arg: true
    init_with: '{}'
    getter: true
    setter: true

  - name: messages
    type: std::vector<AllegroFlare::MotionComposer::Messages::Base*>
    constructor_arg: true
    init_with: '{}'
    getter: true
    setter: true


functions:


  - name: get_one_message_and_pop
    type: AllegroFlare::MotionComposer::Messages::Base*
    body: |
      if (messages.empty()) return nullptr;
      AllegroFlare::MotionComposer::Messages::Base* result = messages.front();
      messages.erase(messages.begin()); // (equivelent to .pop_front())
      return result;


  - name: convert_one
    body: |
      if (messages_json.empty()) return;
      AllegroFlare::MotionComposer::Messages::Base* message = build_message_from_json(messages_json.front());
      if (!message)
      {
         std::stringstream error_message;
         error_message << "AllegroFlare::MotionComposer::MessageProcessor: error: "
                       << "could not parse message." << std::endl;
         throw std::runtime_error(error_message.str());
      }
      else
      {
         messages.push_back(message);
      }
      return;
    body_dependency_symbols:
      - std::stringstream


  - name: process_one
    body: |
      // TODO
         //message->process();
         //delete message;
      return;


  - name: build_message_from_json
    type: AllegroFlare::MotionComposer::Messages::Base*
    parameters:
      - name: json_as_string
        type: std::string
        default_argument: '"{}"'
    body: |
      AllegroFlare::MotionComposer::Messages::Base* result = nullptr;


      // parse the json

      nlohmann::json parsed_json = nlohmann::json::parse(json_as_string);


      // extract the type

      if (!parsed_json.contains("message"))
      {
          std::stringstream error_message;
          error_message << "AllegroFlare::MotionComposer::MessageProcessor::build_message_from_json: error: "
                        << "Expecting JSON to have a \"message\" property but it does not.  JSON:"
                        << std::endl
                        << std::endl
                        << parsed_json.dump(2);
          throw std::runtime_error(error_message.str());
      }
      else
      {
         if (!parsed_json["message"].contains("type"))
         {
            std::stringstream error_message;
            error_message << "AllegroFlare::MotionComposer::MessageProcessor::build_message_from_json: error: "
                          << "Expecting JSON to have a [\"message\"][\"type\"] property but it does not.  JSON:"
                          << std::endl
                          << std::endl
                          << parsed_json.dump(2);
            throw std::runtime_error(error_message.str());
         }
         else
         {
            // process the type(s)

            std::string type = parsed_json["message"]["type"];
            if (type == "SetPlayheadPosition")
            //^^ maybe eventually: if (type == "AllegroFlare::MotionComposer::Messages::SetPlayheadPosition")
            {
               AllegroFlare::MotionComposer::Messages::SetPlayheadPosition *typed_result =
                  new AllegroFlare::MotionComposer::Messages::SetPlayheadPosition();
               parsed_json["message"].get_to(*typed_result);
               result = typed_result;
            }
            else
            {
               std::stringstream error_message;
               error_message << "AllegroFlare::MotionComposer::MessageProcessor::build_message_from_json: error: "
                             << "Unknown message type \"" << type << "\". Cannot parse.";
               throw std::runtime_error(error_message.str());
            }
         }
      }

      return result;
    body_dependency_symbols:
      - nlohmann::json
      - AllegroFlare::JSONLoaders::MotionComposer::Messages::SetPlayheadPosition


dependencies:


  - symbol: AllegroFlare::MotionComposer::Messages::Base*
    headers: [ AllegroFlare/MotionComposer/Messages/Base.hpp ]
  - symbol: std::vector<AllegroFlare::MotionComposer::Messages::Base*>
    headers: [ vector, AllegroFlare/MotionComposer/Messages/Base.hpp ]
  - symbol: nlohmann::json
    headers: [ lib/nlohmann/json.hpp ]
  - symbol: AllegroFlare::JSONLoaders::MotionComposer::Messages::SetPlayheadPosition
    headers: [ AllegroFlare/JSONLoaders/MotionComposer/Messages/SetPlayheadPosition.hpp ]


