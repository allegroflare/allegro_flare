properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: quote
    type: std::string
    init_with: '"Hello!"'
    constructor_arg: true


methods:


  - name: render
    parameters:
      - name: save_slot
        type: AllegroFlare::LoadASavedGame::SaveSlots::Base*
        default_argument: nullptr
      - name: x
        type: float
        default_argument: 0
      - name: y
        type: float
        default_argument: 0
    guards: [ al_is_system_installed(), al_is_primitives_addon_initialized(), al_is_font_addon_initialized(), font_bin ]
    body: |
      float slot_width = 1920/2;
      float slot_height = 1080/8;
      if (save_slot->is_type(AllegroFlare::LoadASavedGame::SaveSlots::Basic::TYPE))
      {
         // TODO: Test this rendering type
         AllegroFlare::LoadASavedGame::SaveSlots::Basic *as =
            static_cast<AllegroFlare::LoadASavedGame::SaveSlots::Basic*>(save_slot);

         AllegroFlare::LoadASavedGame::SaveSlotRenderers::Basic renderer;
         renderer.set_font_bin(font_bin);
         renderer.set_x(x);
         renderer.set_y(y);
         renderer.set_width(slot_width);
         renderer.set_height(slot_height);
         renderer.set_save_name(as->get_save_name());
         renderer.render();
      }
      else if (save_slot->is_type(AllegroFlare::LoadASavedGame::SaveSlots::Empty::TYPE))
      {
         // TODO: Test this rendering type
         AllegroFlare::LoadASavedGame::SaveSlotRenderers::Empty renderer;
         renderer.set_font_bin(font_bin);
         renderer.set_x(x);
         renderer.set_y(y);
         renderer.set_width(slot_width);
         renderer.set_height(slot_height);
         renderer.render();
      }
      else
      {
         // TODO: Test this thrown error
         std::stringstream error_message;
         error_message << "AllegroFlare::LoadASavedGame::SaveSlotRenderer::render error: "
                       << "Unhandled type \"" << save_slot->get_type() << "\"";
         throw std::runtime_error(error_message.str());
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::Vec2D
      - al_draw_rounded_rectangle
      - al_draw_text
      - AllegroFlare::LoadASavedGame::SaveSlots::Basic
      - AllegroFlare::LoadASavedGame::SaveSlots::Empty
      - AllegroFlare::LoadASavedGame::SaveSlotRenderers::Basic
      - AllegroFlare::LoadASavedGame::SaveSlotRenderers::Empty


  - name: obtain_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Inter-Medium.ttf -52");


dependencies:


  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_draw_text
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_draw_rounded_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Vec2D
    headers: [ AllegroFlare/Vec2D.hpp ]
  - symbol: AllegroFlare::LoadASavedGame::SaveSlots::Basic
    headers: [ AllegroFlare/LoadASavedGame/SaveSlots/Basic.hpp ]
  - symbol: AllegroFlare::LoadASavedGame::SaveSlots::Empty
    headers: [ AllegroFlare/LoadASavedGame/SaveSlots/Empty.hpp ]
  - symbol: AllegroFlare::LoadASavedGame::SaveSlotRenderers::Basic
    headers: [ AllegroFlare/LoadASavedGame/SaveSlotRenderers/Basic.hpp ]
  - symbol: AllegroFlare::LoadASavedGame::SaveSlotRenderers::Empty
    headers: [ AllegroFlare/LoadASavedGame/SaveSlotRenderers/Empty.hpp ]
  - symbol: AllegroFlare::LoadASavedGame::SaveSlots::Base
    headers: [ AllegroFlare/LoadASavedGame/SaveSlots/Base.hpp ]


