parent_classes:


  - class: AllegroFlare::Screens::Base
    scope: public
    init_with: AllegroFlare::LoadASavedGame::Screen::TYPE


properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true

  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: model_bin
    type: AllegroFlare::ModelBin*
    init_with: nullptr
    constructor_arg: true

  - name: save_slots
    type: std::vector<AllegroFlare::LoadASavedGame::SaveSlots::Base*>
    init_with: '{}'
    getter: true
    setter: explicit

  - name: cursor_position
    type: int
    init_with: 0

  - name: on_exit_callback_func
    type: std::function<void(AllegroFlare::LoadASavedGame::Screen*, void*)>
    init_with: ''
    getter: true
    setter: true

  - name: on_exit_callback_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: initialized
    type: bool
    init_with: false

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/LoadASavedGame/Screen"'
    static: true
    constexpr: true


methods:


  - name: set_event_emitter
    guards: [ (!initialized) ]
    parameters:
      - name: event_emitter
        type: AllegroFlare::EventEmitter*
        default_argument: nullptr
    body: |
      this->event_emitter = event_emitter;
      return;


  - name: set_bitmap_bin
    guards: [ (!initialized) ]
    parameters:
      - name: bitmap_bin
        type: AllegroFlare::BitmapBin*
        default_argument: nullptr
    body: |
      this->bitmap_bin = bitmap_bin;
      return;


  - name: set_font_bin
    guards: [ (!initialized) ]
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
    body: |
      this->font_bin = font_bin;
      return;


  - name: set_model_bin
    guards: [ (!initialized) ]
    parameters:
      - name: model_bin
        type: AllegroFlare::ModelBin*
        default_argument: nullptr
    body: |
      this->model_bin = model_bin;
      return;


  - name: set_save_slots
    guards: [ (!initialized) ]
    parameters:
      - name: save_slots
        type: std::vector<AllegroFlare::LoadASavedGame::SaveSlots::Base*>
        default_argument: '{}'
    guards: [ (save_slots.size() <= 3) ]
    body: |
      this->save_slots = save_slots;
      cursor_position = 0;
      return;


  - name: initialize
    guards:
      - (!initialized)
      - al_is_system_installed()
      - al_is_primitives_addon_initialized()
      - al_is_font_addon_initialized()
      - event_emitter
      - bitmap_bin
      - font_bin
      - model_bin
    body: |
      initialized = true;
      return;
    body_dependency_symbols:
      - al_is_primitives_addon_initialized


  - name: on_activate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      cursor_position = 0;
      //emit_event_to_update_input_hints_bar();
      //emit_show_and_size_input_hints_bar_event();
      return;


  - name: on_deactivate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      //emit_hide_and_restore_size_input_hints_bar_event();
      return;


  - name: move_cursor_up
    body: |
      if (save_slots.empty()) return;
      cursor_position--;
      if (cursor_position < 0) cursor_position += save_slots.size();
      return;


  - name: move_cursor_down
    body: |
      if (save_slots.empty()) return;
      cursor_position++;
      if (cursor_position >= save_slots.size()) cursor_position -= save_slots.size();
      return;


  - name: exit_screen
    body: |
      if (on_exit_callback_func)
      {
         on_exit_callback_func(this, on_exit_callback_func_user_data);
      }
      else
      {
         AllegroFlare::Logger::throw_error(
            "AllegroFlare::LoadASavedGame::Screen::exit_screen",
            "Expecting an \"on_exit_callback_func\" to be present, but it is not."
         );
      }

      return;
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: update
    body: |
      return;


  - name: render
    body: |
      render_title();
      render_save_slots();
      return;


  - name: render_title
    body: |
      ALLEGRO_FONT *font = obtain_heading_font();
      float line_height = al_get_font_line_height(font);
      al_draw_text(font, ALLEGRO_COLOR{1, 1, 1, 1}, 1920/2, 260-line_height, ALLEGRO_ALIGN_CENTER, "Load a Saved Game");
      return;


  - name: render_save_slots
    body: |
      float y_cursor = 400;
      float y_distance = 1080/6;
      int i=0;
      for (auto &save_slot : save_slots)
      {
         // HERE: Continue on this
         AllegroFlare::LoadASavedGame::SaveSlotRenderer renderer;
         renderer.set_font_bin(font_bin);
         renderer.render(
            save_slot,
            1920/2,
            y_cursor + y_distance*i
         );
         i++;
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::LoadASavedGame::SaveSlotRenderer


  - name: primary_timer_func
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      update();
      render();
      return;


  - name: key_char_func
    virtual: true
    override: true
    parameters:
      - name: event
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ event ]
    body: |
      switch(event->keyboard.keycode)
      {
         case ALLEGRO_KEY_UP:
            move_cursor_up();
         break;

         case ALLEGRO_KEY_DOWN:
            move_cursor_down();
         break;

         case ALLEGRO_KEY_Q:
            exit_screen();
         break;
      }
      return;


  - name: virtual_control_button_down_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      // TODO: this function
      return;


  - name: virtual_control_axis_change_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      // TODO: this function
      return;


  - name: obtain_heading_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Inter-Regular.ttf -46");


  - name: obtain_text_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Inter-Regular.ttf -32");


dependencies:


  - symbol: AllegroFlare::LoadASavedGame::Screen
    headers: [ AllegroFlare/LoadASavedGame/Screen.hpp ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Player
    headers: [ AllegroFlare/Player.hpp ]
  - symbol: AllegroFlare::VirtualControllers::Base
    headers: [ AllegroFlare/VirtualControllers/Base.hpp ]
  - symbol: AllegroFlare::LoadASavedGame::SaveSlots::Base
    headers: [ AllegroFlare/LoadASavedGame/SaveSlots/Base.hpp ]
  - symbol: AllegroFlare::LoadASavedGame::SaveSlotRenderer
    headers: [ AllegroFlare/LoadASavedGame/SaveSlotRenderer.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]


