properties:


  - name: event_queue
    type: ALLEGRO_EVENT_QUEUE*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: false

  - name: timer
    type: AllegroFlare::Timer
    init_with: '{}'

  - name: audio_stream
    type: ALLEGRO_AUDIO_STREAM*
    init_with: nullptr

  - name: audio_voice
    type: ALLEGRO_VOICE*
    init_with: nullptr

  - name: audio_mixer
    type: ALLEGRO_MIXER*
    init_with: nullptr

  - name: initialized
    type: bool
    init_with: false

  - name: stream_is_attached
    type: bool
    init_with: false

  - name: song_bpm
    type: float
    init_with: 130.0f

  - name: latency_sec
    type: float
    init_with: 0.125f


functions:


  - name: TODO
    body: |
      // TODO: investigate calculating the amount of latency needed.
      // - you might consume stream filling events, size of buffer, etc.
      return;


  - name: set_event_queue
    parameters:
      - name: event_queue
        type: ALLEGRO_EVENT_QUEUE*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      this->event_queue = event_queue;
      return;


  - name: get_timer_milliseconds
    type: float
    body: |
      float time_with_latency = timer.get_elapsed_time_milliseconds() - (latency_sec * 1000);
      if (time_with_latency < 0) return 0;
      return time_with_latency;


  - name: time_since_last_beat
    type: float
    body: |
      // TODO
      return 0.0f;
    body_dependency_symbols:
      - fmod


  - name: start
    body: |
      if (!stream_is_attached)
      {
         al_register_event_source(event_queue, al_get_audio_stream_event_source(audio_stream));
         if (!al_attach_audio_stream_to_mixer(audio_stream, audio_mixer))
         {
            throw std::runtime_error("boobaz");
         }
         timer.start();
      }

      return;


  - name: initialize
    guards:
      - (!initialized)
      - al_is_audio_installed()
      - al_is_acodec_addon_initialized()
      - event_queue
    body: |
      audio_voice = al_create_voice(44100, ALLEGRO_AUDIO_DEPTH_INT16, ALLEGRO_CHANNEL_CONF_2);
      if (!audio_voice) throw std::runtime_error("could not create voice!!");

      audio_mixer = al_create_mixer(44100, ALLEGRO_AUDIO_DEPTH_FLOAT32, ALLEGRO_CHANNEL_CONF_2);
      if (!al_attach_mixer_to_voice(audio_mixer, audio_voice))
      {
         throw std::runtime_error("could not attach mixer to voice");
      }

      std::string filename = "/Users/markoates/Repos/allegro_flare/bin/data/samples/music_tracks/some-jamzz-04.ogg";
      //std::string filename = "/Users/markoates/Repos/allegro_flare/bin/data/samples/music_tracks/skate2.ogg";

      audio_stream = al_load_audio_stream(filename.c_str(), 4, 2048);
      if (!audio_stream) throw std::runtime_error("could not load stream!!");

      al_set_audio_stream_playmode(audio_stream, ALLEGRO_PLAYMODE_ONCE);

      initialized = true;
      return;
    body_dependency_symbols:
      - al_is_acodec_addon_initialized
      - std::cout


  - name: destruct
    body: |
      if (audio_mixer)
      {
         if (stream_is_attached)
         {
            // TODO: sort out this destruction
            al_detach_voice(audio_voice);
            al_destroy_mixer(audio_mixer);
         }
      }
      if (audio_voice)
      {
         al_destroy_voice(audio_voice);
      }
      if (audio_stream)
      {
         al_unregister_event_source(event_queue, al_get_audio_stream_event_source(audio_stream));
         al_destroy_audio_stream(audio_stream);
      }
      return;


dependencies:


  - symbol: ALLEGRO_EVENT_QUEUE
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_AUDIO_STREAM
    headers: [ allegro5/allegro_audio.h ]
  - symbol: ALLEGRO_VOICE
    headers: [ allegro5/allegro_audio.h ]
  - symbol: ALLEGRO_MIXER
    headers: [ allegro5/allegro_audio.h ]
  - symbol: al_is_acodec_addon_initialized
    headers: [ allegro5/allegro_acodec.h ]
  - symbol: AllegroFlare::Timer
    headers: [ AllegroFlare/Timer.hpp ]
  - symbol: fmod
    headers: [ cmath ]


