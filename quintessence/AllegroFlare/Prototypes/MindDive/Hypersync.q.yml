properties:


  - name: song_filename
    type: std::string
    init_with: '"/Users/markoates/Repos/allegro_flare/bin/data/samples/music_tracks/some-jamzz-04.ogg"'
    constructor_arg: true
    getter: true
    setter: false

  - name: song_bpm
    type: float
    init_with: 130.0f
    constructor_arg: true
    getter: true
    setter: false

  - name: timer
    type: AllegroFlare::Timer
    init_with: '{}'

  - name: audio_stream
    type: ALLEGRO_AUDIO_STREAM*
    init_with: nullptr

  - name: audio_voice
    type: ALLEGRO_VOICE*
    init_with: nullptr

  - name: audio_mixer
    type: ALLEGRO_MIXER*
    init_with: nullptr

  - name: initialized
    type: bool
    init_with: false

  - name: stream_is_attached
    type: bool
    init_with: false

  - name: MIN_SONG_BPM
    type: float
    init_with: 20.0f

  - name: latency_sec
    type: float
    init_with: 0.140f


functions:


  - name: TODO
    body: |
      // TODO:
      // - investigate calculating the amount of latency needed, you might consume stream
      //   filling events, size of buffer, etc.
      // - add a "reset" option
      // - permit changing the song and bpm after initialization (which will implicitly stop stream and reset the timer)
      return;


  - name: set_song_filename
    parameters:
      - name: song_filename
        type: std::string
        default_argument: '"[unset-song-filename.ogg]"'
    guards: [ (!initialized) ]
    body: |
      this->song_filename = song_filename;
      return;


  - name: set_song_bpm
    parameters:
      - name: song_bpm
        type: float
        default_argument: 0.0f
    guards: [ (!initialized), (song_bpm >= MIN_SONG_BPM) ]
    body: |
      this->song_bpm = song_bpm;
      return;


  - name: get_timer_seconds
    type: float
    body: |
      return get_timer_microseconds() * 0.000001f;


  - name: get_timer_milliseconds
    type: float
    body: |
      return get_timer_microseconds() * 0.001f;


  - name: get_timer_microseconds
    type: float
    body: |
      float time_with_latency = timer.get_elapsed_time_microseconds() - (latency_sec * 1000000);
      if (time_with_latency < 0) return 0;
      return time_with_latency;


  - name: get_beat_num
    type: int
    parameters:
      - name: seconds
        type: float
        default_argument: 0.0f
    body: |
      float beat = (seconds * (song_bpm / 60.0));
      return ((int)beat) % 4 + 1;


  - name: get_measure_num
    type: int
    parameters:
      - name: seconds
        type: float
        default_argument: 0.0f
    body: |
      float beat = (seconds * (song_bpm / 60.0));
      return ((int)beat) / 4;


  - name: build_beat_clock_str
    type: std::string
    body: |
      float seconds = get_timer_seconds();
      std::stringstream result;
      result << get_measure_num(seconds) << ":" << get_beat_num(seconds);
      return result.str();


  - name: start
    body: |
      if (!stream_is_attached)
      {
         if (!al_attach_audio_stream_to_mixer(audio_stream, audio_mixer))
         {
            throw std::runtime_error("boobaz");
         }
         timer.start();
      }

      return;


  - name: initialize
    guards:
      - (!initialized)
      - al_is_audio_installed()
      - al_is_acodec_addon_initialized()
    guards: [ (!song_filename.empty()), (song_bpm >= MIN_SONG_BPM) ]
    body: |
      audio_voice = al_create_voice(44100, ALLEGRO_AUDIO_DEPTH_INT16, ALLEGRO_CHANNEL_CONF_2);
      if (!audio_voice) throw std::runtime_error("could not create voice!!");

      audio_mixer = al_create_mixer(44100, ALLEGRO_AUDIO_DEPTH_FLOAT32, ALLEGRO_CHANNEL_CONF_2);
      if (!al_attach_mixer_to_voice(audio_mixer, audio_voice))
      {
         throw std::runtime_error("could not attach mixer to voice");
      }

      audio_stream = al_load_audio_stream(song_filename.c_str(), 4, 2048);
      if (!audio_stream) throw std::runtime_error("could not load stream!!");

      al_set_audio_stream_playmode(audio_stream, ALLEGRO_PLAYMODE_ONCE);

      initialized = true;
      return;
    body_dependency_symbols:
      - al_is_acodec_addon_initialized
      - std::cout


  - name: destruct
    body: |
      if (audio_mixer)
      {
         if (stream_is_attached)
         {
            // TODO: sort out this destruction
            al_detach_voice(audio_voice);
            al_destroy_mixer(audio_mixer);
         }
      }
      if (audio_voice)
      {
         al_destroy_voice(audio_voice);
      }
      if (audio_stream)
      {
         al_destroy_audio_stream(audio_stream);
      }
      return;


dependencies:


  - symbol: ALLEGRO_EVENT_QUEUE
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_AUDIO_STREAM
    headers: [ allegro5/allegro_audio.h ]
  - symbol: ALLEGRO_VOICE
    headers: [ allegro5/allegro_audio.h ]
  - symbol: ALLEGRO_MIXER
    headers: [ allegro5/allegro_audio.h ]
  - symbol: al_is_acodec_addon_initialized
    headers: [ allegro5/allegro_acodec.h ]
  - symbol: AllegroFlare::Timer
    headers: [ AllegroFlare/Timer.hpp ]
  - symbol: fmod
    headers: [ cmath ]


