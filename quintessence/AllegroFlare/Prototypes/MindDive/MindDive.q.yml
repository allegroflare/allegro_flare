properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    constructor_arg: true
    init_with: nullptr
    getter: true
    setter: false

  - name: font_bin
    type: AllegroFlare::FontBin*
    constructor_arg: true
    init_with: nullptr
    getter: true
    setter: false

  - name: tunnel_mesh
    type: AllegroFlare::Prototypes::MindDive::TunnelMesh
    init_with: ''
    getter_ref: true

  - name: surfer
    type: AllegroFlare::Vec2D
    init_with: '{0, 0}'

  - name: timer
    type: AllegroFlare::Timer
    init_with: ''

  - name: surfer_velocity
    type: AllegroFlare::Vec2D
    init_with: '{0, 0}'

  - name: camera
    type: AllegroFlare::Camera2D
    init_with: ''

  - name: initialized 
    type: bool
    init_with: false


functions:


  - name: set_bitmap_bin
    parameters:
      - name: bitmap_bin
        type: AllegroFlare::BitmapBin*
        default_argument: nullptr
    guards: [ (!initialized) ]
    body: |
      this->bitmap_bin = bitmap_bin;
      return;


  - name: set_font_bin
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
    guards: [ (!initialized) ]
    body: |
      this->font_bin = font_bin;
      return;


  - name: initialize
    guards: [ (!initialized), bitmap_bin, font_bin ]
    body: |
      camera.size.x = 1920;
      camera.size.y = 1080;
      camera.set_zoom(2.0f);

      tunnel_mesh.set_bitmap_bin(bitmap_bin);
      tunnel_mesh.initialize();

      initialized = true;
      return;


  - name: start_timer
    private: true
    body: |
      timer.start();
      return;


  - name: pause_timer
    body: |
      timer.pause();
      return;


  - name: reset_timer
    private: true
    body: |
      timer.reset();
      return;


  - name: reset
    body: |
      surfer.x = tunnel_mesh.infer_real_width() / 2;
      surfer.y = tunnel_mesh.infer_real_height() - tunnel_mesh.obtain_tile_height() / 2;
      surfer_velocity.x = 0;
      surfer_velocity.y = 0;
      reset_timer();
      start_timer();
      return;


  - name: surfer_move_right
    body: |
      surfer_velocity.x = 2;
      return;


  - name: surfer_move_left
    body: |
      surfer_velocity.x = -2;
      return;


  - name: surfer_accelerate
    body: |
      surfer_velocity.y = -2;
      return;


  - name: surfer_stop
    body: |
      surfer_velocity.y = 0;
      return;


  - name: surfer_move_horizontal_none
    body: |
      surfer_velocity.x = 0;
      return;


  - name: render_tunnel
    body: |
      tunnel_mesh.render();
      return;


  - name: render_stopwatch
    body: |
      AllegroFlare::Elements::Stopwatch stopwatch(font_bin, &timer);
      stopwatch.render();
      return;
    body_dependency_symbols:
     - AllegroFlare::Elements::Stopwatch


  - name: render_surfer
    guards: [ al_is_primitives_addon_initialized() ]
    body: |
      al_draw_filled_circle(surfer.x, surfer.y, 10, ALLEGRO_COLOR{1, 1, 1, 1});
      AllegroFlare::draw_crosshair(surfer.x, surfer.y, ALLEGRO_COLOR{1, 0, 0, 1}, 20);
      return;
    body_dependency_symbols:
      - AllegroFlare::Useful


  - name: update
    guards: [ initialized ]
    body: |
      surfer.x += surfer_velocity.x;
      surfer.y += surfer_velocity.y;
      camera.position.x = surfer.x;
      camera.position.y = surfer.y;
      return;


  - name: render
    guards: [ initialized ]
    body: |
      camera.start_reverse_transform();
      render_tunnel();
      render_surfer();
      camera.restore_transform();

      render_stopwatch();
      return;


dependencies:


  - symbol: AllegroFlare::Prototypes::MindDive::TunnelMesh
    headers: [ AllegroFlare/Prototypes/MindDive/TunnelMesh.hpp ]
  - symbol: AllegroFlare::Vec2D
    headers: [ AllegroFlare/Vec2D.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::Useful
    headers: [ AllegroFlare/Useful.hpp ]
  - symbol: AllegroFlare::Camera2D
    headers: [ AllegroFlare/Camera2D.hpp ]
  - symbol: AllegroFlare::Elements::Stopwatch
    headers: [ AllegroFlare/Elements/Stopwatch.hpp ]
  - symbol: AllegroFlare::Timer
    headers: [ AllegroFlare/Timer.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]


