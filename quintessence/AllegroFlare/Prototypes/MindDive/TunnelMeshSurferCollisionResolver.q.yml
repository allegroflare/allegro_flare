properties:


  - name: tunnel_mesh
    type: AllegroFlare::Prototypes::MindDive::TunnelMesh*
    constructor_arg: true
    init_with: nullptr
    getter: true
    setter: true

  - name: surfer_position
    type: AllegroFlare::Vec3D*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: surfer_velocity
    type: AllegroFlare::Vec3D*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true


functions:


  - name: resolve_classic
    body: |
      surfer_position->x += surfer_velocity->x * 0.01;
      surfer_position->z += surfer_velocity->z * 0.01;
      return;


  - name: resolve
    guards: [ tunnel_mesh, surfer_position, surfer_velocity ]
    body: |
      // make an AABB2D to represent the surfer
      float surfer_size = 0.2;
      float surfer_hsize = surfer_size * 0.5;
      AllegroFlare::Physics::AABB2D aabb2d(
         surfer_position->x - surfer_hsize,
         surfer_position->z - surfer_hsize,
         surfer_size,
         surfer_size,
         surfer_velocity->x * 0.01,
         surfer_velocity->z * 0.01
      );

      // create a collision stepper
      AllegroFlare::Physics::TileMapCollisionStepper collision_stepper(
         &tunnel_mesh->get_collision_tile_map_ref(), 
         &aabb2d,
         tunnel_mesh->obtain_tile_width(),
         tunnel_mesh->obtain_tile_height()
      );

      // step the collision and collect the collision info
      std::vector<AllegroFlare::Physics::TileMapCollisionStepperCollisionInfo> collision_info =
         collision_stepper.step();

      bool output_collision_debug_data = false;
      if (output_collision_debug_data && !collision_info.empty())
      {
         std::cout << "COLLISIONS: " << collision_info.size() << std::endl;
         std::cout << "  - [0] tile_value: " << collision_info[0].get_tile_value() << std::endl;
         std::cout << "        coord_x:    " << collision_info[0].get_collided_tile_coordinate().get_x() << std::endl;
         std::cout << "        coord_y:    " << collision_info[0].get_collided_tile_coordinate().get_y() << std::endl;
         std::cout << "        prev_x:    " << surfer_position->x << std::endl;
         std::cout << "        prev_z:    " << surfer_position->z << std::endl;
         std::cout << "        new_x:    " << aabb2d.get_x() << std::endl;
         std::cout << "        new_z:    " << aabb2d.get_y() << std::endl;
      }

      // reposition our surfer to the stepper-modified aabb2d
      surfer_position->x = aabb2d.get_x() + surfer_hsize;
      surfer_position->z = aabb2d.get_y() + surfer_hsize;
      surfer_velocity->x = (aabb2d.get_velocity_x() * 100);
      surfer_velocity->z = (aabb2d.get_velocity_y() * 100);
         
      return;
    body_dependency_symbols:
      - AllegroFlare::Physics::TileMapCollisionStepper


dependencies:


  - symbol: AllegroFlare::Prototypes::MindDive::TunnelMesh
    headers: [ AllegroFlare/Prototypes/MindDive/TunnelMesh.hpp ]
  - symbol: AllegroFlare::Vec3D
    headers: [ AllegroFlare/Vec3D.hpp ]
  - symbol: AllegroFlare::Physics::TileMapCollisionStepper
    headers: [ AllegroFlare/Physics/TileMapCollisionStepper.hpp ]


