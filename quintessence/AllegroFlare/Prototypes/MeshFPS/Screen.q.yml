parent_classes:


  - class: AllegroFlare::Screens::Gameplay
    scope: public
    init_with: ''


properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: before_initialized

  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    setter: before_initialized

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    setter: before_initialized

  - name: model_bin
    type: AllegroFlare::ModelBin*
    init_with: nullptr
    constructor_arg: true
    setter: before_initialized

  - name: game_configuration
    type: AllegroFlare::GameConfigurations::Base*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: hud_camera
    type: AllegroFlare::Camera2D
    init_with: '{}'
    getter: true
    setter: true

  - name: live_camera
    type: AllegroFlare::Camera3D
    init_with: '{}'
    getter: true
    setter: true

  - name: entities
    type: std::vector<AllegroFlare::Prototypes::MeshFPS::Entities::Base*>*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: collision_mesh
    type: AllegroFlare::Physics::CollisionMesh*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: visual_mesh
    type: AllegroFlare::Model3D*
    init_with: nullptr
    getter: true
    setter: true

  - name: gems_collected
    type: int
    init_with: 0
    getter: true
    setter: true

  - name: collision_observer
    type: AllegroFlare::CollisionObservers::Simple
    init_with: '{}'

  - name: on_finished_callback_func
    type: std::function<void(AllegroFlare::Prototypes::MeshFPS::Screen*, void*)>
    init_with: ''
    getter: true
    setter: true

  - name: on_finished_callback_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: initialized
    type: bool
    init_with: false
    getter: true


methods:


  - name: initialize
    guards:
      - (!initialized)
      - al_is_system_installed()
      - al_is_primitives_addon_initialized()
      - al_is_font_addon_initialized()
      - event_emitter
      - bitmap_bin
      - font_bin
      - model_bin
    body: |
      set_update_strategy(AllegroFlare::Screens::Base::UpdateStrategy::SEPARATE_UPDATE_AND_RENDER_FUNCS);

      live_camera.stepout = AllegroFlare::Vec3D(0, 1.25, 0); // FPS camera
      live_camera.tilt = 0.0;
      live_camera.near_plane = 0.1;
      live_camera.far_plane = 500.0;

      //live_camera.stepout = AllegroFlare::Vec3D(0, 0.25, 10); // Third person
      //live_camera.tilt = 0.8;

      // Create a player input controller for the 0th entity
      create_and_set_player_input_controller_for_0th_entity();

      initialized = true;
      return;
    body_dependency_symbols:
      - al_is_primitives_addon_initialized


  - name: on_activate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      //emit_event_to_update_input_hints_bar();
      //emit_show_and_size_input_hints_bar_event();
      return;


  - name: on_deactivate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      //emit_hide_and_restore_size_input_hints_bar_event();
      return;


  - name: find_0th_entity
    type: AllegroFlare::Prototypes::MeshFPS::Entities::Base*
    guards: [ entities, (entities->size() > 0) ]
    body: |
      return entities->at(0);


  - name: create_and_set_player_input_controller_for_0th_entity
    body: |
      AllegroFlare::PlayerInputControllers::Generic *result_player_input_controller =
         new AllegroFlare::PlayerInputControllers::Generic();

      result_player_input_controller->set_on_time_step_update([this](AllegroFlare::Vec2D control_movement, double, double){
         //find_0th_entity()->get_velocity_ref().position.x = pos.x * 0.1;
         //find_0th_entity()->get_velocity_ref().position.z = pos.y * 0.1;
         //bool moving_forward = false;
         //bool moving_backward = false;
         //bool moving_right = false;
         //bool moving_left = false;

         //control_movement = pos;
         //if (moving_forward) control_movement.y = -1;
         //if (moving_backward) control_movement.y = 1;
         //if (moving_right) control_movement.x = 1;
         //if (moving_left) control_movement.x = -1;

         auto entity = find_0th_entity();

         // Relative to camera:
         float angle = live_camera.spin;
         float x_prime = control_movement.x * std::cos(angle) - control_movement.y * std::sin(angle);
         float y_prime = control_movement.x * std::sin(angle) + control_movement.y * std::cos(angle);
         entity->get_velocity_ref().position.x = x_prime * 0.1;
         entity->get_velocity_ref().position.z = y_prime * 0.1;
      });

      set_player_input_controller(result_player_input_controller);

    body_dependency_symbols:
       - AllegroFlare::PlayerInputControllers::Generic
       - std::sin
       - std::cos


  - name: update
    body: |
      float step_duration = 1.0f;

      //
      // Apply environmental forces (gravity, air drag)
      //

      float gravity = AllegroFlare::Physics::CollisionMeshCollisionStepper::DEFAULT_GRAVITY;
      float air_drag = AllegroFlare::Physics::CollisionMeshCollisionStepper::DEFAULT_AIR_DRAG;
      AllegroFlare::Vec3D velocity_direction = AllegroFlare::Vec3D(0.0f, 1.0f, 0.0f).normalized();

      for (auto &entity : *entities)
      {
         if (!entity->active || !entity->affected_by_environmental_forces) continue;

         entity->get_velocity_ref().position += velocity_direction * gravity * step_duration;
         entity->get_velocity_ref().position *= (1.0 - air_drag);
      }
      

      //
      // Step entities
      //

      // Build the entities list to be stepped by the stepper
      std::vector<std::tuple<AllegroFlare::Vec3D*, AllegroFlare::Vec3D*, void*>>
         collision_stepper_entities;
      collision_stepper_entities.reserve(entities->size());
      for (auto &entity : *entities)
      {
         if (!entity->active || !entity->collides_with_environment) continue;

         collision_stepper_entities.push_back(std::make_tuple(
            &entity->get_placement_ref().position,
            &entity->get_velocity_ref().position,
            (void*)entity
         ));
      }

      if (collision_stepper_entities.empty()) throw std::runtime_error("asdfasdf");

      AllegroFlare::Physics::CollisionMeshCollisionStepper stepper;
      stepper.set_collision_mesh(collision_mesh);
      stepper.set__entities(&collision_stepper_entities);
      stepper.disable_applying_environmental_forces();
      stepper.step(step_duration);


      //
      // Observe change in entity<->entity collisions
      //

      std::set<void*> collidables;
      auto player_entity = find_0th_entity();
      for (auto &entity : *entities)
      {
         if (entity == player_entity) continue;
         if (!entity->active || !entity->collides_with_player) continue;
         collidables.insert(entity);
      }
      collision_observer.set_subject(find_0th_entity());
      collision_observer.set_collidables(collidables);
      collision_observer.set_on_test_collide([](void* subject, void* collidable) -> bool {
         return static_cast<AllegroFlare::Prototypes::MeshFPS::Entities::Base*>(subject)->
            collides(static_cast<AllegroFlare::Prototypes::MeshFPS::Entities::Base*>(collidable));
      });
      collision_observer.process();

      // Process "entered" collisions
      for (auto &entered : collision_observer.get_entered())
      {
         // TODO: Consider extracting this to a method
         AllegroFlare::Prototypes::MeshFPS::Entities::Base* entity =
            static_cast<AllegroFlare::Prototypes::MeshFPS::Entities::Base*>(entered);
         entity->active = false;
         entity->visible = false;

         gems_collected++;
      }


      //
      // Update the position of the camera
      //

      live_camera.position = find_0th_entity()->get_placement_ref().position;

      return;
    body_dependency_symbols:
      - AllegroFlare::Physics::CollisionMeshCollisionStepper
      - std::get


  - name: render
    body: |
      ALLEGRO_BITMAP *target_bitmap = al_get_target_bitmap();
      live_camera.setup_projection_on(target_bitmap);

      // Draw the visual mesh
      if (visual_mesh)
      {
         visual_mesh->draw();
      }

      // TODO: Draw the entities (models?, bounding boxes?)
      al_set_render_state(ALLEGRO_DEPTH_TEST, 0);
      auto player_entity = find_0th_entity();
      for (auto &entity : *entities)
      {
         if (!entity->active || !entity->visible) continue;
         //if (entity == player_entity) continue;

         std::vector<ALLEGRO_VERTEX> box_line_vertices = entity->build_line_list_vertices();
         std::vector<ALLEGRO_VERTEX> box_triangle_vertices = entity->build_triangle_list_vertices_for_faces();
         al_draw_prim(&box_line_vertices[0], nullptr, nullptr, 0, box_line_vertices.size(), ALLEGRO_PRIM_LINE_LIST);
         al_draw_prim(&box_triangle_vertices[0], nullptr, nullptr, 0, box_triangle_vertices.size(), ALLEGRO_PRIM_TRIANGLE_LIST);
      }
      al_set_render_state(ALLEGRO_DEPTH_TEST, 1);

      // NOTE: For now, don't clear so that update() (with the legacy classes) has an opportunity to render debug
      // visuals
      al_set_render_state(ALLEGRO_DEPTH_TEST, 0);
      if (collision_mesh)
      {
         // TODO: Consider using additive mesh
         collision_mesh->draw(ALLEGRO_COLOR{0.2, 0.2, 0.3, 0.3});
      }
      al_set_render_state(ALLEGRO_DEPTH_TEST, 1);


      hud_camera.setup_dimensional_projection(target_bitmap);
      al_draw_textf(
         obtain_hud_font(),
         ALLEGRO_COLOR{1, 0.65, 0, 1.0},
         40,
         30,
         ALLEGRO_ALIGN_LEFT,
         "GEMS: %d",
         gems_collected
      );


      //ALLEGRO_COLOR col=AllegroFlare::color::azure);
      return;
    body_dependency_symbols:
      - AllegroFlare::Camera3D 


  - name: call_on_finished_callback_func
    body: |
      // TODO: Test this callback call
      if (on_finished_callback_func) on_finished_callback_func(this, on_finished_callback_func_user_data);


  - name: game_event_func
    virtual: true
    override: true
    parameters:
      - name: game_event
        type: AllegroFlare::GameEvent*
        default_argument: nullptr
    guards: [ game_event ]
    body: |
      // game_configuration->handle_game_event(game_event);
      return;


  - name: primary_update_func
    virtual: true
    override: true
    parameters:
      - name: time_now
        type: double
        default_argument: 0.0f
      - name: delta_time
        type: double
        default_argument: 1.0f
    guards: [ initialized ]
    body: |
      AllegroFlare::Screens::Gameplay::primary_update_func(time_now, delta_time);
      // Update stuff here (take into account delta_time)
      update();
      return;


  - name: primary_render_func
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      // Render stuff here
      render();
      return;


  - name: key_down_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized, event_emitter ]
    body: |
      AllegroFlare::Screens::Gameplay::key_down_func(ev);

      //bool keyboard_control_caught = false;
      // This method is DEBUGGING
      switch(ev->keyboard.keycode)
      {
         case ALLEGRO_KEY_W: {
            //toggle_drawing_debug_info();
         } break;

         case ALLEGRO_KEY_A: {
            //toggle_minimap_visibility();
         } break;

         case ALLEGRO_KEY_S: {
            //toggle_minimap_visibility();
         } break;

         case ALLEGRO_KEY_D: {
            //toggle_minimap_visibility();
         } break;

         case ALLEGRO_KEY_J: {
            live_camera.spin -= ALLEGRO_PI * 0.25;
         } break;

         case ALLEGRO_KEY_K: {
            live_camera.spin += ALLEGRO_PI * 0.25;
         } break;

         //case ALLEGRO_KEY_W:
         //case ALLEGRO_KEY_UP: {
            //player_up_pressed = true;
         //} break;

         //case ALLEGRO_KEY_A:
         //case ALLEGRO_KEY_LEFT: {
            //player_left_pressed = true;
         //} break;

         //case ALLEGRO_KEY_S:
         //case ALLEGRO_KEY_DOWN: {
            //player_down_pressed = true;
         //} break;

         //case ALLEGRO_KEY_D:
         //case ALLEGRO_KEY_RIGHT: {
            //player_right_pressed = true;
         //} break;

         //case ALLEGRO_KEY_C: {
            //set_player_controlled_entity(find_primary_camera());
         //} break;

         //case ALLEGRO_KEY_Q: {
            //keyboard_control_caught = true;
            //set_player_controlled_entity(find_primary_camera());
         //} break;

         //case ALLEGRO_KEY_SPACE:
         //case ALLEGRO_KEY_E:
         //case ALLEGRO_KEY_I: {
            //if (infer_player_controlled_entity_is_camera())
            //{
               //interact_with_focused_object(); // TODO: Find a way to move this to the controller
               //keyboard_control_caught = true;
            //}
         //} break;

         case ALLEGRO_KEY_ESCAPE: {
            // NOTE: For production, you will want to emit the EVENT_PAUSE_GAME. This will crash during test because
            // there is no router. Externally, the body for on_paused_callback might be:
            //event_emitter->emit_router_event(AllegroFlare::Routers::Standard::EVENT_PAUSE_GAME);
            
            // NOTE: For testing, previously the call_on_finished_callback_func was called:
            // call_on_finished_callback_func();

            call_on_paused_callback_func();
            //keyboard_control_caught = true;
         } break;

         default: {
            // Nothing here
         } break;
      }


      //if (player_input_controller_exists())
      //{
         // TODO: Consider that keyboard_control_caught might need to be taken into account
         //get_player_input_controller()->key_down_func(ev);
      //}


      return;
    body_dependency_symbols:
      - AllegroFlare::Routers::Standard
      - AllegroFlare::RouteEventDatas::ActivateScreenByIdentifier
      - AllegroFlare::EventNames


  - name: key_up_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized, event_emitter ]
    body: |
      AllegroFlare::Screens::Gameplay::key_up_func(ev);

      // This method is DEBUGGING
      switch(ev->keyboard.keycode)
      {
         //case ALLEGRO_KEY_UP:
         //case ALLEGRO_KEY_W: {
            //player_up_pressed = false;
         //} break;

         //case ALLEGRO_KEY_LEFT:
         //case ALLEGRO_KEY_A: {
            //player_left_pressed = false;
         //} break;

         //case ALLEGRO_KEY_DOWN:
         //case ALLEGRO_KEY_S: {
            //player_down_pressed = false;
         //} break;

         //case ALLEGRO_KEY_RIGHT:
         //case ALLEGRO_KEY_D: {
            //player_right_pressed = false;
         //} break;

         default: {
            // Nothing here
         } break;
      }

      //if (player_input_controller_exists())
      //{
         // TODO: Consider that keyboard_control_caught might need to be taken into account
         //get_player_input_controller()->key_up_func(ev);
      //}

      return;
    body_dependency_symbols:
      - AllegroFlare::Routers::Standard
      - AllegroFlare::RouteEventDatas::ActivateScreenByIdentifier
      - AllegroFlare::EventNames


  - name: virtual_control_button_up_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      AllegroFlare::Screens::Gameplay::virtual_control_button_up_func(
         player, virtual_controller, virtual_controller_button_num, is_repeat
      );
      // TODO: this function
      return;


  - name: virtual_control_button_down_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      AllegroFlare::Screens::Gameplay::virtual_control_button_down_func(
         player, virtual_controller, virtual_controller_button_num, is_repeat
      );
      // TODO: this function
      //call_on_finished_callback_func(); // Consider technique to exit
      return;


  - name: virtual_control_axis_change_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      // TODO: this function
      return;


  - name: obtain_hud_font
    type: ALLEGRO_FONT*
    body: |
      return font_bin->auto_get("Oswald-Medium.ttf -52");


dependencies:


  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Player
    headers: [ AllegroFlare/Player.hpp ]
  - symbol: AllegroFlare::VirtualControllers::Base
    headers: [ AllegroFlare/VirtualControllers/Base.hpp ]
  - symbol: AllegroFlare::Prototypes::MeshFPS::Screen
    headers: [ AllegroFlare/Prototypes/MeshFPS/Screen.hpp ]
  - symbol: AllegroFlare::GameConfigurations::Base
    headers: [ AllegroFlare/GameConfigurations/Base.hpp ]
  - symbol: AllegroFlare::Game::Configurations::Main
    headers: [ AllegroFlare/Game/Configurations/Main.hpp ]
  - symbol: AllegroFlare::Gameplay::Level
    headers: [ AllegroFlare/Gameplay/Level.hpp ]
  - symbol: AllegroFlare::GameEvent
    headers: [ AllegroFlare/GameEvent.hpp ]

  - symbol: AllegroFlare::Physics::CollisionMeshCollisionStepper
    headers: [ AllegroFlare/Physics/CollisionMeshCollisionStepper.hpp ]
  - symbol: AllegroFlare::Camera3D
    headers: [ AllegroFlare/Camera3D.hpp ]
  - symbol: AllegroFlare::Model3D
    headers: [ AllegroFlare/Model3D.hpp ]
  - symbol: std::get
    headers: [ tuple ]
  - symbol: AllegroFlare::Physics::CollisionMesh
    headers: [ AllegroFlare/Physics/CollisionMesh.hpp ]
  - symbol: AllegroFlare::Prototypes::MeshFPS::Entities::Base
    headers: [ AllegroFlare/Prototypes/MeshFPS/Entities/Base.hpp ]
  - symbol: AllegroFlare::Routers::Standard
    headers: [ AllegroFlare/Routers/Standard.hpp ]
  - symbol: AllegroFlare::RouteEventDatas::ActivateScreenByIdentifier
    headers: [ AllegroFlare/RouteEventDatas/ActivateScreenByIdentifier.hpp ]
  - symbol: AllegroFlare::EventNames
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: AllegroFlare::Routers::Standard
    headers: [ AllegroFlare/Routers/Standard.hpp ]
  - symbol: AllegroFlare::RouteEventDatas::ActivateScreenByIdentifier
    headers: [ AllegroFlare/RouteEventDatas/ActivateScreenByIdentifier.hpp ]
  - symbol: AllegroFlare::EventNames
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: AllegroFlare::Screens::Gameplay
    headers: [ AllegroFlare/Screens/Gameplay.hpp ]
  - symbol: AllegroFlare::PlayerInputControllers::Generic
    headers: [ AllegroFlare/PlayerInputControllers/Generic.hpp ]
  - symbol: AllegroFlare::CollisionObservers::Simple
    headers: [ AllegroFlare/CollisionObservers/Simple.hpp ]
  - symbol: AllegroFlare::Camera2D
    headers: [ AllegroFlare/Camera2D.hpp ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: std::cos
    headers: [ cmath ]
  - symbol: std::sin
    headers: [ cmath ]


