parent_classes:


  - class: AllegroFlare::Shaders::Base
    scope: public
    init_with: "\"CubeShooter/Shaders/Multiply\", obtain_vertex_source(), obtain_fragment_source()"


properties:


  - name: initialized
    type: bool
    init_with: false

  - name: tint
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{1, 1, 1, 1}
    getter: true
    setter: true

  - name: tint_intensity
    type: float
    init_with: 1.0f
    getter: true
    setter: true

  - name: pulse_created_at
    type: float
    init_with: 0.0f
    getter: true
    setter: true

  - name: time_now
    type: float
    init_with: 0.0f
    getter: true
    setter: true

  - name: far_plane
    type: float
    init_with: 100.0f
    getter: true
    setter: true


functions:


  - name: initialize
    type: void
    guards: [ (!initialized) ]
    body: |
      AllegroFlare::Shaders::Base::initialize();
      initialized = true;
      return;


  - name: activate
    type: void
    virtual: true
    override: true
    body: |
      if (!initialized)
      {
         throw std::runtime_error("[CubeShooter::Shaders::Base::Multiply] Attempting to activate() "
                                  "shader before it has been initialized");
      }
      AllegroFlare::Shaders::Base::activate();
      set_values_to_activated_shader();
      return;


  - name: set_values_to_activated_shader
    private: true
    body: |
      float pulse_distance = (time_now - pulse_created_at);
      set_vec3("tint", tint.r, tint.g, tint.b);
      set_float("tint_intensity", tint_intensity);
      set_float("pulse_distance", pulse_distance);
      return;
    body_dependency_symbols:
      - std::cout


  - name: obtain_vertex_source
    type: std::string
    static: true
    private: true
    body: |
      static const std::string source = R"DELIM(
        attribute vec4 al_pos;
        attribute vec4 al_color;
        attribute vec2 al_texcoord;
        uniform mat4 al_projview_matrix;
        varying vec4 varying_color;
        varying vec2 varying_texcoord;
        varying float depth;

        void main()
        {
           varying_color = al_color;
           varying_texcoord = al_texcoord;
           gl_Position = al_projview_matrix * al_pos;
           // NOTE: depth position info from:
           // https://stackoverflow.com/a/17621928/6072362
           depth = gl_Position.z / 100.0; // NOTE: 100.0 is the far plane in Camera3D, TODO: pass in as a varying
        }
      )DELIM";
      return source;


  - name: obtain_fragment_source
    type: std::string
    static: true
    private: true
    body: |
      static const std::string source = R"DELIM(
        uniform sampler2D al_tex;
        uniform float tint_intensity;
        uniform float pulse_distance;
        uniform vec3 tint;
        varying vec4 varying_color;
        varying vec2 varying_texcoord;
        varying float depth;

        void main()
        {
           // render a semi-transparent geometry effect
           gl_FragColor = varying_color * gl_FragCoord.a;

           //// render a depth style effect
           //gl_FragColor = vec4(depth, depth, depth, 1.0);

           float h = 0.02 * 0.5;
           if (depth > pulse_distance - h && depth < pulse_distance + h) gl_FragColor = vec4(0.8, 0.85, 0.99, 1.0);
        }
      )DELIM";
      return source;


dependencies:


  - symbol: AllegroFlare::Shaders::Base
    headers: [ AllegroFlare/Shaders/Base.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp ]


