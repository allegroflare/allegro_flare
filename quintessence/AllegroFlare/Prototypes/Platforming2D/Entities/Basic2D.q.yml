parent_classes:


  - class: AllegroFlare::Prototypes::Platforming2D::Entities::Base
    scope: public
    init_with: AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D::TYPE


properties:


  - name: place
    type: AllegroFlare::Placement2D
    init_with: '{}'
    getter: true
    getter_ref: true
    setter: true

  - name: velocity
    type: AllegroFlare::Placement2D
    init_with: '{}'
    getter: true
    getter_ref: true
    setter: true

  - name: bitmap
    type: ALLEGRO_BITMAP*
    init_with: nullptr
    getter: true
    setter: true

  - name: bitmap_placement
    type: AllegroFlare::Placement2D
    init_with: '{}'
    getter: true
    getter_ref: true
    setter: true

  - name: bitmap_alignment_strategy
    type: std::string
    init_with: '"top_left"'
    getter: true
    setter: explicit

  - name: bitmap_flip_h
    type: bool
    init_with: false
    getter: true
    setter: true

  - name: bitmap_blend_mode
    type: AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D::BlendMode
    init_with: AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D::BlendMode::NORMAL
    getter: true
    setter: true

  - name: movement_strategy
    type: AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base*
    init_with: nullptr
    getter: true
    setter: true

  - name: animation_book
    type: AllegroFlare::FrameAnimation::Book*
    init_with: nullptr
    constructor_arg: true
    getter: true
    getter_ref: true
    setter: true

  - name: animation
    type: AllegroFlare::FrameAnimation::Animation
    init_with: '{}'
    setter: false

  - name: draw_debug
    type: bool
    init_with: false
    getter: true
    setter: true

  - name: debug_box_color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{0, 0.375, 0.75, 0.75}
    getter: true
    setter: true

  - name: x
    type: float&
    init_with: place.position.x
    exposed: true

  - name: y
    type: float&
    init_with: place.position.y
    exposed: true

  - name: width
    type: float&
    init_with: place.size.x
    exposed: true

  - name: height
    type: float&
    init_with: place.size.y
    exposed: true

  - name: vx
    type: float&
    init_with: velocity.position.x
    exposed: true

  - name: vy
    type: float&
    init_with: velocity.position.y
    exposed: true

  - name: TYPE
    type: char*
    init_with: '(char*)"Entities/Basic2D"'
    static: true
    constexpr: true


enums:


  - name: BlendMode
    scope: public
    enumerators:
      - UNDEFINED
      - NORMAL
      - MULTIPLY
      - ADDITIVE


functions:


  - name: set_bitmap_alignment_strategy
    parameters:
      - name: bitmap_alignment_strategy
        type: std::string
        default_argument: '"[unset-bitmap_alignment_strategy]"'
    body: |
      static std::set<std::string> valid_bitmap_alignment_strategies = {
         "top_left",
         "top_centered",
         "centered",
         "bottom_centered",
         "bottom_centered_edge",
         "disabled"
      };

      if (valid_bitmap_alignment_strategies.find(bitmap_alignment_strategy) == valid_bitmap_alignment_strategies.end())
      {
         // Not included in list
         AllegroFlare::Logger::throw_error(
            "AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D::set_bitmap_alignment_strategy",
            "Cannot set alignment of an unrecognized alignment named \"" + bitmap_alignment_strategy + "\""
         );
      }

      this->bitmap_alignment_strategy = bitmap_alignment_strategy;

      return;
    body_dependency_symbols:
      - std::set
      - AllegroFlare::Logger


  - name: update
    virtual: true
    override: true
    body: |
      //std::cout << "  Basic2D::update.." << std::endl;
      if (movement_strategy)
      {
         //std::cout << "  Basic2D::movement_strategy->update().." << std::endl;
         movement_strategy->update();
      }

      if (animation.get_initialized())
      {
         animation.update();
         refresh_bitmap_to_current_animation_frame();
      }
      //refresh_bitmap();

      //place.position += velocity.position; // <-- this is now managed in the stepper
      //place.rotation += velocity.rotation;

      //place.scale += velocity.scale; // TODO: figure out what/how to apply scale velocity
      // TODO: align, size, anchor, flip

      return;


  - name: refresh_bitmap_to_current_animation_frame
    body: |
      if (animation.get_initialized())
      {
         set_bitmap(animation.get_frame_now());
      }
      return;


  - name: on_collides_with_player
    virtual: true
    parameters:
      - name: player_controlled_entity
        type: AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*
        default_argument: nullptr
    body: |
      // NOTE: This method will only be called if this entity is tagged with COLLIDES_WITH_PLAYER and there is a
      // collision that occurs during the physics step
      return;


  - name: on_collision_update
    virtual: true
    parameters:
      - name: previous_place_position
        type: AllegroFlare::Vec2D
        default_argument: '{}'
      - name: previous_velocity_position
        type: AllegroFlare::Vec2D
        default_argument: '{}'
      - name: new_place_position
        type: AllegroFlare::Vec2D
        default_argument: '{}'
      - name: new_velocity_position
        type: AllegroFlare::Vec2D
        default_argument: '{}'
      - name: collision_step_result
        type: std::vector<AllegroFlare::Physics::TileMapCollisionStepperCollisionInfo>*
        default_argument: '{}'
      - name: top_edge_is_currently_adjacent_to_wall
        type: bool
        default_argument: false
      - name: right_edge_is_currently_adjacent_to_wall
        type: bool
        default_argument: false
      - name: bottom_edge_is_currently_adjacent_to_wall
        type: bool
        default_argument: false
      - name: left_edge_is_currently_adjacent_to_wall
        type: bool
        default_argument: false
    guards: [ collision_step_result ]
    body: |
      using namespace AllegroFlare::Prototypes::Platforming2D::EntityFlagNames;

      if (movement_strategy)
      {
         //std::cout << "  Basic2D::movement_strategy->update().." << std::endl;
         movement_strategy->on_collision_update(
            previous_place_position,
            previous_velocity_position,
            new_place_position,
            new_velocity_position,
            collision_step_result,
            top_edge_is_currently_adjacent_to_wall,
            right_edge_is_currently_adjacent_to_wall,
            bottom_edge_is_currently_adjacent_to_wall,
            left_edge_is_currently_adjacent_to_wall
         );
      }

      // TODO: Test this behavior
      // TODO: See if this behavior can be extracted out:

      {
         bool is_currently_adjacent_to_floor = bottom_edge_is_currently_adjacent_to_wall;
         bool is_currently_adjacent_to_ceiling = top_edge_is_currently_adjacent_to_wall;
         bool is_currently_adjacent_to_left_wall = left_edge_is_currently_adjacent_to_wall;
         bool is_currently_adjacent_to_right_wall = right_edge_is_currently_adjacent_to_wall;

         bool was_adjacent_to_floor_prior = exists(ADJACENT_TO_FLOOR);
         if (was_adjacent_to_floor_prior && is_currently_adjacent_to_floor) {} // on stay
         else if (!was_adjacent_to_floor_prior && is_currently_adjacent_to_floor) // on enter
         {
            set(ADJACENT_TO_FLOOR);
            //on_attribute_added(ADJACENT_TO_FLOOR);
         }
         else if (was_adjacent_to_floor_prior && !is_currently_adjacent_to_floor) // on exit
         {
            remove(ADJACENT_TO_FLOOR);
            //on_attribute_removed(ADJACENT_TO_FLOOR);
         }
         else if (!was_adjacent_to_floor_prior && !is_currently_adjacent_to_floor) {} // while off

         bool was_adjacent_to_ceiling_prior = exists(ADJACENT_TO_CEILING);
         if (is_currently_adjacent_to_ceiling) set(ADJACENT_TO_CEILING);
         else remove(ADJACENT_TO_CEILING);

         bool was_adjacent_to_left_wall_prior = exists(ADJACENT_TO_LEFT_WALL);
         if (is_currently_adjacent_to_left_wall) set(ADJACENT_TO_LEFT_WALL);
         else remove(ADJACENT_TO_LEFT_WALL);

         bool was_adjacent_to_right_wall_prior = exists(ADJACENT_TO_RIGHT_WALL);
         if (is_currently_adjacent_to_right_wall) set(ADJACENT_TO_RIGHT_WALL);
         else remove(ADJACENT_TO_RIGHT_WALL);
      }

      return;


  - name: set_blending_mode_if_not_normal
    private: true
    body: |
      switch (bitmap_blend_mode)
      {
         case NORMAL: {
            // Do nothing
         } break;

         case MULTIPLY: {
            // NOTE: The manual recommends ALLEGRO_ZERO as the last argument:
            //al_set_blender(ALLEGRO_ADD, ALLEGRO_DEST_COLOR, ALLEGRO_ZERO);
            // NOTE: However, It was modified to ALLEGRO_INVERSE_ALPHA to respect the alpha of the drawing bitmap,
            // but it's unsure if there are side effects
            al_set_blender(ALLEGRO_ADD, ALLEGRO_DEST_COLOR, ALLEGRO_INVERSE_ALPHA);
         } break;

         case ADDITIVE: {
            al_set_blender(ALLEGRO_ADD, ALLEGRO_ONE, ALLEGRO_ONE);
         } break;

         default: {
            // TODO: Figure out what to do in this case, maybe throw?
         } break;
      };
      return;


  - name: restore_blending_mode
    private: true
    body: |
      switch (bitmap_blend_mode)
      {
         case NORMAL: {
            // Do nothing
         } break;

         case MULTIPLY: {
            al_set_blender(ALLEGRO_ADD, ALLEGRO_ONE, ALLEGRO_INVERSE_ALPHA);
         } break;

         case ADDITIVE: {
            al_set_blender(ALLEGRO_ADD, ALLEGRO_ONE, ALLEGRO_INVERSE_ALPHA);
         } break;

         default: {
            // TODO: Figure out what to do in this case, maybe throw?
         } break;
      };
      return;


  - name: draw
    virtual: true
    override: true
    guards: [ al_is_primitives_addon_initialized() ]
    body: |
      using namespace AllegroFlare::Prototypes::Platforming2D::EntityFlagNames;
      // TODO: add some reasonable guards

      place.start_transform();

      if (bitmap)
      {
         // work out the bitmap placement and alignment

         float *bitmap_x = &bitmap_placement.position.x;
         float *bitmap_y = &bitmap_placement.position.y;
         float *bitmap_align_x = &bitmap_placement.align.x;
         float *bitmap_align_y = &bitmap_placement.align.y;

         assign_alignment_strategy_values(
            &place,
            bitmap,
            bitmap_x,
            bitmap_y,
            bitmap_align_x,
            bitmap_align_y,
            bitmap_alignment_strategy
         );

         // TODO: Consider if continually assigning the size is preferred or not
         bitmap_placement.size = { (float)al_get_bitmap_width(bitmap), (float)al_get_bitmap_height(bitmap) };

         // draw the bitmap

         bitmap_placement.start_transform();

         // Set the blending mode
         set_blending_mode_if_not_normal();

         // Draw the sprite
         al_draw_bitmap(bitmap, 0, 0, bitmap_flip_h ? ALLEGRO_FLIP_HORIZONTAL : 0);

         // Restore the blending mode
         restore_blending_mode();

         // draw the boundary rectangle for the bitmap

         if (draw_debug)
         {
            al_draw_rectangle(
               0, //bitmap_x,
               0, //bitmap_y,
               al_get_bitmap_width(bitmap), //bitmap_x + al_get_bitmap_width(bitmap),
               al_get_bitmap_width(bitmap),//bitmap_y + al_get_bitmap_height(bitmap),
               ALLEGRO_COLOR{0, 0.5, 0.25, 0.5},
               1.0 / bitmap_placement.scale.x / place.scale.x // dividing by the scalle will ensure the lines
                                                              // have a constant thickness, regardless of the scale
                                                              // of the entity or bitmap scale
            );
         }

         bitmap_placement.restore_transform();
      }

      // draw the bounding box rectangle for the entity

      if (draw_debug)
      {
         al_draw_rectangle(
            0,
            0,
            place.size.x,
            place.size.y,
            debug_box_color,
            1.0 / place.scale.x // dividing by scale will ensure the lines have a constant thickness,
                                // regardless of the scale of the entity
         );
      }

      place.restore_transform();

      // draw a box around the origin

      if (draw_debug)
      {
         al_draw_rectangle(
            place.position.x-1,
            place.position.y-1,
            place.position.x+1,
            place.position.y+1,
            debug_box_color,
            1.0
         );

         // add markers to help indicate status (ajacent to walls, ceiling, floor, ...)
         if (exists(ADJACENT_TO_CEILING))
         {
            al_draw_filled_circle(place.position.x, place.position.y - 3, 1.5, debug_box_color);
         }
         if (exists(ADJACENT_TO_LEFT_WALL))
         {
            al_draw_filled_circle(place.position.x-3, place.position.y, 1.5, debug_box_color);
         }
         if (exists(ADJACENT_TO_RIGHT_WALL))
         {
            al_draw_filled_circle(place.position.x+3, place.position.y, 1.5, debug_box_color);
         }
         if (exists(ADJACENT_TO_FLOOR))
         {
            al_draw_filled_circle(place.position.x, place.position.y+3, 1.5, debug_box_color);
         }
      }

      return;
    body_dependency_symbols:
      - al_draw_rectangle
      - AllegroFlare::Prototypes::Platforming2D::EntityFlagNames


  - name: fit_to_bitmap
    guards: [ bitmap ]
    body: |
      place.size.x = al_get_bitmap_width(bitmap);
      place.size.y = al_get_bitmap_height(bitmap);
      return;


  - name: disable_bitmap_alignment_strategy
    body: |
      bitmap_alignment_strategy = "disabled";
      return;


  - name: assign_alignment_strategy_values
    static: true
    private: true
    parameters:
      - name: parent_placement
        type: AllegroFlare::Placement2D*
        default_argument: nullptr
      - name: bitmap
        type: ALLEGRO_BITMAP*
        default_argument: nullptr
      - name: bitmap_x
        type: float*
        default_argument: nullptr
      - name: bitmap_y
        type: float*
        default_argument: nullptr
      - name: bitmap_align_x
        type: float*
        default_argument: nullptr
      - name: bitmap_align_y
        type: float*
        default_argument: nullptr
      - name: bitmap_alignment_strategy
        type: std::string
        default_argument: '"centered"'
    guards: [ parent_placement, bitmap, bitmap_x, bitmap_y, bitmap_align_x, bitmap_align_y ]
    body: |
      if (bitmap_alignment_strategy == "top_left")
      {
         *bitmap_x = 0;
         *bitmap_y = 0;
         *bitmap_align_x = 0;
         *bitmap_align_y = 0;
      }
      else if (bitmap_alignment_strategy == "top_centered") // as in a hanging on the ceiling
      {
         *bitmap_x = parent_placement->size.x * 0.5;
         *bitmap_y = 0;
         *bitmap_align_x = 0.5;
         *bitmap_align_y = 0;
      }
      else if (bitmap_alignment_strategy == "centered") // as in a schmup
      {
         *bitmap_x = parent_placement->size.x * 0.5;
         *bitmap_y = parent_placement->size.y * 0.5;
         *bitmap_align_x = 0.5;
         *bitmap_align_y = 0.5;
      }
      else if (bitmap_alignment_strategy == "bottom_centered") // as in a top-down 2D dungeon crawler
      {
         *bitmap_x = parent_placement->size.x * 0.5;
         *bitmap_y = parent_placement->size.y * 0.5;
         *bitmap_align_x = 0.5;
         *bitmap_align_y = 1.0;
      }
      else if (bitmap_alignment_strategy == "bottom_centered_edge") // as in a 2D platformer
      {
         *bitmap_x = parent_placement->size.x * 0.5;
         *bitmap_y = parent_placement->size.y;
         *bitmap_align_x = 0.5;
         *bitmap_align_y = 1.0;
      }
      else if (bitmap_alignment_strategy == "disabled") // You can assign your own custom values and they are retained
      {
         // NOTE: do nothing here
      }
      else
      {
         throw std::runtime_error("[AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D] error: "
                                  "Unrecognized bitmap_alignment_strategy");
      }
      return;


  - name: set_animation_playback_rate
    parameters:
      - name: multiplier
        type: float
        default_argument: 1.0f
    body: |
      animation.set_playspeed_multiplier(multiplier);
      return;


  - name: get_animation_finished
    type: bool
    body: |
      return animation.get_finished();


  - name: get_current_animation_frame_num
    type: int
    body: |
      return animation.get_frame_num_now();


  - name: set_animation
    parameters:
      - name: animation_name
        type: std::string
        default_argument: '"[unset-animation_name]"'
    guards: [ animation_book, animation_book->animation_exists(animation_name) ]
    body: |
      animation = animation_book->find_animation_by_name(animation_name);
      animation.initialize();
      animation.start(); // NOTE: consider if automatic "start" is needed here
      refresh_bitmap_to_current_animation_frame();
      return;


dependencies:


  - symbol: AllegroFlare::Prototypes::Platforming2D::Entities::Base
    headers: [ AllegroFlare/Prototypes/Platforming2D/Entities/Base.hpp ]
  - symbol: AllegroFlare::Prototypes::Platforming2D::EntityFlagNames
    headers: [ AllegroFlare/Prototypes/Platforming2D/EntityFlagNames.hpp ]
  - symbol: al_draw_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_BITMAP
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Physics::TileMapCollisionStepperCollisionInfo
    headers: [ AllegroFlare/Physics/TileMapCollisionStepperCollisionInfo.hpp ]
  - symbol: AllegroFlare::Vec2D
    headers: [ AllegroFlare/Vec2D.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base
    headers: [ AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.hpp ]
  - symbol: AllegroFlare::FrameAnimation::Animation
    headers: [ AllegroFlare/FrameAnimation/Animation.hpp ]
  - symbol: AllegroFlare::FrameAnimation::Book
    headers: [ AllegroFlare/FrameAnimation/Book.hpp ]
  - symbol: AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D
    headers: [ AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp ]
  - symbol: AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D::BlendMode
    headers: [ AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp ]


