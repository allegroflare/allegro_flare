parent_classes:


  - class: AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D
    scope: public
    init_with: ''


properties:


  - name: animation_book
    type: AllegroFlare::FrameAnimation::Book*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: animation
    type: AllegroFlare::FrameAnimation::Animation
    init_with: '{}'
    setter: false

  - name: TYPE
    type: char*
    init_with: '(char*)"Entities/FrameAnimated2D"'
    static: true
    constexpr: true


functions:


  - name: update
    virtual: true
    override: true
    body: |
      animation.update();
      refresh_bitmap();
      //fit_to_bitmap(); // TODO: see if there is a better way/place to have the bitmap fitting
      //place.position += velocity.position; // <-- this is now managed in the stepper
      //place.rotation += velocity.rotation;

      //place.scale += velocity.scale; // TODO: figure out what/how to apply scale velocity
      // TODO: align, size, anchor, flip

      return;


  - name: refresh_bitmap
    body: |
      set_bitmap(animation.get_frame_now());
      //fit_to_bitmap(); // This may be redundant, however it's not yet determined if Animation/Book will
                       // always be returning fixed size bitmaps.  Also, in some scenarios it's likely the
                       // collision box will be different from the bitmap, and for the time being it appears
                       // the two are considered the same.
      return;


  - name: set_animation
    parameters:
      - name: animation_name
        type: std::string
        default_argument: '"[unset-animation_name]"'
    guards: [ animation_book, animation_book->animation_exists(animation_name) ]
    body: |
      animation = animation_book->find_animation_by_name(animation_name);
      animation.initialize();
      animation.start(); // NOTE: consider if automatic "start" is needed here
      refresh_bitmap();
      return;


dependencies:


  - symbol: AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D
    headers: [ AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp ]
  - symbol: AllegroFlare::Prototypes::Platforming2D::EntityFlagNames
    headers: [ AllegroFlare/Prototypes/Platforming2D/EntityFlagNames.hpp ]
  - symbol: al_draw_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_BITMAP
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::FrameAnimation::Book
    headers: [ AllegroFlare/FrameAnimation/Book.hpp ]
  - symbol: AllegroFlare::FrameAnimation::Animation
    headers: [ AllegroFlare/FrameAnimation/Animation.hpp ]


