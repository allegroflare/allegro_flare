properties:


  - name: filename
    type: std::string
    init_with: '"filename-not-set.tmj"'
    constructor_arg: true

  - name: num_columns
    type: int
    init_with: 0
    getter: explicit

  - name: num_rows
    type: int
    init_with: 0
    getter: explicit

  - name: tile_width
    type: int
    init_with: 0
    getter: explicit

  - name: tile_height
    type: int
    init_with: 0
    getter: explicit

  - name: layer_num_columns
    type: int
    init_with: 0
    getter: explicit

  - name: layer_num_rows
    type: int
    init_with: 0
    getter: explicit

  - name: layer_tile_data
    type: std::vector<int>
    init_with: '{}'
    getter: explicit

  - name: collision_layer_num_columns
    type: int
    init_with: 0
    getter: explicit

  - name: collision_layer_num_rows
    type: int
    init_with: 0
    getter: explicit

  - name: collision_layer_tile_data
    type: std::vector<int>
    init_with: '{}'
    getter: explicit

  - name: normalize_tile_data_from_tilesets
    type: bool
    init_with: true

  - name: reduce_any_non_zero_collision_layer_data_to_1
    type: bool
    init_with: true

  - name: loaded
    type: bool
    init_with: false
    getter: true


documentation:


  - todos:
      - Move the "normalize_tile_data_from_tilesets" functionality out of this class and make it the responsibility
        of the user to do this. The TMJDataLoader class should only load data from the TMJ file and make it available
        as data accessible from the class.


functions:


  - name: get_num_columns
    type: int
    guards: [ loaded ]
    body: return num_columns;


  - name: get_num_rows
    type: int
    guards: [ loaded ]
    body: return num_rows;


  - name: get_tile_width
    type: int
    guards: [ loaded ]
    body: return tile_width;


  - name: get_tile_height
    type: int
    guards: [ loaded ]
    body: return tile_height;


  - name: get_layer_num_columns
    type: int
    guards: [ loaded ]
    body: return layer_num_columns;


  - name: get_layer_num_rows
    type: int
    guards: [ loaded ]
    body: return layer_num_rows;


  - name: get_layer_tile_data
    type: std::vector<int>
    guards: [ loaded ]
    body: return layer_tile_data;


  - name: get_collision_layer_num_columns
    type: int
    guards: [ loaded ]
    body: return collision_layer_num_columns;


  - name: get_collision_layer_num_rows
    type: int
    guards: [ loaded ]
    body: return collision_layer_num_rows;


  - name: get_collision_layer_tile_data
    type: std::vector<int>
    guards: [ loaded ]
    body: return collision_layer_tile_data;


  - name: load
    type: bool
    guards: [ (!loaded) ]
    body: |
      if (!file_exists(filename))
      {
         AllegroFlare::Logger::throw_missing_file_error("Platforming2D::TMJDataLoader::load()", filename, "tmj");
      }

      // load and validate the json data to variables
      std::ifstream i(filename);
      nlohmann::json j;
      try
      {
         i >> j;
      }
      catch (const std::exception& e)
      {
         i.close();
         std::stringstream error_message;
         error_message << "[Platforming2D::TMJDataLoader::load()]: error: The file "
                       << "\"" << filename << "\" appears to have"
                       << " malformed JSON. The following error was thrown by nlohmann::json: \""
                       << e.what() << "\"";
         throw std::runtime_error(error_message.str());
      }

      num_columns = j["width"]; // get width
      num_rows = j["height"]; // get height
      tile_width = j["tilewidth"]; // get width
      tile_height = j["tileheight"]; // get height


      // Obtain the list of "tilesets" (note that multiple tilesets might be used. In the tile data, the value used
      // on each tile is relative to the "firstgid" for that tileset.
      std::vector<std::pair<std::string, int>> tilesets_info; // *source*, *firstgid*
      std::set<int> tilesets_gids;
      if (!j.contains("tilesets"))
      {
         // TODO: Test this throw
         AllegroFlare::Logger::warn_from(
            "AllegroFlare::Prototypes::Platforming2D::TMJDataLoader",
            "Expecting tmj file to contain a root-level \"tilesets\" property when loading \""
               + filename + "\", but it does not exist."
         );
      }
      else
      {
         // TODO: Validate "tilesets" is an array
         for (auto &tileset : j["tilesets"].items())
         {
            int firstgid = tileset.value()["firstgid"];
            //firstgid -= 1; // NOTE: note the -1 here

            tilesets_info.push_back({
               tileset.value()["source"],
               firstgid
            });
            tilesets_gids.insert(firstgid);
         }
      }


      // Get first layer that is of type "tilelayer" (and not named "collision")

      bool tilelayer_type_found = false;
      nlohmann::json tilelayer;
      for (auto &layer : j["layers"].items())
      {
         if (layer.value()["type"] == "tilelayer" && layer.value()["name"] != "collision")
         {
            tilelayer = layer.value();
            tilelayer_type_found = true;
            break;
         }
      }
      if (!tilelayer_type_found) throw std::runtime_error("TMJMeshLoader: error: tilelayer type not found.");

      layer_num_columns = tilelayer["width"];
      layer_num_rows = tilelayer["height"];
      layer_tile_data = tilelayer["data"].get<std::vector<int>>();
      if (normalize_tile_data_from_tilesets)
      {
         // TODO: Test this normalization is correct with multiple tilesets
         layer_tile_data = normalize_tile_data_to_tilesets_firstgids(
               layer_tile_data,
               tilesets_gids
            );
      }



      // Get the first layer named "collision"

      bool collision_tilelayer_type_found = false;
      nlohmann::json collision_tilelayer;
      for (auto &layer : j["layers"].items())
      {
         if (layer.value()["type"] == "tilelayer" && layer.value()["name"] == "collision")
         {
            collision_tilelayer = layer.value();
            collision_tilelayer_type_found = true;
            break;
         }
      }
      if (!collision_tilelayer_type_found)
      {
         std::stringstream error_message;
         error_message << "TMJMeshLoader: error: collision_tilelayer type not found. Expecting a layer of type "
                       << "\"tilelayer\" that also has a \"name\" property of \"collision\". Note that only "
                       << "the following layers present: \"" << std::endl;
         int layer_num = 0;
         for (auto &layer : j["layers"].items())
         {
            layer_num++;
            error_message << "  - layer " << layer_num << ":" << std::endl;
            error_message << "    - type: \"" << layer.value()["type"] << "\"" << std::endl;
            error_message << "    - name: \"" << layer.value()["name"] << "\"" << std::endl;
         }
         throw std::runtime_error(error_message.str());
      }

      collision_layer_num_columns = collision_tilelayer["width"];
      collision_layer_num_rows = collision_tilelayer["height"];
      collision_layer_tile_data = collision_tilelayer["data"].get<std::vector<int>>();

      if (normalize_tile_data_from_tilesets)
      {
         // TODO: Test this normalization is correct with multiple tilesets
         collision_layer_tile_data = normalize_tile_data_to_tilesets_firstgids(
               collision_layer_tile_data,
               tilesets_gids
            );
      }

      if (reduce_any_non_zero_collision_layer_data_to_1)
      {
         std::set<int> modified_values;
         for (auto &collision_layer_tile_datum : collision_layer_tile_data)
         {
            if (collision_layer_tile_datum > 1)
            {
               modified_values.insert(collision_layer_tile_datum);
               collision_layer_tile_datum = 1;
            }
         }

         if (!modified_values.empty())
         {
            // Convert the list to string
            std::ostringstream oss;
            for (auto it = modified_values.begin(); it != modified_values.end(); ++it)
            {
               oss << *it;
               if (std::next(it) != modified_values.end()) {
                  oss << ", ";
               }
            }
            std::string list_of_modified_values = oss.str();

            AllegroFlare::Logger::warn_from(
               "AllegroFlare::Prototypes::Platforming2D::TMJDataLoader::load",
               "Note that reduce_any_non_zero_collision_layer_data_to_1 is set to \"true\", and during processing "
                  "the following values were found and truncated to 1: [ " + list_of_modified_values + " ]."
            );
         }
      }

      loaded = true;

      i.close();

      return true;
    body_dependency_symbols:
      - AllegroFlare::Logger
      - std::stringstream
      - nlohmann::json
      - std::ifstream
      - AllegroFlare::Logger


  - name: normalize_tile_data_to_tilesets_firstgids
    type: std::vector<int>
    parameters:
      - name: data
        type: std::vector<int>
        default_argument: '{}'
      - name: tilesets_firstgids
        type: std::set<int>
        default_argument: '{}'
    body: |
      for (auto &datum : data)
      {
         for (auto rit = tilesets_firstgids.rbegin(); rit != tilesets_firstgids.rend(); ++rit)
         {
            if (datum >= *rit)
            {
               datum = datum - *rit + 1; // TODO: Test this calculation is correct
               goto out;
            }
         }
         out:
      }
      return data;


  - name: file_exists
    type: bool
    static: true
    private: true
    parameters:
      - name: filename
        type: std::string
        default_argument: '"[unset-filename]"'
    body: |
      return std::filesystem::exists(filename);
    body_dependency_symbols:
      - std::filesystem::exists


dependencies:


  - symbol: std::ifstream
    headers: [ fstream ]
  - symbol: nlohmann::json
    headers: [ lib/nlohmann/json.hpp ]
  - symbol: std::filesystem::exists
    headers: [ filesystem ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]


