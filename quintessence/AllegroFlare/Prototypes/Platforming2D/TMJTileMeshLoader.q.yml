properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: explicit

  - name: tmj_filename
    type: std::string
    init_with: '"[unset-tmj_filename]"'
    constructor_arg: true
    getter: true
    setter: explicit

  - name: tile_atlas_bitmap_identifier
    type: std::string
    init_with: '"[unset-tile_atlas_bitmap_identifier]"'
    constructor_arg: true
    getter: true
    setter: explicit

  - name: tile_atlas_tile_width
    type: int
    init_with: 16
    constructor_arg: true

  - name: tile_atlas_tile_height
    type: int
    init_with: 16
    constructor_arg: true

  - name: tile_atlas
    type: AllegroFlare::TileMaps::PrimMeshAtlas*
    init_with: nullptr
    getter: explicit

  - name: terrain_mesh
    type: AllegroFlare::TileMaps::TileMesh*
    init_with: nullptr
    getter: explicit

  - name: background_mesh
    type: AllegroFlare::TileMaps::TileMesh*
    init_with: nullptr
    getter: explicit

  - name: foreground_mesh
    type: AllegroFlare::TileMaps::TileMesh*
    init_with: nullptr
    getter: explicit

  - name: collision_tile_map
    type: AllegroFlare::TileMaps::TileMap<int>*
    init_with: nullptr
    getter: explicit

  - name: loaded
    type: bool
    init_with: false


documentation:


  - todos:
     - Resolve hard-coded hack to fix tiled tile 0 to be transparent
     - Move more of the logic for building the mesh from the TMJDataLoader into this class, for example the
       "terrain_override" layer could be composited here instead.


methods:


  - name: set_bitmap_bin
    parameters:
      - name: bitmap_bin
        type: AllegroFlare::BitmapBin*
        default_argument: nullptr
    guards: [ (!loaded) ]
    body: |
      this->bitmap_bin = bitmap_bin;


  - name: set_tmj_filename
    parameters:
      - name: tmj_filename
        type: std::string
        default_argument: '"[unset-tmj_filename]"'
    guards: [ (!loaded) ]
    body: |
      this->tmj_filename = tmj_filename;


  - name: set_tile_atlas_bitmap_identifier
    parameters:
      - name: tile_atlas_bitmap_identifier
        type: std::string
        default_argument: '"[unset-tile_atlas_bitmap_identifier]"'
    guards: [ (!loaded) ]
    body: |
      this->tile_atlas_bitmap_identifier = tile_atlas_bitmap_identifier;


  - name: get_tile_atlas
    type: AllegroFlare::TileMaps::PrimMeshAtlas*
    guards: [ loaded ]
    body: return tile_atlas;


  - name: get_terrain_mesh
    type: AllegroFlare::TileMaps::TileMesh*
    guards: [ loaded ]
    body: return terrain_mesh;


  - name: get_background_mesh
    type: AllegroFlare::TileMaps::TileMesh*
    guards: [ loaded ]
    body: return background_mesh;


  - name: get_foreground_mesh
    type: AllegroFlare::TileMaps::TileMesh*
    guards: [ loaded ]
    body: return foreground_mesh;


  - name: get_collision_tile_map
    type: AllegroFlare::TileMaps::TileMap<int>*
    guards: [ loaded ]
    body: return collision_tile_map;


  - name: load
    type: bool
    guards: [ bitmap_bin, (!loaded) ]
    body: |
      AllegroFlare::Prototypes::Platforming2D::TMJDataLoader tmj_data_loader(tmj_filename);
      tmj_data_loader.load();


      int tmx_num_rows = tmj_data_loader.get_num_rows();
      int tmx_num_columns = tmj_data_loader.get_num_columns();
      int tmx_tile_height = tmj_data_loader.get_tile_height();
      int tmx_tile_width = tmj_data_loader.get_tile_width();
      
      int terrain_tilelayer_width = tmj_data_loader.get_layer_num_columns();
      int terrain_tilelayer_height = tmj_data_loader.get_layer_num_rows();
      std::vector<int> terrain_tile_data = tmj_data_loader.get_layer_tile_data();

      int collision_layer_num_columns = tmj_data_loader.get_collision_layer_num_columns();
      int collision_layer_num_rows = tmj_data_loader.get_collision_layer_num_rows();
      std::vector<int> collision_layer_tile_data = tmj_data_loader.get_collision_layer_tile_data();

      int foreground_tilelayer_exists = tmj_data_loader.get_foreground_tilelayer_exists();
      int foreground_tilelayer_width = tmj_data_loader.get_foreground_tilelayer_num_columns();
      int foreground_tilelayer_height = tmj_data_loader.get_foreground_tilelayer_num_rows();
      std::vector<int> foreground_tile_data = tmj_data_loader.get_foreground_tilelayer_tile_data();

      int background_tilelayer_exists = tmj_data_loader.get_background_tilelayer_exists();
      int background_tilelayer_width = tmj_data_loader.get_background_tilelayer_num_columns();
      int background_tilelayer_height = tmj_data_loader.get_background_tilelayer_num_rows();
      std::vector<int> background_tile_data = tmj_data_loader.get_background_tilelayer_tile_data();


      // validate widths and heights match
      // TODO: Improve the validation code here
      if (terrain_tilelayer_width != tmx_num_columns)
      {
         throw std::runtime_error("TMJMeshLoader: error: tilelayer width does not match tmx_num_columns.");
      }
      if (terrain_tilelayer_height != tmx_num_rows)
      {
         throw std::runtime_error("TMJMeshLoader: error: tilelayer height does not match tmx_num_rows.");
      }
      if (tmx_tile_height != 16 || tmx_tile_width != 16)
      {
         throw std::runtime_error("TMJMeshLoader: error: tmx tileheight and tilewidth other than 16 not supported.");
      }
      if (terrain_tile_data.size() != tmx_num_columns * tmx_num_rows)
      {
         throw std::runtime_error("TMJMeshLoader: error: num terrain tiles (in \"data\" field) does not match width*height.");
      }
      if (terrain_tilelayer_width != collision_layer_num_columns)
      {
         // TODO: Improve this error message
         throw std::runtime_error("TMJMeshLoader: error: asjlasjl;afsdj;afjl");
      }
      if (terrain_tilelayer_height != collision_layer_num_rows)
      {
         // TODO: Improve this error message
         throw std::runtime_error("TMJMeshLoader: error: quopiwequworeueo");
      }
      if (foreground_tilelayer_exists)
      {
         if (terrain_tilelayer_width != foreground_tilelayer_width)
         {
            // TODO: Improve this error message
            throw std::runtime_error("TMJMeshLoader: error: zxnyzvnyzvxcnr");
         }
         if (terrain_tilelayer_height != foreground_tilelayer_height)
         {
            // TODO: Improve this error message
            throw std::runtime_error("TMJMeshLoader: error: zsboizbeiozsnroi");
         }
         if (foreground_tile_data.size() != tmx_num_columns * tmx_num_rows)
         {
            // TODO: Improve this error message
            throw std::runtime_error("TMJMeshLoader: error: aqwoyzhawehopaso");
         }
      }
      if (background_tilelayer_exists)
      {
         if (terrain_tilelayer_width != background_tilelayer_width)
         {
            // TODO: Improve this error message
            throw std::runtime_error("TMJMeshLoader: error: zxnyzvnyzvxcnr");
         }
         if (terrain_tilelayer_height != background_tilelayer_height)
         {
            // TODO: Improve this error message
            throw std::runtime_error("TMJMeshLoader: error: zsboizbeiozsnroi");
         }
         if (background_tile_data.size() != tmx_num_columns * tmx_num_rows)
         {
            // TODO: Improve this error message
            throw std::runtime_error("TMJMeshLoader: error: aqwoyzhawehopaso");
         }
      }
      if (collision_layer_tile_data.size() != tmx_num_columns * tmx_num_rows)
      {
         // TODO: add test for this
         throw std::runtime_error("TMJMeshLoader: error: num collision layer tiles (in \"data\" field) for collision_layer "
                                  "does not match width*height.");
      }



      // Filter out any "flipped" tiles. Tiled will give *very large* numbers to tiles that have been flipped,
      // which could result in unexpected/missing tiles if they have been flipped accidentally. For now,
      // this feature is unexpected so we will "filter out" the flipped data from the tile id here.  Note we'll
      // do this for each layer.
      // For more information, see this discourse support page:
      // https://discourse.mapeditor.org/t/tiled-csv-format-has-exceptionally-large-tile-values-solved/4765

      // TODO: There are four options here:
      //   1) Allow flipped tiles
      //   2) Continue not allowing flipped tiles, but throw when a flipped tile is detected
      //   3) Continue not allowing flipped tiles, and flip them automatically with a warning
      //   4) Continue not allowing flipped tiles, and flip them implicitly with no warning. (current behavior)

      bool filter_out_flipped_tile_numbers_on_collision_layer_tile_data = true;
      if (filter_out_flipped_tile_numbers_on_collision_layer_tile_data)
      {
         for (auto &tile : collision_layer_tile_data)
         {
            int filtered_tile_id = tile & ~(0x80000000 | 0x40000000 | 0x20000000 | 0x1000000); //clear the flags
            tile = filtered_tile_id;
         }
      }



      // Create the atlas
      // TODO: Use a TileAtlasRepository

      AllegroFlare::TileMaps::PrimMeshAtlas *created_tile_atlas = new AllegroFlare::TileMaps::PrimMeshAtlas;
      ALLEGRO_BITMAP *tile_map_bitmap = bitmap_bin->operator[](tile_atlas_bitmap_identifier);
      created_tile_atlas->set_bitmap_filename(tile_atlas_bitmap_identifier);

      bool scaled_and_extruded = true;
      if (scaled_and_extruded)
      {
         int scale = 3;
         // TODO: factor out this step
         ALLEGRO_BITMAP *scaled_extruded_tile_map_bitmap =
            AllegroFlare::TileMaps::TileAtlasBuilder::create_scaled_and_extruded(tile_map_bitmap, scale);
         created_tile_atlas->duplicate_bitmap_and_load(
            scaled_extruded_tile_map_bitmap, tile_atlas_tile_width*scale, tile_atlas_tile_height*scale, 1
         );
      }
      else
      {
         created_tile_atlas->duplicate_bitmap_and_load(tile_map_bitmap, tile_atlas_tile_width, tile_atlas_tile_height);
      }


      // Some helper vars
      int &num_columns = tmx_num_columns;
      int &num_rows = tmx_num_rows;
      int &tile_width = tmx_tile_width;
      int &tile_height = tmx_tile_height;



      // terrain

      AllegroFlare::TileMaps::TileMesh* created_terrain_mesh = nullptr;
      created_terrain_mesh = create_mesh(
         created_tile_atlas,
         num_columns,
         num_rows,
         tile_width,
         tile_height,
         terrain_tile_data,
         false
      );



      // foreground

      AllegroFlare::TileMaps::TileMesh* created_foreground_mesh = nullptr;
      if (foreground_tilelayer_exists)
      {
         created_foreground_mesh = create_mesh(
            created_tile_atlas,
            num_columns,
            num_rows,
            tile_width,
            tile_height,
            foreground_tile_data,
            false
         );
      }



      // background

      AllegroFlare::TileMaps::TileMesh* created_background_mesh = nullptr;
      if (background_tilelayer_exists)
      {
         created_background_mesh = create_mesh(
            created_tile_atlas,
            num_columns,
            num_rows,
            tile_width,
            tile_height,
            background_tile_data,
            false
         );
      }



      // collision

      AllegroFlare::TileMaps::TileMap<int>* created_collision_tile_map = new AllegroFlare::TileMaps::TileMap<int>(
         collision_layer_num_columns,
         collision_layer_num_rows);
      created_collision_tile_map->initialize();

      for (int y=0; y<num_rows; y++)
      {
         for (int x=0; x<num_columns; x++)
         {
            // TODO
            int tile_id = collision_layer_tile_data[y * num_columns + x];
            created_collision_tile_map->set_tile(x, y, tile_id);
         }
      }


      // Assign all of our created objects into the final result
      this->tile_atlas = created_tile_atlas;
      this->terrain_mesh = created_terrain_mesh;
      this->foreground_mesh = created_foreground_mesh;
      this->background_mesh = created_background_mesh;
      this->collision_tile_map = created_collision_tile_map;

      // Set loaded to true
      loaded = true;

      return true;
    body_dependency_symbols:
      - AllegroFlare::Prototypes::Platforming2D::TMJDataLoader
      - nlohmann::json
      - AllegroFlare::TileMaps::TileAtlasBuilder


  - name: extract_tmj_tile_flip_properties
    static: true
    type: std::tuple<bool, bool, bool, bool, int>
    parameters:
      - name: tmj_tile_value
        type: uint32_t
        default_argument: 0
    body: |
      // Extract the flag values
      bool horizontal_flip_flag_present = (tmj_tile_value & 0x80000000) != 0;
      bool vertical_flip_flag_present = (tmj_tile_value & 0x40000000) != 0;
      bool antidiagonal_flip_flag_present = (tmj_tile_value & 0x20000000) != 0;
      bool hex_120_rotation_flag_present = (tmj_tile_value & 0x10000000) != 0;

      // Clear all the flags
      int filtered_tile_value = tmj_tile_value& ~(0x80000000 | 0x40000000 | 0x20000000 | 0x1000000);

      return std::tuple<bool, bool, bool, bool, int>{
         horizontal_flip_flag_present,
         vertical_flip_flag_present,
         antidiagonal_flip_flag_present,
         hex_120_rotation_flag_present,
         filtered_tile_value
      };


  - name: create_mesh
    type: AllegroFlare::TileMaps::TileMesh*
    parameters:
      - name: tile_atlas
        type: AllegroFlare::TileMaps::PrimMeshAtlas*
        default_argument: nullptr
      - name: num_columns
        type: int
        default_argument: 0
      - name: num_rows
        type: int
        default_argument: 0
      - name: tile_width
        type: int
        default_argument: 16
      - name: tile_height
        type: int
        default_argument: 16
      - name: tile_data
        type: std::vector<int>
        default_argument: '{}'
      - name: filter_out_flipped_tile_numbers
        type: bool
        default_argument: false
    guards: [ tile_atlas, (tile_data.size() == num_rows * num_columns) ]
    body: |
      if (filter_out_flipped_tile_numbers)
      {
         for (auto &tile : tile_data)
         {
            // TODO: Sort out flip flags as loaded here and below
            // Help on flip flags:
            // https://discourse.mapeditor.org/t/need-help-understanding-exported-flipped-tiles/5383/3

            //bool horizontalFlip = (tile & 0x80000000) != 0;
            //bool verticalFlip = (tile & 0x40000000) != 0;
            //bool antidiagonalFlip = (tile & 0x20000000) != 0;
            //bool Hex120Rotation = (tile & 0x10000000) != 0;
            int filtered_tile_id = tile & ~(0x80000000 | 0x40000000 | 0x20000000 | 0x1000000); // clear the flags
            tile = filtered_tile_id;
         }
      }
      
      AllegroFlare::TileMaps::TileMesh* created_mesh = new AllegroFlare::TileMaps::TileMesh(
            tile_atlas,
            num_columns,
            num_rows,
            tile_width,
            tile_height
         );
      created_mesh->initialize();
      //created_mesh->enable_holding_vertex_buffer_update_until_refresh();

      std::vector<std::pair<int, int>> tile_coords_to_remove;

      // Fill the tile data
      for (int y=0; y<num_rows; y++)
      {
         for (int x=0; x<num_columns; x++)
         {
            int tile_id = tile_data[y * num_columns + x];

            auto tile_flip_data = extract_tmj_tile_flip_properties(tile_id);

            bool horizontal_flip_flag_present = std::get<0>(tile_flip_data);
            bool vertical_flip_flag_present = std::get<1>(tile_flip_data);
            bool antidiagonal_flip_flag_present = std::get<2>(tile_flip_data);
            bool hex_120_rotation_flag_present = std::get<3>(tile_flip_data);
            int raw_tile_id = std::get<4>(tile_flip_data);

            bool has_horizontal_flip = horizontal_flip_flag_present;
            bool has_vertical_flip = vertical_flip_flag_present;
            bool has_diagonal_flip = antidiagonal_flip_flag_present;

            //std::cout << "[" << tile_id << ":";
            //if (tile_id < 0) tile_id = static_cast<unsigned int>(tile_id);

            tile_id = raw_tile_id;
            //if (tile_id < 0) = static_cast<unsigned int>

            //std::cout << tile_id << "]:" << horizontal_flip_flag_present << vertical_flip_flag_present << " ";
            // TODO: Consider updating this to (tile_id == -1), this will require the tile_data to be 0-indexed, which
            // it does not appear to be. This should probably happen at the TMJDataLoader stage (though TMJMeshLoader
            // is dependent on it, so will need to be updated there as well).
            // Also, using "tile_id-1" below should be set to simply "tile_id" after having made the above change.

            if (tile_id == 0)
            {
               created_mesh->set_tile_id(x, y, 0, has_horizontal_flip, has_vertical_flip, has_diagonal_flip);
               tile_coords_to_remove.push_back(std::pair<int, int>(x, y));
               //created_mesh->set_tile_id(x, y, 72); // <- Previously
            }
            else
            {
               created_mesh->set_tile_id(x, y, tile_id-1, has_horizontal_flip, has_vertical_flip, has_diagonal_flip);
            }
         }
         std::cout << std::endl;
      }

      for (auto &tile_coord_to_remove : tile_coords_to_remove)
      {
         // TODO: Consider a performance improvement here, locking the index update until all tiles are removed
         created_mesh->remove_tile_xy_from_index(tile_coord_to_remove.first, tile_coord_to_remove.second);
      }

      created_mesh->refresh_vertex_buffer();
      //std::cout << "Tiles removed from index in TileMesh: " << tile_coords_to_remove.size() << std::endl;

      return created_mesh;


dependencies:


  - symbol: nlohmann::json
    headers: [ lib/nlohmann/json.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::TileMaps::PrimMeshAtlas
    headers: [ AllegroFlare/TileMaps/PrimMeshAtlas.hpp ]
  - symbol: AllegroFlare::TileMaps::TileMesh
    headers: [ AllegroFlare/TileMaps/TileMesh.hpp ]
  - symbol: AllegroFlare::TileMaps::TileAtlasBuilder
    headers: [ AllegroFlare/TileMaps/TileAtlasBuilder.hpp ]
  - symbol: AllegroFlare::TileMaps::TileMap
    headers: [ AllegroFlare/TileMaps/TileMap.hpp ]
  - symbol: AllegroFlare::Prototypes::Platforming2D::TMJDataLoader
    headers: [ AllegroFlare/Prototypes/Platforming2D/TMJDataLoader.hpp ]


