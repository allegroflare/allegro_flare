properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: explicit

  - name: tmj_filename
    type: std::string
    init_with: '"[unset-tmj_filename]"'
    constructor_arg: true
    getter: true
    setter: explicit

  - name: tile_atlas_bitmap_identifier
    type: std::string
    init_with: '"[unset-tile_atlas_bitmap_identifier]"'
    constructor_arg: true
    getter: true
    setter: explicit

  - name: tile_atlas_tile_width
    type: int
    init_with: 16
    constructor_arg: true

  - name: tile_atlas_tile_height
    type: int
    init_with: 16
    constructor_arg: true

  - name: tile_atlas
    type: AllegroFlare::TileMaps::PrimMeshAtlas*
    init_with: nullptr
    getter: explicit

  - name: mesh
    type: AllegroFlare::TileMaps::PrimMesh*
    init_with: nullptr
    getter: explicit

  - name: background_mesh
    type: AllegroFlare::TileMaps::PrimMesh*
    init_with: nullptr
    getter: explicit

  - name: foreground_mesh
    type: AllegroFlare::TileMaps::PrimMesh*
    init_with: nullptr
    getter: explicit

  - name: collision_tile_map
    type: AllegroFlare::TileMaps::TileMap<int>*
    init_with: nullptr
    getter: explicit

  - name: loaded
    type: bool
    init_with: false


documentation:


  - todos:
     - Resolve hard-coded hack to fix tiled tile 0 to be transparent
     - Move more of the logic for building the mesh from the TMJDataLoader into this class, for example the
       "terrain_override" layer could be composited here instead.


methods:


  - name: set_bitmap_bin
    parameters:
      - name: bitmap_bin
        type: AllegroFlare::BitmapBin*
        default_argument: nullptr
    guards: [ (!loaded) ]
    body: |
      this->bitmap_bin = bitmap_bin;


  - name: set_tmj_filename
    parameters:
      - name: tmj_filename
        type: std::string
        default_argument: '"[unset-tmj_filename]"'
    guards: [ (!loaded) ]
    body: |
      this->tmj_filename = tmj_filename;


  - name: set_tile_atlas_bitmap_identifier
    parameters:
      - name: tile_atlas_bitmap_identifier
        type: std::string
        default_argument: '"[unset-tile_atlas_bitmap_identifier]"'
    guards: [ (!loaded) ]
    body: |
      this->tile_atlas_bitmap_identifier = tile_atlas_bitmap_identifier;


  - name: get_tile_atlas
    type: AllegroFlare::TileMaps::PrimMeshAtlas*
    guards: [ loaded ]
    body: return tile_atlas;


  - name: get_mesh
    type: AllegroFlare::TileMaps::PrimMesh*
    guards: [ loaded ]
    body: return mesh;


  - name: get_background_mesh
    type: AllegroFlare::TileMaps::PrimMesh*
    guards: [ loaded ]
    body: return background_mesh;


  - name: get_foreground_mesh
    type: AllegroFlare::TileMaps::PrimMesh*
    guards: [ loaded ]
    body: return foreground_mesh;


  - name: get_collision_tile_map
    type: AllegroFlare::TileMaps::TileMap<int>*
    guards: [ loaded ]
    body: return collision_tile_map;


  - name: load
    type: bool
    guards: [ bitmap_bin, (!loaded) ]
    body: |
      AllegroFlare::Prototypes::Platforming2D::TMJDataLoader tmj_data_loader(tmj_filename);
      tmj_data_loader.load();


      int tmx_num_rows = tmj_data_loader.get_num_rows();
      int tmx_num_columns = tmj_data_loader.get_num_columns();
      int tmx_tile_height = tmj_data_loader.get_tile_height();
      int tmx_tile_width = tmj_data_loader.get_tile_width();
      
      int terrain_tilelayer_width = tmj_data_loader.get_layer_num_columns();
      int terrain_tilelayer_height = tmj_data_loader.get_layer_num_rows();
      std::vector<int> terrain_tiles = tmj_data_loader.get_layer_tile_data();

      int collision_layer_num_columns = tmj_data_loader.get_collision_layer_num_columns();
      int collision_layer_num_rows = tmj_data_loader.get_collision_layer_num_rows();
      std::vector<int> collision_layer_tiles = tmj_data_loader.get_collision_layer_tile_data();

      int foreground_tilelayer_exists = tmj_data_loader.get_foreground_tilelayer_exists();
      int foreground_tilelayer_width = tmj_data_loader.get_foreground_tilelayer_num_columns();
      int foreground_tilelayer_height = tmj_data_loader.get_foreground_tilelayer_num_rows();
      std::vector<int> foreground_tiles = tmj_data_loader.get_foreground_tilelayer_tile_data();

      int background_tilelayer_exists = tmj_data_loader.get_background_tilelayer_exists();
      int background_tilelayer_width = tmj_data_loader.get_background_tilelayer_num_columns();
      int background_tilelayer_height = tmj_data_loader.get_background_tilelayer_num_rows();
      std::vector<int> background_tiles = tmj_data_loader.get_background_tilelayer_tile_data();


      // validate widths and heights match
      // TODO: Improve the validation code here
      if (terrain_tilelayer_width != tmx_num_columns)
      {
         throw std::runtime_error("TMJMeshLoader: error: tilelayer width does not match tmx_num_columns.");
      }
      if (terrain_tilelayer_height != tmx_num_rows)
      {
         throw std::runtime_error("TMJMeshLoader: error: tilelayer height does not match tmx_num_rows.");
      }
      if (tmx_tile_height != 16 || tmx_tile_width != 16)
      {
         throw std::runtime_error("TMJMeshLoader: error: tmx tileheight and tilewidth other than 16 not supported.");
      }
      if (terrain_tiles.size() != tmx_num_columns * tmx_num_rows)
      {
         throw std::runtime_error("TMJMeshLoader: error: num terrain tiles (in \"data\" field) does not match width*height.");
      }
      if (terrain_tilelayer_width != collision_layer_num_columns)
      {
         // TODO: Improve this error message
         throw std::runtime_error("TMJMeshLoader: error: asjlasjl;afsdj;afjl");
      }
      if (terrain_tilelayer_height != collision_layer_num_rows)
      {
         // TODO: Improve this error message
         throw std::runtime_error("TMJMeshLoader: error: quopiwequworeueo");
      }
      if (foreground_tilelayer_exists)
      {
         if (terrain_tilelayer_width != foreground_tilelayer_width)
         {
            // TODO: Improve this error message
            throw std::runtime_error("TMJMeshLoader: error: zxnyzvnyzvxcnr");
         }
         if (terrain_tilelayer_height != foreground_tilelayer_height)
         {
            // TODO: Improve this error message
            throw std::runtime_error("TMJMeshLoader: error: zsboizbeiozsnroi");
         }
         if (foreground_tiles.size() != tmx_num_columns * tmx_num_rows)
         {
            // TODO: Improve this error message
            throw std::runtime_error("TMJMeshLoader: error: aqwoyzhawehopaso");
         }
      }
      if (background_tilelayer_exists)
      {
         if (terrain_tilelayer_width != background_tilelayer_width)
         {
            // TODO: Improve this error message
            throw std::runtime_error("TMJMeshLoader: error: zxnyzvnyzvxcnr");
         }
         if (terrain_tilelayer_height != background_tilelayer_height)
         {
            // TODO: Improve this error message
            throw std::runtime_error("TMJMeshLoader: error: zsboizbeiozsnroi");
         }
         if (background_tiles.size() != tmx_num_columns * tmx_num_rows)
         {
            // TODO: Improve this error message
            throw std::runtime_error("TMJMeshLoader: error: aqwoyzhawehopaso");
         }
      }
      if (collision_layer_tiles.size() != tmx_num_columns * tmx_num_rows)
      {
         // TODO: add test for this
         throw std::runtime_error("TMJMeshLoader: error: num collision layer tiles (in \"data\" field) for collision_layer "
                                  "does not match width*height.");
      }



      // Filter out any "flipped" tiles. Tiled will give *very large* numbers to tiles that have been flipped,
      // which could result in unexpected/missing tiles if they have been flipped accidentally. For now,
      // this feature is unexpected so we will "filter out" the flipped data from the tile id here.  Note we'll
      // do this for each layer.
      // For more information, see this discourse support page:
      // https://discourse.mapeditor.org/t/tiled-csv-format-has-exceptionally-large-tile-values-solved/4765

      // TODO: There are four options here:
      //   1) Allow flipped tiles
      //   2) Continue not allowing flipped tiles, but throw when a flipped tile is detected
      //   3) Continue not allowing flipped tiles, and flip them automatically with a warning
      //   4) Continue not allowing flipped tiles, and flip them implicitly with no warning. (current behavior)

      bool filter_out_flipped_tile_numbers = true;
      if (filter_out_flipped_tile_numbers)
      {
         for (auto &tile : terrain_tiles)
         {
            bool horizontalFlip = tile & 0x80000000;
            bool verticalFlip = tile & 0x40000000;
            bool diagonalFlip = tile & 0x20000000;
            int filtered_tile_id = tile & ~(0x80000000 | 0x40000000 | 0x20000000); //clear the flags
            tile = filtered_tile_id;
         }

         for (auto &tile : collision_layer_tiles)
         {
            bool horizontalFlip = tile & 0x80000000;
            bool verticalFlip = tile & 0x40000000;
            bool diagonalFlip = tile & 0x20000000;
            int filtered_tile_id = tile & ~(0x80000000 | 0x40000000 | 0x20000000); //clear the flags
            tile = filtered_tile_id;
         }

         for (auto &tile : foreground_tiles)
         {
            bool horizontalFlip = tile & 0x80000000;
            bool verticalFlip = tile & 0x40000000;
            bool diagonalFlip = tile & 0x20000000;
            int filtered_tile_id = tile & ~(0x80000000 | 0x40000000 | 0x20000000); //clear the flags
            tile = filtered_tile_id;
         }

         for (auto &tile : background_tiles)
         {
            bool horizontalFlip = tile & 0x80000000;
            bool verticalFlip = tile & 0x40000000;
            bool diagonalFlip = tile & 0x20000000;
            int filtered_tile_id = tile & ~(0x80000000 | 0x40000000 | 0x20000000); //clear the flags
            tile = filtered_tile_id;
         }
      }




      // Create the atlas
      // TODO: Use a TileAtlasRepository

      AllegroFlare::TileMaps::PrimMeshAtlas *created_tile_atlas = new AllegroFlare::TileMaps::PrimMeshAtlas;
      ALLEGRO_BITMAP *tile_map_bitmap = bitmap_bin->operator[](tile_atlas_bitmap_identifier);
      created_tile_atlas->set_bitmap_filename(tile_atlas_bitmap_identifier);

      bool scaled_and_extruded = true;
      if (scaled_and_extruded)
      {
         int scale = 3;
         // TODO: factor out this step
         ALLEGRO_BITMAP *scaled_extruded_tile_map_bitmap =
            AllegroFlare::TileMaps::TileAtlasBuilder::build_scaled_and_extruded(tile_map_bitmap, scale);
         created_tile_atlas->duplicate_bitmap_and_load(
            scaled_extruded_tile_map_bitmap, tile_atlas_tile_width*scale, tile_atlas_tile_height*scale, 1
         );
      }
      else
      {
         created_tile_atlas->duplicate_bitmap_and_load(tile_map_bitmap, tile_atlas_tile_width, tile_atlas_tile_height);
      }



      // terrain

      int num_columns = tmx_num_columns;
      int num_rows = tmx_num_rows;
      AllegroFlare::TileMaps::PrimMesh* created_mesh = new AllegroFlare::TileMaps::PrimMesh(
            created_tile_atlas,
            num_columns,
            num_rows,
            tile_atlas_tile_width, // TODO: Verify if this value is correlated only to the tile atlas, or the mesh's
                                   // tile width, both? or what the relationship is between them.
            tile_atlas_tile_height // TODO: Verify if this value is correlated only to the tile atlas, or the mesh's
                                   // tile height, both? or what the relationship is between them.
         );
      created_mesh->initialize();

      for (int y=0; y<num_rows; y++)
      {
         for (int x=0; x<num_columns; x++)
         {
            int tile_id = terrain_tiles[y * num_columns + x];
            if (tile_id == 0) created_mesh->set_tile_id(x, y, 72);
                           // <- TODO: this is a hack to have 0 be transparent
                           // ^^ TODO: CRITICAL Modify this to make more sense. Consider *removing* the tile from
                           // the mesh
            else created_mesh->set_tile_id(x, y, tile_id-1);
         }
      }


      // foreground

      AllegroFlare::TileMaps::PrimMesh* created_foreground_mesh = nullptr;
      if (foreground_tilelayer_exists)
      {
         created_foreground_mesh = new AllegroFlare::TileMaps::PrimMesh(
               created_tile_atlas,
               num_columns,
               num_rows,
               tile_atlas_tile_width, // TODO: Verify if this value is correlated only to the tile atlas, or the
                                      // foreground mesh's tile width, both? or what the relationship is between them.
               tile_atlas_tile_height // TODO: Verify if this value is correlated only to the tile atlas, or the
                                      // foreground mesh's tile height, both? or what the relationship is between them.
            );
         created_foreground_mesh->initialize();

         for (int y=0; y<num_rows; y++)
         {
            for (int x=0; x<num_columns; x++)
            {
               int tile_id = foreground_tiles[y * num_columns + x];
               if (tile_id == 0) created_foreground_mesh->set_tile_id(x, y, 72);
                                 // ^^ TODO: this is a hack to have 0 be transparent
                                 // ^^ TODO: CRITICAL Modify this to make more sense. Consider *removing* the tile from
                                 // the mesh
               else created_foreground_mesh->set_tile_id(x, y, tile_id-1);
            }
         }
      }



      // background

      AllegroFlare::TileMaps::PrimMesh* created_background_mesh = nullptr;
      if (background_tilelayer_exists)
      {
         created_background_mesh = new AllegroFlare::TileMaps::PrimMesh(
               created_tile_atlas,
               num_columns,
               num_rows,
               tile_atlas_tile_width, // TODO: Verify if this value is correlated only to the tile atlas, or the
                                      // background mesh's tile width, both? or what the relationship is between them.
               tile_atlas_tile_height // TODO: Verify if this value is correlated only to the tile atlas, or the
                                      // background mesh's tile height, both? or what the relationship is between them.
            );
         created_background_mesh->initialize();

         for (int y=0; y<num_rows; y++)
         {
            for (int x=0; x<num_columns; x++)
            {
               int tile_id = background_tiles[y * num_columns + x];
               if (tile_id == 0) created_background_mesh->set_tile_id(x, y, 72);
                                 // ^^ TODO: this is a hack to have 0 be transparent
                                 // ^^ TODO: CRITICAL Modify this to make more sense. Consider *removing* the tile from
                                 // the mesh
               else created_background_mesh->set_tile_id(x, y, tile_id-1);
            }
         }
      }


      // collision

      AllegroFlare::TileMaps::TileMap<int>* created_collision_tile_map = new AllegroFlare::TileMaps::TileMap<int>(
         collision_layer_num_columns,
         collision_layer_num_rows);
      created_collision_tile_map->initialize();

      for (int y=0; y<num_rows; y++)
      {
         for (int x=0; x<num_columns; x++)
         {
            // TODO
            int tile_id = collision_layer_tiles[y * num_columns + x];
            created_collision_tile_map->set_tile(x, y, tile_id);
         }
      }


      // Assign all of our created objects into the final result
      this->tile_atlas = created_tile_atlas;
      this->mesh = created_mesh;
      this->foreground_mesh = created_foreground_mesh;
      this->background_mesh = created_background_mesh;
      this->collision_tile_map = created_collision_tile_map;

      // Set loaded to true
      loaded = true;

      return true;
    body_dependency_symbols:
      - AllegroFlare::Prototypes::Platforming2D::TMJDataLoader
      - nlohmann::json
      - AllegroFlare::TileMaps::TileAtlasBuilder


dependencies:


  - symbol: nlohmann::json
    headers: [ lib/nlohmann/json.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::TileMaps::PrimMeshAtlas
    headers: [ AllegroFlare/TileMaps/PrimMeshAtlas.hpp ]
  - symbol: AllegroFlare::TileMaps::PrimMesh
    headers: [ AllegroFlare/TileMaps/PrimMesh.hpp ]
  - symbol: AllegroFlare::TileMaps::TileAtlasBuilder
    headers: [ AllegroFlare/TileMaps/TileAtlasBuilder.hpp ]
  - symbol: AllegroFlare::TileMaps::TileMap
    headers: [ AllegroFlare/TileMaps/TileMap.hpp ]
  - symbol: AllegroFlare::Prototypes::Platforming2D::TMJDataLoader
    headers: [ AllegroFlare/Prototypes/Platforming2D/TMJDataLoader.hpp ]


