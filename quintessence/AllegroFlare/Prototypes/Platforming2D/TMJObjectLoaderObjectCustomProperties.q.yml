properties:


  - name: string_properties
    type: std::map<std::string, std::string>
    init_with: '{}'
    getter: true
    setter: true

  - name: bool_properties
    type: std::map<std::string, bool>
    init_with: '{}'
    getter: true
    setter: true

  - name: int_properties
    type: std::map<std::string, int>
    init_with: '{}'
    getter: true
    setter: true

  - name: float_properties
    type: std::map<std::string, float>
    init_with: '{}'
    getter: true
    setter: true


methods:


  - name: add
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: value
        type: std::string
        default_argument: '"[unset-value]"'
    body: |
      // TODO: Check for duplicate or overwrite
      string_properties[name] = value;


  - name: add
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: value
        type: float
        default_argument: 0.0f
    body: |
      // TODO: Check for duplicate or overwrite
      float_properties[name] = value;


  - name: add
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: value
        type: int
        default_argument: 0
    body: |
      // TODO: Check for duplicate or overwrite
      float_properties[name] = value;


  - name: add
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: value
        type: bool
        default_argument: false
    body: |
      // TODO: Check for duplicate or overwrite
      bool_properties[name] = value;


  - name: add_string
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: value
        type: std::string
        default_argument: '"[unset-value]"'
    body: |
      // TODO: Check for duplicate or overwrite
      string_properties[name] = value;


  - name: add_bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: value
        type: bool
        default_argument: false
    body: |
      // TODO: Check for duplicate or overwrite
      bool_properties[name] = value;


  - name: add_float
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: value
        type: float
        default_argument: 0.0f
    body: |
      // TODO: Check for duplicate or overwrite
      float_properties[name] = value;


  - name: add_int
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: value
        type: int
        default_argument: 0
    body: |
      // TODO: Check for duplicate or overwrite
      int_properties[name] = value;


  - name: get_string
    type: std::string
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    body: |
      // TODO: Check for existence
      return string_properties[name];


  - name: get_bool
    type: bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    body: |
      // TODO: Check for existence
      return bool_properties[name];


  - name: get_float
    type: float
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    body: |
      // TODO: Check for existence
      return float_properties[name];


  - name: get_int
    type: int
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    body: |
      // TODO: Check for existence
      return int_properties[name];


  - name: get_type
    type: std::string
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    body: |
      // TODO: Check for duplicate or overwrite
      if (float_properties.find(name) != float_properties.end()) return "float";
      if (int_properties.find(name) != int_properties.end()) return "int";
      if (bool_properties.find(name) != bool_properties.end()) return "bool";
      if (string_properties.find(name) != string_properties.end()) return "string";
      return "[ERROR-does_not_exist]";


  - name: exists
    type: bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    body: |
      // TODO: Check for duplicate or overwrite
      if (float_properties.find(name) != float_properties.end()) return true;
      if (int_properties.find(name) != int_properties.end()) return true;
      if (bool_properties.find(name) != bool_properties.end()) return true;
      if (string_properties.find(name) != string_properties.end()) return true;
      return false;


  - name: is_float
    type: bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    body: |
      // TODO: Conaider checking for existence first
      if (float_properties.find(name) != float_properties.end()) return true;
      return false;


  - name: is_bool
    type: bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    body: |
      // TODO: Conaider checking for existence first
      if (bool_properties.find(name) != bool_properties.end()) return true;
      return false;


  - name: is_int
    type: bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    body: |
      // TODO: Conaider checking for existence first
      if (int_properties.find(name) != int_properties.end()) return true;
      return false;


  - name: is_string
    type: bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    body: |
      // TODO: Conaider checking for existence first
      if (string_properties.find(name) != string_properties.end()) return true;
      return false;


