properties:


  - name: inventory_index
    type: AllegroFlare::InventoryIndex*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: af_inventory
    type: AllegroFlare::Inventory*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: flags
    type: AllegroFlare::Inventory*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: entity_dictionary
    type: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*>*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: room_dictionary
    type: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Room*>*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: entity_room_associations
    type: std::map<std::string, std::string>*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: script_dictionary
    type: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Script>*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: starting_in_room_identifier
    type: std::string
    init_with: '"[unset-starting_in_room_identifier]"'
    getter: true


functions:


  - name: load_original_gametest_default
    type: bool
    parameters:
      - name: bitmap_bin
        type: AllegroFlare::BitmapBin*
        default_argument: nullptr
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
      - name: event_emitter
        type: AllegroFlare::EventEmitter*
        default_argument: nullptr
      - name: entity_collection_helper
        type: AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper*
        default_argument: nullptr
    guards:
      - inventory_index
      - af_inventory
      - flags
      - entity_dictionary
      - room_dictionary
      - entity_room_associations
      - script_dictionary
      - bitmap_bin
      - font_bin
      - event_emitter
      - entity_collection_helper
    body: |
      AllegroFlare::Prototypes::FixedRoom2D::EntityFactory entity_factory(bitmap_bin);
      AllegroFlare::Prototypes::FixedRoom2D::RoomFactory room_factory(
         bitmap_bin, font_bin, event_emitter, entity_collection_helper
      );

      *inventory_index = AllegroFlare::InventoryIndex::build_placeholder_inventory_index();

      af_inventory->add_item(1);
      af_inventory->add_item(4);
      af_inventory->add_item(3);

      *room_dictionary = {
         { "front_hall", room_factory.create_room() },
         { "study", room_factory.create_room() },
      };

      *entity_dictionary = {
         { "door1", entity_factory.create_entity(
               "download-door-png-transparent-image-and-clipart-3.png", 1400, 800, 0.85, "Door 1", "observe_door1") },
         { "door2", entity_factory.create_entity(
               "download-door-png-transparent-image-and-clipart-3.png", 500, 800, 0.85, "Door 2", "observe_door2") },
         { "chair", entity_factory.create_entity(
               "wooden-chair-png-transparent-image-pngpix-0.png", 700, 800, 0.168, "Chair", "signal_hello") },
         { "table", entity_factory.create_entity(
               "download-wooden-table-png-image-png-image-pngimg-3.png", 900, 800, 0.4, "table", "observe_table") },
         { "keys", entity_factory.create_entity(
               "key-keychain-house-keys-door-photo-pixabay-25.png", 940, 590, 0.05, "keys", "collect_keys") },
      };

      *entity_room_associations = {
         { "door1", "front_hall" },
         { "door2", "study" },
         { "chair", "front_hall" },
         { "table", "front_hall" },
         { "keys", "front_hall" },
      };

      *script_dictionary = {
         { "observe_door1", AllegroFlare::Prototypes::FixedRoom2D::Script({
               "DIALOG: Just a regular door. | I'm going to step through it.",
               "ENTER_ROOM: study",
         })},
         { "observe_door2", AllegroFlare::Prototypes::FixedRoom2D::Script({
               "DIALOG: A regular door. | I'll to in.",
               "ENTER_ROOM: front_hall",
         })},
         { "signal_hello", AllegroFlare::Prototypes::FixedRoom2D::Script({
               "SIGNAL: Hello!"})
         },
         { "spawn_dialog", AllegroFlare::Prototypes::FixedRoom2D::Script({
               "DIALOG: This was a scripted dialog!"
         })},
         { "collect_keys", AllegroFlare::Prototypes::FixedRoom2D::Script({
               "COLLECT: keys"
         })},
         { "observe_table", AllegroFlare::Prototypes::FixedRoom2D::Script({
               "DIALOG: Hmm. Interesting, there's a key on this table."
         })},
      };

      starting_in_room_identifier = "front_hall";
       
      //enter_room("front_hall");
      //enter_room("study");

      return true;
    body_dependency_symbols:
      - AllegroFlare::Prototypes::FixedRoom2D::EntityFactory
      - AllegroFlare::Prototypes::FixedRoom2D::RoomFactory


dependencies:


  - symbol: AllegroFlare::Inventory*
    headers: [ AllegroFlare/Inventory.hpp ]
  - symbol: AllegroFlare::InventoryIndex*
    headers: [ AllegroFlare/InventoryIndex.hpp ]
  - symbol: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*>*
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp ]
  - symbol: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Room*>*
    headers: [ map, string, AllegroFlare/Prototypes/FixedRoom2D/Room.hpp ]
  - symbol: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Script>*
    headers: [ map, AllegroFlare/Prototypes/FixedRoom2D/Script.hpp ]
  - symbol: std::map<std::string, std::string>*
    headers: [ map, string ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::EntityFactory
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/EntityFactory.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::RoomFactory
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/RoomFactory.hpp ]
  - symbol: AllegroFlare::BitmapBin*
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::EventEmitter*
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper*
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp ]


