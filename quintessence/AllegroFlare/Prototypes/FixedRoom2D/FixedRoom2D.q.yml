properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: room_dictionary
    type: AllegroFlare::Prototypes::FixedRoom2D::RoomDictionary
    init_with: '{}'
    getter: true
    setter: true

  - name: entity_dictionary
    type: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*>
    init_with: '{}'

  - name: entity_collection_helper
    type: AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper
    init_with: '&entity_dictionary'

  - name: cursor
    type: AllegroFlare::Prototypes::FixedRoom2D::Cursor
    init_with: '{}'

  - name: initialized
    type: bool
    init_with: false


functions:


  - name: initialize
    guards: [ (!initialized), bitmap_bin ]
    body: |
      AllegroFlare::Prototypes::FixedRoom2D::EntityFactory entity_factory(bitmap_bin);
      cursor.set_font_bin(font_bin);

      //AllegroFlare::Prototypes::FixedRoom2D::Entities::Base* created = entity_factory.create_chair_entity();
      entity_dictionary = {
         { "door", entity_factory.create_entity("download-door-png-transparent-image-and-clipart-3.png", 1400, 800, 0.85) },
         { "chair", entity_factory.create_entity("wooden-chair-png-transparent-image-pngpix-0.png", 600, 800, 0.168) },
         { "table", entity_factory.create_entity("download-wooden-table-png-image-png-image-pngimg-3.png", 900, 800, 0.4) },
         { "keys", entity_factory.create_entity("key-keychain-house-keys-door-photo-pixabay-25.png", 940, 590, 0.05) },
      };

      cursor.set_cursor_to_pointer();
      cursor.clear_info_text();

      initialized = true;
      return;
    body_dependency_symbols:
      - AllegroFlare::Prototypes::FixedRoom2D::EntityFactory


  - name: update
    body: |
      // update the entities
      for (auto &entity : entity_collection_helper.select_all_ordered_by_id())
      {
         entity->update();
      }

      // update the cursor
      cursor.update();

      return;


  - name: render
    body: |
      // draw the entities
      for (auto &entity : entity_collection_helper.select_all_ordered_by_id())
      {
         entity->render();
         //entity->get_placement_ref().draw_box(AllegroFlare::Color::DodgerBlue, true);
      }

      // draw the cursor
      cursor.draw();

      return;
    body_dependency_symbols:
      - AllegroFlare::Color::*
      - AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper


  - name: move_cursor
    parameters:
      - name: distance_x
        type: float
        default_argument: 0.0
      - name: distance_y
        type: float
        default_argument: 0.0
    body: |
      cursor.move(distance_x, distance_y);

      AllegroFlare::Prototypes::FixedRoom2D::Entities::Base* entity_cursor_was_over = nullptr;
      AllegroFlare::Prototypes::FixedRoom2D::Entities::Base* entity_cursor_is_now_over = nullptr;

      int cursor_x = cursor.get_x();
      int cursor_y = cursor.get_y();

      // update the state of the entities
      for (auto &entity : entity_collection_helper.select_all_ordered_by_id())
      {
         if (entity->get_cursor_is_over()) entity_cursor_was_over = entity;
         if (entity->get_placement_ref().collide(cursor_x, cursor_y)) entity_cursor_is_now_over = entity;
      }

      // a change has happened
      if (entity_cursor_was_over != entity_cursor_is_now_over)
      {
         if (entity_cursor_was_over)
         {
            entity_cursor_was_over->on_cursor_leave();
         }

         if (entity_cursor_is_now_over)
         {
            entity_cursor_is_now_over->on_cursor_enter();
            cursor.set_cursor_to_pointer();
            cursor.set_info_text("inspect");
         }
         else
         {
            // cursor is now over nothing
            cursor.set_cursor_to_pointer();
            cursor.clear_info_text();
         }
      }

      return;


dependencies:


  - symbol: AllegroFlare::Prototypes::FixedRoom2D::Cursor
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/Cursor.hpp ]
  - symbol: AllegroFlare::Color::*
    headers: [ AllegroFlare/Color.hpp ]
  - symbol: AllegroFlare::BitmapBin*
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::RoomDictionary
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/RoomDictionary.hpp ]
  - symbol: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*>
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::EntityFactory
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/EntityFactory.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp ]

  
