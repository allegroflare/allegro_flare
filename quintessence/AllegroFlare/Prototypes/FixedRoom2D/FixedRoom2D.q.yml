properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true

  - name: entity_dictionary
    type: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*>
    init_with: '{}'

  - name: script_dictionary
    type: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Script>
    init_with: '{}'

  - name: script_runner
    type: AllegroFlare::Prototypes::FixedRoom2D::ScriptRunner
    init_with: '{}'

  - name: entity_collection_helper
    type: AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper
    init_with: '{}'

  - name: room
    type: AllegroFlare::Prototypes::FixedRoom2D::Room
    init_with: '{}'

  - name: initialized
    type: bool
    init_with: false


functions:


  - name: set_font_bin
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
    body: |
      room.set_font_bin(font_bin);
      this->font_bin = font_bin;
      return;


  - name: initialize
    guards: [ (!initialized), bitmap_bin ]
    body: |
      AllegroFlare::Prototypes::FixedRoom2D::EntityFactory entity_factory(bitmap_bin);

      entity_dictionary = {
         { "door", entity_factory.create_entity("download-door-png-transparent-image-and-clipart-3.png", 1400, 800, 0.85) },
         { "chair", entity_factory.create_entity("wooden-chair-png-transparent-image-pngpix-0.png", 600, 800, 0.168) },
         { "table", entity_factory.create_entity("download-wooden-table-png-image-png-image-pngimg-3.png", 900, 800, 0.4) },
         { "keys", entity_factory.create_entity(
               "key-keychain-house-keys-door-photo-pixabay-25.png", 940, 590, 0.05, "keys", "say_hello") },
      };

      script_dictionary = {
         { "say_hello", AllegroFlare::Prototypes::FixedRoom2D::Script({"SIGNAL: Hello!"}) },
      };

      entity_collection_helper.set_entity_dictionary(&entity_dictionary);

      room.set_font_bin(font_bin);
      room.set_event_emitter(event_emitter);
      room.set_entity_dictionary(&entity_dictionary);

      script_runner.set_audio_controller(nullptr); // TODO
      script_runner.set_af_inventory(nullptr); // TODO
      script_runner.set_inventory_window(nullptr); // TODO
      script_runner.set_script_dictionary(&script_dictionary);
      script_runner.set_flags(nullptr); // TODO

      //script_runner.set

      initialized = true;
      return;
    body_dependency_symbols:
      - AllegroFlare::Prototypes::FixedRoom2D::EntityFactory


  - name: update
    body: |
      room.update();

      return;


  - name: render
    body: |
      room.render();

      return;
    body_dependency_symbols:
      - AllegroFlare::Color::*
      - AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper


  - name: process_interaction_event
    parameters:
      - name: interaction_event_data
        type: AllegroFlare::Prototypes::FixedRoom2D::InteractionEventData*
        default_argument: nullptr
    body: |
      std::string name = entity_collection_helper.find_dictionary_name_of_entity_that_cursor_is_now_over();
      if (name.empty())
      {
         // TODO: spawn some dialog that says "there is nothing here"
      }
      else
      {
         AllegroFlare::Prototypes::FixedRoom2D::Entities::Base* interacting_entity = entity_dictionary.at(name);
         std::string script = interacting_entity->get_on_cursor_interact_script_name();
         
         script_runner.load_script_by_dictionary_name(script);

         script_runner.play_current_script_line();
      }
      return;


  - name: activate_primary_action
    body: |
      room.interact_with_item_under_cursor();
      return;


  - name: move_cursor
    parameters:
      - name: distance_x
        type: float
        default_argument: 0.0
      - name: distance_y
        type: float
        default_argument: 0.0
    body: |
      room.move_cursor(distance_x, distance_y);
      return;


dependencies:


  - symbol: AllegroFlare::Prototypes::FixedRoom2D::Cursor
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/Cursor.hpp ]
  - symbol: AllegroFlare::Color::*
    headers: [ AllegroFlare/Color.hpp ]
  - symbol: AllegroFlare::BitmapBin*
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::EventEmitter*
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Room*>
    headers: [ map, string, AllegroFlare/Prototypes/FixedRoom2D/Room.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::Room
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/Room.hpp ]
  - symbol: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*>
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::EntityFactory
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/EntityFactory.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp ]
  - symbol: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Script>
    headers: [ map, AllegroFlare/Prototypes/FixedRoom2D/Script.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::ScriptRunner
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::InteractionEventData*
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData.hpp ]

  
