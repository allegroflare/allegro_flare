properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: inventory_index
    type: AllegroFlare::InventoryIndex
    init_with: ''

  - name: af_inventory
    type: AllegroFlare::Inventory
    init_with: '{}'

  - name: flags
    type: AllegroFlare::Inventory
    init_with: '{}'

  - name: entity_dictionary
    type: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*>
    init_with: '{}'

  - name: room_dictionary
    type: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Room*>
    init_with: '{}'

  - name: entity_room_associations
    type: std::map<std::string, std::string>
    init_with: '{}'

  - name: script_dictionary
    type: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Script>
    init_with: '{}'

  - name: script_runner
    type: AllegroFlare::Prototypes::FixedRoom2D::ScriptRunner
    init_with: '{}'

  - name: entity_collection_helper
    type: AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper
    init_with: '{}'
    getter_ref: true

  - name: starting_room_identifier
    type: std::string
    init_with: '"[unset-starting_room_identifier]"'

  - name: current_room
    type: AllegroFlare::Prototypes::FixedRoom2D::Room*
    init_with: nullptr

  - name: room_shader
    type: AllegroFlare::Shader*
    init_with: nullptr
    getter: true
    setter: true

  - name: initialized
    type: bool
    init_with: false

  - name: dialog_system
    type: AllegroFlare::Prototypes::FixedRoom2D::DialogSystem
    init_with: nullptr

  - name: paused
    type: bool
    init_with: false

  - name: subscribed_to_game_event_names
    type: std::set<std::string>
    init_with: '{}'
    getter: explicit


functions:


  - name: set_font_bin
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
    body: |
      this->font_bin = font_bin;

      // set the font_bin in each of the rooms (likely the font_bin dependency should be moved to a RoomRenderer)
      for (auto &room_dictionary_listing : room_dictionary)
      {
         AllegroFlare::Prototypes::FixedRoom2D::Room* room = room_dictionary_listing.second;
         if (room) room->set_font_bin(font_bin);
         else
         {
            std::string room_name = room_dictionary_listing.first;
            std::cout << "Weird error, could not set_font_bin in room \"" << room_name << "\" because "
                      << "it is nullptr." << std::endl;
         }
      }
      return;


  - name: get_subscribed_to_game_event_names
    type: std::set<std::string>
    guards: [ initialized ]
    body: |
      return subscribed_to_game_event_names;


  - name: is_subscribed_to_game_event_name
    parameters:
      - name: game_event_name
        type: std::string
        default_argument: '"[unset-game_event_name]"'
    type: bool
    guards: [ initialized ]
    body: |
      return (subscribed_to_game_event_names.count(game_event_name) != 0);


  - name: initialize
    guards: [ (!initialized), bitmap_bin, event_emitter ]
    body: |
      subscribed_to_game_event_names = {
         AllegroFlare::Prototypes::FixedRoom2D::EventNames::INTERACTION_EVENT_NAME,
         AllegroFlare::Prototypes::FixedRoom2D::EventNames::SCRIPT_EVENT_NAME,
         AllegroFlare::Prototypes::FixedRoom2D::EventNames::DIALOG_EVENT_NAME,
         AllegroFlare::Prototypes::FixedRoom2D::EventNames::EVENT_DIALOG_SWITCH_IN_NAME,
         AllegroFlare::Prototypes::FixedRoom2D::EventNames::EVENT_DIALOG_SWITCH_OUT_NAME,
         "pause_game",
         "unpause_game",
      };

      dialog_system.set_bitmap_bin(bitmap_bin);
      dialog_system.set_font_bin(font_bin);
      dialog_system.set_event_emitter(event_emitter);
      dialog_system.initialize();

      entity_collection_helper.set_entity_dictionary(&entity_dictionary);
      entity_collection_helper.set_entity_room_associations(&entity_room_associations);

      script_runner.set_event_emitter(event_emitter);
      script_runner.set_script_dictionary(&script_dictionary);

      initialized = true;

      return;
    body_dependency_symbols:
      - AllegroFlare::Prototypes::FixedRoom2D::EntityFactory
      - AllegroFlare::Prototypes::FixedRoom2D::RoomFactory


  - name: load_configuration
    type: bool
    guards: [ initialized ]
    parameters:
      - name: configuration
        type: AllegroFlare::Prototypes::FixedRoom2D::Configuration
        default_argument: '{}'
    body: |
      AllegroFlare::Prototypes::FixedRoom2D::ConfigurationLoader configuration_loader;
      configuration_loader.set_source_configuration(&configuration);

      configuration_loader.set_destination_inventory_index(&inventory_index);
      configuration_loader.set_destination_af_inventory(&af_inventory);
      configuration_loader.set_destination_flags(&flags);
      configuration_loader.set_destination_entity_dictionary(&entity_dictionary);
      configuration_loader.set_destination_room_dictionary(&room_dictionary);
      configuration_loader.set_destination_entity_room_associations(&entity_room_associations);
      configuration_loader.set_destination_script_dictionary(&script_dictionary);
      configuration_loader.set_destination_starting_room_identifier(&starting_room_identifier);

      bool load_was_successful = configuration_loader.load_from_source_configuration();

      if (!load_was_successful)
      {
         std::cout << "[FixedRoom2D::FixedRoom2D::load_configuration]: ERROR: there was an "
                   << "error loading the configuration."
                   << std::endl;
      }

      return load_was_successful;
    body_dependency_symbols:
     - AllegroFlare::Prototypes::FixedRoom2D::ConfigurationLoader


  - name: enter_start_room
    type: bool
    guards: [ initialized ]
    body: |
      return enter_room(starting_room_identifier);


  - name: load_gametest_configuration
    type: bool
    guards: [ initialized ]
    body: |
      // TODO: rename this to build_gametest_configuration
      AllegroFlare::Prototypes::FixedRoom2D::ConfigurationFactory configuration_factory;
      AllegroFlare::Prototypes::FixedRoom2D::Configuration source_configuration =
        configuration_factory.load_original_gametest_default(
          bitmap_bin, font_bin, event_emitter, &entity_collection_helper);

      return load_configuration(source_configuration);
    body_dependency_symbols:
     - AllegroFlare::Prototypes::FixedRoom2D::ConfigurationFactory
     - AllegroFlare::Prototypes::FixedRoom2D::Configuration


  - name: update
    guards: [ initialized ]
    body: |
      update_all_rooms();

      dialog_system.update();

      return;


  - name: enter_room
    parameters:
      - name: room_name
        type: std::string
        default_argument: '"[unset-room_name]"'
    type: bool
    guards: [ initialized ]
    body: |
      // find the room name
      std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Room*>::iterator it =
         room_dictionary.find(room_name);

      // if the room name does not exist, output an error and return false
      if (it == room_dictionary.end())
      {
         std::cout << "[FixedRoom2D::FixedRoom2D::enter_room]: error: attempted to enter room named "
                   << "\"" << room_name << "\" but it did not exist." << std::endl;
         return false;
      }

      // output a nice little error showing that the room will be entered
      std::cout << "[FixedRoom2D::FixedRoom2D::enter_room]: info: entering room named "
                << "\"" << room_name << "\"." << std::endl;

      // ensure all the entities do not think they have the cursor over them
      unhover_any_and_all_entities();
      reset_cursors_to_default_in_all_rooms();

      // set the current room
      current_room = it->second;

      return true;


  - name: unhover_any_and_all_entities
    body: |
      std::vector<AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*> all_entities =
         entity_collection_helper.select_all();

      for (auto &entity : all_entities)
      {
         if (entity->get_cursor_is_over()) entity->on_cursor_leave(); // TODO, consider exiting without "leaving"
      }
      return;


  - name: reset_cursors_to_default_in_all_rooms
    body: |
      for (auto &room_dictionary_listing : room_dictionary)
      {
         AllegroFlare::Prototypes::FixedRoom2D::Room* room = room_dictionary_listing.second;
         if (!room)
         {
            std::string room_name = room_dictionary_listing.first;
            std::cout << "Odd error, when clearing cursors, room listing at \"" << room_name << "\" it is nullptr."
                      << " Skipping." << std::endl;
         }
         else
         {
            room->reset_cursor_to_default();
         }
      }
      return;


  - name: get_current_room_dictionary_name
    guards: [ initialized ]
    type: std::string
    parameters:
      - name: room
        type: AllegroFlare::Prototypes::FixedRoom2D::Room*
        default_argument: nullptr
    body: |
      if (!current_room) return nullptr;
      for (auto &room_dictionary_listing : room_dictionary)
      {
         if (room_dictionary_listing.second == room) return room_dictionary_listing.first;
      }
      return "";


  - name: render
    guards: [ initialized ]
    body: |
      // render the current room
      if (current_room)
      {
         if (room_shader) room_shader->activate();
         render_entities_in_current_room();
         if (room_shader) room_shader->deactivate();

         current_room->render(); // for now, only renders the cursor
      }
      else
      {
         render_void_room();
      }

      // render the dialog_system
      dialog_system.render();

      // render paused notification
      if (paused)
      {
         AllegroFlare::Elements::DialogBoxFactory factory;
         AllegroFlare::Elements::DialogBoxes::Basic pause_dialog_box = factory.build_basic_dialog(
            {"Paused."});
         pause_dialog_box.set_created_at(0); // so it will show
         pause_dialog_box.reveal_all_characters(); // so it will show
         AllegroFlare::Elements::DialogBoxRenderer dialog_box_renderer(font_bin, bitmap_bin, &pause_dialog_box);
         dialog_box_renderer.render();
      }

      return;
    body_dependency_symbols:
      - AllegroFlare::Color::*
      - AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper
      - AllegroFlare::Elements::DialogBoxRenderer


  - name: render_void_room
    body: |
      al_clear_to_color(ALLEGRO_COLOR{0.3, 0.3, 0.3, 0.3});
      return;


  - name: process_subscribed_to_game_event
    xprivate: true
    parameters:
      - name: game_event
        type: AllegroFlare::GameEvent*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      if (game_event->is_type(AllegroFlare::Prototypes::FixedRoom2D::EventNames::INTERACTION_EVENT_NAME))
      {
         process_interaction_event(game_event->get_data());
      }
      else if (game_event->is_type(AllegroFlare::Prototypes::FixedRoom2D::EventNames::SCRIPT_EVENT_NAME))
      {
         process_script_event(game_event->get_data());
      }
      else if (game_event->is_type(AllegroFlare::Prototypes::FixedRoom2D::EventNames::EVENT_DIALOG_SWITCH_IN_NAME))
      {
         suspend_all_rooms();
      }
      else if (game_event->is_type(AllegroFlare::Prototypes::FixedRoom2D::EventNames::EVENT_DIALOG_SWITCH_OUT_NAME))
      {
         resume_all_rooms();
         if (script_runner.get_paused_for_dialog_to_finish()) script_runner.play_or_resume();
      }
      else if (game_event->is_type(AllegroFlare::Prototypes::FixedRoom2D::EventNames::DIALOG_EVENT_NAME))
      {
         // TODO: Address how this current design requires calling these two methods here, specifically delegating
         // to dialog_system to process_dialog_event(). It's more likely that the dialog_system will need to
         // consume the incoming game_event on its own, rather than have FixedRoom2D dispatch/delegeate to it here
         // like it's doing now.  Please review and improve.
         // HERE:
         dialog_system.process_dialog_event(game_event->get_data());
         // TODO: remove this: process_dialog_event(game_event->get_data());
      }
      else if (game_event->is_type("unpause_game"))
      {
         unpause_game();
      }
      else if (game_event->is_type("pause_game"))
      {
         pause_game();
      }
      else
      {
         std::cout << "[FixedRoom2D::FixedRoom2D::process_subscribed_to_game_event]: "
                   << "error: unexpected game_event type "
                   << "\"" << game_event->get_type() << "\". Doing nothing (except outputting this error)."
                   << std::endl;
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::Prototypes::FixedRoom2D::EventNames::*



  - name: process_interaction_event
    private: true
    parameters:
      - name: game_event_data
        type: AllegroFlare::GameEventDatas::Base*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      if (game_event_data && game_event_data->get_type() == "InteractionEventData")
      {
         AllegroFlare::Prototypes::FixedRoom2D::InteractionEventData* interaction_event_data =
             static_cast<AllegroFlare::Prototypes::FixedRoom2D::InteractionEventData*>(game_event_data);

         std::string name = entity_collection_helper.find_dictionary_name_of_entity_that_cursor_is_now_over();
         if (name.empty())
         {
            script_runner.load_script_lines({"DIALOG: There's nothing here."});
            script_runner.play_or_resume();
         }
         else
         {
            // assume the interaction is a script (for now)
            // execute the script
            AllegroFlare::Prototypes::FixedRoom2D::Entities::Base* interacting_entity = entity_dictionary.at(name);
            std::string script = interacting_entity->get_on_cursor_interact_script_name();
            script_runner.load_script_by_dictionary_name(script);
            script_runner.play_or_resume();
         }
      }
      else
      {
         std::cout << "Expecting game_event_data to be present but it is a nullptr" << std::endl;
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::Prototypes::FixedRoom2D::InteractionEventData


  - name: process_script_event
    private: true
    parameters:
      - name: game_event_data
        type: AllegroFlare::GameEventDatas::Base*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      //bool a_new_dialog_was_spawned = false;
      using namespace AllegroFlare::Prototypes::FixedRoom2D;

      if (!game_event_data)
      {
         std::cout << "A weird error occurred. Expecting script_event_data to be valid but it is nullptr" << std::endl;
         return;
      }
      else
      {
         if (game_event_data->is_type(ScriptEventDatas::EnterRoom::TYPE))
         {
            AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::EnterRoom* enter_room_event_data =
                static_cast<AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::EnterRoom*>(game_event_data);
            std::string room_name_to_enter = enter_room_event_data->get_room_dictionary_name_to_enter();

            enter_room(room_name_to_enter);
         }
         else if (game_event_data->is_type(ScriptEventDatas::InitiateDialog::TYPE))
         {
            AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::InitiateDialog* spawn_dialog_event_data =
                static_cast<AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::InitiateDialog*>(game_event_data);
            std::vector<std::string> pages = spawn_dialog_event_data->get_dialog_pages();

            // TODO: move this to emitting an event
            dialog_system.spawn_basic_dialog(pages);
         }
         else if (game_event_data->is_type(ScriptEventDatas::CollectItem::TYPE))
         {
            AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectItem* collect_item_event_data =
                static_cast<AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectItem*>(game_event_data);

            // TODO: move this to emitting an event
            dialog_system.spawn_you_got_an_item_dialog(
                  "Keys",
                  "key-keychain-house-keys-door-photo-pixabay-25.png"
               );
         }
         else if (game_event_data->is_type(ScriptEventDatas::CollectEvidence::TYPE))
         {
            // HERE: blast this code and replace with code to emit a CreateYouGotNewEvidenceDialog
            // note this logic will be moved to FixedRoom2D/FixedRoom2D

            AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectEvidence* collect_evidence_event_data =
                static_cast<AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectEvidence*>(game_event_data);

            // TODO: move this to emitting an event
            dialog_system.spawn_you_got_new_evidence_dialog(
                  "Evidence Name",
                  "evidence-placeholder-480x300.png"
               );
         }
         else
         {
            // TODO: fix this design flaw:
            // NOTE: this cout section below represents a fracture in design since delegating dialog management to
            // the dialog_system.  There's currently no way to know if the "process_script_event" was handled
            // by either this FixedRoom2D or by any delegates.

            std::cout << "[FixedRoom2D::FixedRoom2D::process_script_event]: error: "
                      << "Unknown game_event_data type "
                      << "\"" << game_event_data->get_type() << "\""
                      << std::endl;
         }
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::InitiateDialog
      - AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectEvidence
      - AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectItem
      - AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::EnterRoom
      - AllegroFlare::InventoryDictionaryItems::WithAttributes
      - AllegroFlare::Elements::DialogBoxFactory


  - name: render_entities_in_current_room
    body: |
      std::vector<AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*> entities = get_entities_in_current_room();
      for (auto &entity : entities)
      {
         // NOTE: some entities are set to "hidden=-true" and they will not actually render if called to
         if (entity) entity->render();
      }
      return;


  - name: get_entities_in_current_room
    type: std::vector<AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*>
    body: |
      return entity_collection_helper.select_all_in_room_ordered_by_id(get_dictionary_name_of_current_room());


  - name: get_dictionary_name_of_current_room
    type: std::string
    body: |
      if (!current_room) return "";
      for (auto &room_dictionary_listing : room_dictionary)
      {
         if (current_room == room_dictionary_listing.second) return room_dictionary_listing.first;
      }
      return "";


  - name: update_all_rooms
    body: |
      for (auto &room_dictionary_listing : room_dictionary)
      {
         AllegroFlare::Prototypes::FixedRoom2D::Room* room = room_dictionary_listing.second;
         if (room) room->update();
         else
         {
            std::string room_name = room_dictionary_listing.first;
            std::cout << "Weird error, could not update room at \"" << room_name << "\", it is nullptr." << std::endl;
         }
      }


  - name: suspend_all_rooms
    body: |
      for (auto &room_dictionary_listing : room_dictionary)
      {
         AllegroFlare::Prototypes::FixedRoom2D::Room* room = room_dictionary_listing.second;
         if (room) room->suspend();
         else
         {
            std::string room_name = room_dictionary_listing.first;
            std::cout << "Weird error, could not suspend room at \"" << room_name << "\", it is nullptr." << std::endl;
         }
      }
      return;


  - name: resume_all_rooms
    body: |
      for (auto &room_dictionary_listing : room_dictionary)
      {
         AllegroFlare::Prototypes::FixedRoom2D::Room* room = room_dictionary_listing.second;
         if (room) room->resume();
         else
         {
            std::string room_name = room_dictionary_listing.first;
            std::cout << "Weird error, could not resume room at \"" << room_name << "\", it is nullptr." << std::endl;
         }
      }
      return;


  - name: pause_game
    guards: [ initialized ]
    body: |
      if (paused) return;
      suspend_all_rooms();
      paused = true;
      return;


  - name: unpause_game
    guards: [ initialized ]
    body: |
      if (!paused) return;
      resume_all_rooms();
      paused = false;
      return;


  - name: dialog_cursor_up
    guards: [ initialized ]
    body: |
      dialog_system.dialog_cursor_up();
      return;


  - name: dialog_cursor_down
    guards: [ initialized ]
    body: |
      dialog_system.dialog_cursor_down();
      return;


  - name: dialog_is_finished
    type: bool
    guards: [ initialized ]
    body: |
      return dialog_system.dialog_is_finished();


  - name: activate_primary_action
    guards: [ initialized ]
    body: |
      // TODO: probably remove this branching logic here and have the dialog_system manage the active/deactive
      // emit closing dialog logic.  The FixedRoom2D should be "suspended"/"unsuspended" while control is handed
      // off to the dialog_system.
      if (dialog_system.a_dialog_is_active())
      {
         dialog_system.dialog_advance();
         if (dialog_system.dialog_is_finished())
         {
            emit_close_current_active_dialog_event(); //(active_dialog);
         }
      }
      else if (current_room && !current_room->get_suspended())
      {
         current_room->interact_with_item_under_cursor();
      }

      return;


  - name: emit_close_current_active_dialog_event
    guards: [ initialized, event_emitter ]
    body: |
      // TODO: probably remove this function and have all the logic surrounding "close_current_active_dialog"
      // to be handled in the dialog_system

      AllegroFlare::Elements::DialogBoxes::Base* dialog_to_close = nullptr;
      // TODO: consider having the dialog_system itself emit the event to close the dialog?
      // the exact ownership of the dialog controls is still up for clarification
      dialog_to_close = dialog_system.get_active_dialog_ref();

      std::cout << "EMITTING in FixedRoom2D emit_close_dialog_event" << std::endl;
      AllegroFlare::Prototypes::FixedRoom2D::DialogEventDatas::CloseDialog *close_dialog_event_data = new
        AllegroFlare::Prototypes::FixedRoom2D::DialogEventDatas::CloseDialog(dialog_to_close);
      event_emitter->emit_game_event(AllegroFlare::GameEvent(
         AllegroFlare::Prototypes::FixedRoom2D::EventNames::DIALOG_EVENT_NAME,
         close_dialog_event_data
      ));
      return;
    body_dependency_symbols:
      - AllegroFlare::Prototypes::FixedRoom2D::DialogEventDatas::CloseDialog


  - name: move_cursor_up
    guards: [ initialized ]
    body: |
      dialog_system.move_cursor_up();
      return;


  - name: move_cursor_down
    guards: [ initialized ]
    body: |
      dialog_system.move_cursor_down();
      return;


  - name: move_cursor_left
    guards: [ initialized ]
    body: |
      return;


  - name: move_cursor_right
    guards: [ initialized ]
    body: |
      return;


  - name: move_cursor
    parameters:
      - name: distance_x
        type: float
        default_argument: 0.0
      - name: distance_y
        type: float
        default_argument: 0.0
    guards: [ initialized ]
    body: |
      if (current_room && !current_room->get_suspended())
      { 
         std::vector<AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*> entities_in_current_room =
             get_entities_in_current_room();
         current_room->move_cursor(distance_x, distance_y, entities_in_current_room);
      }
      return;


dependencies:


  - symbol: AllegroFlare::Prototypes::FixedRoom2D::Cursor
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/Cursor.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::EntityFactory
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/EntityFactory.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::ScriptRunner
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::InteractionEventData
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData.hpp ]
  - symbol: AllegroFlare::Elements::Inventory
    headers: [ AllegroFlare/Elements/Inventory.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxRenderer
    headers: [ AllegroFlare/Elements/DialogBoxRenderer.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxFactory
    headers: [ AllegroFlare/Elements/DialogBoxFactory.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::InitiateDialog
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/InitiateDialog.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectItem
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectItem.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectEvidence
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectEvidence.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::EnterRoom
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/EnterRoom.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::RoomFactory
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/RoomFactory.hpp ]
  - symbol: AllegroFlare::Inventory
    headers: [ AllegroFlare/Inventory.hpp ]
  - symbol: AllegroFlare::InventoryIndex
    headers: [ AllegroFlare/InventoryIndex.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::ConfigurationLoader
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::ConfigurationFactory
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::Configuration
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/Configuration.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::AudioController
    headers: [ AllegroFlare/AudioController.hpp ]
  - symbol: AllegroFlare::GameEvent
    headers: [ AllegroFlare/GameEvent.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::Room
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/Room.hpp ]
  - symbol: AllegroFlare::GameEventDatas::Base
    headers: [ AllegroFlare/GameEventDatas/Base.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::Base
    headers: [ AllegroFlare/Elements/DialogBoxes/Base.hpp ]
  - symbol: AllegroFlare::Shader
    headers: [ AllegroFlare/Shader.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::YouGotEvidence
    headers: [ AllegroFlare/Elements/DialogBoxes/YouGotEvidence.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::Entities::Base
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::Script
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/Script.hpp ]
  - symbol: 'AllegroFlare::Color::'
    headers: [ AllegroFlare/Color.hpp ]
  - symbol: 'AllegroFlare::Prototypes::FixedRoom2D::EventNames::'
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/EventNames.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::DialogEventDatas::CloseDialog
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CloseDialog.hpp ]
  - symbol: AllegroFlare::InventoryDictionaryItems::WithAttributes
    headers: [ AllegroFlare/InventoryDictionaryItems/WithAttributes.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::DialogSystem
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/DialogSystem.hpp ]
  
  
