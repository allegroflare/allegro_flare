properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: audio_controller
    type: AllegroFlare::AudioController*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: af_inventory
    type: AllegroFlare::Inventory
    init_with: '{}'

  - name: inventory_window
    type: AllegroFlare::Elements::Inventory
    init_with: '{}'

  - name: flags
    type: AllegroFlare::Inventory
    init_with: '{}'

  - name: entity_dictionary
    type: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*>
    init_with: '{}'

  - name: script_dictionary
    type: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Script>
    init_with: '{}'

  - name: script_runner
    type: AllegroFlare::Prototypes::FixedRoom2D::ScriptRunner
    init_with: '{}'

  - name: entity_collection_helper
    type: AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper
    init_with: '{}'

  - name: room
    type: AllegroFlare::Prototypes::FixedRoom2D::Room
    init_with: '{}'

  - name: initialized
    type: bool
    init_with: false

  - name: active_dialog
    type: AllegroFlare::Elements::DialogBoxes::Base*
    init_with: nullptr


functions:


  - name: set_font_bin
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
    body: |
      room.set_font_bin(font_bin);
      this->font_bin = font_bin;
      return;


  - name: initialize
    guards: [ (!initialized), bitmap_bin, event_emitter, audio_controller ]
    body: |
      AllegroFlare::Prototypes::FixedRoom2D::EntityFactory entity_factory(bitmap_bin);

      inventory_window.set_font_bin(font_bin);
      inventory_window.set_bitmap_bin(bitmap_bin);
      inventory_window.set_af_inventory(&af_inventory);

      entity_dictionary = {
         { "door", entity_factory.create_entity("download-door-png-transparent-image-and-clipart-3.png", 1400, 800, 0.85) },
         { "chair", entity_factory.create_entity("wooden-chair-png-transparent-image-pngpix-0.png", 600, 800, 0.168) },
         { "table", entity_factory.create_entity(
               "download-wooden-table-png-image-png-image-pngimg-3.png", 900, 800, 0.4, "table", "spawn_dialog") },
         { "keys", entity_factory.create_entity(
               "key-keychain-house-keys-door-photo-pixabay-25.png", 940, 590, 0.05, "keys", "signal_hello") },
      };

      script_dictionary = {
         { "signal_hello", AllegroFlare::Prototypes::FixedRoom2D::Script({"SIGNAL: Hello!"}) },
         { "spawn_dialog", AllegroFlare::Prototypes::FixedRoom2D::Script({"DIALOG: This was a scripted dialog!"}) },
      };

      entity_collection_helper.set_entity_dictionary(&entity_dictionary);

      room.set_font_bin(font_bin);
      room.set_event_emitter(event_emitter);
      room.set_entity_dictionary(&entity_dictionary);
      room.initialize();

      script_runner.set_audio_controller(audio_controller);
      script_runner.set_af_inventory(&af_inventory);
      script_runner.set_event_emitter(event_emitter);
      script_runner.set_inventory_window(&inventory_window);
      script_runner.set_script_dictionary(&script_dictionary);
      script_runner.set_flags(&flags);

      initialized = true;
      return;
    body_dependency_symbols:
      - AllegroFlare::Prototypes::FixedRoom2D::EntityFactory


  - name: update
    body: |
      room.update();
      if (active_dialog) active_dialog->update();
      inventory_window.update();
      return;


  - name: render
    body: |
      room.render();
      if (active_dialog)
      {
         AllegroFlare::Elements::DialogBoxRenderer dialog_box_renderer(font_bin, bitmap_bin, active_dialog);
         dialog_box_renderer.render();
      }
      inventory_window.render();

      return;
    body_dependency_symbols:
      - AllegroFlare::Color::*
      - AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper
      - AllegroFlare::Elements::DialogBoxRenderer


  - name: process_interaction_event
    parameters:
      - name: interaction_event_data
        type: AllegroFlare::Prototypes::FixedRoom2D::InteractionEventData*
        default_argument: nullptr
    body: |
      std::string name = entity_collection_helper.find_dictionary_name_of_entity_that_cursor_is_now_over();
      if (name.empty())
      {
         // TODO: spawn some dialog that says "there is nothing here"
      }
      else
      {
         AllegroFlare::Prototypes::FixedRoom2D::Entities::Base* interacting_entity = entity_dictionary.at(name);
         std::string script = interacting_entity->get_on_cursor_interact_script_name();
         script_runner.load_script_by_dictionary_name(script);
         script_runner.play_current_script_line();
      }
      return;


  - name: process_script_event
    parameters:
      - name: script_event_data
        type: AllegroFlare::Prototypes::FixedRoom2D::SpawnDialogEventData*
        default_argument: nullptr
    body: |
      if (!script_event_data)
      {
         // weird error;
         std::cout << "A weird error occurred. Expecting script_event_data to be valid but it is nullptr" << std::endl;
         return;
      }
      else
      {
         spawn_dialog_box();
         //AllegroFlare::Prototypes::FixedRoom2D::Entities::Base* interacting_entity = entity_dictionary.at(name);
         //std::string script = interacting_entity->get_on_cursor_interact_script_name();
         //script_runner.load_script_by_dictionary_name(script);
         //script_runner.play_current_script_line();
      }
      return;


  - name: show_inventory
    body: |
      inventory_window.show();
      room.suspend();
      return;


  - name: hide_inventory
    body: |
      inventory_window.hide();
      room.resume();
      return;


  - name: toggle_inventory
    body: |
      if (inventory_window.get_active()) hide_inventory();
      else show_inventory();
      return;


  - name: spawn_dialog_box
    body: |
      if (inventory_window.get_active()) return;

      AllegroFlare::Elements::DialogBoxFactory dialog_box_factory;

      if (active_dialog) delete active_dialog;
      {
         active_dialog = dialog_box_factory.create_basic_test_dialog();
         room.suspend();
      }

      return;
    body_dependency_symbols:
      - AllegroFlare::Elements::DialogBoxFactory


  - name: advance_dialog
    body: |
      if (inventory_window.get_active()) return;

      if (!active_dialog) return;
      if (active_dialog->is_type("Basic"))
      {
         dynamic_cast<AllegroFlare::Elements::DialogBoxes::Basic*>(active_dialog)->next_page();
      }
      return;


  - name: dialog_is_finished
    type: bool
    body: |
      if (!active_dialog) return true;
      if (active_dialog->is_type("Basic"))
      {
         return dynamic_cast<AllegroFlare::Elements::DialogBoxes::Basic*>(active_dialog)->get_finished();
      }
      return true;


  - name: shutdown_dialog
    type: bool
    body: |
      if (!active_dialog) return false;
      delete active_dialog;
      active_dialog = nullptr;
      return true;


  - name: activate_primary_action
    body: |
      if (inventory_window.get_active())
      {
         // inventory_window.select_item_currently_under_cursor();
      }
      else if (active_dialog)
      {
         advance_dialog();
         if (dialog_is_finished())
         {
            shutdown_dialog();
            room.resume();
         }
      }
      else if (!room.get_suspended())
      {
         room.interact_with_item_under_cursor();
      }

      return;


  - name: move_cursor_up
    body: |
      if (inventory_window.get_active()) inventory_window.move_cursor_up();
      return;


  - name: move_cursor_down
    body: |
      if (inventory_window.get_active()) inventory_window.move_cursor_down();
      return;


  - name: move_cursor_left
    body: |
      if (inventory_window.get_active()) inventory_window.move_cursor_left();
      return;


  - name: move_cursor_right
    body: |
      if (inventory_window.get_active()) inventory_window.move_cursor_right();
      return;


  - name: move_cursor
    parameters:
      - name: distance_x
        type: float
        default_argument: 0.0
      - name: distance_y
        type: float
        default_argument: 0.0
    body: |
      if (!room.get_suspended())
      { 
         room.move_cursor(distance_x, distance_y);
      }
      return;


dependencies:


  - symbol: AllegroFlare::Prototypes::FixedRoom2D::Cursor
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/Cursor.hpp ]
  - symbol: AllegroFlare::Color::*
    headers: [ AllegroFlare/Color.hpp ]
  - symbol: AllegroFlare::BitmapBin*
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::EventEmitter*
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::AudioController*
    headers: [ AllegroFlare/AudioController.hpp ]
  - symbol: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Room*>
    headers: [ map, string, AllegroFlare/Prototypes/FixedRoom2D/Room.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::Room
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/Room.hpp ]
  - symbol: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*>
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::EntityFactory
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/EntityFactory.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp ]
  - symbol: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Script>
    headers: [ map, AllegroFlare/Prototypes/FixedRoom2D/Script.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::ScriptRunner
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::InteractionEventData*
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData.hpp ]
  - symbol: AllegroFlare::Elements::Inventory
    headers: [ AllegroFlare/Elements/Inventory.hpp ]
  - symbol: AllegroFlare::Inventory
    headers: [ AllegroFlare/Inventory.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::Base*
    headers: [ AllegroFlare/Elements/DialogBoxes/Base.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxRenderer
    headers: [ AllegroFlare/Elements/DialogBoxRenderer.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxFactory
    headers: [ AllegroFlare/Elements/DialogBoxFactory.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::SpawnDialogEventData*
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/SpawnDialogEventData.hpp ]

  
