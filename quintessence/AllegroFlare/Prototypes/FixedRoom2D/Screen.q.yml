parent_classes:


  - class: AllegroFlare::Screens::Base
    scope: public
    init_with: '"Prototypes::FixedRoom2D::Screen"'


properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    setter: false

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    setter: false

  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true
    setter: false

  - name: audio_controller
    type: AllegroFlare::AudioController*
    init_with: nullptr
    constructor_arg: true
    setter: false

  - name: fixed_room_2d
    type: AllegroFlare::Prototypes::FixedRoom2D::FixedRoom2D
    init_with: '{}'
    getter_ref: true

  - name: initialized
    type: bool
    init_with: false


functions:


  - name: set_bitmap_bin
    parameters:
      - name: bitmap_bin
        type: AllegroFlare::BitmapBin*
        default_argument: nullptr
    body: |
      this->bitmap_bin = bitmap_bin;
      fixed_room_2d.set_bitmap_bin(bitmap_bin);
      return;


  - name: set_font_bin
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
    body: |
      this->font_bin = font_bin;
      fixed_room_2d.set_font_bin(font_bin);
      return;


  - name: set_event_emitter
    parameters:
      - name: event_emitter
        type: AllegroFlare::EventEmitter*
        default_argument: nullptr
    body: |
      this->event_emitter = event_emitter;
      fixed_room_2d.set_event_emitter(event_emitter);
      return;


  - name: set_audio_controller
    parameters:
      - name: audio_controller
        type: AllegroFlare::AudioController*
        default_argument: nullptr
    body: |
      this->audio_controller = audio_controller;
      fixed_room_2d.set_audio_controller(audio_controller);
      return;


  - name: initialize
    guards: [ (!initialized), bitmap_bin, font_bin, event_emitter, audio_controller ]
    body: |
      fixed_room_2d.set_bitmap_bin(bitmap_bin);
      fixed_room_2d.set_font_bin(font_bin);
      fixed_room_2d.set_event_emitter(event_emitter);
      fixed_room_2d.set_audio_controller(audio_controller);
      fixed_room_2d.initialize();

      initialized = true;
      return;


  - name: load_gametest_configuration_and_start
    guards: [ initialized ]
    body: |
      fixed_room_2d.load_gametest_configuration_and_start();
      return;


  - name: load_game_configuration_and_start
    parameters:
      - name: configuration
        type: AllegroFlare::Prototypes::FixedRoom2D::Configuration
        default_argument: '{}'
    guards: [ initialized ]
    body: |
      fixed_room_2d.load_from_configuration_and_start(configuration);
      return;


  - name: on_activate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      emit_event_to_set_input_hints();
      return;


  - name: game_event_func
    virtual: true
    override: true
    parameters:
      - name: game_event
        type: AllegroFlare::GameEvent*
        default_argument: nullptr
    guards: [ initialized, game_event ]
    body: |
      if (fixed_room_2d.is_subscribed_to_game_event_name(game_event->get_type()))
      {
         fixed_room_2d.process_subscribed_to_game_event(game_event);
      };
      return;


  - name: on_deactivate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      return;


  - name: primary_timer_func
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      fixed_room_2d.update();
      fixed_room_2d.render();
      return;


  - name: key_char_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      event_emitter->emit_set_input_hints_bar_event({ "BAR" });
      return;

      float cursor_speed = 10.0f;
      switch(ev->keyboard.keycode)
      {
         case ALLEGRO_KEY_UP:
            fixed_room_2d.move_cursor(0, -cursor_speed);
            fixed_room_2d.move_cursor_up();
         break;

         case ALLEGRO_KEY_DOWN:
            fixed_room_2d.move_cursor(0, cursor_speed);
            fixed_room_2d.move_cursor_down();
         break;

         case ALLEGRO_KEY_LEFT:
            fixed_room_2d.move_cursor(-cursor_speed, 0);
            fixed_room_2d.move_cursor_left();
         break;

         case ALLEGRO_KEY_RIGHT:
            fixed_room_2d.move_cursor(cursor_speed, 0);
            fixed_room_2d.move_cursor_right();
         break;

         case ALLEGRO_KEY_ENTER:
            fixed_room_2d.activate_primary_action();
         break;

         case ALLEGRO_KEY_I:
            fixed_room_2d.toggle_inventory();
            emit_event_to_set_input_hints();
         break;

         case ALLEGRO_KEY_P:
            event_emitter->emit_game_event(AllegroFlare::GameEvent("pause_game"));
            //fixed_room_2d.pause_game();
         break;

         case ALLEGRO_KEY_U:
            event_emitter->emit_game_event(AllegroFlare::GameEvent("unpause_game"));
            //fixed_room_2d.unpause_game();
         break;
      }
      return;


  - name: emit_event_to_set_input_hints
    private: true
    guards: [ initialized ]
    body: |
      // TODO: logic to decide if it should emit hints for inventory controls or room controls
      return;


  - name: emit_event_to_set_input_hints_bar_to_inventory_controls
    private: true
    guards: [ initialized ]
    body: |
      // TODO: update the tokens for the inventory controls
      event_emitter->emit_set_input_hints_bar_event({ "FOO" });
      return;


  - name: emit_event_to_set_input_hints_bar_to_room_controls
    private: true
    guards: [ initialized ]
    body: |
      // TODO: update the tokens for the inventory controls
      event_emitter->emit_set_input_hints_bar_event({ "BAR" });
      return;


dependencies:


  - symbol: ALLEGRO_EVENT*
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::BitmapBin*
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::EventEmitter*
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::RoomDictionary
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/RoomDictionary.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::FixedRoom2D
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D.hpp ]
  - symbol: AllegroFlare::GameEvent*
    headers: [ AllegroFlare/GameEvent.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::EventNames::INTERACTION_EVENT_NAME
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/EventNames.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::InteractionEventData*
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData.hpp ]
  - symbol: AllegroFlare::AudioController*
    headers: [ AllegroFlare/AudioController.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::Configuration
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/Configuration.hpp ]


