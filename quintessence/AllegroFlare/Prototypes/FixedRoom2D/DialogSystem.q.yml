properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: active_dialog
    type: AllegroFlare::Elements::DialogBoxes::Base*
    init_with: nullptr
    getter_ref: true

  - name: initialized
    type: bool
    init_with: false


functions:


  - name: initialize
    guards:
       - (!initialized)
       - al_is_system_installed()
       - al_is_primitives_addon_initialized()
       - al_is_font_addon_initialized()
       - bitmap_bin
       - font_bin
       - event_emitter
    body: |
      // TODO: enable setting font_bin, bitmap_bin, event_emitter before initialization
      initialized = true;
      return;


  - name: update
    guards: [ initialized ]
    body: |
      if (active_dialog) active_dialog->update();
      return;


  - name: a_dialog_is_active
    type: bool
    body: |
      return (active_dialog != nullptr);


  - name: render
    type: void
    guards: [ initialized ]
    body: |
      // render the active dialog
      if (active_dialog)
      {
         AllegroFlare::Elements::DialogBoxRenderer dialog_box_renderer(font_bin, bitmap_bin, active_dialog);
         dialog_box_renderer.render();
      }
    body_dependency_symbols:
      - AllegroFlare::Vec2D
      - al_draw_rounded_rectangle
      - AllegroFlare::Elements::DialogBoxRenderer
      - al_draw_text


  - name: process_game_event
    parameters:
      - name: game_event
        type: AllegroFlare::GameEvent*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      // TODO: convert this to a set of subscribed-to events
      if (game_event->is_type(AllegroFlare::Prototypes::FixedRoom2D::EventNames::DIALOG_EVENT_NAME))
      {
         process_dialog_event(game_event->get_data());
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::Prototypes::FixedRoom2D::EventNames


  - name: process_script_event
    type: bool
    parameters:
      - name: game_event_data
        type: AllegroFlare::GameEventDatas::Base*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      bool a_new_dialog_was_spawned = false;
      using namespace AllegroFlare::Prototypes::FixedRoom2D;

      if (!game_event_data)
      {
         std::cout << "A weird error occurred. Expecting script_event_data to be valid but it is nullptr" << std::endl;
         return false;
      }
      else
      {
         if (game_event_data->is_type(ScriptEventDatas::SpawnDialog::TYPE))
         {
            AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::SpawnDialog* spawn_dialog_event_data =
                static_cast<AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::SpawnDialog*>(game_event_data);
            std::vector<std::string> pages = spawn_dialog_event_data->get_dialog_pages();

            AllegroFlare::Elements::DialogBoxFactory dialog_box_factory;
            if (active_dialog) delete active_dialog;

            active_dialog = dialog_box_factory.create_basic_dialog(pages);
            a_new_dialog_was_spawned = true;
         }
         else if (game_event_data->is_type(ScriptEventDatas::CollectItem::TYPE))
         {
            AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectItem* collect_item_event_data =
                static_cast<AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectItem*>(game_event_data);

            AllegroFlare::Elements::DialogBoxFactory dialog_box_factory;
            if (active_dialog) delete active_dialog; // TODO: address concern that this could clobber an active dialog

            // TODO: add an item to the inventory here (currently it is added at script event assembly and emit time)
            // HERE:
            // Use "AllegroFlare::InventoryDictionaryItems::WithAttributes" class InventoryItem
            // to extract properties to create dialog

            active_dialog = dialog_box_factory.create_you_got_an_item_dialog(
                  "Keys",
                  "key-keychain-house-keys-door-photo-pixabay-25.png"
               );
            a_new_dialog_was_spawned = true;
         }
         else if (game_event_data->is_type(ScriptEventDatas::CollectEvidence::TYPE))
         {
            // HERE: blast this code and replace with code to emit a CreateYouGotNewEvidenceDialog
            // note this logic will be moved to FixedRoom2D/FixedRoom2D

            AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectEvidence* collect_evidence_event_data =
                static_cast<AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectEvidence*>(game_event_data);

            AllegroFlare::Elements::DialogBoxFactory dialog_box_factory;
            if (active_dialog) delete active_dialog; // TODO: address concern that this could clobber an active dialog

            // TODO: add an item to the evidence (currently it is added at script event assembly and emit time)

            std::string item_name = collect_evidence_event_data->get_item_dictionary_name_to_collect();
            std::string item_image = "evidence-placeholder-480x300.png";

            // TODO: create new dialog for collecting evidence
            active_dialog = dialog_box_factory.create_you_got_new_evidence_dialog(
                  item_name,
                  item_image
               );
            a_new_dialog_was_spawned = true;
         }
         else
         {
            std::cout << "[FixedRoom2D::DialogSystem::process_script_event]: error: "
                      << "Unknown game_event_data type "
                      << "\"" << game_event_data->get_type() << "\""
                      << std::endl;
         }
      }
      return a_new_dialog_was_spawned;
    body_dependency_symbols:
      - AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::SpawnDialog
      - AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectEvidence
      - AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectItem
      - AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::EnterRoom
      - AllegroFlare::InventoryDictionaryItems::WithAttributes
      - AllegroFlare::Elements::DialogBoxFactory


  - name: process_dialog_event
    xprivate: true
    parameters:
      - name: game_event_data
        type: AllegroFlare::GameEventDatas::Base*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      using namespace AllegroFlare::Prototypes::FixedRoom2D;

      if (!game_event_data)
      {
         std::cout << "ERROR: A weird error occurred. In FixedRoom2D/DialogSystem::process_dialog_event, expecting "
                   << "script_event_data to be valid but it is nullptr" << std::endl;
         return;
      }
      else
      {
         if (game_event_data->is_type(DialogEventDatas::CloseDialog::TYPE))
         {
            shutdown_dialog();
            // TODO: if there are no more dialogs, emit a "dialog_switch_out" (or something similar) event.
            // A "dialog_switch_out" event would do the following:
            // - resume_all_rooms()
            // - if (script_runner.get_paused_for_dialog_to_finish()) script_runner.play_or_resume();

            // TODO:
            // emit_dialog_system_switch_out_event() (if not currently active)
         }
         if (game_event_data->is_type(DialogEventDatas::CreateYouGotEvidenceDialog::TYPE))
         {
            // HERE:
            if (active_dialog) delete active_dialog; // TODO: address concern that this could clobber an active dialog

            DialogEventDatas::CreateYouGotEvidenceDialog *dialog_event_data =
               static_cast<DialogEventDatas::CreateYouGotEvidenceDialog*>(game_event_data);

            spawn_you_got_new_evidence_dialog(
               dialog_event_data->get_evidence_name(),
               dialog_event_data->get_evidence_bitmap_identifier()
            );

            // TODO:
            // emit_dialog_system_switch_in_event() (if not currently active, or, possibly do it in the function)
         }
         else
         {
            std::cout << "[FixedRoom2D::DialogSystem::process_dialog_event]: error: "
                      << "Unknown game_event_data type "
                      << "\"" << game_event_data->get_type() << "\""
                      << std::endl;
         }
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::Prototypes::FixedRoom2D::DialogEventDatas::CloseDialog
      - AllegroFlare::Prototypes::FixedRoom2D::DialogEventDatas::CreateYouGotEvidenceDialog


  - name: emit_dialog_switch_in_event
    body: |
      event_emitter->emit_game_event(AllegroFlare::GameEvent(
         AllegroFlare::Prototypes::FixedRoom2D::EventNames::EVENT_DIALOG_SWITCH_IN_NAME
      ));
      return;


  - name: emit_dialog_switch_out_event
    body: |
      event_emitter->emit_game_event(AllegroFlare::GameEvent(
         AllegroFlare::Prototypes::FixedRoom2D::EventNames::EVENT_DIALOG_SWITCH_OUT_NAME
      ));
      return;


  - name: spawn_you_got_new_evidence_dialog
    parameters:
      - name: evidence_name
        type: std::string
        default_argument: '"[unset-evidence_name]"'
      - name: evidence_bitmap_identifier
        type: std::string
        default_argument: '"[unset-evidence_bitmap_identifier]"'
    body: |
      // HERE:
      AllegroFlare::Elements::DialogBoxFactory dialog_box_factory;
      if (active_dialog) delete active_dialog; // TODO: address concern that this could clobber an active dialog

      active_dialog = dialog_box_factory.create_you_got_new_evidence_dialog(
            evidence_name,
            evidence_bitmap_identifier
         );

      // TODO:
      // emit_dialog_system_switch_in_event() (if not currently active)
      return;


  - name: dialog_advance
    guards: [ initialized ]
    body: |
      //if (inventory_window.get_active()) return;
      if (!active_dialog) return;

      // TODO: modify this branching notation to a map<string, function>
      // TODO: account for different dialog types
      if (active_dialog->is_type(AllegroFlare::Elements::DialogBoxes::Basic::TYPE))
      {
         dynamic_cast<AllegroFlare::Elements::DialogBoxes::Basic*>(active_dialog)->advance();
      }
      else if (active_dialog->is_type(AllegroFlare::Elements::DialogBoxes::YouGotAnItem::TYPE))
      {
         dynamic_cast<AllegroFlare::Elements::DialogBoxes::YouGotAnItem*>(active_dialog)->advance();
      }
      else if (active_dialog->is_type(AllegroFlare::Elements::DialogBoxes::YouGotEvidence::TYPE))
      {
         dynamic_cast<AllegroFlare::Elements::DialogBoxes::YouGotEvidence*>(active_dialog)->advance();
      }
      else
      {
         // TODO: test this condition
         std::stringstream error_message;
         error_message << "AllegroFlare::Prototypes::FixedRoom2D::FixedRoom2D::dialog_advance: ERROR: "
                       << "Unrecognized dialog of type \"" << active_dialog->get_type() << "\". Aborting.";
         throw std::runtime_error(error_message.str());
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::Elements::DialogBoxes::Basic
      - AllegroFlare::Elements::DialogBoxes::YouGotAnItem
      - AllegroFlare::Elements::DialogBoxes::YouGotEvidence


  - name: dialog_cursor_up
    guards: [ initialized ]
    body: |
      //if (inventory_window.get_active()) return;
      if (!active_dialog) return;

      // TODO: modify this branching notation to a map<string, function>
      // TODO: account for different dialog types
      if (active_dialog->is_type(AllegroFlare::Elements::DialogBoxes::Basic::TYPE))
      {
         // do nothing
      }
      else
      {
         // TODO: test this condition
         std::stringstream error_message;
         error_message << "AllegroFlare::Prototypes::FixedRoom2D::FixedRoom2D::dialog_cursor_up: ERROR: "
                       << "Unrecognized dialog of type \"" << active_dialog->get_type() << "\". Aborting.";
         throw std::runtime_error(error_message.str());
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::Elements::DialogBoxes::Basic


  - name: dialog_cursor_down
    guards: [ initialized ]
    body: |
      //if (inventory_window.get_active()) return;
      if (!active_dialog) return;

      // TODO: modify this branching notation to a map<string, function>
      // TODO: account for different dialog types
      if (active_dialog->is_type(AllegroFlare::Elements::DialogBoxes::Basic::TYPE))
      {
         // do nothing
      }
      else
      {
         // TODO: test this condition
         std::stringstream error_message;
         error_message << "AllegroFlare::Prototypes::FixedRoom2D::FixedRoom2D::dialog_cursor_down: ERROR: "
                       << "Unrecognized dialog of type \"" << active_dialog->get_type() << "\". Aborting.";
         throw std::runtime_error(error_message.str());
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::Elements::DialogBoxes::Basic


  - name: dialog_is_finished
    type: bool
    guards: [ initialized ]
    body: |
      if (!active_dialog) return true;

      // TODO: modify this branching notation to a map<string, function>
      // TODO: account for different dialog types
      if (active_dialog->is_type(AllegroFlare::Elements::DialogBoxes::Basic::TYPE))
      {
         return dynamic_cast<AllegroFlare::Elements::DialogBoxes::Basic*>(active_dialog)->get_finished();
      }
      else if (active_dialog->is_type(AllegroFlare::Elements::DialogBoxes::YouGotAnItem::TYPE))
      {
         return dynamic_cast<AllegroFlare::Elements::DialogBoxes::YouGotAnItem*>(active_dialog)->get_finished();
      }
      else if (active_dialog->is_type(AllegroFlare::Elements::DialogBoxes::YouGotEvidence::TYPE))
      {
         return dynamic_cast<AllegroFlare::Elements::DialogBoxes::YouGotEvidence*>(active_dialog)->get_finished();
      }
      else
      {
         // TODO: test this condition
         std::stringstream error_message;
         error_message << "AllegroFlare::Prototypes::FixedRoom2D::FixedRoom2D::dialog_is_finished: ERROR: "
                       << "Unrecognized dialog of type \"" << active_dialog->get_type() << "\". Aborting.";
         throw std::runtime_error(error_message.str());
      }
      return true;
    body_dependency_symbols:
      - AllegroFlare::Elements::DialogBoxes::Basic
      - AllegroFlare::Elements::DialogBoxes::YouGotAnItem
      - AllegroFlare::Elements::DialogBoxes::YouGotEvidence


  - name: shutdown_dialog
    type: bool
    guards: [ initialized ]
    body: |
      std::cout << "- in DialogSystem::shutdown_dialog()" << std::endl;
      if (!active_dialog) return false;
      delete active_dialog;
      active_dialog = nullptr;
      return true;


  - name: move_cursor_up
    guards: [ initialized ]
    body: |
      //if (inventory_window.get_active()) inventory_window.move_cursor_up();
      if (active_dialog) dialog_cursor_up();
      return;


  - name: move_cursor_down
    guards: [ initialized ]
    body: |
      //if (inventory_window.get_active()) inventory_window.move_cursor_down();
      if (active_dialog) dialog_cursor_down();
      return;


  - name: obtain_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Inter-Medium.ttf -52");


dependencies:


  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_draw_text
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_draw_rounded_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Vec2D
    headers: [ AllegroFlare/Vec2D.hpp ]

  - symbol: AllegroFlare::Prototypes::FixedRoom2D::EventNames
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/EventNames.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::DialogEventDatas::CloseDialog
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CloseDialog.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::YouGotEvidence
    headers: [ AllegroFlare/Elements/DialogBoxes/YouGotEvidence.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::Base
    headers: [ AllegroFlare/Elements/DialogBoxes/Base.hpp ]
  - symbol: AllegroFlare::GameEvent
    headers: [ AllegroFlare/GameEvent.hpp ]
  - symbol: AllegroFlare::GameEventDatas::Base
    headers: [ AllegroFlare/GameEventDatas/Base.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxRenderer
    headers: [ AllegroFlare/Elements/DialogBoxRenderer.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::Basic
    headers: [ AllegroFlare/Elements/DialogBoxes/Basic.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::YouGotAnItem
    headers: [ AllegroFlare/Elements/DialogBoxes/YouGotAnItem.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::YouGotAnItem
    headers: [ AllegroFlare/Elements/DialogBoxes/YouGotAnItem.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::SpawnDialog
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/SpawnDialog.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectEvidence
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectEvidence.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectItem
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectItem.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::EnterRoom
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/EnterRoom.hpp ]
  - symbol: AllegroFlare::InventoryDictionaryItems::WithAttributes
    headers: [ AllegroFlare/InventoryDictionaryItems/WithAttributes.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxFactory
    headers: [ AllegroFlare/Elements/DialogBoxFactory.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::DialogEventDatas::CreateYouGotEvidenceDialog
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotEvidenceDialog.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]


