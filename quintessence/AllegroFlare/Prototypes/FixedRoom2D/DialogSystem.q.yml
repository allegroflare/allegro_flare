properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: active_dialog
    type: AllegroFlare::Elements::DialogBoxes::Base*
    init_with: nullptr

  - name: initialized
    type: bool
    init_with: false


functions:


  - name: update
    guards: [ initialized ]
    body: |
      if (active_dialog) active_dialog->update();
      return;


  - name: render
    type: void
    guards: [ al_is_system_installed(), al_is_primitives_addon_initialized(), al_is_font_addon_initialized(), font_bin ]
    body: |
      // render the active dialog
      if (active_dialog)
      {
         AllegroFlare::Elements::DialogBoxRenderer dialog_box_renderer(font_bin, bitmap_bin, active_dialog);
         dialog_box_renderer.render();
      }
    body_dependency_symbols:
      - AllegroFlare::Vec2D
      - al_draw_rounded_rectangle
      - AllegroFlare::Elements::DialogBoxRenderer
      - al_draw_text


  - name: process_game_event
    xprivate: true
    parameters:
      - name: game_event
        type: AllegroFlare::GameEvent*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      //if (game_event->is_type(AllegroFlare::Prototypes::FixedRoom2D::EventNames::INTERACTION_EVENT_NAME))
      //{
         //process_interaction_event(game_event->get_data());
      //}
      //else if (game_event->is_type(AllegroFlare::Prototypes::FixedRoom2D::EventNames::SCRIPT_EVENT_NAME))
      //{
         //process_script_event(game_event->get_data());
      //}
      if (game_event->is_type(AllegroFlare::Prototypes::FixedRoom2D::EventNames::DIALOG_EVENT_NAME))
      {
         process_dialog_event(game_event->get_data());
      }
      //else if (game_event->is_type("unpause_game"))
      //{
         //unpause_game();
      //}
      //else if (game_event->is_type("pause_game"))
      //{
         //pause_game();
      //}
      else
      {
         std::cout << "[FixedRoom2D::FixedRoom2D::process_subscribed_to_game_event]: "
                   << "error: unexpected game_event type "
                   << "\"" << game_event->get_type() << "\". Doing nothing (except outputting this error)."
                   << std::endl;
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::Prototypes::FixedRoom2D::EventNames


  - name: process_dialog_event
    private: true
    parameters:
      - name: game_event_data
        type: AllegroFlare::GameEventDatas::Base*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      using namespace AllegroFlare::Prototypes::FixedRoom2D;

      if (!game_event_data)
      {
         std::cout << "ERROR: A weird error occurred. In FixedRoom2D/FixedRoom2D::process_dialog_event, sxpecting "
                   << "script_event_data to be valid but it is nullptr" << std::endl;
         return;
      }
      else
      {
         if (game_event_data->is_type(DialogEventDatas::CloseDialog::TYPE))
         {
            DialogEventDatas::CloseDialog* close_dialog_event_data =
               static_cast<DialogEventDatas::CloseDialog*>(game_event_data);

            // HERE:
            // TODO: vaildate active_dialog is dialog in event_data (TODO in the future: ensure it is a dialog
            //   in the stack of dialogs.)
            shutdown_dialog();
            // NOTE: artifact from when dialog code was in FixedRoom2D/FixedRoom2D:
            // resume_all_rooms();
            // NOTE: artifact from when dialog code was in FixedRoom2D/FixedRoom2D:
            //if (script_runner.get_paused_for_dialog_to_finish()) script_runner.play_or_resume();
         }
         else
         {
            std::cout << "[FixedRoom2D::FixedRoom2D::process_dialog_event]: error: "
                      << "Unknown game_event_data type "
                      << "\"" << game_event_data->get_type() << "\""
                      << std::endl;
         }
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::Prototypes::FixedRoom2D::DialogEventDatas::CloseDialog


  - name: dialog_advance
    guards: [ initialized ]
    body: |
      //if (inventory_window.get_active()) return;
      if (!active_dialog) return;

      // TODO: modify this branching notation to a map<string, function>
      // TODO: account for different dialog types
      if (active_dialog->is_type(AllegroFlare::Elements::DialogBoxes::Basic::TYPE))
      {
         dynamic_cast<AllegroFlare::Elements::DialogBoxes::Basic*>(active_dialog)->advance();
      }
      else if (active_dialog->is_type(AllegroFlare::Elements::DialogBoxes::YouGotAnItem::TYPE))
      {
         dynamic_cast<AllegroFlare::Elements::DialogBoxes::YouGotAnItem*>(active_dialog)->advance();
      }
      else if (active_dialog->is_type(AllegroFlare::Elements::DialogBoxes::YouGotEvidence::TYPE))
      {
         dynamic_cast<AllegroFlare::Elements::DialogBoxes::YouGotEvidence*>(active_dialog)->advance();
      }
      else
      {
         // TODO: test this condition
         std::stringstream error_message;
         error_message << "AllegroFlare::Prototypes::FixedRoom2D::FixedRoom2D::dialog_advance: ERROR: "
                       << "Unrecognized dialog of type \"" << active_dialog->get_type() << "\". Aborting.";
         throw std::runtime_error(error_message.str());
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::Elements::DialogBoxes::Basic
      - AllegroFlare::Elements::DialogBoxes::YouGotAnItem
      - AllegroFlare::Elements::DialogBoxes::YouGotEvidence


  - name: dialog_cursor_up
    guards: [ initialized ]
    body: |
      //if (inventory_window.get_active()) return;
      if (!active_dialog) return;

      // TODO: modify this branching notation to a map<string, function>
      // TODO: account for different dialog types
      if (active_dialog->is_type(AllegroFlare::Elements::DialogBoxes::Basic::TYPE))
      {
         // do nothing
      }
      else
      {
         // TODO: test this condition
         std::stringstream error_message;
         error_message << "AllegroFlare::Prototypes::FixedRoom2D::FixedRoom2D::dialog_cursor_up: ERROR: "
                       << "Unrecognized dialog of type \"" << active_dialog->get_type() << "\". Aborting.";
         throw std::runtime_error(error_message.str());
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::Elements::DialogBoxes::Basic


  - name: dialog_cursor_down
    guards: [ initialized ]
    body: |
      //if (inventory_window.get_active()) return;
      if (!active_dialog) return;

      // TODO: modify this branching notation to a map<string, function>
      // TODO: account for different dialog types
      if (active_dialog->is_type(AllegroFlare::Elements::DialogBoxes::Basic::TYPE))
      {
         // do nothing
      }
      else
      {
         // TODO: test this condition
         std::stringstream error_message;
         error_message << "AllegroFlare::Prototypes::FixedRoom2D::FixedRoom2D::dialog_cursor_down: ERROR: "
                       << "Unrecognized dialog of type \"" << active_dialog->get_type() << "\". Aborting.";
         throw std::runtime_error(error_message.str());
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::Elements::DialogBoxes::Basic


  - name: dialog_is_finished
    type: bool
    guards: [ initialized ]
    body: |
      if (!active_dialog) return true;

      // TODO: modify this branching notation to a map<string, function>
      // TODO: account for different dialog types
      if (active_dialog->is_type(AllegroFlare::Elements::DialogBoxes::Basic::TYPE))
      {
         return dynamic_cast<AllegroFlare::Elements::DialogBoxes::Basic*>(active_dialog)->get_finished();
      }
      else if (active_dialog->is_type(AllegroFlare::Elements::DialogBoxes::YouGotAnItem::TYPE))
      {
         return dynamic_cast<AllegroFlare::Elements::DialogBoxes::YouGotAnItem*>(active_dialog)->get_finished();
      }
      else if (active_dialog->is_type(AllegroFlare::Elements::DialogBoxes::YouGotEvidence::TYPE))
      {
         return dynamic_cast<AllegroFlare::Elements::DialogBoxes::YouGotEvidence*>(active_dialog)->get_finished();
      }
      else
      {
         // TODO: test this condition
         std::stringstream error_message;
         error_message << "AllegroFlare::Prototypes::FixedRoom2D::FixedRoom2D::dialog_is_finished: ERROR: "
                       << "Unrecognized dialog of type \"" << active_dialog->get_type() << "\". Aborting.";
         throw std::runtime_error(error_message.str());
      }
      return true;
    body_dependency_symbols:
      - AllegroFlare::Elements::DialogBoxes::Basic
      - AllegroFlare::Elements::DialogBoxes::YouGotAnItem
      - AllegroFlare::Elements::DialogBoxes::YouGotEvidence


  - name: shutdown_dialog
    type: bool
    guards: [ initialized ]
    body: |
      if (!active_dialog) return false;
      delete active_dialog;
      active_dialog = nullptr;
      return true;


  - name: move_cursor_up
    guards: [ initialized ]
    body: |
      //if (inventory_window.get_active()) inventory_window.move_cursor_up();
      if (active_dialog) dialog_cursor_up();
      return;


  - name: move_cursor_down
    guards: [ initialized ]
    body: |
      //if (inventory_window.get_active()) inventory_window.move_cursor_down();
      if (active_dialog) dialog_cursor_down();
      return;


  - name: obtain_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Inter-Medium.ttf -52");


dependencies:


  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_draw_text
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_draw_rounded_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Vec2D
    headers: [ AllegroFlare/Vec2D.hpp ]

  - symbol: AllegroFlare::Prototypes::FixedRoom2D::EventNames
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/EventNames.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::DialogEventDatas::CloseDialog
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CloseDialog.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::YouGotEvidence
    headers: [ AllegroFlare/Elements/DialogBoxes/YouGotEvidence.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::Base
    headers: [ AllegroFlare/Elements/DialogBoxes/Base.hpp ]
  - symbol: AllegroFlare::GameEvent
    headers: [ AllegroFlare/GameEvent.hpp ]
  - symbol: AllegroFlare::GameEventDatas::Base
    headers: [ AllegroFlare/GameEventDatas/Base.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxRenderer
    headers: [ AllegroFlare/Elements/DialogBoxRenderer.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::Basic
    headers: [ AllegroFlare/Elements/DialogBoxes/Basic.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::YouGotAnItem
    headers: [ AllegroFlare/Elements/DialogBoxes/YouGotAnItem.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::YouGotAnItem
    headers: [ AllegroFlare/Elements/DialogBoxes/YouGotAnItem.hpp ]


