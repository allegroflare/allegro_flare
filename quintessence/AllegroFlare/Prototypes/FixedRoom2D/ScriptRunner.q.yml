properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    setter: true
    constructor_arg: true

  - name: script_dictionary
    type: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Script>*
    init_with: nullptr
    setter: true
    constructor_arg: true

  - name: current_internally_running_script
    type: AllegroFlare::Prototypes::FixedRoom2D::Script
    init_with: ''

  - name: bool_eval_func
    type: std::function<bool(std::string, AllegroFlare::Prototypes::FixedRoom2D::ScriptRunner*, void*)>
    init_with: AllegroFlare::Prototypes::FixedRoom2D::ScriptRunner::default_bool_eval_func
    getter: true
    setter: true

  - name: bool_eval_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: script_freshly_loaded_via_OPEN_SCRIPT
    type: bool
    init_with: false
    getter: true
    setter: true

  - name: paused_for_dialog_to_finish
    type: bool
    init_with: false
    getter: true
    setter: true


todo:


  - remove setter in "paused_for_dialog_to_finish"


functions:


  - name: load_script_by_dictionary_name
    type: bool
    parameters:
      - name: script_dictionary_name
        type: std::string
        default_argument: '"[unset-script_dictionary_name]"'
    guards: [ script_dictionary ]
    body: |
      if (script_dictionary->count(script_dictionary_name) == 0)
      {
         std::stringstream available_script_names;
         available_script_names << "listing-available-item-names-not-yet-implemented";
         std::cout << "[.../FixedRoom/ScriptRunner::load_script_by_dictionary_name] error: could not load "
                   << "item from the dictionary with the name \"" << script_dictionary_name << "\". It does not exist."
                   << "The following names are listed in the dictionary: ["
                   << available_script_names.str()
                   << "]."
                   << std::endl;
         return false;
      }

      std::vector<std::string> lines_from_dictionary_listing =
         script_dictionary->at(script_dictionary_name).get_lines();
      load_script_lines(lines_from_dictionary_listing);

      return true;


  - name: load_script_lines
    type: bool
    xprivate: true
    parameters:
      - name: script_lines
        type: std::vector<std::string>
        default_argument: '{}'
    body: |
      current_internally_running_script = AllegroFlare::Prototypes::FixedRoom2D::Script(script_lines);
      current_internally_running_script.initialize();
      return true;


  - name: play_or_resume
    body: |
      paused_for_dialog_to_finish = false;
      if (current_internally_running_script.get_finished()) return;

      bool continue_directly_to_next_script_line = false;
      int continue_count = 0;

      do
      {
         std::string script_line = current_internally_running_script.get_current_line_text();
         int script_current_line_num = current_internally_running_script.get_current_line_num();
         continue_directly_to_next_script_line = parse_and_run_line(script_line, script_current_line_num);

         if (continue_directly_to_next_script_line)
         {
            if (!get_script_freshly_loaded_via_OPEN_SCRIPT())
            {
               current_internally_running_script.goto_next_line();
            }
            else
            {
               set_script_freshly_loaded_via_OPEN_SCRIPT(false);
            }
            if (current_internally_running_script.get_finished()) break;
            continue_count++;
         }

         if (continue_count > 500)
         {
            continue_directly_to_next_script_line = false;
            std::cout << "ApplicationController::play_or_resume: continued unstopped playing more than "
                      << "500 script lines without a stop. Assuming error and halting to avoid infinite loop."
                      << " That line was \"" << script_line << "\" which is on line ["
                      << script_current_line_num << "]" << std::endl;
         }
      } while (continue_directly_to_next_script_line);
      return;
    body_dependency_symbols:
      - std::cout


  - name: default_bool_eval_func
    static: true
    type: bool
    parameters:
      - name: expression
        type: std::string
        default_argument: '"[unset-expression]"'
      - name: script_runner
        type: AllegroFlare::Prototypes::FixedRoom2D::ScriptRunner*
        default_argument: nullptr
      - name: user_data
        type: void*
        default_argument: nullptr
    guards: [ (!expression.empty()), script_runner ]
    body: |
      return true;


  - name: parse_and_run_line
    xprivate: true
    type: bool
    parameters:
      - name: raw_script_line
        type: std::string
        default_argument: '"[empty-script-line]"'
      - name: line_num
        type: int
        default_argument: 0
      - name: auto_assume_uncommanded_line_is_dialog
        type: bool
        default_argument: true
    guards: [ script_dictionary, event_emitter ]
    body: |
      std::string DIALOG = "DIALOG";
      std::string GOTO_MARKER = "GOTO_MARKER";
      std::string ENTER_ROOM = "ENTER_ROOM";
      std::string MARKER = "MARKER";
      std::string SIGNAL = "SIGNAL"; // outputs text to the terminal
      std::string COLLECT = "COLLECT";
      std::string COLLECT_EVIDENCE = "COLLECT_EVIDENCE";
      std::string OPEN_SCRIPT = "OPEN_SCRIPT";
      std::string PLAY_SOUND_EFFECT = "PLAY_SOUND_EFFECT";
      std::string PLAY_MUSIC_TRACK = "PLAY_MUSIC_TRACK";
      std::string IF = "IF";

      bool continue_directly_to_next_script_line = false;

      std::string script_line = trim(raw_script_line);
      std::pair<std::string, std::string> command_and_argument = parse_command_and_argument(script_line);
      std::string command = command_and_argument.first;
      std::string argument = command_and_argument.second;


      if (auto_assume_uncommanded_line_is_dialog && command.empty()) command = DIALOG;

      if (command == DIALOG)
      {
         std::vector<std::string> tokens = tokenize(argument);
         AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::InitiateDialog *initiate_dialog_event_data =
            new AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::InitiateDialog(tokens);

         current_internally_running_script.goto_next_line();
         paused_for_dialog_to_finish = true; // should this be in the event processing?

         emit_script_event(initiate_dialog_event_data);
      }
      else if (command == IF)
      {
         std::vector<std::string> tokens = tokenize(argument);
         if (!assert_token_count_eq(tokens, 3))
         {
            std::cout << "IF - expecting argument on line " << line_num << " to contain 3 arguments, "
                      << "(CONDITION_EXPRESSION | DO_IF_TRUE | DO_IF_FALSE), each expression separated "
                      << "by the BAR character ('|'), but it does not match this format." << std::endl;
            return false;
         }

         if (!bool_eval_func)
         {
            std::stringstream error_message;
            error_message << "AllegroFlare::Prototypes::FixedRoom2D::ScriptRunner error: "
                       << "THING_THAT_HAPPENED";
            throw std::runtime_error(error_message.str());
         }

         std::string conditional_expression = tokens[0];
         bool expression_result = bool_eval_func(conditional_expression, this, bool_eval_func_user_data);

         if (expression_result)
         {
            // run "true statement" (probably a GOTO)
            std::string if_condition_true_expression = tokens[1];
            parse_and_run_line(if_condition_true_expression, line_num, auto_assume_uncommanded_line_is_dialog);
            continue_directly_to_next_script_line = true;
         }
         else
         {
            // run "false statement" (probably a GOTO)
            std::string if_condition_false_expression = tokens[2];
            parse_and_run_line(if_condition_false_expression, line_num, auto_assume_uncommanded_line_is_dialog);
            continue_directly_to_next_script_line = true;
         }
      }
      else if (command == ENTER_ROOM)
      {
         std::vector<std::string> tokens = tokenize(argument);
         if (!assert_token_count_eq(tokens, 1))
         {
            std::cout << "ENTER_ROOM - expecting 1 and only 1 argument on line " << line_num << std::endl;
            return false;
         }

         std::string room_name = tokens[0];

         AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::EnterRoom *enter_room_event_datas =
            new AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::EnterRoom(room_name);
         emit_script_event(enter_room_event_datas);
      }
      else if (command == OPEN_SCRIPT)
      {
         std::string script_to_load = argument;

         bool successful = load_script_by_dictionary_name(script_to_load);

         if (successful)
         {
            //Disabled:: if (current_dialog)
            //Disabled:: {
               //Disabled:: delete current_dialog;
               //Disabled:: current_dialog = nullptr;
            //Disabled::}
            // consider stopping music? I think not.  The opening script should start, stop, or change the music
            // if needed.  Also, if the same music is already playing from the previous script...
            // it wont' stop it then start it... instead it will keep playing seamlessly
            continue_directly_to_next_script_line = true;

            // setting this flag is required so that the advancer does not automatically move to the next
            // line after oening the new script file
            set_script_freshly_loaded_via_OPEN_SCRIPT(true);
         }
      }
      else if (command == SIGNAL)
      {
         std::cout << argument << std::endl;
         continue_directly_to_next_script_line = true;
      }
      else if (command == COLLECT)
      {
         int item_id = atoi(argument.c_str());
         std::string item_id_as_str = std::to_string(item_id);
         //std::tuple<std::string, std::string, std::string> item_definition = inventory_window->get_item_definition(item_id);
         //std::string item_name = std::get<0>(item_definition);
         //std::string item_bitmap_identifier = std::get<1>(item_definition);

         // add the item to the inventory
         //af_inventory->add_item(item_id); // TODO: remove this and handle it in the reception of the event. Note,
                                          //// the CollectItem event datas will need to be modified

         current_internally_running_script.goto_next_line();
         paused_for_dialog_to_finish = true; // should this be in the event processing?

         // construct the dialog
         //if (command == COLLECT_SILENTLY)
         //{
            //continue_directly_to_next_script_line = true;
         //}
         AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectItem *event_data =
            new AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectItem(item_id_as_str);
         emit_script_event(event_data);
      }
      else if (command == COLLECT_EVIDENCE)
      {
         std::string item_name = argument;

         current_internally_running_script.goto_next_line();
         paused_for_dialog_to_finish = true;

         AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectEvidence *event_data =
            new AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectEvidence(item_name);
         emit_script_event(event_data);
      }
      else if (command == MARKER)
      {
         continue_directly_to_next_script_line = true;
      }
      else if (command == GOTO_MARKER)
      {
         bool successful = current_internally_running_script.goto_marker(argument);
         if (!successful)
         {
            std::cout << "WARNING: Attempted to GOTO_MARKER a marker named \"" << argument << "\" "
                      << "but that marker does not exist. This is from line ["
                      << line_num << "], which is \"" << script_line << "\"" << std::endl;
         }
         continue_directly_to_next_script_line = true;
      }
      else if (command == PLAY_SOUND_EFFECT)
      {
         std::vector<std::string> tokens = tokenize(argument);
         if (!assert_token_count_eq(tokens, 1))
         {
            std::cout << "PLAY_SOUND_EFFECT - expecting 1 and only 1 argument on line " << line_num << std::endl;
            return false;
         }

         std::string sound_effect_name_to_play = tokens[0];

         event_emitter->emit_play_sound_effect_event(sound_effect_name_to_play);

         continue_directly_to_next_script_line = true;
      }
      else if (command == PLAY_MUSIC_TRACK)
      {
         std::vector<std::string> tokens = tokenize(argument);
         if (!assert_token_count_eq(tokens, 1))
         {
            std::cout << "PLAY_MUSIC_TRACK - expecting 1 and only 1 argument on line " << line_num << std::endl;
            return false;
         }

         std::string music_track_name_to_play = tokens[0];

         event_emitter->emit_play_music_track_event(music_track_name_to_play);

         continue_directly_to_next_script_line = true;
      }
      else
      {
         std::cout << "[AllegroFlare::Prototypes::FixedRoom2D::ScriptRunner::parse_and_run_line]: WARNING: "
                   << "Unrecognized command \"" << command << "\"" << std::endl;
         continue_directly_to_next_script_line = true;
      }

      return continue_directly_to_next_script_line;
    body_dependency_symbols:
      - AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::InitiateDialog
      - AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectItem
      - AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectEvidence
      - AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::EnterRoom


  - name: parse_command_and_argument
    static: true
    type: std::pair<std::string, std::string>
    parameters:
      - name: script_line
        type: std::string
        default_argument: '{}'
    body: |
      std::pair<std::string, std::string> result{"", ""};
      std::string DELIMETER = ": ";

      std::size_t pos = script_line.find(DELIMETER);

      if (pos == std::string::npos)
      {
         result.first = "";
         std::string _intermed = script_line;
         result.second = trim(_intermed);
      }
      else
      {
         std::string command_fragment_unsanitized = script_line.substr(0, pos);

         // TODO validate format of command (all caps, underscore, no spaces)
         // here

         std::string _intermed = command_fragment_unsanitized;
         result.first = trim(_intermed);
         std::string _intermed2 = script_line.substr(pos+DELIMETER.size());
         result.second = trim(_intermed2);
      }

      return result;


  - name: emit_script_event
    guards: [ event_emitter ]
    private: true
    parameters:
      - name: event_data
        type: AllegroFlare::GameEventDatas::Base*
        default_argument: nullptr
    body: |
      AllegroFlare::GameEvent game_event(
         AllegroFlare::Prototypes::FixedRoom2D::EventNames::SCRIPT_EVENT_NAME,
         event_data
      );
      
      event_emitter->emit_game_event(game_event);
      return;
    body_dependency_symbols:
      - AllegroFlare::Prototypes::FixedRoom2D::EventNames::SCRIPT_EVENT_NAME


  - name: split
    type: std::vector<std::string>
    private: true
    static: true
    parameters:
      - name: string
        type: std::string
        default_argument: '""'
      - name: delimiter
        type: char
        default_argument: "' '"
    body: |
      std::vector<std::string> elems;
      auto result = std::back_inserter(elems);
      std::stringstream ss(string);
      std::string item;
      while (std::getline(ss, item, delimiter)) { *(result++) = item; }
      return elems;


  - name: tokenize
    xprivate: true
    static: true
    type: std::vector<std::string>
    parameters:
      - name: str
        type: std::string
        default_argument: '""'
      - name: delim
        type: char
        default_argument: "'|'"
    body: |
      std::vector<std::string> tokens = split(str, delim);
      for (auto &token : tokens) token = trim(token);
      return tokens;


  - name: assert_min_token_count
    type: bool
    xprivate: true
    static: true
    parameters:
      - name: tokens
        type: std::vector<std::string>
        default_argument: '{}'
      - name: min
        type: int
        default_argument: 0
    body: |
      return (tokens.size() >= min);


  - name: assert_token_count_eq
    type: bool
    xprivate: true
    static: true
    parameters:
      - name: tokens
        type: std::vector<std::string>
        default_argument: '{}'
      - name: value
        type: int
        default_argument: 0
    body: |
      return (tokens.size() == value);


  - name: assert_odd_token_count
    type: bool
    xprivate: true
    static: true
    parameters:
      - name: tokens
        type: std::vector<std::string>
        default_argument: '{}'
      - name: min
        type: int
        default_argument: 0
    body: |
      return (tokens.size() % 2);


  - name: trim
    type: std::string
    private: true
    static: true
    parameters:
      - name: s
        type: std::string
        default_argument: '""'
    body: |
      // ltrim
      s.erase(s.begin(), std::find_if(s.begin(), s.end(), [](int c) {return !std::isspace(c);}));
      // rtrim
      s.erase(std::find_if(s.rbegin(), s.rend(), [](int c) {return !std::isspace(c);}).base(), s.end());
      return s;
    

dependencies:


  - symbol: AllegroFlare::Prototypes::FixedRoom2D::Script
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/Script.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::EventNames::SCRIPT_EVENT_NAME
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/EventNames.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::InitiateDialog
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/InitiateDialog.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectItem
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectItem.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectEvidence
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectEvidence.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::EnterRoom
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/EnterRoom.hpp ]
  - symbol: AllegroFlare::GameEventDatas::Base
    headers: [ AllegroFlare/GameEventDatas/Base.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::Inventory
    headers: [ AllegroFlare/Inventory.hpp ]
  - symbol: AllegroFlare::Elements::Inventory
    headers: [ AllegroFlare/Elements/Inventory.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::Script
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/Script.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::ScriptRunner
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner.hpp ]
  - symbol: std::function
    headers: [ functional ]


