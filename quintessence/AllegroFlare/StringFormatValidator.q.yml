properties:


  - name: string
    type: std::string
    constructor_arg: true
    init_with: '"[unset-string]"'
    getter: true
    setter: true


functions:


  - name: fits_max_length
    type: bool
    parameters:
      - name: max
        type: std::size_t
        default_argument: 0
    body: |
      return (string.size() <= max);


  - name: fits_min_length
    type: bool
    parameters:
      - name: min
        type: std::size_t
        default_argument: 0
    body: |
      return (string.size() >= min);


  - name: has_only_numerical_characters
    type: bool
    body: |
      return (string.find_first_not_of("9876543210") == std::string::npos);


  - name: ends_with
    type: bool
    parameters:
      - name: ending
        type: std::string
        default_argument: '""'
    body: |
      if (string.length() >= ending.length())
      {
         return string.compare(string.length() - ending.length(), ending.length(), ending) == 0;
      }
      return false;


  - name: is_uppercase_symbol_name
    type: bool
    body: |
      bool at_first_char = true; // Flag to track the first character

      for (char c : string) {
         if (at_first_char && !(std::isupper(c) || c == '_'))
         {
             return false; // First character must be uppercase
         }
         else if (!std::isalnum(c) && c != '_')
         {
             return false; // Characters must be uppercase, numbers, or underscores
         }

         at_first_char = false; // Set the flag to false after the first character
      }
      return true;


  - name: is_blank
    type: bool
    body: |
      // TODO: Test this function
      return string.empty();


  - name: matches
    type: bool
    parameters:
      - name: other
        type: std::string
        default_argument: '"[unset-other]"'
    body: |
      return string == other;


  - name: contains_none
    type: bool
    parameters:
      - name: strings_to_match
        type: std::vector<std::string>
        default_argument: '{}'
    guards: [ (!strings_to_match.empty()) ]
    body: |
      for (const std::string& str : strings_to_match)
      {
         if (string.find(str) != std::string::npos) {
            return false;
         }
      }
      return true;


