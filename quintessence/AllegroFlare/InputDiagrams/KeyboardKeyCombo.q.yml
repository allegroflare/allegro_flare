properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: keyboard_combo_tokens
    type: std::vector<std::string>
    init_with: '{}'
    constructor_arg: true
    getter: true
    setter: true

  - name: color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{1, 1, 1, 1}
    constructor_arg: true
    getter: true
    setter: true

  - name: x
    type: float
    init_with: 0.0f
    constructor_arg: true
    getter: true
    setter: true

  - name: y
    type: float
    init_with: 0.0f
    constructor_arg: true
    getter: true
    setter: true

  - name: font_name
    type: std::string
    init_with: '"Inter-Medium.ttf"'
    constructor_arg: true
    getter: true
    setter: true

  - name: font_size
    type: int
    init_with: -28
    constructor_arg: true
    getter: true
    setter: true

  - name: keyboard_key_font_name
    type: std::string
    init_with: '"Inter-Medium.ttf"'
    constructor_arg: true
    getter: true
    setter: true

  - name: keyboard_key_font_size
    type: int
    init_with: -20
    constructor_arg: true
    getter: true
    setter: true

  - name: keyboard_key_box_height
    type: float
    init_with: 42
    constructor_arg: true
    getter: true
    setter: false

  - name: keyboard_key_box_min_width
    type: float
    init_with: 42
    constructor_arg: true
    getter: true
    setter: false

  - name: token_SPACE_width
    type: float
    init_with: 10.0f
    constructor_arg: true
    getter: true
    setter: true

  - name: token_SPACER_width
    type: float
    init_with: 24.0f
    constructor_arg: true
    getter: true
    setter: true

  - name: token_SEPARATOR_width
    type: float
    init_with: 60.0f
    constructor_arg: true
    getter: true
    setter: true


functions:


  - name: set_keyboard_key_box_height
    parameters:
      - name: keyboard_key_box_height
        type: float
        default_argument: 42
    body: |
      this->keyboard_key_box_height = keyboard_key_box_height;
      this->keyboard_key_box_min_width = keyboard_key_box_height;
      return;


  - name: render
    type: int
    parameters:
      - name: calculate_width_only_and_do_not_draw
        type: bool
        default_argument: false
    guards:
      - al_is_system_installed()
      - al_is_font_addon_initialized()
      - al_is_ttf_addon_initialized()
      - al_is_primitives_addon_initialized()
    body: |
      AllegroFlare::InputDiagrams::KeyboardKey keyboard_key(font_bin);
      bool next_token_is_raw_text = false;
      bool do_actually_draw = !calculate_width_only_and_do_not_draw;

      int cursor_x = 0;
      for (auto &keyboard_combo_token : keyboard_combo_tokens)
      {
         if (next_token_is_raw_text)
         {
            next_token_is_raw_text = false;

            ALLEGRO_FONT *font = obtain_font();
            if (do_actually_draw)
            {
               float font_ascent_height = al_get_font_line_height(font);
               al_draw_text(
                  font,
                  color,
                  (int)(x + cursor_x),
                  (int)(y + keyboard_key_box_height/ 2 - font_ascent_height / 2),
                  ALLEGRO_ALIGN_LEFT,
                  keyboard_combo_token.c_str()
               );
            }

            cursor_x += al_get_text_width(font, keyboard_combo_token.c_str());
         }
         else if (keyboard_combo_token == "%SPACE")
         {
            cursor_x += token_SPACE_width;
         }
         else if (keyboard_combo_token == "%SPACER")
         {
            cursor_x += token_SPACER_width;
         }
         else if (keyboard_combo_token == "%SEPARATOR")
         {
            cursor_x += token_SEPARATOR_width;
         }
         else if (keyboard_combo_token == "LABEL>>")
         {
            next_token_is_raw_text = true;
         }
         else if (keyboard_combo_token == "%PLUS")
         {
            ALLEGRO_FONT *font = obtain_font();
            if (do_actually_draw)
            {
               float font_ascent_height = al_get_font_line_height(font);
               al_draw_text(
                  font,
                  color,
                  (int)(x + cursor_x),
                  (int)(y + keyboard_key_box_height/ 2 - font_ascent_height / 2),
                  ALLEGRO_ALIGN_LEFT,
                  "+"
               );
            }

            cursor_x += al_get_text_width(font, "+");
         }
         else if (keyboard_combo_token == "%SLASH")
         {
            ALLEGRO_FONT *font = obtain_font();

            if (do_actually_draw)
            {
               float font_ascent_height = al_get_font_line_height(font);
               al_draw_text(
                  font,
                  color,
                  (int)(x + cursor_x),
                  (int)(y + keyboard_key_box_height/ 2 - font_ascent_height / 2),
                  ALLEGRO_ALIGN_LEFT,
                  "/"
               );
            }

            cursor_x += al_get_text_width(font, "/");
         }
         else // is a regular interpreted-as-text token
         {
            keyboard_key.set_keyboard_key_str(keyboard_combo_token);
            keyboard_key.set_x(x + cursor_x);
            keyboard_key.set_y(y);
            keyboard_key.set_color(color);
            keyboard_key.set_font_name(keyboard_key_font_name);
            keyboard_key.set_font_size(keyboard_key_font_size);
            keyboard_key.set_keyboard_key_box_height(keyboard_key_box_height);
            //keyboard_key.set_x = 
            float key_width = 0;
            key_width = keyboard_key.render(calculate_width_only_and_do_not_draw);
            cursor_x += key_width;
         }
      }

      return guarantee_even_number(cursor_x);
    body_dependency_symbols:
      - al_is_system_installed
      - al_is_font_addon_initialized
      - al_is_ttf_addon_initialized
      - al_is_primitives_addon_initialized
      - al_draw_rounded_rectangle
      - al_draw_text
      - AllegroFlare::InputDiagrams::KeyboardKey


  - name: calculate_width
    type: int
    body: |
      return render(true);


  - name: guarantee_even_number
    type: int
    parameters:
      - name: potentially_odd_number
        type: int
        default_argument: 0
    body: |
      if (potentially_odd_number % 2 == 1) return potentially_odd_number + 1;
      return potentially_odd_number;


  - name: obtain_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      std::stringstream composite_font_str;
      composite_font_str << font_name << " " << font_size;
      return font_bin->auto_get(composite_font_str.str());


dependencies:


  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_is_system_installed
    headers: [ allegro5/allegro.h ]
  - symbol: al_is_font_addon_initialized
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_is_ttf_addon_initialized
    headers: [ allegro5/allegro_ttf.h ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_draw_rounded_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_draw_text
    headers: [ allegro5/allegro_font.h ]
  - symbol: AllegroFlare::InputDiagrams::KeyboardKey
    headers: [ AllegroFlare/InputDiagrams/KeyboardKey.hpp ]


