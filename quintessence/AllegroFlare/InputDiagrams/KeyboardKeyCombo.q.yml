properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: keyboard_combo_tokens
    type: std::vector<std::string>
    init_with: '{}'
    constructor_arg: true
    getter: true
    setter: true

  - name: color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{1, 1, 1, 1}
    constructor_arg: true
    getter: true
    setter: true


functions:


  - name: get_keyboard_key_box_height
    type: float
    body: |
      AllegroFlare::InputDiagrams::KeyboardKey keyboard_key;
      return keyboard_key.get_keyboard_key_box_height();
      

  - name: render
    guards:
      - al_is_system_installed()
      - al_is_font_addon_initialized()
      - al_is_ttf_addon_initialized()
      - al_is_primitives_addon_initialized()
    body: |
      AllegroFlare::InputDiagrams::KeyboardKey keyboard_key(font_bin);
      float box_height = get_keyboard_key_box_height();
      float token_space_width = 10;
      float token_big_space_width = 14;
      float token_separator_width = 60;
      bool next_token_is_raw_text = false;

      float cursor_x = 0;
      for (auto &keyboard_combo_token : keyboard_combo_tokens)
      {
         if (next_token_is_raw_text)
         {
            next_token_is_raw_text = false;

            ALLEGRO_FONT *font = obtain_font();
            float font_ascent_height = al_get_font_line_height(font);
            al_draw_text(
               font,
               color,
               (int)(cursor_x),
               (int)(box_height/ 2 - font_ascent_height / 2),
               ALLEGRO_ALIGN_LEFT,
               keyboard_combo_token.c_str()
            );

            cursor_x += al_get_text_width(font, keyboard_combo_token.c_str());
         }
         else if (keyboard_combo_token == "%SPACE")
         {
            cursor_x += token_space_width;
         }
         else if (keyboard_combo_token == "%BIGSPACE")
         {
            cursor_x += token_big_space_width;
         }
         else if (keyboard_combo_token == "%SPACER")
         {
            cursor_x += (token_big_space_width + token_space_width);
         }
         else if (keyboard_combo_token == "%SEPARATOR")
         {
            cursor_x += token_separator_width;
         }
         else if (keyboard_combo_token == "LABEL>>")
         {
            next_token_is_raw_text = true;
         }
         else if (keyboard_combo_token == "%PLUS")
         {
            ALLEGRO_FONT *font = obtain_font();
            float font_ascent_height = al_get_font_line_height(font);
            al_draw_text(
               font,
               color,
               (int)(cursor_x),
               (int)(box_height/ 2 - font_ascent_height / 2),
               ALLEGRO_ALIGN_CENTER,
               "+"
            );
         }
         else if (keyboard_combo_token == "%SLASH")
         {
            ALLEGRO_FONT *font = obtain_font();
            float font_ascent_height = al_get_font_line_height(font);
            al_draw_text(
               font,
               color,
               (int)(cursor_x),
               (int)(box_height/ 2 - font_ascent_height / 2),
               ALLEGRO_ALIGN_CENTER,
               "/"
            );
         }
         else // is a regular interpreted-as-text token
         {
            keyboard_key.set_keyboard_key_str(keyboard_combo_token);
            keyboard_key.set_x(cursor_x);
            //keyboard_key.set_x = 
            float key_width = keyboard_key.render();
            cursor_x += key_width;
         }
      }
      return;
    body_dependency_symbols:
      - al_is_system_installed
      - al_is_font_addon_initialized
      - al_is_ttf_addon_initialized
      - al_is_primitives_addon_initialized
      - al_draw_rounded_rectangle
      - al_draw_text
      - AllegroFlare::InputDiagrams::KeyboardKey


  - name: obtain_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      std::string font_name = "Inter-Medium.ttf";
      int font_size = -28;

      std::stringstream composite_font_str;
      composite_font_str << font_name << " " << font_size;
      return font_bin->auto_get(composite_font_str.str());


dependencies:


  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_is_system_installed
    headers: [ allegro5/allegro.h ]
  - symbol: al_is_font_addon_initialized
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_is_ttf_addon_initialized
    headers: [ allegro5/allegro_ttf.h ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_draw_rounded_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_draw_text
    headers: [ allegro5/allegro_font.h ]
  - symbol: AllegroFlare::InputDiagrams::KeyboardKey
    headers: [ AllegroFlare/InputDiagrams/KeyboardKey.hpp ]


