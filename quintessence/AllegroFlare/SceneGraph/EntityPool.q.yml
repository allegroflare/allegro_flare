properties:


  - name: entity_pool
    type: std::vector<AllegroFlare::SceneGraph::Entities::Base*>
    init_with: '{}'


functions:


  - name: add
    type: bool
    parameters:
      - name: entity
        type: AllegroFlare::SceneGraph::Entities::Base*
        default_argument: nullptr
    body: |
      entity_pool.push_back(entity);
      return true;


  - name: remove
    type: bool
    parameters:
      - name: entity
        type: AllegroFlare::SceneGraph::Entities::Base*
        default_argument: nullptr
    body: |
      // NOTE: this assumes there is only one instance of the entity
      // TODO: update this std::vector to an std::unordered_set and remove the above comment
      std::vector<AllegroFlare::SceneGraph::Entities::Base*>::iterator it =
         std::find(entity_pool.begin(), entity_pool.end(), entity);
      if (it == entity_pool.end()) return false;
      entity_pool.erase(it);
      return true;
    body_dependency_symbols:
      - std::find


  - name: exists
    type: bool
    parameters:
      - name: entity
        type: AllegroFlare::SceneGraph::Entities::Base*
        default_argument: nullptr
    body: |
      std::vector<AllegroFlare::SceneGraph::Entities::Base*>::iterator it =
         std::find(entity_pool.begin(), entity_pool.end(), entity);
      return (it != entity_pool.end());
    body_dependency_symbols:
      - std::find


  - name: select_A
    type: std::vector<AllegroFlare::SceneGraph::Entities::Base*>
    parameters:
      - name: attribute
        type: std::string
        default_argument: '"[unset-attribute]"'
    body: |
      std::vector<AllegroFlare::SceneGraph::Entities::Base*> result;
      for (auto &entity : entity_pool)
      {
         if (entity->exists(attribute)) result.push_back(entity);
      }
      return result;


  - name: select_B
    type: std::vector<AllegroFlare::SceneGraph::Entities::Base*>
    parameters:
      - name: attributes
        type: std::vector<std::string>
        default_argument: '{}'
    body: |
      std::vector<AllegroFlare::SceneGraph::Entities::Base*> result;
      for (auto &entity : entity_pool)
      {
         for (auto &attribute : attributes)
         {
            if (!entity->exists(attribute)) continue;
         }
         result.push_back(entity);
      }
      return result;


  - name: select_C
    type: std::vector<AllegroFlare::SceneGraph::Entities::Base*>
    parameters:
      - name: attribute
        type: std::string
        default_argument: '"[unset-attribute]"'
      - name: parameter
        type: std::string
        default_argument: '"[unset-parameter]"'
    body: |
      std::vector<AllegroFlare::SceneGraph::Entities::Base*> result;
      for (auto &entity : entity_pool)
      {
         if (entity->exists(attribute, parameter)) result.push_back(entity);
      }
      return result;


  - name: select_D
    type: std::vector<AllegroFlare::SceneGraph::Entities::Base*>
    parameters:
      - name: attribute_param_pairs
        type: std::vector<std::pair<std::string, std::string>>
        default_argument: '{}'
    body: |
      std::vector<AllegroFlare::SceneGraph::Entities::Base*> result;
      for (auto &entity : entity_pool)
      {
         for (auto &attribute_param_pair : attribute_param_pairs)
         {
            if (!entity->exists(attribute_param_pair.first, attribute_param_pair.second)) continue;
         }
         result.push_back(entity);
      }
      return result;


  - name: select_E
    type: std::vector<AllegroFlare::SceneGraph::Entities::Base*>
    parameters:
      - name: attribute
        type: std::string
        default_argument: '"[unset-attribute]"'
      - name: attribute_param_pairs
        type: std::vector<std::pair<std::string, std::string>>
        default_argument: '{}'
    body: |
      std::vector<AllegroFlare::SceneGraph::Entities::Base*> result;
      for (auto &entity : entity_pool)
      {
         if (!entity->exists(attribute)) continue;
         for (auto &attribute_param_pair : attribute_param_pairs)
         {
            if (!entity->exists(attribute_param_pair.first, attribute_param_pair.second)) continue;
         }
         result.push_back(entity);
      }
      return result;


  - name: select_F
    type: std::vector<AllegroFlare::SceneGraph::Entities::Base*>
    parameters:
      - name: attributes
        type: std::vector<std::string>
        default_argument: '{}'
      - name: attribute_param_pairs
        type: std::vector<std::pair<std::string, std::string>>
        default_argument: '{}'
    body: |
      std::vector<AllegroFlare::SceneGraph::Entities::Base*> result;
      for (auto &entity : entity_pool)
      {
         for (auto &attribute : attributes)
         {
            if (!entity->exists(attribute)) continue;
         }
         for (auto &attribute_param_pair : attribute_param_pairs)
         {
            if (!entity->exists(attribute_param_pair.first, attribute_param_pair.second)) continue;
         }
         result.push_back(entity);
      }
      return result;


dependencies:


  - symbol: AllegroFlare::SceneGraph::Entities::Base
    headers: [ AllegroFlare/SceneGraph/Entities/Base.hpp ]
  - symbol: std::find
    headers: [ algorithm ]


