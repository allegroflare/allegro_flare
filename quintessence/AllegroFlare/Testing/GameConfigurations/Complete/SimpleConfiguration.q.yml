parent_classes:


  - class: AllegroFlare::GameConfigurations::Complete
    scope: public
    init_with: AllegroFlare::Testing::GameConfigurations::Complete::SimpleConfiguration::TYPE


properties:


  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/Testing/GameConfigurations/Complete/SimpleConfiguration"'
    static: true
    constexpr: true


documentation:


  - notes:
     - This testing class represents bare-bones setup when creating a custom GameConfigurations/Complete derived class


methods:


  - name: build_title_screen_menu_options
    virtual: true
    override: true
    type: std::vector<std::pair<std::string, std::string>>
    body: |
      std::vector<std::pair<std::string, std::string>> options = {
         { "Start New Game",    "start_new_game" },
         { "Display Settings",  "goto_display_settings_screen" },
         { "Quit",              "quit" },
      };
      return options;


  - name: handle_game_event
    virtual: true
    override: true
    parameters:
      - name: game_event
        type: AllegroFlare::GameEvent*
        default_argument: nullptr
    body: |
      return;
    body_dependency_symbols:
      - AllegroFlare::EventNames
      - AllegroFlare::GameEventDatas::ScreenActivated


  - name: load_level_by_identifier
    virtual: true
    override: true
    type: AllegroFlare::Levels::Base*
    parameters:
      - name: level_identifier
        type: std::string
        default_argument: '"[unset-level_identifier]"'
    body: |
      // TODO
      return nullptr;
    body_dependency_symbols:
     - AllegroFlare::Logger


  - name: build_level_list_for_level_select_screen_by_identifier
    virtual: true
    override: true
    type: std::vector<std::pair<std::string, std::string>>
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"[unset-identifier]"'
    body: |
      // TODO
      return {};
    body_dependency_symbols:
     - AllegroFlare::Logger


  - name: build_dialog_bank_by_identifier
    virtual: true
    override: true
    type: AllegroFlare::DialogTree::NodeBank
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"[unset-identifier]"'
    body: |
      // TODO
      AllegroFlare::DialogTree::NodeBank node_bank;
      return node_bank;
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: build_achievements
    virtual: true
    override: true
    type: std::vector<std::tuple<std::string, AllegroFlare::Achievement*, bool, bool>>
    body: |
      // TODO
      return {};
    body_dependency_symbols:
      - AllegroFlare::Achievement


  - name: create_primary_gameplay_screen
    virtual: true
    override: true
    type: AllegroFlare::Screens::Gameplay*
    parameters:
      - name: runner
        type: AllegroFlare::Runners::Complete*
        default_argument: nullptr
    body: |
      // 
        //default_argument_dependency_symbols:
          //- AllegroFlare::ForwardDeclarations::AllegroFlare::Runners::Complete
          //- AllegroFlare::ForwardDeclarations::AllegroFlare::GameConfigurations::Complete
      // TODO: Find a better alternative to creating a raw Screens::Gameplay
      return new AllegroFlare::Screens::Gameplay;


  - name: create_pause_screen
    virtual: true
    override: true
    type: AllegroFlare::Screens::PauseScreen*
    parameters:
      - name: runner
        type: AllegroFlare::Runners::Complete*
        default_argument: nullptr
    body: |
      return new AllegroFlare::Screens::PauseScreen;


  - name: create_intro_logos_storyboard_pages
    virtual: true
    override: true
    type: std::vector<AllegroFlare::Elements::StoryboardPages::Base *>
    body: |
      return {};


  - name: create_shared_background
    virtual: true
    override: true
    type: AllegroFlare::Elements::Backgrounds::Base*
    body: |
      return new AllegroFlare::Elements::Backgrounds::ClearToColor(ALLEGRO_COLOR{0, 0.05, 0.1, 1});
    body_dependency_symbols:
      - AllegroFlare::Elements::Backgrounds::ClearToColor


  - name: create_new_game_intro_storyboard_pages
    virtual: true
    override: true
    type: std::vector<AllegroFlare::Elements::StoryboardPages::Base *>
    body: |
      return {};


  - name: create_intro_storyboard_pages
    virtual: true
    override: true
    type: std::vector<AllegroFlare::Elements::StoryboardPages::Base *>
    body: |
      return {};


  - name: build_save_slots_for_load_a_saved_game_screen
    virtual: true
    override: true
    type: std::vector<AllegroFlare::LoadASavedGame::SaveSlots::Base*>
    body: |
      return {};


  - name: load_game_progress_and_state_info_into_universe
    virtual: true
    override: true
    body: |
      // Nothing to do
      return;


  - name: setup_new_game_progress_and_state_info
    virtual: true
    override: true
    parameters:
      - name: game_session
        type: AllegroFlare::GameSession*
        default_argument: nullptr
    guards: [ game_session ]
    body: |
      // Nothing to do
      return;
    body_dependency_symbols:
      - AllegroFlare::GameProgressAndStateInfos::Base


  - name: load_last_played_session_or_start_new
    virtual: true
    override: true
    parameters:
      - name: game_session
        type: AllegroFlare::GameSession*
        default_argument: nullptr
    guards: [ game_session ]
    body: |
      // Nothing to do
      return;


  - name: load_audio_controller
    virtual: true
    override: true
    parameters:
      - name: audio_controller
        type: AllegroFlare::AudioController*
        default_argument: nullptr
    body: |
      // Nothing to do
      return;


  - name: build_copyright_text
    virtual: true
    override: true
    type: std::string
    parameters:
      - name: release_info
        type: ReleaseInfo*
        default_argument: nullptr
    guards: [ release_info ]
    body: |
      AllegroFlare::TemplatedText templated_text(
         "[[COPYRIGHT_SYMBOL]] 2024 CLUBCATT Games         clubcatt.com         version [[VERSION_NUMBER]]",
         {
            { "[[COPYRIGHT_SYMBOL]]", AllegroFlare::UnicodeCharacters::COPYRIGHT_SYMBOL },
            { "[[VERSION_NUMBER]]",   release_info->get_version() },
         }
      );
      return templated_text.generate_content();
    body_dependency_symbols:
      - ReleaseInfo
      - AllegroFlare::TemplatedText
      - AllegroFlare::UnicodeCharacters


  - name: build_rolling_credits_sections
    virtual: true
    override: true
    type: std::vector<AllegroFlare::Elements::RollingCredits::Sections::Base*>
    body: |
      return {};


  - name: is_type
    type: bool
    parameters:
      - name: possible_type
        type: std::string
        default_argument: '""'
    body: |
      return (possible_type == get_type());


dependencies:


  - symbol: AllegroFlare::GameConfigurations::Complete
    headers: [ AllegroFlare/GameConfigurations/Complete.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeBank
    headers: [ AllegroFlare/DialogTree/NodeBank.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::Levels::Base
    headers: [ AllegroFlare/Levels/Base.hpp ]
  - symbol: AllegroFlare::Achievement
    headers: [ AllegroFlare/Achievement.hpp ]
  - symbol: AllegroFlare::Elements::StoryboardPages::Base
    headers: [ AllegroFlare/Elements/StoryboardPages/Base.hpp ]
  - symbol: AllegroFlare::GameProgressAndStateInfos::Base
    headers: [ AllegroFlare/GameProgressAndStateInfos/Base.hpp ]
  - symbol: AllegroFlare::GameSession
    headers: [ AllegroFlare/GameSession.hpp ]
  - symbol: AllegroFlare::Elements::RollingCredits::Sections::Base
    headers: [ AllegroFlare/Elements/RollingCredits/Sections/Base.hpp ]
  - symbol: AllegroFlare::Elements::RollingCredits::SectionFactory
    headers: [ AllegroFlare/Elements/RollingCredits/SectionFactory.hpp ]
  - symbol: AllegroFlare::LoadASavedGame::SaveSlots::Base
    headers: [ AllegroFlare/LoadASavedGame/SaveSlots/Base.hpp ]
  - symbol: ReleaseInfo
    headers: [ ReleaseInfo.hpp ]
  - symbol: AllegroFlare::Elements::Backgrounds::Base
    headers: [ AllegroFlare/Elements/Backgrounds/Base.hpp ]
  - symbol: AllegroFlare::Elements::Backgrounds::ClearToColor
    headers: [ AllegroFlare/Elements/Backgrounds/ClearToColor.hpp ]
  - symbol: AllegroFlare::GameEvent
    headers: [ AllegroFlare/GameEvent.hpp ]
  - symbol: AllegroFlare::EventNames
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: AllegroFlare::GameEventDatas::ScreenActivated
    headers: [ AllegroFlare/GameEventDatas/ScreenActivated.hpp ]
  - symbol: AllegroFlare::TemplatedText
    headers: [ AllegroFlare/TemplatedText.hpp ]
  - symbol: AllegroFlare::UnicodeCharacters
    headers: [ AllegroFlare/UnicodeCharacters.hpp ]
  - symbol: AllegroFlare::AudioController
    headers: [ AllegroFlare/AudioController.hpp ]
  - symbol: AllegroFlare::Screens::Gameplay
    headers: [ AllegroFlare/Screens/Gameplay.hpp ]
  - symbol: AllegroFlare::Runners::Complete
    headers: [ AllegroFlare/Runners/Complete.hpp ]
  - symbol: AllegroFlare::Screens::PauseScreen
    headers: [ AllegroFlare/Screens/PauseScreen.hpp ]


