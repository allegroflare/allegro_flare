methods:


  - name: find_nonexistent_temporary_directory
    type: std::filesystem::path
    parameters:
      - name: max_tries
        type: uint32_t
        default_argument: 100000
    body: |
      std::filesystem::path tmp_directory_base_path = std::filesystem::temp_directory_path();
      unsigned long long num_attempts_made = 0;
      std::random_device random_device;
      std::mt19937 random_number_engine(random_device());
      std::uniform_int_distribution<uint64_t> random_number_generator(0);
      std::filesystem::path path;
      bool exists = false;

      while (true)
      {
          std::stringstream ss;
          ss << std::hex << random_number_generator(random_number_engine);
          path = tmp_directory_base_path / ss.str();

          exists = std::filesystem::exists(path);

          if (!exists)
          {
              break;
          }
          if (num_attempts_made == max_tries)
          {
              throw std::runtime_error("Could not find non-existing directory");
          }
          num_attempts_made++;
      }
      return path;
    body_dependency_symbols:
      - std::stringstream
      - std::random_device
      - std::mt19937
      - filesystem


  - name: create
    type: std::filesystem::path
    parameters:
      - name: max_tries
        type: uint32_t
        default_argument: 100000
    body: |
      std::filesystem::path tmp_directory_base_path = std::filesystem::temp_directory_path();
      unsigned long long num_attempts_made = 0;
      std::random_device random_device;
      std::mt19937 random_number_engine(random_device());
      std::uniform_int_distribution<uint64_t> random_number_generator(0);
      std::filesystem::path path;
      bool directory_created = false;

      while (true)
      {
          std::stringstream ss;
          ss << std::hex << random_number_generator(random_number_engine);
          path = tmp_directory_base_path / ss.str();

          directory_created = std::filesystem::create_directory(path);

          if (directory_created)
          {
              break;
          }
          if (num_attempts_made == max_tries)
          {
              throw std::runtime_error("Could not find non-existing directory");
          }
          num_attempts_made++;
      }
      return path;
    body_dependency_symbols:
      - std::stringstream
      - std::random_device
      - std::mt19937
      - filesystem


dependencies:


  - symbol: random
    headers: [ random ]
  - symbol: std::random_device
    headers: [ random ]
  - symbol: std::mt19937
    headers: [ random ]
  - symbol: filesystem
    headers: [ filesystem ]
  - symbol: std::filesystem::path
    headers: [ filesystem ]


