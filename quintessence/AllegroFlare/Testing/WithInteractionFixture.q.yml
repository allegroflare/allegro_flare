parent_classes:


  - class: AllegroFlare::Testing::WithAllegroRenderingFixture
    scope: public
    init_with: ''


properties:


  - name: event_queue
    type: ALLEGRO_EVENT_QUEUE*
    init_with: nullptr
    getter: true

  - name: primary_timer
    type: ALLEGRO_TIMER*
    init_with: nullptr

  - name: current_event
    type: ALLEGRO_EVENT
    init_with: '{}'

  - name: auto_abort_halted
    type: bool
    init_with: false

  - name: aborted
    type: bool
    init_with: false
    getter: true

  - name: FPS
    type: double
    init_with: 60.0
    static: true
    constexpr: true

  - name: escape_key_aborts
    type: bool
    init_with: true
    getter: true
    true: true

  - name: DURATION_TO_AUTO_ABORT_INTERACTIVE_TEST_SEC
    type: double
    init_with: 4.0
    static: true
    constexpr: true


methods:


  - name: SetUp
    type: void
    virtual: true
    override: true
    body: |
      AllegroFlare::Testing::WithAllegroRenderingFixture::SetUp();

      al_install_keyboard();
      event_queue = al_create_event_queue();
      primary_timer = al_create_timer(ALLEGRO_BPS_TO_SECS(FPS));
      al_register_event_source(event_queue, al_get_timer_event_source(primary_timer));
      al_register_event_source(event_queue, al_get_keyboard_event_source());
      al_register_event_source(event_queue, al_get_display_event_source(al_get_current_display()));

      al_install_mouse();
      al_register_event_source(event_queue, al_get_mouse_event_source());

      // Start the interactive loop
      al_start_timer(primary_timer);

      return;


  - name: TearDown
    type: void
    virtual: true
    override: true
    body: |
      al_stop_timer(primary_timer);
      al_destroy_timer(primary_timer);

      al_unregister_event_source(event_queue, al_get_mouse_event_source());
      al_uninstall_mouse();

      primary_timer = nullptr;
      al_unregister_event_source(event_queue, al_get_timer_event_source(primary_timer));
      al_unregister_event_source(event_queue, al_get_keyboard_event_source());
      // TODO: Unregister display
      al_destroy_event_queue(event_queue);
      event_queue = nullptr;
      al_uninstall_keyboard();

      AllegroFlare::Testing::WithAllegroRenderingFixture::TearDown();
      return;


  - name: halt_auto_abort
    body: |
      if (!auto_abort_halted) auto_abort_halted = true;
      return;


  - name: abort
    body: |
      if (!aborted) aborted = true;
      return;


  - name: disable_escape_key_aborts
    body: |
      escape_key_aborts = false;
      return;


  - name: interactive_test_wait_for_event
    type: bool
    body: |
      // TODO: Consider renaming this
      al_wait_for_event(get_event_queue(), &current_event);
      handle_interactive_test_event(&current_event);
      return !aborted;


  - name: interactive_test_get_current_event
    type: ALLEGRO_EVENT*
    body: |
      return &current_event;


  - name: handle_interactive_test_event
    parameters:
      - name: current_event
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ current_event ]
    body: |
      double time_now = al_get_time();
      switch(current_event->type)
      {
         case ALLEGRO_EVENT_TIMER: {
            // Update
            if (current_event->any.source == al_get_timer_event_source(primary_timer))
            {
               if (!auto_abort_halted && (time_now >= DURATION_TO_AUTO_ABORT_INTERACTIVE_TEST_SEC)) abort();
            }
         } break;

         // TODO: Include other forms of input, joystics
         case ALLEGRO_EVENT_KEY_CHAR:
         case ALLEGRO_EVENT_KEY_UP:
         case ALLEGRO_EVENT_KEY_DOWN: {
            halt_auto_abort();
            bool shift = current_event->keyboard.modifiers & ALLEGRO_KEYMOD_SHIFT;
            bool command = current_event->keyboard.modifiers & ALLEGRO_KEYMOD_COMMAND;
            if (escape_key_aborts && current_event->keyboard.keycode == ALLEGRO_KEY_ESCAPE && (!shift)) abort();
            //if (current_event->keyboard.keycode == ALLEGRO_KEY_Q && command) abort();
         } break;

         case ALLEGRO_EVENT_MOUSE_AXES:
         case ALLEGRO_EVENT_MOUSE_BUTTON_DOWN:
         case ALLEGRO_EVENT_MOUSE_BUTTON_UP: {
            halt_auto_abort();
         } break;
         case ALLEGRO_EVENT_DISPLAY_CLOSE: {
            abort();
         } break;
      }
      return;


  - name: interactive_test_render_status
    body: |
      double time_now = al_get_time();
      if (!auto_abort_halted)
      {
         int seconds_left = (int)(DURATION_TO_AUTO_ABORT_INTERACTIVE_TEST_SEC - time_now) + 1;
         al_draw_textf(get_user_prompt_font(), ALLEGRO_COLOR{0.3, 0.3, 0.3, 1}, 30, 1080-60, ALLEGRO_ALIGN_LEFT,
            "Interactive test will auto-close in %d seconds. Otherwise press any key.", seconds_left);
      }
      return;


dependencies:


  - symbol: AllegroFlare::Testing::WithAllegroRenderingFixture
    headers: [ AllegroFlare/Testing/WithAllegroRenderingFixture.hpp ]
  - symbol: ALLEGRO_EVENT_QUEUE
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_TIMER
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]


