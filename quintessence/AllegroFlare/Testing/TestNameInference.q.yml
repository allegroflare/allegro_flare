functions:


  - name: get_test_name
    static: true
    type: std::string
    body: |
      const testing::TestInfo* const test_info = testing::UnitTest::GetInstance()->current_test_info();
      return test_info->name();
    body_dependency_symbols:
      - ::testing::Test


  - name: get_test_suite_name
    static: true
    type: std::string
    body: |
      const testing::TestInfo* const test_info = testing::UnitTest::GetInstance()->current_test_info();
      return test_info->test_suite_name();


  - name: build_full_test_name_str
    static: true
    type: std::string
    body: |
      return get_test_suite_name() + " - " + get_test_name();


  - name: build_test_snapshot_full_filename
    static: true
    type: std::string
    body: |
      // Concede that this is relative and does assume that the folder exists.  In the future, these result
      // snapshots should be stored in a specific folder for *each build*.  This will accumulate over time, so might
      // need to be cleaned occasionally.  This should also detect if there is a png file with the name already
      // present, and appnd a (2) after it.
      return "./tmp/test_snapshots/" + build_full_test_name_str() + ".png";


  - name: extract_prefix_tokens
    static: true
    type: std::vector<std::string>
    parameters:
      - name: str
        type: std::string
        default_argument: '"[unset-str]"'
    body: |
      std::vector<std::string> result_tokens;
      std::vector<std::string> tokens = split(str, "__");
      for (auto &token : tokens)
      {
         if (token.empty())
         {
            // Do nothing, move on to the next token
         }
         else
         {
            if (!is_valid_prefix_token(token)) break;

            result_tokens.push_back(token);
         }
      }
      return result_tokens;


  - name: is_valid_prefix_token
    static: true
    type: bool
    parameters:
      - name: possible_prefix_token
        type: std::string
        default_argument: '"[unset-possible_prefix_token]"'
    body: |
      if (possible_prefix_token.empty() || !isupper(possible_prefix_token[0]))
      {
         return false;
      }
      bool prev_is_underscore = false;
      for (char c : possible_prefix_token)
      {
         if (!isalnum(c) && c != '_')
         {
            return false;
         }
         if (c == '_' && prev_is_underscore)
         {
            return false;
         }
         prev_is_underscore = (c == '_');
      }
      return true;


  - name: split
    static: true
    type: std::vector<std::string>
    parameters:
      - name: input
        type: std::string
        default_argument: '"[unset-input]"'
      - name: delimiter
        type: std::string
        default_argument: '"__"'
    body: |
      std::vector<std::string> tokens;
      size_t start = 0, end = 0;
      while ((end = input.find(delimiter, start)) != std::string::npos)
      {
         tokens.push_back(input.substr(start, end - start));
         start = end + delimiter.length();
      }
      tokens.push_back(input.substr(start));
      return tokens;


dependencies:


  - symbol: ::testing::Test
    headers: [ gtest/gtest.h ]


