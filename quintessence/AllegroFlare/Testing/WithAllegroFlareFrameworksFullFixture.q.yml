parent_classes:


  - class: ::testing::Test
    scope: public
    init_with: ''


properties:


  - name: framework
    type: AllegroFlare::Frameworks::Full
    getter_ref: true
    init_with: ''

  - name: framework_event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    getter: true

  - name: framework_deployment_environment
    type: AllegroFlare::DeploymentEnvironment*
    init_with: nullptr
    getter: true

  - name: framework_bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    getter: true

  - name: framework_font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    getter: true

  - name: framework_sample_bin
    type: AllegroFlare::SampleBin*
    init_with: nullptr
    getter: true

  - name: framework_model_bin
    type: AllegroFlare::ModelBin*
    init_with: nullptr
    getter: true

  - name: framework_video_bin
    type: AllegroFlare::VideoBin*
    init_with: nullptr
    getter: true

  - name: framework_dialog_system
    type: AllegroFlare::DialogSystem::DialogSystem*
    init_with: nullptr
    getter: true

  - name: framework_audio_controller
    type: AllegroFlare::AudioController*
    init_with: nullptr
    getter: true

  - name: framework_profiler
    type: AllegroFlare::Profiler*
    init_with: nullptr
    getter: true

  - name: framework_data_folder_path
    type: std::string
    init_with: '"[unset-framework_data_folder_path]"'
    getter: true

  - name: framework_primary_render_surface
    type: AllegroFlare::RenderSurfaces::Base*
    init_with: nullptr
    getter: true

  - name: test_prefix_tokens
    type: std::vector<std::string>
    init_with: '{}'

  - name: test_snapshots_folder
    type: std::string
    init_with: '"[unset-test_snapshots_folder]"'

  - name: initialized
    type: bool
    init_with: false


functions:


  - name: SetUp
    type: void
    virtual: true
    override: true
    guards: [ (!initialized) ]
    body: |
      test_prefix_tokens = extract_test_prefix_tokens();

      framework.set_deployment_environment("test");
      framework.disable_auto_created_config_warning();
      framework.disable_fullscreen();
      framework.initialize();

      this->framework_event_emitter = &framework.get_event_emitter_ref();
      this->framework_bitmap_bin = &framework.get_bitmap_bin_ref();
      this->framework_font_bin = &framework.get_font_bin_ref();
      this->framework_model_bin = &framework.get_model_bin_ref();
      this->framework_video_bin = &framework.get_video_bin_ref();
      this->framework_dialog_system = &framework.get_dialog_system_ref();
      this->framework_audio_controller = &framework.get_audio_controller_ref();
      this->framework_sample_bin = &framework.get_sample_bin_ref();
      this->framework_data_folder_path = framework.get_data_folder_path();
      this->framework_profiler = &framework.get_profiler_ref();
      this->framework_deployment_environment = &framework.get_deployment_environment_ref();
      this->framework_primary_render_surface = framework.get_primary_render_surface();

      test_snapshots_folder = "./tmp/test_snapshots/";

      // TODO: consider setting this value in the framework
      //al_clear_to_color(ALLEGRO_COLOR{0.05f, 0.05f, 0.055f, 1.0f});

      // TODO: set the window title to the current test name
      //std::string new_window_title = build_full_test_name_str();
      //al_set_window_title(display, new_window_title.c_str());

      initialized = true;

      return;


  - name: TearDown
    type: void
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      // TODO: Test this screenshot inference and action logic
      if (test_name_indicates_it_wants_a_screenshot())
      {
         capture_screenshot(build_full_test_name_str() + ".png");
      }

      framework.shutdown();
      this->framework_event_emitter = nullptr;
      this->framework_bitmap_bin = nullptr;
      this->framework_font_bin = nullptr;
      this->framework_model_bin = nullptr;
      this->framework_video_bin = nullptr;
      this->framework_sample_bin = nullptr;
      // TODO: Add test for this "framework_data
      this->framework_data_folder_path = "[unset-framework_data_folder_path]";
      this->framework_profiler = nullptr;
      this->framework_primary_render_surface = nullptr;
      initialized = false;
      return;


  - name: framework_register_and_activate_screen
    type: void
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: screen
        type: AllegroFlare::Screens::Base*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      framework.register_and_activate_screen(name, screen);
      return;


  - name: framework_register_screen
    type: void
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: screen
        type: AllegroFlare::Screens::Base*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      // TODO: Test this method
      framework.register_screen(name, screen);
      return;


  - name: framework_activate_screen
    type: void
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: screen
        type: AllegroFlare::Screens::Base*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      // TODO: Test this method
      framework.activate_screen(name);
      return;


  - name: framework_run_loop
    type: void
    parameters:
      - name: num_seconds_to_auto_abort
        type: float
        default_argument: 3
    guards: [ initialized ]
    body: |
      framework.run_loop(num_seconds_to_auto_abort);
      return;


  - name: get_test_name
    type: std::string
    body: |
      // TODO: use AllegroFlare::Testing::TestNameInference for this logic
      const testing::TestInfo* const test_info = testing::UnitTest::GetInstance()->current_test_info();
      return test_info->name();


  - name: get_test_suite_name
    type: std::string
    body: |
      // TODO: use AllegroFlare::Testing::TestNameInference for this logic
      const testing::TestInfo* const test_info = testing::UnitTest::GetInstance()->current_test_info();
      return test_info->test_suite_name();


  - name: build_full_test_name_str
    type: std::string
    body: |
      // TODO: use AllegroFlare::Testing::TestNameInference for this logic
      return get_test_suite_name() + " - " + get_test_name();


  - name: extract_test_prefix_tokens
    type: std::vector<std::string>
    body: |
      return AllegroFlare::Testing::TestNameInference::extract_prefix_tokens(get_test_name());
    body_dependency_symbols:
      - AllegroFlare::Testing::TestNameInference


  - name: test_name_indicates_it_wants_a_screenshot
    type: bool
    body: |
      return test_name_has_prefix_token("CAPTURE");


  - name: test_name_has_prefix_token
    type: bool
    parameters:
      - name: possible_prefix_token
        type: std::string
        default_argument: '"[unset-possible_prefix_token]"'
    body: |
      // TODO: convert this to an std::set
      return (std::find(test_prefix_tokens.begin(), test_prefix_tokens.end(), possible_prefix_token) != test_prefix_tokens.end());


  - name: capture_screenshot
    parameters:
      - name: base_filename
        type: std::string
        default_argument: '"WithAllegroFlareFrameworksFullFixture-screenshot.png"'
    body: |
      // TODO: use AllegroFlare::Testing::TestNameInference for this logic
      std::string full_file_save_location = test_snapshots_folder + base_filename;

      al_flip_display(); // this capture_screenshot technique assumes the pixels to capture are currently being
                         // shown on the display.  This al_flip_display is added here in order to flip the
                         // front-buffer *back* to the backbuffer so it can be used to capture the screenshot

      // TODO: Consider using the primary rendering surface instead of the display
      ALLEGRO_BITMAP *bitmap_to_save = al_get_backbuffer(framework.get_primary_display()->al_display);

      bool screenshot_successful = al_save_bitmap(full_file_save_location.c_str(), bitmap_to_save);
      if (screenshot_successful)
      {
         // TODO: Use Logger
         std::cout //<< AllegroFlare::TerminalColors::CYAN
                   << "[AllegroFlare::Testing::WithAllegroRenderingFixture::screenshot]: info: screenshot saved to "
                   << "\"" << full_file_save_location << "\""
                   //<< AllegroFlare::TerminalColors::DEFAULT
                   << std::endl;
      }
      else
      {
         std::cout //<< AllegroFlare::TerminalColors::RED
                   << "[AllegroFlare::Testing::WithAllegroRenderingFixture::screenshot]: error: screenshot "
                   << "CAPTURE was not successful when trying to saving to \"" << full_file_save_location << "\""
                   //<< AllegroFlare::TerminalColors::DEFAULT
                   << std::endl;
      }


dependencies:


  - symbol: ::testing::Test
    headers: [ gtest/gtest.h ]
  - symbol: AllegroFlare::Frameworks::Full
    headers: [ AllegroFlare/Frameworks/Full.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::SampleBin
    headers: [ AllegroFlare/SampleBin.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]
  - symbol: AllegroFlare::Profiler
    headers: [ AllegroFlare/Profiler.hpp ]
  - symbol: AllegroFlare::VideoBin
    headers: [ AllegroFlare/VideoBin.hpp ]
  - symbol: AllegroFlare::RenderSurfaces::Base
    headers: [ AllegroFlare/RenderSurfaces/Base.hpp ]
  - symbol: AllegroFlare::DeploymentEnvironment
    headers: [ AllegroFlare/DeploymentEnvironment.hpp ]
  - symbol: AllegroFlare::Testing::TestNameInference
    headers: [ AllegroFlare/Testing/TestNameInference.hpp ]
  - symbol: AllegroFlare::DialogSystem::DialogSystem
    headers: [ AllegroFlare/DialogSystem/DialogSystem.hpp ]
  - symbol: AllegroFlare::AudioController
    headers: [ AllegroFlare/AudioController.hpp ]


