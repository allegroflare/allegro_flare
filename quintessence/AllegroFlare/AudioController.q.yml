properties:


  - name: sample_bin
    type: AllegroFlare::SampleBin*
    private: true
    init_with: nullptr
    constructor_arg: true

  - name: sound_effects_identifier_prefix
    type: std::string
    private: true
    init_with: '"sound_effects/"'

  - name: music_tracks_identifier_prefix
    type: std::string
    private: true
    init_with: '"music_tracks/"'

  - name: sound_effect_elements
    type: std::map<std::string, AllegroFlare::AudioRepositoryElement>
    private: true
    constructor_arg: true
    init_with: '{}'

  - name: music_track_elements
    type: std::map<std::string, AllegroFlare::AudioRepositoryElement>
    private: true
    constructor_arg: true
    init_with: '{}'

  - name: sound_effects
    type: std::map<std::string, AllegroFlare::Sound*>
    private: true
    init_with: '{}'

  - name: music_tracks
    type: std::map<std::string, AllegroFlare::Sound*>
    private: true
    init_with: '{}'

  - name: current_music_track_identifier
    type: std::string
    private: true
    init_with: '""'

  - name: global_volume
    type: float
    private: true
    init_with: 1.0f

  - name: output_loading_debug_to_cout
    type: bool
    private: true
    init_with: false

  - name: initialized
    type: bool
    getter: true
    init_with: false

  - name: music_tracks_loaded
    type: bool
    getter: true
    init_with: false

  - name: sound_effects_loaded
    type: bool
    getter: true
    init_with: false


methods:


  - name: initialize
    guards:
      - al_is_system_installed()
      - al_is_audio_installed()
      - al_is_acodec_addon_initialized()
      - (!initialized)
      - sample_bin
    body: |
      // TODO: improve these couts
      if (output_loading_debug_to_cout) std::cout << "Loading assets in AudioController... " << std::endl;
      if (output_loading_debug_to_cout) std::cout << "sound_effects:" << std::endl;

      destruct_all_sound_effects();
      load_sound_effects();

      if (output_loading_debug_to_cout) std::cout << "music_tracks:" << std::endl;

      destruct_all_music_tracks();
      load_music_tracks();

      if (output_loading_debug_to_cout) std::cout << "[AllegroFlare::AudioController::load()] finished." << std::endl;

      initialized = true;
      return;
    body_dependency_symbols:
      - al_is_audio_initialized
      - al_is_acodec_addon_initialized


  - name: set_and_load_sound_effect_elements
    guards: [ initialized ]
    parameters:
      - name: sound_effect_elements
        type: std::map<std::string, AllegroFlare::AudioRepositoryElement>
        default_argument: '{}'
    body: |
      destruct_all_sound_effects();

      this->sound_effect_elements = sound_effect_elements;
      load_sound_effects();
      return;


  - name: set_and_load_music_track_elements
    guards: [ initialized ]
    parameters:
      - name: music_track_elements
        type: std::map<std::string, AllegroFlare::AudioRepositoryElement>
        default_argument: '{}'
    body: |
      destruct_all_music_tracks();

      this->music_track_elements = music_track_elements;
      load_music_tracks();
      return;


  - name: load_sound_effects
    private: true
    body: |
      for (auto &sound_effect_element : sound_effect_elements)
      {
         std::string identifier = sound_effect_element.first;
         std::string filename = sound_effect_element.second.get_filename();
         bool loop = sound_effect_element.second.get_loop();
         float volume = sound_effect_element.second.get_volume();

         std::string asset_key = sound_effects_identifier_prefix + filename;

         if (output_loading_debug_to_cout) std::cout << "- asset_key: " << asset_key << std::endl;

         ALLEGRO_SAMPLE *sample = sample_bin->auto_get(asset_key);
         Sound *sound = new Sound(sample);
         sound->initialize();
         sound->loop(loop);
         sound->volume(global_volume * volume);

         // TODO manage case where identifier already exists for this record

         sound_effects[identifier] = sound;
      }

      return;


  - name: load_music_tracks
    private: true
    body: |
      destruct_all_music_tracks();

      for (auto &music_track_element : music_track_elements)
      {
         std::string identifier = music_track_element.first;
         std::string filename = music_track_element.second.get_filename();
         bool loop = music_track_element.second.get_loop();
         float volume = music_track_element.second.get_volume();

         std::string asset_key = music_tracks_identifier_prefix + filename;

         if (output_loading_debug_to_cout) std::cout << "- asset_key: " << asset_key << std::endl;

         ALLEGRO_SAMPLE *sample = sample_bin->auto_get(asset_key);
         Sound *sound = new Sound(sample);
         sound->initialize();
         sound->loop(loop);
         sound->volume(global_volume * volume);

         // TODO manage case where identifier already exists for this record

         music_tracks[identifier] = sound;
      }

      return;


  - name: destruct
    xprivate: true
    body: |
      destruct_all_sound_effects();
      destruct_all_music_tracks();
      return;


  - name: destruct_all
    private: true
    body: |
      destruct_all_sound_effects();
      destruct_all_music_tracks();
      return;


  - name: destruct_all_sound_effects
    private: true
    body: |
      stop_all_sound_effects();
      for (auto &sound_effect : sound_effects)
      {
         AllegroFlare::Logger::info_from(
            "AllegroFlare::AudioController::destruct_all_sound_effects",
            "Destructing sound_effect with identifier \"" + sound_effect.first + "\"."
         );
         delete sound_effect.second;
      }
      sound_effects.clear(); // TODO: Please review if destruct_all_sound_effects should include clearing
      return;


  - name: destruct_all_music_tracks
    private: true
    body: |
      stop_all_music_tracks();
      for (auto &music_track : music_tracks)
      {
         AllegroFlare::Logger::info_from(
            "AllegroFlare::AudioController::destruct_all_music_tracks",
            "Destructing music_track with identifier \"" + music_track.first + "\"."
         );
         delete music_track.second;
      }
      music_tracks.clear(); // TODO: Please review if destruct_all_music_tracks should include clearing
      return;


  - name: stop_all
    guards: [ initialized ]
    body: |
      stop_all_sound_effects();
      stop_all_music_tracks();
      return;


  - name: stop_all_music_tracks
    body: |
      for (auto &music_track : music_tracks) music_track.second->stop();
      current_music_track_identifier = "";
      return;


  - name: stop_all_sound_effects
    private: true
    body: |
      for (auto &sound_effect : sound_effects) sound_effect.second->stop();
      return;


  - name: set_global_volume
    guards: [ initialized ]
    parameters:
      - name: volume
        type: float
        default_argument: 0.1
    body: |
      // TODO: tweak this so that calling this function will not overwrite custom volumes
      // that exist on the repository elements
      for (auto &sound_effect : sound_effects) sound_effect.second->volume(global_volume);
      for (auto &music_track : music_tracks) music_track.second->volume(global_volume);
      return;


  - name: play_sound_effect
    guards: [ initialized ]
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"a-sound-effect-identifier-that-is-not-set"'
    body: |
      Sound *sound = find_sound_effect_sound_object_by_identifier(identifier);
      AudioRepositoryElement element = find_sound_effect_element_by_identifier(identifier);
      if (sound)
      {
         if (!sound->is_playing())
         {
            sound->play();
         }
         else // sound is currently playing, do some logic depending on what the configuration is
         {
            if (element.overplay_strategy_is_ignore())
            {
               // do nothing
            }
            else if (element.overplay_strategy_is_restart())
            {
               sound->stop();
               sound->play();
            }
         }
      }
      return;


  - name: play_music_track
    guards: [ initialized ]
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"a-music-track-identifier-that-is-not-set"'
    body: |
      Sound *sound = find_music_track_sound_object_by_identifier(identifier);
      AudioRepositoryElement element = find_music_track_element_by_identifier(identifier);
      if (sound)
      {
         if (!sound->is_playing())
         {
            stop_all_music_tracks();
            sound->play();
         }
         else // sound is currently playing, do some logic depending on what the configuration is
         {
            if (element.overplay_strategy_is_ignore())
            {
               // do nothing
            }
            else if (element.overplay_strategy_is_restart())
            {
               stop_all_music_tracks();
               sound->stop();
               sound->play();
            }
         }
      }
      return;


  - name: sound_effect_element_exists
    private: true
    type: bool
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"a-sound-effect-identifier-that-is-not-set"'
    body: |
      return (sound_effect_elements.count(identifier) > 0);


  - name: find_sound_effect_sound_object_by_identifier
    private: true
    type: AllegroFlare::Sound*
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"a-sound-effect-identifier-that-is-not-set"'
    body: |
      std::map<std::string, AllegroFlare::Sound*>::iterator it = sound_effects.find(identifier);
      if (it == sound_effects.end())
      {
         AllegroFlare::Logger::warn_from(
            "AllegroFlare::AudioController::find_sound_effect_sound_object_by_identifier",
            "Unable to find element with identifier \"" + identifier + "\"."
         );
         return nullptr;
      }
      return it->second;
    body_dependency_symbols:
      - AllegroFlare::TerminalColors


  - name: find_sound_effect_element_by_identifier
    private: true
    type: AllegroFlare::AudioRepositoryElement
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"a-sound-effect-identifier-that-is-not-set"'
    body: |
      std::map<std::string, AudioRepositoryElement>::iterator it = sound_effect_elements.find(identifier);
      if (it == sound_effect_elements.end())
      {
         AllegroFlare::Logger::warn_from(
            "AllegroFlare::AudioController::find_sound_effect_element_by_identifier",
            "Unable to find element with identifier \"" + identifier + "\"."
         );
         return {};
      }
      return it->second;
    body_dependency_symbols:
      - AllegroFlare::Logger
      - AllegroFlare::TerminalColors


  - name: find_music_track_sound_object_by_identifier
    private: true
    type: AllegroFlare::Sound*
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"a-music-track-identifier-that-is-not-set"'
    body: |
      std::map<std::string, Sound*>::iterator it = music_tracks.find(identifier);
      if (it == music_tracks.end())
      {
         AllegroFlare::Logger::warn_from(
            "AllegroFlare::AudioController::find_music_track_sound_object_by_identifier",
            "Unable to find element with identifier \"" + identifier + "\"."
         );
         return nullptr;
      }
      return it->second;


  - name: music_track_element_exists
    private: true
    type: bool
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"a-music-track-identifier-that-is-not-set"'
    body: |
      return (music_track_elements.count(identifier) > 0);


  - name: find_music_track_element_by_identifier
    private: true
    type: AllegroFlare::AudioRepositoryElement
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"a-music-track-identifier-that-is-not-set"'
    body: |
      std::map<std::string, AudioRepositoryElement>::iterator it = music_track_elements.find(identifier);
      if (it == music_track_elements.end())
      {
         AllegroFlare::Logger::warn_from(
            "AllegroFlare::AudioController::find_music_track_element_by_identifier",
            "Unable to find element with identifier \"" + identifier + "\"."
         );
         return {};
      }
      return it->second;


  - name: dump_to_cout
    body: |
      for (auto &sound_effect_element : sound_effect_elements)
      {
         std::string identifier = sound_effect_element.first;
         std::string filename = sound_effect_element.second.get_filename();
         bool loop = sound_effect_element.second.get_loop();
         
         std::cout << "{ identifier: \"" << identifier << "\", source: \"" << filename << "\" }" << std::endl;
      }
      for (auto &music_track_element : music_track_elements)
      {
         std::string identifier = music_track_element.first;
         std::string filename = music_track_element.second.get_filename();
         bool loop = music_track_element.second.get_loop();
         
         std::cout << "{ identifier: \"" << identifier << "\", source: \"" << filename << "\" }" << std::endl;
      }
      


dependencies:


  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::TerminalColors
    headers: [ AllegroFlare/TerminalColors.hpp ]
  - symbol: AllegroFlare::SampleBin
    headers: [ AllegroFlare/SampleBin.hpp ]
  - symbol: AllegroFlare::SampleBin*
    headers: [ AllegroFlare/SampleBin.hpp ]
  - symbol: AllegroFlare::AudioRepositoryElement
    headers: [ AllegroFlare/AudioRepositoryElement.hpp ]
  - symbol: std::map<std::string, AllegroFlare::AudioRepositoryElement>
    headers: [ map, string, AllegroFlare/AudioRepositoryElement.hpp ]
  - symbol: std::map<std::string, AllegroFlare::Sound*>
    headers: [ map, string, AllegroFlare/Sound.hpp ]
  - symbol: AllegroFlare::Sound*
    headers: [ AllegroFlare/Sound.hpp ]
  - symbol: al_is_audio_initialized
    headers: [ allegro5/allegro_audio.h ]
  - symbol: al_is_acodec_addon_initialized
    headers: [ allegro5/allegro_acodec.h ]
  - symbol: AllegroFlare::Sound
    headers: [ AllegroFlare/Sound.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]


