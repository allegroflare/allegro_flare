properties:


  - name: sample_bin
    type: AllegroFlare::SampleBin*
    private: true
    init_with: nullptr
    constructor_arg: true

  - name: sound_effects_identifier_prefix
    type: std::string
    private: true
    init_with: '"sound_effects/"'

  - name: music_tracks_identifier_prefix
    type: std::string
    private: true
    init_with: '"music_tracks/"'

  - name: sound_effect_elements
    type: std::map<std::string, AllegroFlare::AudioRepositoryElement>
    private: true
    constructor_arg: true
    init_with: '{}'

  - name: music_track_elements
    type: std::map<std::string, AllegroFlare::AudioRepositoryElement>
    private: true
    constructor_arg: true
    init_with: '{}'

  - name: sound_effects
    type: std::map<std::string, AllegroFlare::Sound*>
    private: true
    init_with: '{}'

  - name: music_tracks
    type: std::map<std::string, AllegroFlare::Sound*>
    private: true
    init_with: '{}'

  - name: current_music_track_identifier
    type: std::string
    private: true
    init_with: '""'

  - name: global_volume
    type: float
    private: true
    init_with: '1.0'

  - name: output_loading_debug_to_cout
    type: bool
    private: true
    init_with: true

  - name: initialized
    type: bool
    getter: true
    init_with: false


functions:


  - name: initialize
    guards:
      - al_is_system_installed()
      - al_is_audio_installed()
      - al_is_acodec_addon_initialized()
      - (!initialized)
      - sample_bin
    body: |
      if (output_loading_debug_to_cout) std::cout << "Loading assets in AudioController... " << std::endl;
      if (output_loading_debug_to_cout) std::cout << "sound_effects:" << std::endl;
      for (auto &sound_effect_element : sound_effect_elements)
      {
         std::string identifier = sound_effect_element.first;
         std::string filename = sound_effect_element.second.get_filename();
         bool loop = sound_effect_element.second.get_loop();

         std::string asset_key = sound_effects_identifier_prefix + filename;

         if (output_loading_debug_to_cout) std::cout << "- asset_key: " << asset_key << std::endl;

         ALLEGRO_SAMPLE *sample = sample_bin->auto_get(asset_key);
         Sound *sound = new Sound(sample);
         sound->loop(loop);
         sound->volume(global_volume);

         // TODO manage case where identifier already exists for this record

         sound_effects[identifier] = sound;
      }
      if (output_loading_debug_to_cout) std::cout << "music_tracks:" << std::endl;
      for (auto &music_track_element : music_track_elements)
      {
         std::string identifier = music_track_element.first;
         std::string filename = music_track_element.second.get_filename();
         bool loop = music_track_element.second.get_loop();

         std::string asset_key = music_tracks_identifier_prefix + filename;

         if (output_loading_debug_to_cout) std::cout << "- asset_key: " << asset_key << std::endl;

         ALLEGRO_SAMPLE *sample = sample_bin->auto_get(asset_key);
         Sound *sound = new Sound(sample);
         sound->loop(loop);
         sound->volume(global_volume);

         // TODO manage case where identifier already exists for this record

         music_tracks[identifier] = sound;
      }

      initialized = true;
      std::cout << "[AllegroFlare::AudioController::initialize()] finished." << std::endl;
      return;
    body_dependency_symbols:
      - al_is_audio_initialized
      - al_is_acodec_addon_initialized


  - name: destruct
    guards: [ initialized ]
    body: |
      stop_all();
      for (auto &sound_effect : sound_effects) delete sound_effect.second;
      for (auto &music_track : music_tracks) delete music_track.second;
      return;


  - name: stop_all
    guards: [ initialized ]
    body: |
      stop_all_sound_effects();
      stop_all_music();
      return;


  - name: stop_all_music
    guards: [ initialized ]
    body: |
      for (auto &music_track : music_tracks) music_track.second->stop();
      current_music_track_identifier = "";
      return;


  - name: stop_all_sound_effects
    guards: [ initialized ]
    body: |
      for (auto &sound_effect : sound_effects) sound_effect.second->stop();
      return;


  - name: set_global_volume
    guards: [ initialized ]
    parameters:
      - name: volume
        type: float
        default_argument: 0.1
    body: |
      for (auto &sound_effect : sound_effects) sound_effect.second->volume(global_volume);
      for (auto &music_track : music_tracks) music_track.second->volume(global_volume);
      return;


  - name: play_sound_effect_by_identifier
    guards: [ initialized ]
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"a-sound-effect-identifier-that-is-not-set"'
    body: |
      Sound *sound = find_sound_effect_by_identifier(identifier);
      if (sound) sound->play();
      return;


  - name: play_music_track_by_identifier
    guards: [ initialized ]
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"a-music-track-identifier-that-is-not-set"'
    body: |
      if (identifier == current_music_track_identifier) return; // NOTE: GUARD COULD BE IMPROVED
      stop_all_music();
      Sound *sound = find_music_track_by_identifier(identifier);
      if (sound) sound->play();
      return;


  - name: find_sound_effect_by_identifier
    private: true
    type: AllegroFlare::Sound*
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"a-sound-effect-identifier-that-is-not-set"'
    body: |
      std::map<std::string, AllegroFlare::Sound*>::iterator it = sound_effects.find(identifier);
      if (it == sound_effects.end())
      {
         std::cout << "AudioController::find_sound_effect_by_identifier() error: "
            << "unable to find element with identifier \""
            << identifier
            << "\""
            << std::endl;
         return nullptr;
      }
      return it->second;


  - name: find_music_track_by_identifier
    private: true
    type: AllegroFlare::Sound*
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"a-music-track-identifier-that-is-not-set"'
    body: |
      std::map<std::string, Sound*>::iterator it = music_tracks.find(identifier);
      if (it == music_tracks.end())
      {
         std::cout << "[AudioController::find_music_track_by_identifier] error: "
                   << "unable to find element with identifier \"" << identifier << "\"" << std::endl;
         return nullptr;
      }
      return it->second;


dependencies:


  - symbol: AllegroFlare::SampleBin
    headers: [ AllegroFlare/SampleBin.hpp ]
  - symbol: AllegroFlare::SampleBin*
    headers: [ AllegroFlare/SampleBin.hpp ]
  - symbol: std::map<std::string, AllegroFlare::AudioRepositoryElement>
    headers: [ map, string, AllegroFlare/AudioRepositoryElement.hpp ]
  - symbol: std::map<std::string, AllegroFlare::Sound*>
    headers: [ map, string, AllegroFlare/Sound.hpp ]
  - symbol: AllegroFlare::Sound*
    headers: [ AllegroFlare/Sound.hpp ]
  - symbol: al_is_audio_initialized
    headers: [ allegro5/allegro_audio.h ]
  - symbol: al_is_acodec_addon_initialized
    headers: [ allegro5/allegro_acodec.h ]


