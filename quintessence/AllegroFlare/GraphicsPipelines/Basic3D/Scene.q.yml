properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    getter: true
    setter: true

  - name: model_bin
    type: AllegroFlare::ModelBin*
    init_with: nullptr
    getter: true
    setter: true

  - name: camera
    type: AllegroFlare::Camera3D
    init_with: ''
    getter_ref: true
    setter: true

  - name: entities
    type: std::vector<AllegroFlare::GraphicsPipelines::Basic3D::Entity>
    init_with: '{}'

  - name: initialized
    type: bool
    init_with: false


methods:


  - name: get_entities_ref
    type: std::vector<AllegroFlare::GraphicsPipelines::Basic3D::Entity>
    guards: [ initialized ]
    body: |
      // TODO: Test this guard
      return entities;


  - name: initialize
    guards:
      - (!initialized)
      - model_bin
      - bitmap_bin
    body: |
      // Position the camera 5 meters back while looking at the origin (0, 0, 0)
      camera.stepout = AllegroFlare::Vec3D(0, 0, 5);

      // Tilt the camera, so it is looking down slightly at the target
      camera.tilt = 0.4;

      initialized = true;

      return;


  - name: add_entity
    parameters:
      - name: obj_identifier
        type: std::string
        default_argument: '"[unset-obj_identifier]"'
      - name: texture_bitmap_identifier
        type: std::string
        default_argument: '"[unset-texture_bitmap_identifier]"'
      - name: position
        type: AllegroFlare::Vec3D
        default_argument: 'AllegroFlare::Vec3D({ 0, 0, 0 })'
      - name: rotation
        type: AllegroFlare::Vec3D
        default_argument: 'AllegroFlare::Vec3D({ 0, 0, 0 })'
    body: |
      AllegroFlare::GraphicsPipelines::Basic3D::Entity result_entity;
      result_entity.model_obj_filename = obj_identifier;
      result_entity.model_texture_filename = texture_bitmap_identifier;

      result_entity.model = model_bin->auto_get(result_entity.model_obj_filename);
      result_entity.texture = bitmap_bin->auto_get(result_entity.model_texture_filename);
      result_entity.placement.position = position;
      result_entity.placement.rotation = rotation;
      entities.emplace_back(result_entity);
      return;


  - name: update
    guards: [ initialized ]
    body: |
      for (auto &entity : entities)
      {
         entity.placement.rotation.y += 0.00025;

         // TODO: Consider additional physics changes for these objects
      }
      return;


  - name: render
    guards: [ initialized ]
    body: |
      // TODO: Validate the render surface has depth
      // TODO: Clear the depth on the render surface

      // Setup the projection
      ALLEGRO_BITMAP *render_surface = al_get_target_bitmap();
      camera.setup_projection_on(render_surface);

      // Use the default allegro shader
      al_use_shader(NULL);

      // Draw all of the entities
      for (auto &entity : entities)
      {
         // Position, texture, and render model
         entity.placement.start_transform();
         entity.model->set_texture(entity.texture);
         entity.model->draw();
         entity.placement.restore_transform();
      }

      return;


dependencies:


  - symbol: AllegroFlare::Camera3D
    headers: [ AllegroFlare/Camera3D.hpp ]
  - symbol: AllegroFlare::GraphicsPipelines::Basic3D::Entity
    headers: [ AllegroFlare/GraphicsPipelines/Basic3D/Entity.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]
  - symbol: AllegroFlare::Vec3D
    headers: [ AllegroFlare/Vec3D.hpp ]


