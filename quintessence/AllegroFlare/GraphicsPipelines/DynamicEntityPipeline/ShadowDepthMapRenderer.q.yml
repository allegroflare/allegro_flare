properties:


  - name: entity_pool
    type: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityPool*
    constructor_arg: true
    init_with: nullptr
    getter: true
    setter: true

  - name: casting_light
    type: AllegroFlare::Camera3D
    init_with: '{}'
    getter: true
    setter: true

  - name: shadow_map_depth_pass_transform
    type: ALLEGRO_TRANSFORM
    init_with: '{}'
    getter: true
    setter: true

  - name: backbuffer_sub_bitmap
    type: ALLEGRO_BITMAP*
    constructor_arg: false
    init_with: nullptr
    getter: true
    setter: false

  - name: depth_map_shader
    type: AllegroFlare::Shaders::Base*
    init_with: nullptr

  - name: backbuffer_is_setup
    type: bool
    init_with: false

  - name: backbuffer_is_managed_by_this_class
    type: bool
    init_with: false


functions:


  - name: setup_backbuffer_from_display
    parameters:
      - name: display
        type: ALLEGRO_DISPLAY*
        default_argument: nullptr
    guards: [ '(!backbuffer_is_setup)', display ]
    body: |
      ALLEGRO_BITMAP *backbuffer = al_get_backbuffer(display);
      int width = al_get_display_width(display);
      int height = al_get_display_width(display);
      backbuffer_sub_bitmap = al_create_sub_bitmap(backbuffer, 0, 0, width, height);
      if (!backbuffer_sub_bitmap)
      {
         AllegroFlare::Errors::throw_error(
            "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer",
            "Could not create backbuffer_sub_bitmap from display in order to create a render surface."
         );
      }
      backbuffer_is_setup = true;
      backbuffer_is_managed_by_this_class = true;
      return;
    body_dependency_symbols:
      - AllegroFlare::Errors


  - name: init_shader
    guards: [ '(!depth_map_shader)' ]
    body: |
      // TODO: Change this folder path
      std::string ROOT_PATH_TO_DATA_FOLDER = "/Users/markoates/Repos/allegro_flare/bin/";

      std::string vertex_filename;
      std::string vertex_file_content;
      std::string fragment_filename;
      std::string fragment_file_content;

      vertex_filename = ROOT_PATH_TO_DATA_FOLDER + "data/shaders/depth_vertex.glsl";
      vertex_file_content = AllegroFlare::php::file_get_contents(vertex_filename);
      fragment_filename = ROOT_PATH_TO_DATA_FOLDER + "data/shaders/depth_fragment.glsl";
      fragment_file_content = AllegroFlare::php::file_get_contents(fragment_filename);

      depth_map_shader = new AllegroFlare::Shaders::Base("Base", vertex_file_content, fragment_file_content);
      depth_map_shader->initialize();
     
      return;
    body_dependency_symbols:
      - AllegroFlare::php


  - name: destroy
    body: |
      if (backbuffer_is_setup && backbuffer_is_managed_by_this_class) al_destroy_bitmap(backbuffer_sub_bitmap);
      if (depth_map_shader) { delete depth_map_shader; depth_map_shader = nullptr; }
      return;


  - name: render
    guards: [ entity_pool ]
    body: |
      casting_light.stepout = vec3d(0, 0, 15); // note

      float light_time_of_day = 0.15f;
      casting_light.tilt = 3.141592653 * light_time_of_day; // light_time_of_day = 0.05; // sunrise
                                                            //                     0.5; // high noon
                                                            //                     0.95; // sunset

      casting_light.spin = 0.0f; //light_spin;





      //if (!initialized) throw std::runtime_error("Wicked::SceneRenderer::refresh_shadow_map: ERROR: not initialized");
      //if (!_entities) throw std::runtime_error("CCc");
      //std::vector<Entity *> &entities = (*_entities);

      // TODO: store and restore states on glEnable/glCullFace, etc
      // https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glIsEnabled.xml
      // ^^ documentation of how this might be approached

      glEnable(GL_CULL_FACE); // requiring direct OpenGL calls eventually be fazed out
      glCullFace(GL_FRONT); 

      //al_set_target_bitmap(backbuffer_sub_bitmap);

      //al_clear_to_color(color::white);
      ///*
      setup_projection_SHADOW(); //(casting_light, shadow_map_depth_pass_transform);
      /*

      // setup the shader
      //depth_shader.use();
      depth_shader->activate();
   
      // draw the objects
      for (unsigned i=0; i<entities.size(); i++)
      {
         entities[i]->draw_for_depth_pass(depth_shader);

         ALLEGRO_TRANSFORM transform;
         place.build_transform(&transform);
         AllegroFlare::Shaders::Base::set_mat4("position_transform", &transform);

         if (model) model->draw();

      //return;
      }

      if (pointer)
      {
          pointer->draw_for_depth_pass(depth_shader);
      }


      al_set_target_bitmap(shadow_map_depth_pass_surface); // I *believe* newer versions of allegro have a depth map
                                                           // on a bitmap this may be able to be updated so that the
                                                           // backbuffer does not need be used to render this
      al_draw_bitmap(backbuffer_sub_bitmap, 0, 0, 0);

      //glEnable(GL_CULL_FACE); // requiring opengl should eventually be fazed out
      glCullFace(GL_BACK); 
      //glCullFace(GL_FRONT);
      glDisable(GL_CULL_FACE);

      */

      return;
    body_dependency_symbols:
      - glEnable


  - name: setup_projection_SHADOW
    guards: [ backbuffer_is_setup, depth_map_shader ]
    body: |
      float shadow_scale_divisor = 1.0; // Not sure what affect this has. Please see FunzDemo for more detailed comment
      //if (!initialized)
      //{
         //throw std::runtime_error("Wicked::SceneRenderer::setup_projection_SHADOW: ERROR: not initialized");
      //}
      //if (!backbuffer_sub_bitmap)
      //{
         //throw std::runtime_error("AAa");
      //}
      ///*

      // setup the render settings
      al_set_render_state(ALLEGRO_DEPTH_TEST, 1);
      al_set_render_state(ALLEGRO_WRITE_MASK, ALLEGRO_MASK_DEPTH | ALLEGRO_MASK_RGBA);
      al_clear_depth_buffer(1);

      ALLEGRO_TRANSFORM shadow_map_projection;

      casting_light.reverse_position_transform(&shadow_map_projection);


      ALLEGRO_BITMAP *bitmap = backbuffer_sub_bitmap;
      float divisor = shadow_scale_divisor;
      al_scale_transform_3d(&shadow_map_projection, 150/divisor, 150/divisor, 1); // note, increasing this divisor will
         // expand the range of the light projection, but it will reduce its resolution, a divisor of 1 will have a good
         // quality of shadow, but will have a range of about 15-20 meters; a divisor of 2 will double that size, but
         // reduce the resolution of the shadow. Original engine had a default of 1.0f;


      al_orthographic_transform(
         &shadow_map_projection,
         -al_get_bitmap_width(bitmap),
         al_get_bitmap_height(bitmap),
         30.0,
         al_get_bitmap_width(bitmap),
         -al_get_bitmap_height(bitmap),
         -30.0
      );

      ///*
      //if (transform_to_fill != nullptr)
      //{
      al_copy_transform(&shadow_map_depth_pass_transform, &shadow_map_projection);
      //}

      al_use_projection_transform(&shadow_map_projection);
      //*/
      return;
    body_dependency_symbols:
     - ALLEGRO_TRANSFORM


dependencies:


  - symbol: glEnable
    headers: [ allegro5/allegro_opengl.h ]
  - symbol: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityPool
    headers: [ AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityPool.hpp ]
  - symbol: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base
    headers: [ AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Base.hpp ]
  - symbol: AllegroFlare::Errors
    headers: [ AllegroFlare/Errors.hpp ]
  - symbol: ALLEGRO_BITMAP
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_DISPLAY
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Camera3D
    headers: [ AllegroFlare/Camera3D.hpp ]
  - symbol: AllegroFlare::php
    headers: [ AllegroFlare/UsefulPHP.hpp ]
  - symbol: AllegroFlare::Shaders::Base
    headers: [ AllegroFlare/Shaders/Base.hpp ]
  - symbol: ALLEGRO_TRANSFORM
    headers: [ allegro5/allegro.h ]


