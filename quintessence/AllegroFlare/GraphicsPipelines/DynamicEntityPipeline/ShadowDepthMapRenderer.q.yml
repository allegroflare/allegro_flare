properties:


  - name: entity_pool
    type: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityPool*
    constructor_arg: true
    init_with: nullptr
    getter: true
    setter: true

  - name: depth_map_shader
    type: AllegroFlare::Shaders::Base*
    init_with: nullptr

  - name: casting_light
    type: AllegroFlare::Camera3D
    init_with: '{}'
    getter: true
    getter_ref: true
    setter: true

  - name: render_surface
    type: AllegroFlare::RenderSurfaces::Bitmap
    init_with: ''
    getter: false
    setter: false

  - name: render_surface_is_setup
    type: bool
    init_with: false


functions:


  - name: get_result_surface_bitmap
    type: ALLEGRO_BITMAP*
    xguards: [ result_surface_bitmap ]
    body: |
      return render_surface.obtain_surface();
      //return result_surface_bitmap;


  - name: setup_result_surface_bitmap
    parameters:
      - name: width
        type: int
        default_argument: 1920
      - name: height
        type: int
        default_argument: 1080
    body: |
      render_surface.set_surface_width(width);
      render_surface.set_surface_height(height);
      render_surface.set_multisamples(0);
      render_surface.set_depth(32);
      render_surface.initialize();

      render_surface_is_setup = true;

      return;


  - name: init_shader
    guards: [ '(!depth_map_shader)' ]
    body: |
      // TODO: Change this folder path
      std::string ROOT_PATH_TO_DATA_FOLDER = "/Users/markoates/Repos/allegro_flare/bin/";

      std::string vertex_filename;
      std::string vertex_file_content;
      std::string fragment_filename;
      std::string fragment_file_content;

      vertex_filename = ROOT_PATH_TO_DATA_FOLDER + "data/shaders/depth_vertex.glsl";
      vertex_file_content = AllegroFlare::php::file_get_contents(vertex_filename);
      fragment_filename = ROOT_PATH_TO_DATA_FOLDER + "data/shaders/depth_fragment.glsl";
      fragment_file_content = AllegroFlare::php::file_get_contents(fragment_filename);

      depth_map_shader = new AllegroFlare::Shaders::Base("Base", vertex_file_content, fragment_file_content);
      depth_map_shader->initialize();
     
      return;
    body_dependency_symbols:
      - AllegroFlare::php


  - name: init_camera_defaults
    body: |
      casting_light.stepout = vec3d(0, 0, 15); // NOTE: This uses 15 meters as a z stepout
      float light_time_of_day = 0.15f;
      casting_light.tilt = 3.141592653 * light_time_of_day; // light_time_of_day = 0.05; // sunrise
                                                            //                     0.5; // high noon
                                                            //                     0.95; // sunset
      casting_light.spin = 0.0f;
      return;


  - name: destroy
    body: |
      //if (backbuffer_is_setup && backbuffer_is_managed_by_this_class) al_destroy_bitmap(backbuffer_sub_bitmap);
      if (depth_map_shader) { delete depth_map_shader; depth_map_shader = nullptr; } // NOTE: Does this destroy the
                                                                                     // shader? Does Shaders::Base have
                                                                                     // a destructor here?
      //if (result_surface_bitmap) { al_destroy_bitmap(result_surface_bitmap); result_surface_bitmap = nullptr; }
      // TODO: Destroy render surface
      return;


  - name: render
    guards: [ entity_pool ]
    body: |
      // TODO: store and restore states on glEnable/glCullFace, etc
      // https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glIsEnabled.xml
      // ^^ documentation of how this might be approached

      // TODO: Consider culling
      //glEnable(GL_CULL_FACE); // requiring direct OpenGL calls eventually be fazed out
      //glCullFace(GL_FRONT); 
      ALLEGRO_STATE prev_render_state;
      al_store_state(&prev_render_state, ALLEGRO_STATE_TARGET_BITMAP);

      // TODO: Test this line (backbuffer_sub_bitmap is set as target)
      al_set_target_bitmap(render_surface.obtain_surface());
      //al_set_target_bitmap(backbuffer_sub_bitmap);

      setup_projection_on_render_surface();
      //al_clear_to_color(color::white); // TODO: Consider clearing the bitmap
      //al_clear_to_color(ALLEGRO_COLOR{1, 1, 1, 1});
      //setup_projection_on_render_surface();

      al_clear_depth_buffer(1);
      al_clear_to_color(ALLEGRO_COLOR{1, 1, 1, 1});
      al_set_render_state(ALLEGRO_DEPTH_TEST, 1);
      al_set_render_state(ALLEGRO_WRITE_MASK, ALLEGRO_MASK_DEPTH | ALLEGRO_MASK_RGBA); // TODO: Consider using only a
                                                                                       // single color component
      //al_clear_depth_buffer(1);
      //al_clear_to_color(ALLEGRO_COLOR{1, 1, 1, 1});

      // setup the shader
      depth_map_shader->activate();

      // draw the objects
      for (auto &entity : entity_pool->get_entity_pool_ref())
      {
         // IMPORTANT: For now, assume all entities are StaticModel3D
         // TODO: Use "is rendered" and/or !"does_not_cast_shadow" flag

         if (entity->is_type(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticModel3D::TYPE))
         {
            AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticModel3D* as_static_model_3d =
               static_cast<AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticModel3D*>(entity);

            ALLEGRO_TRANSFORM transform;
            as_static_model_3d->get_placement_ref().build_transform(&transform);
            AllegroFlare::Shaders::Base::set_mat4("position_transform", &transform);

            AllegroFlare::Model3D *model = as_static_model_3d->get_model_3d();
            if (model) model->draw();
         }
         else if (entity->is_type(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D::TYPE))
         {
            AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D* as_dyn_model_3d =
               static_cast<AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D*>(entity);

            ALLEGRO_TRANSFORM transform;
            as_dyn_model_3d->get_placement_ref().build_transform(&transform);
            AllegroFlare::Shaders::Base::set_mat4("position_transform", &transform);

            AllegroFlare::Model3D *model = as_dyn_model_3d->get_model_3d();
            if (model) model->draw();
         }
         else if (entity->is_type(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticMultitextureModel3D::TYPE))
         {
            AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticMultitextureModel3D *as =
               static_cast<
                  AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticMultitextureModel3D*
               >(entity);

            //throw std::runtime_error("foo ");
            ALLEGRO_TRANSFORM transform;
            as->get_placement_ref().build_transform(&transform);
            AllegroFlare::Shaders::Base::set_mat4("position_transform", &transform);

            AllegroFlare::MultitextureModel3D* mtm = get_multitexture_model_3d(entity);
            if (mtm) render_multitexture_model_3d(mtm);
         }
      }

      //al_set_target_bitmap(result_surface_bitmap); // I *believe* newer versions of allegro have a depth map
                                                   // on a bitmap this may be able to be updated so that the
                                                   // backbuffer does not need be used to render this
      //al_draw_bitmap(backbuffer_sub_bitmap, 0, 0, 0);

      ////glEnable(GL_CULL_FACE); // requiring opengl should eventually be fazed out
      depth_map_shader->deactivate();
      al_restore_state(&prev_render_state);
      // TODO: Consider culling
      //glCullFace(GL_BACK); 
      //glDisable(GL_CULL_FACE);

      return;
    body_dependency_symbols:
      - glEnable
      - AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticModel3D
      - AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D
      - AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticMultitextureModel3D


  - name: setup_projection_on_render_surface
    xguards: [ render_surface_is_setup, depth_map_shader ]
    body: |
      float shadow_scale_divisor = 1.0; // See comment further down for more detail

      // setup the render settings
      //al_set_render_state(ALLEGRO_DEPTH_TEST, 1);
      //al_set_render_state(ALLEGRO_WRITE_MASK, ALLEGRO_MASK_DEPTH | ALLEGRO_MASK_RGBA);
      //al_clear_depth_buffer(1);

      ALLEGRO_TRANSFORM casting_light_projection_transform;

      casting_light.reverse_position_transform(&casting_light_projection_transform);


      ALLEGRO_BITMAP *bitmap = render_surface.obtain_surface(); //backbuffer_sub_bitmap;
      float divisor = shadow_scale_divisor;
      al_scale_transform_3d(&casting_light_projection_transform, 150/divisor, 150/divisor, 1); // note, increasing
         // this divisor will
         // expand the range of the light projection, but it will reduce its resolution, a divisor of 1 will have a good
         // quality of shadow, but will have a range of about 15-20 meters; a divisor of 2 will double that size, but
         // reduce the resolution of the shadow. Original engine had a default of 1.0f;

      // Adding some rotation
      //static float rotation = 0.0f;
      //rotation += 0.01f;
      //al_rotate_transform_3d(&casting_light_projection_transform, 0, 1, 0, rotation);


      al_orthographic_transform(
         &casting_light_projection_transform,
         -al_get_bitmap_width(bitmap),
         al_get_bitmap_height(bitmap),
         30.0,
         al_get_bitmap_width(bitmap),
         -al_get_bitmap_height(bitmap),
         -30.0
      );

      // TODO: Remove this line:
      //al_copy_transform(&casting_light_projection_transform, &shadow_map_projection);

      al_use_projection_transform(&casting_light_projection_transform);
      return;
    body_dependency_symbols:
     - ALLEGRO_TRANSFORM


  - name: get_multitexture_model_3d
    type: AllegroFlare::MultitextureModel3D*
    parameters:
      - name: entity
        type: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base*
        default_argument: nullptr
    guards: [ entity ]
    body: |
      using namespace AllegroFlare::GraphicsPipelines::DynamicEntityPipeline;

      // TODO: Optimize this lookup
      // TODO: Consider throw on unhandled type
      if (entity->is_type(Entities::StaticMultitextureModel3D::TYPE))
      {
         Entities::StaticMultitextureModel3D *as_casted = static_cast<Entities::StaticMultitextureModel3D*>(entity);
         return as_casted->get_multitexture_model_3d();
      }
      return nullptr;
    body_dependency_symbols:
      - AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticMultitextureModel3D


  - name: render_multitexture_model_3d
    parameters:
      - name: multitexture_model_3d
        type: AllegroFlare::MultitextureModel3D*
        default_argument: nullptr
    body: |
      // Render our subject
      // NOTE: For this test, will not be using "subject.draw()". Instead we will be rendering manually, and
      // setting  textures on the shader manually
      std::vector<AllegroFlare::ALLEGRO_VERTEX_WITH_TWO_UVS_AND_NORMAL> &vertices =
         multitexture_model_3d->vertexes;

      ALLEGRO_BITMAP* texture_a = nullptr; // NOTE: No texture is needed for shadow

      al_draw_prim(
         &vertices[0],
         multitexture_model_3d->vertex_declaration,
         texture_a, // TODO: In this sloppy case, this texture is used to determine the
                    // dimensionality of the textures(s) of the shader. Note that at the time of this writing, the
                    // textures and dimensions are all inter-dependent on each other in this way. This kink
                    // should eventually be worked out and cleaned up.
         0,
         vertices.size(),
         ALLEGRO_PRIM_TRIANGLE_LIST
      );
      return;
    body_dependency_symbols:
      - AllegroFlare::ALLEGRO_VERTEX_WITH_TWO_UVS_AND_NORMAL


dependencies:


  - symbol: glEnable
    headers: [ allegro5/allegro_opengl.h ]
  - symbol: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityPool
    headers: [ AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityPool.hpp ]
  - symbol: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base
    headers: [ AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Base.hpp ]
  - symbol: AllegroFlare::Errors
    headers: [ AllegroFlare/Errors.hpp ]
  - symbol: ALLEGRO_BITMAP
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_DISPLAY
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Camera3D
    headers: [ AllegroFlare/Camera3D.hpp ]
  - symbol: AllegroFlare::php
    headers: [ AllegroFlare/UsefulPHP.hpp ]
  - symbol: AllegroFlare::Shaders::Base
    headers: [ AllegroFlare/Shaders/Base.hpp ]
  - symbol: ALLEGRO_TRANSFORM
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticModel3D
    headers: [ AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticModel3D.hpp ]
  - symbol: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D
    headers: [ AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/DynamicModel3D.hpp ]
  - symbol: AllegroFlare::AllegroUnstable
    headers: [ AllegroFlare/AllegroUnstable.hpp ]
  - symbol: AllegroFlare::RenderSurfaces::Bitmap
    headers: [ AllegroFlare/RenderSurfaces/Bitmap.hpp ]
  - symbol: AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticMultitextureModel3D
    headers: [ AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticMultitextureModel3D.hpp ]
  - symbol: AllegroFlare::MultitextureModel3D
    headers: [ AllegroFlare/MultitextureModel3D.hpp ]
  - symbol: AllegroFlare::ALLEGRO_VERTEX_WITH_TWO_UVS_AND_NORMAL
    headers: [ AllegroFlare/ALLEGRO_VERTEX_WITH_TWO_UVS_AND_NORMAL.hpp ]


