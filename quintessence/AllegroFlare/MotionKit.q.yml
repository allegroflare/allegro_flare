functions:


  - name: normalize_age
    static: true
    type: float
    parameters:
      - name: start_time
        type: float
        default_argument: 0.0f
      - name: end_time
        type: float
        default_argument: 0.0f
      - name: time_now
        type: float
        default_argument: 0.0f
    body: |
      float length = (end_time - start_time);
      float time_now_in_range = time_now - start_time;
      if (length == 0.0f) return 0.0f;
      if (time_now_in_range >= length) return 1.0f;
      return time_now_in_range / length;


  - name: strobe
    static: true
    type: bool
    parameters:
      - name: start_time
        type: float
        default_argument: 0.0f
      - name: time_now
        type: float
        default_argument: 0.0f
      - name: strobes_per_second
        type: float
        default_argument: 10.0f
    body: |
      float strobe_frequency = 1.0 / strobes_per_second;
      float age = (time_now - start_time);
      return (fmod(age, strobe_frequency) < (strobe_frequency * 0.5));
    body_dependency_symbols:
      - fmod


  - name: smooth_strobe
    static: true
    type: bool
    parameters:
      - name: start_time
        type: float
        default_argument: 0.0f
      - name: time_now
        type: float
        default_argument: 0.0f
      - name: strobes_per_second
        type: float
        default_argument: 10.0f
    body: |
      // TODO: Update this method to actually be smooth (it's a copy of "strobe")
      float strobe_frequency = 1.0 / strobes_per_second;
      float age = (time_now - start_time);
      return (fmod(age, strobe_frequency) < (strobe_frequency * 0.5));
    body_dependency_symbols:
      - fmod


  - name: age
    static: true
    type: float
    parameters:
      - name: start_time
        type: float
        default_argument: 0.0f
      - name: end_time
        type: float
        default_argument: 0.0f
    body: |
      return (end_time - start_time);


  - name: interpolate
    static: true
    type: float
    parameters:
      - name: start_value
        type: float
        default_argument: 0.0f
      - name: end_value
        type: float
        default_argument: 0.0f
      - name: normalized_float
        type: float
        default_argument: 0.0f
    body: |
      return start_value + (normalized_float * (end_value - start_value));


dependencies:


  - symbol: fmod
    headers: [ cmath ]


