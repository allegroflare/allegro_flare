parent_classes:


  - class: AllegroFlare::CameraControlStrategies2D::Base
    scope: public
    init_with: AllegroFlare::CameraControlStrategies2D::SmoothSnapWithZoomEffect::TYPE


properties:


  - name: room_width
    type: float
    init_with: 1.0f
    constructor_arg: true

  - name: room_height
    type: float
    init_with: 1.0f
    constructor_arg: true
    
  - name: entity_to_follow
    type: AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*
    init_with: nullptr
    getter: true
    setter: true

  - name: tracking_target_position_x
    type: float
    init_with: 0.0

  - name: tracking_target_position_y
    type: float
    init_with: 0.0

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/CameraControlStrategies2D/SmoothSnapWithZoomEffect"'
    static: true
    constexpr: true


functions:


  - name: initialize
    virtual: true
    override: true
    guards: [ (!get_initialized()), get_camera(), (room_width > 0), (room_height > 0) ]
    body: |
      // TODO: only allow setting "room_width" and "room_height" to positive values

      get_camera_ref()->scale = AllegroFlare::vec2d(1.0 / 4.8, 1.0 / 4.5);
      get_camera_ref()->position = AllegroFlare::Vec2D{room_width/2, room_height/2};

      Base::initialize();
      return;


  - name: update
    virtual: true
    override: true
    guards: [ get_initialized(), get_camera() ]
    body: |
      // If the camera loses track of the "entity_to_follow" (the tracking target dies for example), this logic will
      // retain the last coordinate that had been tracked, and use it until a new tracking target is introduced.
      if (entity_to_follow)
      {
         tracking_target_position_x = entity_to_follow->get_place_ref().position.x;
         tracking_target_position_y = entity_to_follow->get_place_ref().position.y;
      }

      int target_room_x = (tracking_target_position_x / room_width);
      int target_room_y = (tracking_target_position_y / room_height);
      AllegroFlare::vec2d target_position = AllegroFlare::Vec2D{room_width/2, room_height/2};
      target_position += AllegroFlare::vec2d(target_room_x * room_width, target_room_y * room_height);

      AllegroFlare::vec2d current_camera_position = get_camera_ref()->position;
      AllegroFlare::vec2d delta = target_position - current_camera_position;
      AllegroFlare::vec2d largest_possible_fabs_delta = AllegroFlare::Vec2D(room_width*0.5, room_height*0.5);

      get_camera_ref()->position += (delta * 0.1);

      float distance = AllegroFlare::distance(get_camera_ref()->position, target_position);

      AllegroFlare::vec2d abs_delta = AllegroFlare::Vec2D(distance * 0.01, distance * 0.01);
      float xtra_zoom = (abs_delta.x + abs_delta.y);
      get_camera_ref()->scale = AllegroFlare::vec2d(1.0 / (4.8 + xtra_zoom), 1.0 / (4.5 + xtra_zoom));

      return;
    body_dependency_symbols:
      - AllegroFlare::Useful
      - fabs


dependencies:


  - symbol: AllegroFlare::CameraControlStrategies2D::Base
    headers: [ AllegroFlare/CameraControlStrategies2D/Base.hpp ]
  - symbol: AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D
    headers: [ AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp ]
  - symbol: fabs
    headers: [ cmath ]
  - symbol: AllegroFlare::Useful
    headers: [ AllegroFlare/Useful.hpp ]


