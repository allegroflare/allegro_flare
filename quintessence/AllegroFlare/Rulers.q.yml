properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true


methods:


  - name: draw_dimensional_grid
    static: true
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: z
        type: float
        default_argument: 0.0f
      - name: spacing
        type: float
        default_argument: '(16*4.8)'
    guards: [ al_is_system_installed(), al_is_primitives_addon_initialized() ]
    body: |
      for (int zz=-10; zz<10; zz++)
         for (int xx=-10; xx<10; xx++)
            for (int yy=-10; yy<10; yy++)
            {
               ALLEGRO_STATE previous_target_bitmap_state;
               al_store_state(&previous_target_bitmap_state, ALLEGRO_STATE_TRANSFORM);
               //al_set_target_bitmap(display_bitmap);
               //al_use_projection_transform(&trans);

               ALLEGRO_TRANSFORM trans;

               al_copy_transform(&trans, al_get_current_transform());

               //al_identity_transform(&trans);
               al_translate_transform_3d(&trans, x+xx*spacing, y+yy*spacing, z+zz*spacing);
               al_use_transform(&trans);
               al_draw_filled_rectangle(-0.5, -0.5, 0.5, 0.5, ALLEGRO_COLOR{0.5, 0.5, 0.5, 0.5});
               //al_start_transform(&trans);

               al_restore_state(&previous_target_bitmap_state);
            }
      
      return;
    body_dependency_symbols:
      - ALLEGRO_STATE
      - al_draw_filled_rectangle
      - al_is_primitives_addon_initialized
      - al_is_system_installed


  - name: draw_2d_grid
    static: true
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: size
        type: float
        default_argument: 1.0f
      - name: spacing
        type: float
        default_argument: '(16*4.8)'
    guards: [ al_is_system_installed(), al_is_primitives_addon_initialized() ]
    body: |
      for (int xx=-10; xx<10; xx++)
         for (int yy=-10; yy<10; yy++)
         {
            ALLEGRO_STATE previous_target_bitmap_state;
            al_store_state(&previous_target_bitmap_state, ALLEGRO_STATE_TRANSFORM);
            //al_set_target_bitmap(display_bitmap);
            //al_use_projection_transform(&trans);

            ALLEGRO_TRANSFORM trans;

            al_copy_transform(&trans, al_get_current_transform());

            //al_identity_transform(&trans);
            al_translate_transform_3d(&trans, x+xx*spacing, y+yy*spacing, 0); //z+zz*spacing);
            al_use_transform(&trans);
            al_draw_filled_rectangle(-size*0.5, -size*0.5, size*0.5, size*0.5, ALLEGRO_COLOR{0.5, 0.5, 0.5, 0.5});
            //al_start_transform(&trans);

            al_restore_state(&previous_target_bitmap_state);
         }
      
      return;
    body_dependency_symbols:
      - ALLEGRO_STATE
      - al_draw_filled_rectangle
      - al_is_primitives_addon_initialized
      - al_is_system_installed


  - name: draw_hd_layout_grid
    static: true
    parameters:
      - name: x
        type: float
        default_argument: (1920/2.0f)
      - name: y
        type: float
        default_argument: (1080/2.0f)
      - name: num_sections_x
        type: int
        default_argument: 10
      - name: num_sections_y
        type: int
        default_argument: 6
      - name: color
        type: ALLEGRO_COLOR
        default_argument: 'ALLEGRO_COLOR{0.5, 0.5, 0.5, 0.5}'
      - name: line_thickness
        type: float
        default_argument: 1.0f
      - name: dot_spacing
        type: float
        default_argument: 10.0f
      - name: dot_length
        type: float
        default_argument: 10.0f
    guards: [ al_is_system_installed(), al_is_primitives_addon_initialized() ]
    body: |
      float width = 1920.0f;
      float height = 1080.0f;
      float half_width = width * 0.5f;
      float half_height = height * 0.5f;

      float left = x - half_width;
      float right = x + half_width;
      float top = y - half_height;
      float bottom = y + half_height;

      float cell_width = width / num_sections_x;
      float cell_height = height / num_sections_y;

      float dash_period = dot_spacing + dot_length;
      if (dash_period <= 0.0001f) return; // Avoid division by zero or infinite loops

      // Draw vertical lines
      for (int i = 0; i <= num_sections_x; i++)
      {
         float line_x = left + i * cell_width;
         for (float j = 0; j < height; j += dash_period)
         {
            float y1 = top + j;
            float y2 = top + j + dot_length;
            if (y2 > bottom) y2 = bottom;
            al_draw_line(line_x, y1, line_x, y2, color, line_thickness);
         }
      }

      // Draw horizontal lines
      for (int i = 0; i <= num_sections_y; i++)
      {
         float line_y = top + i * cell_height;
         for (float j = 0; j < width; j += dash_period)
         {
            float x1 = left + j;
            float x2 = left + j + dot_length;
            if (x2 > right) x2 = right;
            al_draw_line(x1, line_y, x2, line_y, color, line_thickness);
         }
      }

      return;
    body_dependency_symbols:
      - al_draw_line
      - al_is_primitives_addon_initialized
      - al_is_system_installed


  - name: draw_vertical_ruler
    static: true
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: tick_width
        type: float
        default_argument: 30.0f
      - name: tick_height
        type: float
        default_argument: 4.0f
      - name: y_distance
        type: float
        default_argument: 160.0f
      - name: num_ticks
        type: int
        default_argument: 5
      - name: tick_align_x
        type: float
        default_argument: 0.0f
      - name: tick_align_y
        type: float
        default_argument: 0.0f
      - name: color
        type: ALLEGRO_COLOR
        default_argument: 'ALLEGRO_COLOR{1, 1, 1, 1}'
    body: |
      std::vector<ALLEGRO_VERTEX> vertices = build_vertical_ruler(
            x, y, tick_width, tick_height, y_distance, num_ticks, tick_align_x, tick_align_y, color
         );
      al_draw_prim(&vertices[0], NULL, NULL, 0, vertices.size(), ALLEGRO_PRIM_TRIANGLE_LIST);
    body_dependency_symbols:
      - ALLEGRO_VERTEX


  - name: draw_vertical_ruler_numbers
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: number_start
        type: int
        default_argument: 0
      - name: number_increment
        type: int
        default_argument: 1
      - name: y_distance
        type: float
        default_argument: 160.0f
      - name: num_ticks
        type: int
        default_argument: 5
      - name: text_align_x
        type: float
        default_argument: 0.0f
      - name: text_align_y
        type: float
        default_argument: 0.0f
      - name: color
        type: ALLEGRO_COLOR
        default_argument: 'ALLEGRO_COLOR{1, 1, 1, 1}'
    body: |
      for (int i=0; i<num_ticks; i++)
      {
         draw_number(x, y+y_distance*i, number_start + number_increment*i, 2, text_align_x, text_align_y, color);
      }
    body_dependency_symbols:
      - ALLEGRO_VERTEX


  - name: build_vertical_ruler
    static: true
    type: std::vector<ALLEGRO_VERTEX>
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: tick_width
        type: float
        default_argument: 30.0f
      - name: tick_height
        type: float
        default_argument: 4.0f
      - name: y_distance
        type: float
        default_argument: 160.0f
      - name: num_ticks
        type: int
        default_argument: 5
      - name: tick_align_x
        type: float
        default_argument: 0.0f
      - name: tick_align_y
        type: float
        default_argument: 0.0f
      - name: color
        type: ALLEGRO_COLOR
        default_argument: 'ALLEGRO_COLOR{1, 1, 1, 1}'
    guards: [ al_is_primitives_addon_initialized() ]
    body: |
      ALLEGRO_VERTEX vtx_a = AllegroFlare::build_vertex(0, 0, 0, color, 0, 0);
      ALLEGRO_VERTEX vtx_b = AllegroFlare::build_vertex(1, 0, 0, color, 0, 0);
      ALLEGRO_VERTEX vtx_c = AllegroFlare::build_vertex(1, 1, 0, color, 0, 0);
      ALLEGRO_VERTEX vtx_d = AllegroFlare::build_vertex(0, 1, 0, color, 0, 0);

      // Define a triangle list set of vertices
      std::vector<ALLEGRO_VERTEX> tick_vertices = {
         vtx_a,
         vtx_b,
         vtx_d,
         vtx_b,
         vtx_c,
         vtx_d,
      };

      // Position the tick
      for (auto &vertex : tick_vertices)
      {
         vertex.x *= tick_width;
         vertex.y *= tick_height;
         vertex.x += x - tick_width * tick_align_x;
         vertex.y += y - tick_height * tick_align_y;
      }

      // Create multiple ticks
      std::vector<ALLEGRO_VERTEX> result;
      for (int i=0; i<num_ticks; i++)
      {
         std::vector<ALLEGRO_VERTEX> tick_to_insert_vertices = tick_vertices;
         for (auto &vertex : tick_to_insert_vertices)
         {
            vertex.y += (y_distance * i);
         }
         
         result.insert(result.end(), tick_to_insert_vertices.begin(), tick_to_insert_vertices.end());
      }

      return result;
    body_dependency_symbols:
      - AllegroFlare::Useful
      - AllegroFlare::Useful3D
      - ALLEGRO_VERTEX


  - name: draw_horizontal_ruler
    static: true
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: tick_width
        type: float
        default_argument: 4.0f
      - name: tick_height
        type: float
        default_argument: 30.0f
      - name: x_distance
        type: float
        default_argument: 160.0f
      - name: num_ticks
        type: int
        default_argument: 5
      - name: tick_align_x
        type: float
        default_argument: 0.0f
      - name: tick_align_y
        type: float
        default_argument: 0.0f
      - name: color
        type: ALLEGRO_COLOR
        default_argument: 'ALLEGRO_COLOR{1, 1, 1, 1}'
    body: |
      std::vector<ALLEGRO_VERTEX> vertices = build_horizontal_ruler(
            x, y, tick_width, tick_height, x_distance, num_ticks, tick_align_x, tick_align_y, color
         );
      al_draw_prim(&vertices[0], NULL, NULL, 0, vertices.size(), ALLEGRO_PRIM_TRIANGLE_LIST);
    body_dependency_symbols:
      - ALLEGRO_VERTEX



  - name: draw_horizontal_ruler_numbers
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: number_start
        type: int
        default_argument: 0
      - name: number_increment
        type: int
        default_argument: 1
      - name: x_distance
        type: float
        default_argument: 160.0f
      - name: num_ticks
        type: int
        default_argument: 5
      - name: text_align_x
        type: float
        default_argument: 0.0f
      - name: text_align_y
        type: float
        default_argument: 0.0f
      - name: color
        type: ALLEGRO_COLOR
        default_argument: 'ALLEGRO_COLOR{1, 1, 1, 1}'
    body: |
      for (int i=0; i<num_ticks; i++)
      {
         draw_number(x+x_distance*i, y, number_start + number_increment*i, 2, text_align_x, text_align_y, color);
      }
    body_dependency_symbols:
      - ALLEGRO_VERTEX



  - name: build_horizontal_ruler
    static: true
    type: std::vector<ALLEGRO_VERTEX>
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: tick_width
        type: float
        default_argument: 4.0f
      - name: tick_height
        type: float
        default_argument: 30.0f
      - name: x_distance
        type: float
        default_argument: 160.0f
      - name: num_ticks
        type: int
        default_argument: 5
      - name: tick_align_x
        type: float
        default_argument: 0.0f
      - name: tick_align_y
        type: float
        default_argument: 0.0f
      - name: color
        type: ALLEGRO_COLOR
        default_argument: 'ALLEGRO_COLOR{1, 1, 1, 1}'
    guards: [ al_is_primitives_addon_initialized() ]
    body: |
      ALLEGRO_VERTEX vtx_a = AllegroFlare::build_vertex(0, 0, 0, color, 0, 0);
      ALLEGRO_VERTEX vtx_b = AllegroFlare::build_vertex(1, 0, 0, color, 0, 0);
      ALLEGRO_VERTEX vtx_c = AllegroFlare::build_vertex(1, 1, 0, color, 0, 0);
      ALLEGRO_VERTEX vtx_d = AllegroFlare::build_vertex(0, 1, 0, color, 0, 0);

      // Define a triangle list set of vertices
      std::vector<ALLEGRO_VERTEX> tick_vertices = {
         vtx_a,
         vtx_b,
         vtx_d,
         vtx_b,
         vtx_c,
         vtx_d,
      };

      // Position the tick
      for (auto &vertex : tick_vertices)
      {
         vertex.x *= tick_width;
         vertex.y *= tick_height;
         vertex.x += x - tick_width * tick_align_x;
         vertex.y += y - tick_height * tick_align_y;
      }

      // Create multiple ticks
      std::vector<ALLEGRO_VERTEX> result;
      for (int i=0; i<num_ticks; i++)
      {
         std::vector<ALLEGRO_VERTEX> tick_to_insert_vertices = tick_vertices;
         for (auto &vertex : tick_to_insert_vertices)
         {
            vertex.x += (x_distance * i);
         }
         
         result.insert(result.end(), tick_to_insert_vertices.begin(), tick_to_insert_vertices.end());
      }

      return result;
    body_dependency_symbols:
      - AllegroFlare::Useful
      - AllegroFlare::Useful3D
      - ALLEGRO_VERTEX


  - name: draw_number
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: number
        type: int
        default_argument: 137
      - name: num_digits_filled
        type: int
        default_argument: -1
      - name: align_x
        type: float
        default_argument: 0.5f
      - name: align_y
        type: float
        default_argument: 0.5f
      - name: color
        type: ALLEGRO_COLOR
        default_argument: 'ALLEGRO_COLOR{1, 1, 1, 1}'
    body: |
      ALLEGRO_FONT *font = obtain_small_hud_font();
      std::string number_as_string = build_number(number, num_digits_filled);
      float text_width = al_get_text_width(font, number_as_string.c_str());
      float font_ascent = al_get_font_ascent(font);
      float font_line_height = al_get_font_line_height(font);

      al_draw_text(
            font,
            color,
            x - text_width * align_x,
            y - font_line_height + font_ascent * (1.0 - align_y),
            ALLEGRO_ALIGN_LEFT,
            number_as_string.c_str()
         );

      return;
    body_dependency_symbols:
      - ALLEGRO_FONT


  - name: build_number
    static: true
    type: std::string
    parameters:
      - name: number
        type: int
        default_argument: 137
      - name: num_digits_filled
        type: int
        default_argument: -1
    body: |
      std::string number_as_string = std::to_string(number);
      std::stringstream result;

      int num_digits = number_as_string.length();
      int num_digits_to_fill = num_digits_filled - num_digits;
      for (int i=0; i<num_digits_to_fill; i++)
      {
         number_as_string = "O" + number_as_string;
      }

      int digit_n = 0;
      for (auto &digit_c : number_as_string)
      {
         if (digit_c == '0') result << "O";
         else result << digit_c;

         // Add some extra spaces inside the numbers
         digit_n++;
         if (digit_n != number_as_string.length()) result << " ";
      }

      return result.str();


  - name: draw_crosshair
    static: true
    guards: [ al_get_target_bitmap() ]
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: color
        type: ALLEGRO_COLOR
        default_argument: ALLEGRO_COLOR{1, 0, 0, 1}
      - name: size
        type: float
        default_argument: 200.0f
    body: |
      float h_size = size * 0.5;
      al_draw_line(x-h_size, y, x+h_size, y, color, 1.0);
      al_draw_line(x, y-h_size, x, y+h_size, color, 1.0);
    body_dependency_symbols:
      - al_draw_line


  - name: draw_crosshair_blue
    static: true
    guards: [ al_get_target_bitmap() ]
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: color
        type: ALLEGRO_COLOR
        default_argument: ALLEGRO_COLOR{0, 0, 1, 1}
      - name: size
        type: float
        default_argument: 100.0f
    body: |
      float h_size = size * 0.5;
      al_draw_line(x-h_size, y, x+h_size, y, color, 1.0);
      al_draw_line(x, y-h_size, x, y+h_size, color, 1.0);
    body_dependency_symbols:
      - al_draw_line


  - name: draw_horizontal_crosshair
    static: true
    guards: [ al_get_target_bitmap() ]
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: color
        type: ALLEGRO_COLOR
        default_argument: ALLEGRO_COLOR{1, 0, 0, 1}
      - name: size_v
        type: float
        default_argument: 30.0f
      - name: size_h
        type: float
        default_argument: 600.0f
    body: |
      float h_size_h = size_h * 0.5;
      float h_size_v = size_v * 0.5;
      al_draw_line(x-h_size_h, y, x+h_size_h, y, color, 1.0);
      al_draw_line(x, y-h_size_v, x, y+h_size_v, color, 1.0);
    body_dependency_symbols:
      - al_draw_line


  - name: draw_vertical_crosshair
    static: true
    guards: [ al_get_target_bitmap() ]
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: color
        type: ALLEGRO_COLOR
        default_argument: ALLEGRO_COLOR{1, 0, 0, 1}
      - name: size_v
        type: float
        default_argument: 600.0f
      - name: size_h
        type: float
        default_argument: 30.0f
    body: |
      float h_size_h = size_h * 0.5;
      float h_size_v = size_v * 0.5;
      al_draw_line(x-h_size_h, y, x+h_size_h, y, color, 1.0);
      al_draw_line(x, y-h_size_v, x, y+h_size_v, color, 1.0);
    body_dependency_symbols:
      - al_draw_line


  - name: draw_rectangle
    static: true
    guards: [ al_get_target_bitmap() ]
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: width
        type: float
        default_argument: 160.0f
      - name: height
        type: float
        default_argument: 90.0f
      - name: color
        type: ALLEGRO_COLOR
        default_argument: ALLEGRO_COLOR{1, 0, 0, 1}
      - name: size
        type: float
        default_argument: 100.0f
    body: |
      float h_size = size * 0.5;
      al_draw_line(x-h_size, y,        x+width+h_size, y,               color, 1.0); // Top line
      al_draw_line(x-h_size, y+height, x+width+h_size, y+height,        color, 1.0); // Bottom line
      al_draw_line(x,        y-h_size, x,              y+height+h_size, color, 1.0); // Left line
      al_draw_line(x+width,  y-h_size, x+width,        y+height+h_size, color, 1.0); // Right line
    body_dependency_symbols:
      - al_draw_line


  - name: obtain_small_hud_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      std::stringstream result_font_identifier;
      result_font_identifier << "Orbitron-Medium.ttf" << " " << -13;
      return font_bin->auto_get(result_font_identifier.str());


dependencies:


  - symbol: al_is_system_installed
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_STATE
    headers: [ allegro5/allegro.h ]
  - symbol: al_draw_line
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_draw_filled_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: ALLEGRO_VERTEX
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Useful3D
    headers: [ AllegroFlare/Useful3D/Useful3D.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: AllegroFlare::Useful
    headers: [ AllegroFlare/Useful.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]


