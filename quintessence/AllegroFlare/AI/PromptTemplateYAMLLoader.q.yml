parent_classes:


  - class: AllegroFlare::YAMLValidator
    scope: public
    init_with: ''


properties:


  - name: PROMPT_NODE_KEY
    type: char*
    constexpr: true
    static: true
    const: true
    init_with: '(char*)"prompt"'

  - name: PARAMETERS_NODE_KEY
    type: char*
    constexpr: true
    static: true
    const: true
    init_with: '(char*)"parameters"'

  - name: PARAMETER_NAME_NODE_KEY
    type: char*
    constexpr: true
    static: true
    const: true
    init_with: '(char*)"name"'


functions:


  - name: load_yaml
    type: std::string
    parameters:
      - name: yaml_as_string
        type: std::string
        default_argument: '"[unset-yaml_as_string]"'
      - name: template_arguments
        type: std::vector<std::pair<std::string, std::string>>
        default_argument: '{}'
    guards: [ (!yaml_as_string.empty()) ]
    body: |
      std::string result;

      // Parse our string to a YAML object
      YAML::Node root_node = YAML::Load(yaml_as_string);

      // Prepare result variables
      std::string template_text = "[unset-template_text]";
      std::vector<std::string> template_parameters;

      // Extract the variables from the YAML (prompt)
      validate_presence_of_key(root_node, PROMPT_NODE_KEY);
      validate_node_type(root_node, PROMPT_NODE_KEY, YAML::NodeType::Scalar);
      template_text = root_node[std::string(PROMPT_NODE_KEY)].as<std::string>();

      // Extract the variables from the YAML (parameters)
      validate_presence_of_key(root_node, PARAMETERS_NODE_KEY);
      validate_node_type(root_node, PARAMETERS_NODE_KEY, YAML::NodeType::Sequence);
      YAML::Node parameters_node = root_node[std::string(PARAMETERS_NODE_KEY)];
      for (const auto& parameter_node : parameters_node)
      {
         validate_presence_of_key(parameter_node, PARAMETER_NAME_NODE_KEY);
         validate_node_type(parameter_node, PARAMETER_NAME_NODE_KEY, YAML::NodeType::Scalar);
         std::string parameter_name = parameter_node[std::string(PARAMETER_NAME_NODE_KEY)].as<std::string>();
         template_parameters.push_back(parameter_name);
      }

      // Match the template_arguments to the template_parameters
      std::vector<std::pair<std::string, std::string>> template_insertion_variables =
         assemble_parameter_arguments(template_parameters, template_arguments);

      // Create the template object and fill it in
      AllegroFlare::AI::PromptTemplate prompt_template;
      prompt_template.set_template_content(template_text);
      prompt_template.set_insertion_variables(template_insertion_variables);

      // Build the finalized prompt
      result = prompt_template.generate_content();

      return result;
    body_dependency_symbols:
      - AllegroFlare::AI::PromptTemplate


  - name: assemble_parameter_arguments
    static: true
    type: std::vector<std::pair<std::string, std::string>>
    parameters:
      - name: template_parameters
        type: std::vector<std::string>
        default_argument: '{}'
      - name: template_arguments
        type: std::vector<std::pair<std::string, std::string>>
        default_argument: '{}'
    body: |
      std::vector<std::pair<std::string, std::string>> result;

      for (const auto& parameter : template_parameters)
      {
         bool found_argument = false;
         for (const auto& argument : template_arguments)
         {
            if (argument.first == parameter)
            {
               result.emplace_back(argument);
               found_argument = true;
               break;
            }
         }

         if (!found_argument)
         {
            // No user-supplied argument found for the parameter, so add an empty string as the argument.
            result.emplace_back(parameter, "");
         }
      }

      return result;


dependencies:


  - symbol: AllegroFlare::AI::PromptTemplate
    headers: [ AllegroFlare/AI/PromptTemplate.hpp ]
  - symbol: AllegroFlare::YAMLValidator
    headers: [ AllegroFlare/YAMLValidator.hpp ]
  - symbol: YAML::Node
    headers: [ yaml-cpp/yaml.h ]
  - symbol: YAML::NodeType::value
    headers: [ yaml-cpp/yaml.h ]


