properties:


  - name: started_at
    type: float
    init_with: 0.0f
    getter: true

  - name: ended_at
    type: float
    init_with: 0.0f
    getter: true

  - name: active
    type: bool
    init_with: false
    getter: true

  - name: level_progress
    type: std::set<std::string>
    init_with: '{}'
    getter: true
    setter: true


functions:


  - name: start_session
    parameters:
      - name: started_at
        type: float
        default_argument: al_get_time()
        default_argument_dependency_symbols: [ al_get_time ]
    guards: [ (!active) ]
    body: |
      AllegroFlare::Logger::info_from("AllegroFlare::GameSession::start_session", "Starting session.");
      active = true;
      this->started_at = started_at;
      return;
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: end_session
    parameters:
      - name: ended_at
        type: float
        default_argument: al_get_time()
        default_argument_dependency_symbols: [ al_get_time ]
    guards: [ active ]
    body: |
      AllegroFlare::Logger::info_from("AllegroFlare::GameSession::start_session", "Ending session.");
      active = false;
      this->ended_at = ended_at;
      return;


  - name: is_active
    type: bool
    body: |
      return active;


  - name: mark_level_as_finished
    parameters:
      - name: level_identifier
        type: std::string
        default_argument: '"[unset-level_identifier]"'
    body: |
      // NOTE: Granted, this is a very basic way to record progress. A more advanced version might have levels
      // with specific objectives, or a "completed_at" time, so on.
      level_progress.insert(level_identifier);
      return;


  - name: is_level_as_finished
    type: bool
    parameters:
      - name: level_identifier
        type: std::string
        default_argument: '"[unset-level_identifier]"'
    body: |
      // TODO: Test this
      return level_progress.count(level_identifier) >= 1;


dependencies:


  - symbol: ALLEGRO_BITMAP
    headers: [ allegro5/allegro.h ]
  - symbol: al_get_time
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]


