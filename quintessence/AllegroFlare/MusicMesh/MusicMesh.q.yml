properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: stamps
    type: std::vector<AllegroFlare::MusicMesh::Stamp>
    init_with: ''
    getter: true

  - name: next_id
    type: uint32_t
    init_with: 1
    getter: true

  - name: multi_mesh
    type: AllegroFlare::TileMaps::MultiMesh
    init_with: 4096

  - name: multi_mesh_uv_atlas
    type: AllegroFlare::TileMaps::MultiMeshUVAtlas
    init_with: ''
    getter: true
    setter: true

  - name: font_character_atlas_builder
    type: AllegroFlare::MusicMesh::FontCharacterAtlasBuilder
    init_with: ''

  - name: initialized
    type: bool
    init_with: false


functions:


  - name: initialize
    guards: [ (!initialized) ]
    body: |
      font_character_atlas_builder.set_font_bin(font_bin);
      ALLEGRO_BITMAP *texture = font_character_atlas_builder.create();

      multi_mesh.set_texture(texture);
      multi_mesh.initialize();

      initialized = true;
      return;


  - name: add_music_symbol
    parameters:
      - name: x
        type: float
        default_argument: 0
      - name: y
        type: float
        default_argument: 0
      - name: music_symbol_to_stamp
        type: uint32_t
        default_argument: 0
    body: |
      // TODO: add initialized guard
      std::pair<AllegroFlare::Vec2D, AllegroFlare::Vec2D> uvs =
         font_character_atlas_builder.get_uv_for_index(music_symbol_to_stamp);
      AllegroFlare::Vec2D uv1 = uvs.first;
      AllegroFlare::Vec2D uv2 = uvs.second;


      //ALLEGRO_FONT *font = obtain_font();
      //ALLEGRO_GLYPH glyph_data; // cannot use GLYPH because it requires ALLEGRO_UNSTABLE flag
      //bool result = al_get_glyph(font, 0, music_symbol_to_stamp, &glyph_data);
      //if (!result)
      //{
         //std::cout << "could_not_obtain_glyph" std::endl;
      //}
   

      // here
      float width = font_character_atlas_builder.get_column_width();
      float height = font_character_atlas_builder.get_row_height();
      int descent = font_character_atlas_builder.infer_font_descent();
      float offset_x = 0;
      float offset_y = -descent;
      int multi_mesh_id = multi_mesh.append_raw(x+offset_x, y+offset_y, width, height, uv1.x, uv1.y, uv2.x, uv2.y);
         //atlas_index_of_symbol);


      AllegroFlare::MusicMesh::Stamp stamp(next_id, x, y, multi_mesh_id);
      stamps.push_back(stamp);
      next_id++;
      return;


  - name: remove_stamp_at
    parameters:
      - name: index_of_stamp
        type: int
        default_argument: 0
    guards: [ (index_of_stamp > 0), (index_of_stamp <= stamps.size()) ]
    body: |
      // TODO: add initialized guard
      // TODO bounds checking
      uint32_t multi_mesh_id_to_remove = stamps[index_of_stamp].get_multi_mesh_id();
      uint32_t multi_mesh_id_to_swap = multi_mesh.remove(multi_mesh_id_to_remove);
      for (auto &stamp : stamps)
      {
         if (stamp.get_multi_mesh_id() == multi_mesh_id_to_swap)
         {
            stamp.reassign_multi_mesh_id(multi_mesh_id_to_swap);
            break;
         }
      }
      

  - name: render
    type: void
    guards: [ al_is_system_installed(), al_is_font_addon_initialized() ]
    body: |
      multi_mesh.render();
      return;


dependencies:


  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::MusicMesh::Stamp
    headers: [ AllegroFlare/MusicMesh/Stamp.hpp ]
  - symbol: AllegroFlare::TileMaps::MultiMesh
    headers: [ AllegroFlare/TileMaps/MultiMesh.hpp ]
  - symbol: AllegroFlare::TileMaps::MultiMeshUVAtlas
    headers: [ AllegroFlare/TileMaps/MultiMeshUVAtlas.hpp ]
  - symbol: AllegroFlare::MusicMesh::FontCharacterAtlasBuilder
    headers: [ AllegroFlare/MusicMesh/FontCharacterAtlasBuilder.hpp ]


