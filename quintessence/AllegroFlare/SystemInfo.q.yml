functions:


  - name: allegro_flare_version
    type: std::string
    body: |
      AllegroFlare::Version version;
      return version.get_allegro_flare_version_string();
    body_dependency_symbols:
      - AllegroFlare::Version


  - name: allegro_version
    type: std::string
    body: |
      AllegroFlare::Version version;
      return version.get_allegro_version_string();
    body_dependency_symbols:
      - AllegroFlare::Version


  - name: num_available_threads
    type: uint32_t
    body: |
      return std::thread::hardware_concurrency();
    body_dependency_symbols:
      - std::thread::hardware_concurrency


  - name: num_available_threads_are_known
    type: bool
    body: |
      return (std::thread::hardware_concurrency() != 0);
    body_dependency_symbols:
      - std::thread::hardware_concurrency


  - name: get_processor_type
    type: std::string
    body: |
      std::string machine = get_machine();
      if (machine.empty()) return "[unable-to-detect]";
      if (machine.substr(0, 3) == "arm") return "arm";
      if (machine.substr(0, 3) == "x86" && operating_system() == "MacOS") return "intel";
      return "[chip-kind-not-detected]";


  - name: get_sysname
    type: std::string
    body: |
      utsname buf;
      uname(&buf);
      std::string sysname = buf.sysname;
      return sysname;
    body_dependency_symbols:
      - uname


  - name: get_version
    type: std::string
    body: |
      utsname buf;
      uname(&buf);
      std::string version = buf.version;
      return version;
    body_dependency_symbols:
      - uname


  - name: get_release
    type: std::string
    body: |
      utsname buf;
      uname(&buf);
      std::string release = buf.release;
      return release;
    body_dependency_symbols:
      - uname


  - name: get_hostname
    type: std::string
    body: |
      // SUSv2 guarantees that "Host names are limited to 255 bytes".
      // POSIX.1 guarantees that "Host names (not including the
      // terminating null byte) are limited to HOST_NAME_MAX bytes".  On
      // Linux, HOST_NAME_MAX is defined with the value 64, which has been
      // the limit since Linux 1.0 (earlier kernels imposed a limit of 8
      // bytes).
      char hostname[256];

      int gethostname_response = gethostname(hostname, 256);
      if (gethostname_response != 0)
      {
         return "[could-not-determine-hostname]";
      }
      std::string result = hostname;
      return result;
    body_dependency_symbols:
      - gethostname


  - name: get_machine
    type: std::string
    body: |
      utsname buf;
      uname(&buf);
      std::string machine = buf.machine;
      return machine;
    body_dependency_symbols:
      - uname


  - name: operating_system
    type: std::string
    body: |
       // TODO: this might be incorrect, might be detecting WIN32 even when WIN64 is present

       #ifdef _WIN32
       return "Windows 32-bit";
       #elif _WIN64
       return "Windows 64-bit";
       #elif __APPLE__ || __MACH__
       return "MacOS";
       #elif __linux__
       return "Linux";
       #elif __FreeBSD__
       return "FreeBSD";
       #elif __unix || __unix__
       return "Unix";
       #else
       return "Other";
       #endif


dependencies:


  - symbol: AllegroFlare::Version
    headers: [ AllegroFlare/Version.hpp ]
  - symbol: std::thread::hardware_concurrency
    headers: [ thread ]
  - symbol: uname
    headers: [ sys/utsname.h ]
  - symbol: gethostname
    headers: [ unistd.h ]


