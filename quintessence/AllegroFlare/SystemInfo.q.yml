properties:


  - name: OPERATING_SYSTEM_WINDOWS_32_BIT
    type: char*
    init_with: '(char*)"Windows 32-bit"'
    static: true
    constexpr: true

  - name: OPERATING_SYSTEM_WINDOWS_64_BIT
    type: char*
    init_with: '(char*)"Windows 64-bit"'
    static: true
    constexpr: true


methods:


  - name: allegro_flare_version
    type: std::string
    body: |
      AllegroFlare::Version version;
      return version.get_allegro_flare_version_string();
    body_dependency_symbols:
      - AllegroFlare::Version


  - name: allegro_version
    type: std::string
    body: |
      AllegroFlare::Version version;
      return version.get_allegro_version_string();
    body_dependency_symbols:
      - AllegroFlare::Version


  - name: num_available_threads
    type: uint32_t
    body: |
      return std::thread::hardware_concurrency();
    body_dependency_symbols:
      - std::thread::hardware_concurrency


  - name: num_available_threads_are_known
    type: bool
    body: |
      return (std::thread::hardware_concurrency() != 0);
    body_dependency_symbols:
      - std::thread::hardware_concurrency


  - name: get_processor_type
    type: std::string
    body: |
      std::string machine = get_machine();
      if (machine.empty()) return "[unable-to-detect]";
      if (machine.substr(0, 3) == "arm") return "arm";
      if (machine.substr(0, 3) == "x86" && operating_system() == "MacOS") return "intel";
      return "[chip-kind-not-detected]";


  - name: get_sysname
    type: std::string
    body: |
      return AllegroFlare::SystemInfoFetcher().get_sysname();
    body_dependency_symbols:
      - AllegroFlare::SystemInfoFetcher


  - name: get_version
    type: std::string
    body: |
      return AllegroFlare::SystemInfoFetcher().get_version();
    body_dependency_symbols:
      - AllegroFlare::SystemInfoFetcher


  - name: get_release
    type: std::string
    body: |
      return AllegroFlare::SystemInfoFetcher().get_release();
    body_dependency_symbols:
      - AllegroFlare::SystemInfoFetcher


  - name: get_hostname
    type: std::string
    body: |
      return AllegroFlare::SystemInfoFetcher().get_hostname();
    body_dependency_symbols:
      - AllegroFlare::SystemInfoFetcher


  - name: get_machine
    type: std::string
    body: |
      return AllegroFlare::SystemInfoFetcher().get_machine();
    body_dependency_symbols:
      - AllegroFlare::SystemInfoFetcher


  - name: operating_system
    type: std::string
    body: |
       // TODO: this might be incorrect, might be detecting WIN32 even when WIN64 is present

       #ifdef _WIN32
       return OPERATING_SYSTEM_WINDOWS_32_BIT;
       #elif _WIN64
       return OPERATING_SYSTEM_WINDOWS_64_BIT;
       #elif __APPLE__ || __MACH__
       return "MacOS";
       #elif __linux__
       return "Linux";
       #elif __FreeBSD__
       return "FreeBSD";
       #elif __unix || __unix__
       return "Unix";
       #else
       return "Other";
       #endif


dependencies:


  - symbol: AllegroFlare::Version
    headers: [ AllegroFlare/Version.hpp ]
  - symbol: std::thread::hardware_concurrency
    headers: [ thread ]
  - symbol: AllegroFlare::SystemInfoFetcher
    headers: [ AllegroFlare/SystemInfoFetcher.hpp ]


