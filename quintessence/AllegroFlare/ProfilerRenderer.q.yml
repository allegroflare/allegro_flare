properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: timers
    type: std::map<std::string, AllegroFlare::Timer>*
    init_with: '{}'
    constructor_arg: true
    getter: true
    setter: true

  - name: x
    type: float
    init_with: 0
    constructor_arg: true
    getter: true
    setter: true

  - name: y
    type: float
    init_with: 0
    constructor_arg: true
    getter: true
    setter: true


functions:


  - name: render
    type: void
    guards:
      - al_is_system_installed()
      - al_is_primitives_addon_initialized()
      - al_is_font_addon_initialized()
      - font_bin
      - timers
    body: |
      ALLEGRO_FONT *font = obtain_font();
      ALLEGRO_COLOR bg_color = al_color_name("black");
      float w = 300;
      float line_height = 25;
      float pad = 20;
      float h = timers->size()*line_height + pad*2;
      int i=0;
      char buff[32];
      float target_microseconds = 16666;
      float horizontal_scale = 0.01f;

      // draw the background
      al_draw_filled_rounded_rectangle(x, y, x+w, y+h, 8, 8, bg_color);

      if (timers->empty())
      {
         // Draw empty state when no timers are present
         int font_line_height = al_get_font_line_height(font);
         ALLEGRO_COLOR timer_empty_text_color = ALLEGRO_COLOR{0.2, 0.2, 0.2, 0.2};
         std::string text = "Profiler is not tracking any timers. [Press F1 to close]";
         al_draw_text(
            font,
            timer_empty_text_color,
            x + w/2,
            y+h/2-font_line_height/2,
            ALLEGRO_ALIGN_CENTER,
            text.c_str()
         );
      }
      else
      {
         // Draw the graph
         ALLEGRO_COLOR bg_color = al_color_name("black");
         ALLEGRO_COLOR bar_color = al_color_name("orange");
         ALLEGRO_COLOR font_color = al_color_name("white");
         ALLEGRO_COLOR limit_bar_color = al_color_name("lightblue");

         for (auto &timer : (*timers))
         {
            int duration_microseconds = std::get<1>(timer).get_elapsed_time_microseconds();
            float bar_width = duration_microseconds * horizontal_scale;
            al_draw_filled_rectangle(
               x,
               y+pad+line_height*i+15,
               x+bar_width,
               y+pad+line_height*i+20,
               bar_color
            );

            al_draw_text(font, font_color, x+pad, y+pad+line_height*i, 0, std::get<0>(timer).c_str());
            sprintf(buff, "%d", duration_microseconds);
            al_draw_text(font, font_color, x+pad+300, y+pad+line_height*i, ALLEGRO_ALIGN_RIGHT, buff);
            i++;
         }

         // draws our marker at 16666 (the number of microseconds in a frame)
         al_draw_line(
            target_microseconds * horizontal_scale,
            0,
            target_microseconds * horizontal_scale,
            h,
            ALLEGRO_COLOR{0, 1, 1, 1},
            2.0
         );
      }

      return;
    body_dependency_symbols:
      - al_color_name
      - AllegroFlare::Vec2D
      - al_draw_rounded_rectangle
      - al_draw_text


  - name: obtain_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Inter-Regular.ttf -26");


dependencies:


  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_draw_text
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_draw_rounded_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Vec2D
    headers: [ AllegroFlare/Vec2D.hpp ]
  - symbol: AllegroFlare::Timer
    headers: [ AllegroFlare/Timer.hpp ]


