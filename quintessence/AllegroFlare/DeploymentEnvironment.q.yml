properties:


  - name: environment
    type: std::string
    constructor_arg: true
    init_with: ENVIRONMENT_UNDEF
    getter: true

  - name: current_working_directory_before_setup
    type: std::string
    constructor_arg: true
    init_with: '"[unset-current_working_directory_before_setup]"'
    getter: true

  - name: working_directory_has_been_setup
    type: bool
    init_with: false
    getter: true

  - name: ENVIRONMENT_UNDEF
    type: char*
    init_with: '(char*)"undefined"'
    static: true
    constexpr: true

  - name: ENVIRONMENT_TEST
    type: char*
    init_with: '(char*)"test"'
    static: true
    constexpr: true

  - name: ENVIRONMENT_DEVELOPMENT
    type: char*
    init_with: '(char*)"development"'
    static: true
    constexpr: true

  - name: ENVIRONMENT_DEMO
    type: char*
    init_with: '(char*)"demo"'
    static: true
    constexpr: true

  - name: ENVIRONMENT_PRODUCTION
    type: char*
    init_with: '(char*)"production"'
    static: true
    constexpr: true


functions:


  - name: set_environment
    parameters:
      - name: environment
        type: std::string
        default_argument: ENVIRONMENT_UNDEF
    guards: [ _is_valid(environment) ]
    body: |
      // TODO: If an invalid argument is passed, include the argument value in an error message
      this->environment = environment;
      return;


  - name: is_undefined
    type: bool
    body: |
      return environment == ENVIRONMENT_UNDEF;


  - name: is_production
    type: bool
    body: |
      return environment == ENVIRONMENT_PRODUCTION;


  - name: is_test
    type: bool
    body: |
      return environment == ENVIRONMENT_TEST;


  - name: is_demo
    type: bool
    body: |
      return environment == ENVIRONMENT_DEMO;


  - name: is_development
    type: bool
    body: |
      return environment == ENVIRONMENT_DEVELOPMENT;


  - name: environment_should_set_path_to_resources_path
    type: bool
    body: |
      return environment == ENVIRONMENT_PRODUCTION;


  - name: setup_current_working_directory
    guards: [ (!working_directory_has_been_setup), al_is_system_installed() ]
    body: |
      if (is_undefined())
      {
         AllegroFlare::Logger::throw_error(
            "AllegroFlare::DeploymentEnvironment::setup_current_working_directory",
            "The current deployment environment has not been defined. You must define one before calling this function."
         );
      }

      if (is_invalid())
      {
         AllegroFlare::Logger::throw_error(
            "AllegroFlare::DeploymentEnvironment::setup_current_working_directory",
            "The current deployment environment is invalid. You must define a valid environment before calling "
               "this function."
         );
      }

      current_working_directory_before_setup = std::filesystem::current_path().string();

      if (environment_should_set_path_to_resources_path()) // NOTE: this happens in PRODUCTION
      {
         ALLEGRO_PATH *resource_path = al_get_standard_path(ALLEGRO_RESOURCES_PATH);
         al_change_directory(al_path_cstr(resource_path, ALLEGRO_NATIVE_PATH_SEP));
         al_destroy_path(resource_path);
      }
      else
      {
         // Do nothing. Presume that the executable (which is assumed to be a test executable) is being run from the
         // root folder of the project, otherwise there will be undefined behavior.
      }

      AllegroFlare::Logger::info_from(
         "AllegroFlare::DeploymentEnvironment::setup",
         "\n    - Deployment environment is \"" + get_environment() + "\". "
            "\n    - Initial working directory: \"" + current_working_directory_before_setup + "\". "
            "\n    - Current working directory: \"" + std::filesystem::current_path().string() + "\"."
            "\n    - Data folder path: \"" + get_data_folder_path() + "\"."
      );

      working_directory_has_been_setup = true;

      return;
    body_dependency_symbols:
      - ALLEGRO_PATH
      - std::filesystem


  - name: restore_initial_working_directory
    body: |
      if (working_directory_has_been_setup)
      {
         al_change_directory(current_working_directory_before_setup.c_str());
         working_directory_has_been_setup = false;
      }
      return;
    body_dependency_symbols:
      - std::filesystem


  - name: _is_valid
    type: bool
    parameters:
      - name: environment
        type: std::string
        default_argument: '"[unset-environment]"'
    body: |
      // TODO: Require a param, and do not have a default
      static std::set<std::string> valid_environments = {
         ENVIRONMENT_PRODUCTION,
         ENVIRONMENT_TEST,
         ENVIRONMENT_DEMO,
         ENVIRONMENT_DEVELOPMENT,
      };
      // NOTE: Should consider an update to -std=c++20 eventually, which has `contains` for a std::set
      // https://en.cppreference.com/w/cpp/container/set/contains

      return valid_environments.find(environment) != valid_environments.end();
    body_dependency_symbols:
      - std::set


  - name: is_valid
    type: bool
    body: |
      static std::set<std::string> valid_environments = {
         ENVIRONMENT_PRODUCTION,
         ENVIRONMENT_TEST,
         ENVIRONMENT_DEMO,
         ENVIRONMENT_DEVELOPMENT,
      };
      // NOTE: Should consider an update to -std=c++20 eventually, which has `contains` for a std::set
      // https://en.cppreference.com/w/cpp/container/set/contains

      return valid_environments.find(environment) != valid_environments.end();
    body_dependency_symbols:
      - std::set


  - name: is_invalid
    type: bool
    body: |
      return !is_valid();


  - name: get_data_folder_path
    type: std::string
    guards: [ is_valid() ]
    body: |
      if (environment == ENVIRONMENT_TEST)
      {
         return "tests/fixtures/";
      }
      else if (environment == ENVIRONMENT_DEVELOPMENT || environment == ENVIRONMENT_DEMO)
      {
         return "bin/data/";
      }
      else if (environment == ENVIRONMENT_PRODUCTION)
      {
         // NOTE: With the production environment, it's expected to have the executable set the path. The data folder
         // will be the "./data" folder that is relative to that.
         return "data/";
      }
      else
      {
         AllegroFlare::Logger::throw_error("AllegroFlare::DeploymentEnvironment::get_base_data_path",
               "Unexpected error occurred where a path was requested on an invalid deployment environment."
               + AllegroFlare::Logger::build_unhandled_case_message(environment)
            );
      }
      return "";
    body_dependency_symbols:
      - AllegroFlare::Logger


dependencies:


  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: ALLEGRO_PATH
    headers: [ allegro5/allegro.h ]
  - symbol: std::filesystem
    headers: [ filesystem ]


