properties:


  - name: notehead_staff_positions
    type: std::vector<std::pair<float, int>>
    constructor_arg: true
    init_with: '{}'
    getter: true
    setter: true


enums:


  - name: StemDirection
    scope: public
    enumerators:
      - UNDEFINED
      - UP
      - DOWN


methods:


  - name: infer_preferred_stem_direction
    type: BeamPositionCalculator::StemDirection
    guards: [ notehead_staff_positions.size() >= 2 ]
    body: |
      BeamPositionCalculator::StemDirection result = BeamPositionCalculator::StemDirection::UNDEFINED;

      int min_staff_position = get_min_staff_position();
      int max_staff_position = get_max_staff_position();

      return result;


  - name: get_min_staff_position
    type: int
    body: |
      int min_value = 0;
      auto min_element = std::min_element(notehead_staff_positions.begin(), notehead_staff_positions.end(), 
         [](const std::pair<float, int>& lhs, const std::pair<float, int>& rhs) {
            return lhs.second < rhs.second;
         });

      if (min_element != notehead_staff_positions.end())
      {
         min_value = min_element->second;
      }
      else
      {
         std::cout << "Vector is empty." << std::endl;
         throw std::runtime_error("BeamPositionCalculator::get_min_staff_position: error: notehead_staff_positions []");
      }
      return min_value;


  - name: get_max_staff_position
    type: int
    body: |
      int min_value = 0;
      auto min_element = std::max_element(notehead_staff_positions.begin(), notehead_staff_positions.end(), 
         [](const std::pair<float, int>& lhs, const std::pair<float, int>& rhs) {
            return lhs.second < rhs.second;
         });

      if (min_element != notehead_staff_positions.end())
      {
         min_value = min_element->second;
      }
      else
      {
         std::cout << "Vector is empty." << std::endl;
         throw std::runtime_error("BeamPositionCalculator::get_max_staff_position: error: notehead_staff_positions []");
      }
      return min_value;


dependencies:


  - symbol: BeamPositionCalculator::StemDirection
    headers: [ ]


