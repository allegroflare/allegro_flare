properties:


  - name: notehead_staff_positions
    type: std::vector<std::pair<float, int>>
    constructor_arg: true
    init_with: '{}'
    getter: true
    setter: true


documentation:


  - notes:
      - Positive staff positions are up, negative down. Think of it as pitches going up or down on a staff.
  - todos:
      - validate that notehead_staff_positions are ordered by first elements
      - find more elegant way to validate interior min/max values


enums:


  - name: StemDirection
    scope: public
    enumerators:
      - UNDEFINED
      - UP
      - DOWN
      - EVEN


methods:


  - name: infer_preferred_stem_direction
    type: BeamPositionCalculator::StemDirection
    guards: [ notehead_staff_positions.size() >= 2 ]
    body: |
      BeamPositionCalculator::StemDirection result = BeamPositionCalculator::StemDirection::UNDEFINED;

      int abs_min_staff_position = abs(get_min_staff_position());
      int abs_max_staff_position = abs(get_max_staff_position());

      if (abs_min_staff_position == abs_max_staff_position)
      {
         // The highest note is further out from the center line than the lowest note
         result = BeamPositionCalculator::StemDirection::EVEN;
      }
      else if (abs_min_staff_position > abs_max_staff_position)
      {
         // The lowest note is further out from the center line than the highest note
         result = BeamPositionCalculator::StemDirection::UP;
      }
      else
      {
         // The highest note is further out from the center line than the lowest note
         result = BeamPositionCalculator::StemDirection::DOWN;
      }

      return result;


  - name: get_first_staff_position
    type: int
    guards: [ (!notehead_staff_positions.empty()) ]
    body: |
      return notehead_staff_positions.front().second;


  - name: get_last_staff_position
    type: int
    guards: [ (!notehead_staff_positions.empty()) ]
    body: |
      return notehead_staff_positions.back().second;


  - name: get_min_staff_position
    type: int
    body: |
      int min_value = 0;
      auto min_element = std::min_element(notehead_staff_positions.begin(), notehead_staff_positions.end(), 
         [](const std::pair<float, int>& lhs, const std::pair<float, int>& rhs) {
            return lhs.second < rhs.second;
         });

      if (min_element != notehead_staff_positions.end())
      {
         min_value = min_element->second;
      }
      else
      {
         std::cout << "Vector is empty." << std::endl;
         throw std::runtime_error("BeamPositionCalculator::get_min_staff_position: error: notehead_staff_positions []");
      }
      return min_value;


  - name: get_max_staff_position
    type: int
    body: |
      int min_value = 0;
      auto min_element = std::max_element(notehead_staff_positions.begin(), notehead_staff_positions.end(), 
         [](const std::pair<float, int>& lhs, const std::pair<float, int>& rhs) {
            return lhs.second < rhs.second;
         });

      if (min_element != notehead_staff_positions.end())
      {
         min_value = min_element->second;
      }
      else
      {
         std::cout << "Vector is empty." << std::endl;
         throw std::runtime_error("BeamPositionCalculator::get_max_staff_position: error: notehead_staff_positions []");
      }
      return min_value;


  - name: get_min_interior_staff_position
    type: int
    guards: [ notehead_staff_positions.size() >= 3 ]
    body: |
      int min_value = 0;
      auto min_element = std::min_element(notehead_staff_positions.begin()+1, notehead_staff_positions.end()-1, 
         [](const std::pair<float, int>& lhs, const std::pair<float, int>& rhs) {
            return lhs.second < rhs.second;
         });

      if (min_element != notehead_staff_positions.end())
      {
         min_value = min_element->second;
      }
      else
      {
         std::cout << "Vector is empty." << std::endl;
         throw std::runtime_error("BeamPositionCalculator::get_min_staff_position: error: notehead_staff_positions []");
      }
      return min_value;


  - name: get_max_interior_staff_position
    type: int
    guards: [ notehead_staff_positions.size() >= 3 ]
    body: |
      int min_value = 0;
      auto min_element = std::max_element(notehead_staff_positions.begin()+1, notehead_staff_positions.end()-1, 
         [](const std::pair<float, int>& lhs, const std::pair<float, int>& rhs) {
            return lhs.second < rhs.second;
         });

      if (min_element != notehead_staff_positions.end())
      {
         min_value = min_element->second;
      }
      else
      {
         std::cout << "Vector is empty." << std::endl;
         throw std::runtime_error("BeamPositionCalculator::get_min_staff_position: error: notehead_staff_positions []");
      }
      return min_value;


dependencies:


  - symbol: BeamPositionCalculator::StemDirection
    headers: [ ]


