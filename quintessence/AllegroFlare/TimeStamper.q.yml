methods:


  - name: generate_now_timestamp_utc
    type: std::string
    static: true
    body: |
      std::time_t time_now = std::time(nullptr);
      std::stringstream result;
      //result << std::put_time(std::localtime(&time_now), "%y%m%d%OH%OM%OS%Z");
      result << std::put_time(std::gmtime(&time_now), "%y%m%d%OH%OM%OS%Z");
      return result.str();
    body_dependency_symbols:
      - std::time_t
      - std::istringstream
      - std::gmtime


  - name: generate_time_now_utc_iso8601
    type: std::string
    static: true
    body: |
      std::time_t time_now = generate_time_now_since_epoch();
      std::stringstream result;
      result << std::put_time(std::gmtime(&time_now), "%Y-%m-%dT%H:%M:%SZ");
      return result.str();
    body_dependency_symbols:
      - std::time_t
      - std::istringstream
      - std::put_time
      - std::gmtime


  - name: generate_time_now_since_epoch
    type: std::time_t
    static: true
    body: |
      return std::time(nullptr);
    body_dependency_symbols:
      - std::time_t


  - name: user_friendly_time
    type: std::string
    static: true
    parameters:
      - name: time_
        type: std::time_t
        default_argument: 'std::time(nullptr)'
    body: |
      std::tm local_tm;
      localtime_r(&time_, &local_tm); // Thread-safe version of std::localtime

      std::ostringstream oss;
      oss << std::put_time(&local_tm, "%B %d %Y %I:%M:%S %p"); // Format: "June 13, 2025 4:50 PM"
      return oss.str();
    body_dependency_symbols:
      - std::tm
      - std::istringstream
      - localtime_r
      - std::put_time


dependencies:


  - symbol: std::time_t
    headers: [ sstream, ctime, iomanip ]
  - symbol: std::istringstream
    headers: [ sstream ]
  - symbol: std::gmtime
    headers: [ ctime ]
  - symbol: std::tm
    headers: [ ctime ]
  - symbol: localtime_r
    headers: [ time.h ]
  - symbol: std::put_time
    headers: [ iomanip ]


