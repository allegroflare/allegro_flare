parent_classes:


  - class: AllegroFlare::DialogTree::Nodes::Base
    scope: public
    init_with: AllegroFlare::DialogTree::Nodes::MultipageWithOptions::TYPE


properties:


  - name: speaker
    type: std::string
    init_with: '"[unset-speaker]"'
    constructor_arg: true
    getter: true
    setter: true

  - name: pages
    type: std::vector<std::string>
    init_with: '{"[unset-pages]"}'
    constructor_arg: true
    getter: true
    setter: true

  - name: options
    type: std::vector<std::tuple<std::string, AllegroFlare::DialogTree::NodeOptions::Base*, AllegroFlare::BitFlags<uint32_t>>>
    constructor_arg: true
    init_with: '{}'
    getter: true
    setter: true

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/DialogTree/Nodes/MultipageWithOptions"'
    static: true
    constexpr: true


methods:


  - name: get_option_num
    type: std::tuple<std::string, AllegroFlare::DialogTree::NodeOptions::Base*, AllegroFlare::BitFlags<uint32_t>>
    parameters:
      - name: option_num
        type: int
        default_argument: 0
    guards: [ (option_num >= 0), (option_num < options.size()) ]
    body: |
       return options[option_num];


  - name: build_options_as_text
    type: std::vector<std::string>
    body: |
      // TODO: Test this function
      std::vector<std::string> result;
      result.reserve(options.size());
      for (auto &option : options)
      {
         // TODO: Consider if this check is necessary
         if (!std::get<1>(option)) //.second)
         {
            AllegroFlare::Logger::throw_error("AllegroFlare/DialogTree/Node", "an option contains a nullptr");
         }
         result.push_back(std::get<0>(option)); //.first);
      }
      return result;
    body_dependency_symbols:
      - AllegroFlare::Logger::throw_error


  - name: num_pages
    type: int
    body: |
      return pages.size();


  - name: num_options
    type: int
    body: |
      return options.size();


dependencies:


  - symbol: AllegroFlare::BitFlags
    headers: [ AllegroFlare/BitFlags.hpp ]
  - symbol: AllegroFlare::DialogTree::Nodes::Base
    headers: [ AllegroFlare/DialogTree/Nodes/Base.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeOptions::Base
    headers: [ AllegroFlare/DialogTree/NodeOptions/Base.hpp ]
  - symbol: AllegroFlare::Logger::throw_error
    headers: [ AllegroFlare/Logger.hpp ]


