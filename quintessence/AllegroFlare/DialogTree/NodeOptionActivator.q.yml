properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    constructor_arg: true
    init_with: nullptr
    getter: true
    setter: true

  - name: node_bank
    type: AllegroFlare::DialogTree::NodeBank*
    constructor_arg: true
    init_with: nullptr
    getter: true
    setter: true

  - name: currently_active_node
    type: AllegroFlare::DialogTree::Node*
    constructor_arg: true
    init_with: nullptr
    getter: true
    setter: true

  - name: selection_choice
    type: int
    constructor_arg: true
    init_with: 0
    getter: true
    setter: true


functions:


  - name: activate
    type: void
    guards:
      - event_emitter
      - node_bank
      - currently_active_node
      - (selection_choice >= 0)
      - (selection_choice < currently_active_node->num_options())
    body: |
      AllegroFlare::DialogTree::NodeOptions::Base* node_option =
         currently_active_node->get_option_num(selection_choice).second;
      std::string node_option_type = node_option->get_type();
   
      std::map<std::string, std::function<void()>> types_map = {
         { AllegroFlare::DialogTree::NodeOptions::ExitDialog::TYPE, [this, node_option]() {
            AllegroFlare::DialogTree::NodeOptions::ExitDialog* as_exit_dialog_node_option =
               static_cast<AllegroFlare::DialogTree::NodeOptions::ExitDialog*>(node_option);
            event_emitter->emit_dialog_close_event();
         }},
         { AllegroFlare::DialogTree::NodeOptions::GoToNode::TYPE, [this, node_option]() {
            // TODO: Test this case
            AllegroFlare::DialogTree::NodeOptions::GoToNode* as_go_to_node_dialog_node_option =
               static_cast<AllegroFlare::DialogTree::NodeOptions::GoToNode*>(node_option);
            std::string target_node_name = as_go_to_node_dialog_node_option->get_target_node_name();
            event_emitter->emit_dialog_open_event(target_node_name);
         }},
      };

      // locate and call the function to handle the item
      if (types_map.count(node_option_type) == 0)
      {
         // item not found
         std::stringstream error_message;
         error_message << "[DialogTree::NodeOptionActivator::activate]: error: Cannot activate a node with the "
                       << "node_option_type \"" << node_option_type << "\", a handling for that type does not exist.";
         throw std::runtime_error(error_message.str());
      }
      else
      {
         // call the item
         types_map[node_option_type]();
         std::cout << "AAXX" << std::endl;
      }

      return;
    body_dependency_symbols:
      - std::function
      - AllegroFlare::DialogTree::NodeOptions::ExitDialog
      - AllegroFlare::DialogTree::NodeOptions::GoToNode


dependencies:


  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::DialogTree::Node
    headers: [ AllegroFlare/DialogTree/Node.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeBank
    headers: [ AllegroFlare/DialogTree/NodeBank.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeOptions::ExitDialog
    headers: [ AllegroFlare/DialogTree/NodeOptions/ExitDialog.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeOptions::GoToNode
    headers: [ AllegroFlare/DialogTree/NodeOptions/GoToNode.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeOptions::GoToNode
    headers: [ AllegroFlare/DialogTree/NodeOptions/GoToNode.hpp ]


