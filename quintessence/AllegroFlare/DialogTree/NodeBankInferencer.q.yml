properties:


  - name: node_bank
    type: AllegroFlare::DialogTree::NodeBank*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true


methods:


  - name: obtain_list_of_speaking_characters
    type: std::vector<std::string>
    guards: [ node_bank ]
    body: |
      std::vector<std::string> speakers;

      for (auto &node : node_bank->get_nodes_ref())
      {
         if (node.second->is_type(AllegroFlare::DialogTree::Nodes::MultipageWithOptions::TYPE))
         {
            AllegroFlare::DialogTree::Nodes::MultipageWithOptions *as =
               static_cast<AllegroFlare::DialogTree::Nodes::MultipageWithOptions*>(node.second);
            speakers.push_back(as->get_speaker());
         }
      }

      return make_unique_and_retain_ordering(speakers);
    body_dependency_symbols:
      - AllegroFlare::DialogTree::Nodes::MultipageWithOptions


  - name: make_unique_and_retain_ordering
    static: true
    type: std::vector<std::string>
    parameters:
      - name: list
        type: std::vector<std::string>
        default_argument: '{}'
    body: |
      std::vector<std::string> uniqueVector;
      for (auto &element : list)
      {
         if (std::find(uniqueVector.begin(), uniqueVector.end(), element) == uniqueVector.end())
         {
            uniqueVector.push_back(element);
         }
      }
      return uniqueVector;


dependencies:


  - symbol: AllegroFlare::DialogTree::NodeBank
    headers: [ AllegroFlare/DialogTree/NodeBank.hpp ]
  - symbol: AllegroFlare::DialogTree::Nodes::MultipageWithOptions
    headers: [ AllegroFlare/DialogTree/Nodes/MultipageWithOptions.hpp ]


