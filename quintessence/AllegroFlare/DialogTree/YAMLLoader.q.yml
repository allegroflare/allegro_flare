parent_classes:


  - class: AllegroFlare::YAMLValidator
    scope: public
    init_with: ''


documentation:


  - notes:
      - header: Schema
        body_markdown: |
          ```yaml
          - speaker:
            pages:
              - "Foobar, boobaz!"
              - "Donkin, Dankin!"
            options:
              - type: go_to_node
                data:
                  - 
          ```

properties:


  - name: SPEAKER_KEY
    type: char*
    constexpr: true
    static: true
    const: true
    init_with: '(char*)"speaker"'


functions:


  - name: load
    type: AllegroFlare::DialogTree::Node*
    parameters:
      - name: yaml_as_string
        type: std::string
        default_argument: '""'
    body: |
      YAML::Node root_node = YAML::Load(yaml_as_string);
      AllegroFlare::DialogTree::Node *result = new AllegroFlare::DialogTree::Node;

      // Validate and extract the speaker
      validate_presence_of_key(root_node, SPEAKER_KEY);
      validate_node_type(root_node, SPEAKER_KEY, YAML::NodeType::Scalar);
      std::string speaker = root_node[std::string(SPEAKER_KEY)].as<std::string>();
      result->set_speaker(speaker);

      // TODO: Validate and extract the pages
      //validate_presence_of_key(root_node, "pages");
      return result;


dependencies:


  - symbol: AllegroFlare::YAMLValidator
    headers: [ AllegroFlare/YAMLValidator.hpp ]
  - symbol: AllegroFlare::DialogTree::Node
    headers: [ AllegroFlare/DialogTree/Node.hpp ]


