parent_classes:


  - class: AllegroFlare::YAMLValidator
    scope: public
    init_with: ''


documentation:


  - notes:
      - header: Schema
        body_markdown: |
          ```yaml
          - speaker:
            pages:
              - "Foobar, boobaz!"
              - "Donkin, Dankin!"
            options:
              - type: go_to_node
                data:
                  - 
          ```
      - header: Validations
        body_markdown: |
          - must have 'speaker'
          - must have 'pages'
          - optional 'options'
          - speaker must not be blank
          - pages must not be empty
          - pages must be array
          - each pages element must be scalar
          - each pages element must not be blank or whitespace
          - options must be array
          - each option element must have 'type'
          - each option element must have 'data'


properties:


  - name: SPEAKER_KEY
    type: char*
    constexpr: true
    static: true
    const: true
    init_with: '(char*)"speaker"'

  - name: PAGES_KEY
    type: char*
    constexpr: true
    static: true
    const: true
    init_with: '(char*)"pages"'

  - name: OPTIONS_KEY
    type: char*
    constexpr: true
    static: true
    const: true
    init_with: '(char*)"options"'


functions:


  - name: load
    type: AllegroFlare::DialogTree::Node*
    parameters:
      - name: yaml_as_string
        type: std::string
        default_argument: '""'
    body: |
      YAML::Node root_node = YAML::Load(yaml_as_string);
      AllegroFlare::DialogTree::Node *result = new AllegroFlare::DialogTree::Node;

      // Validate and extract the speaker
      validate_presence_of_key(root_node, SPEAKER_KEY);
      validate_node_type(root_node, SPEAKER_KEY, YAML::NodeType::Scalar);
      std::string speaker = root_node[std::string(SPEAKER_KEY)].as<std::string>();
      result->set_speaker(speaker);

      // Validate and extract the pages
      validate_presence_of_key(root_node, PAGES_KEY);
      validate_node_type(root_node, PAGES_KEY, YAML::NodeType::Sequence);
      YAML::Node pages_node = root_node[std::string(PAGES_KEY)];
      std::vector<std::string> pages_vector;
      for (const auto& node : pages_node)
      {
         if (node.IsScalar())
         {
            pages_vector.push_back(node.as<std::string>());
         }
         else
         {
            // TODO: Improve this error message
            // TODO: Test this error path
            AllegroFlare::Logger::throw_error("here", "pages node contains a non-scalar element");
         }
      }
      // TODO: Validate content of pages vector
      result->set_pages(pages_vector);

      // Validate and extract the options
      // TODO: "options" node is optional
      validate_presence_of_key(root_node, OPTIONS_KEY);
      validate_node_type(root_node, OPTIONS_KEY, YAML::NodeType::Sequence);
      YAML::Node options_node = root_node[std::string(OPTIONS_KEY)];
      std::vector<std::pair<std::string, AllegroFlare::DialogTree::NodeOptions::Base*>> options_vector;
      for (const auto& node : options_node)
      {
         //std::string result_text = "foobar";
         //AllegroFlare::DialogTree::NodeOptions::Base* result_option = nullptr;

         //options_vector.push_back(std::make_pair(
            //result_text,
            //static_cast<AllegroFlare::DialogTree::NodeOptions::Base*>(result_option)
         //));

         //if (node.IsScalar())
         //{
            //options_vector.push_back(node.as<std::string>());
         //}
         //else
         //{
            // TODO: Improve this error message
            // TODO: Test this error path
            //AllegroFlare::Logger::throw_error("here", "pages node contains a non-scalar element");
         //}
      }
      // TODO: Validate content of pages vector
      result->set_options(options_vector);

      // Return our result
      return result;
    body_dependency_symbols:
      - std::make_pair
      - AllegroFlare::Logger
      - AllegroFlare::DialogTree::NodeOptions::Base


dependencies:


  - symbol: std::make_pair
    headers: [ utility ]
  - symbol: AllegroFlare::YAMLValidator
    headers: [ AllegroFlare/YAMLValidator.hpp ]
  - symbol: AllegroFlare::DialogTree::Node
    headers: [ AllegroFlare/DialogTree/Node.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeOptions::Base
    headers: [ AllegroFlare/DialogTree/NodeOptions/Base.hpp ]


