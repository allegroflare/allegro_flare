properties:


  - name: text
    type: std::string
    init_with: '"[unset-text]"'
    constructor_arg: true
    setter: explicit

  - name: node_bank
    type: AllegroFlare::DialogTree::NodeBank
    init_with: '{}'
    getter: explicit
    setter: false
    getter_ref: false

  - name: loaded
    type: bool
    init_with: false
    getter: true


documentation:


  - body: |
      Formatting is relatively simple:
        - All "chunks" are consecutive lines of text. Chunks are separated by two newlines.
        - If there are two lines, the top line is the dialog speaker, and the bottom is their line of dialog
        - If there is only one line, it's a type of command instruction or note or reference.
        - If there is more than one line, the first line is the speaker and the last line is the dialog. Intermediate
          lines are ignored (for now)


methods:


  - name: set_text
    parameters:
      - name: text
        type: std::string
        default_argument: '"[unset-text]"'
    guards: [ (!loaded) ]
    body: |
      this->text = text;
      return;


  - name: get_node_bank
    type: AllegroFlare::DialogTree::NodeBank
    guards: [ loaded ]
    body: |
      return node_bank;


  - name: load_file
    parameters:
      - name: filename
        type: std::string
        default_argument: '"[unset-filename]"'
    guards: [ (!loaded), '(AllegroFlare::php::file_exists(filename))' ]
    body: |
      // TODO: Test this method
      // TODO: Remove "file_exists" using php as dependency, consider alternative that outputs name of missing file
      text = AllegroFlare::php::file_get_contents(filename);
      load();
    body_dependency_symbols:
      - AllegroFlare::UsefulPHP


  - name: load
    type: const AllegroFlare::DialogTree::NodeBank&
    guards: [ (!loaded) ]
    body: |
      std::vector<std::string> chunks = split(text, "\n\n");
      int node_id = 0;

      // TODO: Process the chunks and create nodes
      for (auto &chunk : chunks)
      {
         std::vector<std::string> sub_chunks = split(chunk, "\n");
         if (sub_chunks.size() == 0)
         {
            std::cout << "Parsing line with no sub_chunks" << std::endl;
         }
         else if (sub_chunks.size() == 1)
         {
            std::cout << "Skipping parsing on one-line chunk: \"" << sub_chunks[0] << "\"" << std::endl;
         }
         else if (sub_chunks.size() >= 2)
         {
            if (sub_chunks[0].empty()) continue;

            std::string node_name = "dialog_node_" + std::to_string(node_id); // TODO: Extract this to a function
            std::string next_node_name = "dialog_node_" + std::to_string(node_id+1);
            std::string speaker = sub_chunks.front();
            std::vector<std::string> dialog_pages = split(sub_chunks.back(), " / ");

            AllegroFlare::DialogTree::Nodes::MultipageWithOptions *result_node =
               new AllegroFlare::DialogTree::Nodes::MultipageWithOptions;


            //std::cout << "- speaker: " << speaker << std::endl;
            //std::cout << "    pages: " << dialog_pages.size() << std::endl;
            //int page_num = 1;
            //for (auto &dialog_page : dialog_pages)
            //{
               //std::cout << "     page " << page_num << ": " << dialog_page << std::endl;
               //page_num++;
            //}
            //std::cout << std::endl;

            result_node->set_speaker(speaker);
            result_node->set_pages(dialog_pages);
            result_node->set_options({
               { "next", create_GoToNode_option(next_node_name), 0 },
            });

            node_bank.add_node(node_name, result_node);

            node_id++;
         }
      }

      // Add an ExitDialog node at the end
      std::string node_name = "dialog_node_" + std::to_string(node_id); // TODO: Extract this to a function
      node_bank.add_node(node_name, new AllegroFlare::DialogTree::Nodes::ExitDialog());

      loaded = true;
      return node_bank;
    body_dependency_symbols:
      - AllegroFlare::DialogTree::Nodes::MultipageWithOptions
      - AllegroFlare::DialogTree::Nodes::ExitDialog


  - name: create_GoToNode_option
    type: AllegroFlare::DialogTree::NodeOptions::GoToNode*
    parameters:
      - name: node_target_name
        type: std::string
        default_argument: '"[unset-node_target_name]"'
    body: |
      AllegroFlare::DialogTree::NodeOptions::GoToNode* result = new AllegroFlare::DialogTree::NodeOptions::GoToNode;
      result->set_target_node_name(node_target_name);
      return result;


  - name: split
    static: true
    type: std::vector<std::string>
    parameters:
      - name: input
        type: std::string
        default_argument: '"[unset-input]"'
      - name: delimiter
        type: std::string
        default_argument: '"__"'
    body: |
      std::vector<std::string> tokens;
      size_t start = 0, end = 0;
      while ((end = input.find(delimiter, start)) != std::string::npos)
      {
         tokens.push_back(input.substr(start, end - start));
         start = end + delimiter.length();
      }
      tokens.push_back(input.substr(start));
      return tokens;


dependencies:


  - symbol: AllegroFlare::DialogTree::NodeBank
    headers: [ AllegroFlare/DialogTree/NodeBank.hpp ]
  - symbol: AllegroFlare::DialogTree::Nodes::MultipageWithOptions
    headers: [ AllegroFlare/DialogTree/Nodes/MultipageWithOptions.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeOptions::GoToNode
    headers: [ AllegroFlare/DialogTree/NodeOptions/GoToNode.hpp ]
  - symbol: AllegroFlare::DialogTree::Nodes::ExitDialog
    headers: [ AllegroFlare/DialogTree/Nodes/ExitDialog.hpp ]
  - symbol: AllegroFlare::UsefulPHP
    headers: [ AllegroFlare/UsefulPHP.hpp ]


