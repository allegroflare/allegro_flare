properties:


  - name: text
    type: std::string
    init_with: '"[unset-text]"'
    constructor_arg: true
    setter: explicit

  - name: node_bank
    type: AllegroFlare::DialogTree::NodeBank
    init_with: '{}'
    getter: explicit
    setter: false
    getter_ref: false

  - name: loaded
    type: bool
    init_with: false
    getter: true


methods:


  - name: set_text
    parameters:
      - name: text
        type: std::string
        default_argument: '"[unset-text]"'
    guards: [ (!loaded) ]
    body: |
      this->text = text;
      return;


  - name: get_node_bank
    type: AllegroFlare::DialogTree::NodeBank
    guards: [ loaded ]
    body: |
      return node_bank;


  - name: load
    type: AllegroFlare::DialogTree::NodeBank
    guards: [ (!loaded) ]
    body: |
      std::vector<std::string> chunks = split(text, "\n\n");

      // TODO: Process the chunks and create nodes

      loaded = true;
      return node_bank;


  - name: split
    static: true
    type: std::vector<std::string>
    parameters:
      - name: input
        type: std::string
        default_argument: '"[unset-input]"'
      - name: delimiter
        type: std::string
        default_argument: '"__"'
    body: |
      std::vector<std::string> tokens;
      size_t start = 0, end = 0;
      while ((end = input.find(delimiter, start)) != std::string::npos)
      {
         tokens.push_back(input.substr(start, end - start));
         start = end + delimiter.length();
      }
      tokens.push_back(input.substr(start));
      return tokens;


dependencies:


  - symbol: AllegroFlare::DialogTree::NodeBank
    headers: [ AllegroFlare/DialogTree/NodeBank.hpp ]


