properties:


  - name: nodes
    type: std::map<std::string, AllegroFlare::DialogTree::Nodes::Base*>
    init_with: '{}'
    setter: true
    getter_ref: true


methods:


  - name: num_nodes
    type: uint32_t
    body: |
      return nodes.size();


  - name: add_node
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: node
        type: AllegroFlare::DialogTree::Nodes::Base*
        default_argument: nullptr
    guards: [ node, (!node_exists_by_name(name)) ]
    body: |
      nodes[name] = node;


  - name: node_exists_by_name
    type: bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    body: |
      return (nodes.find(name) != nodes.end());


  - name: find_node_by_name
    type: AllegroFlare::DialogTree::Nodes::Base*
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    guards: [ node_exists_by_name(name) ]
    body: |
      // TODO: This guard results in a double lookup. Might be faster to integrate it below.
      if (nodes.find(name) == nodes.end()) return nullptr;
      return nodes[name];


  - name: delete_all_nodes_and_clear
    body: |
      for (auto &node : nodes)
      {
         // TODO: Consider deleting or placing this in a try{} catch{}, Consider throwing if nullptr
         // TODO: Add test for deleted nodes (see AllegroFlare/Testing/MemoryAllocationDeallocationObserver)
         if (node.second != nullptr) delete node.second;
      }
      nodes.clear();
      return;


dependencies:


  - symbol: AllegroFlare::DialogTree::Nodes::Base
    headers: [ AllegroFlare/DialogTree/Nodes/Base.hpp ]


