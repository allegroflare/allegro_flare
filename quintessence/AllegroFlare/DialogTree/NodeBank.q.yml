properties:


  - name: nodes
    type: std::map<std::string, AllegroFlare::DialogTree::Nodes::Base*>
    init_with: '{}'
    setter: true
    getter_ref: true


methods:


  - name: num_nodes
    type: uint32_t
    body: |
      return nodes.size();


  - name: add_node
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: node
        type: AllegroFlare::DialogTree::Nodes::Base*
        default_argument: nullptr
    guards: [ node ]
    body: |
      // TODO: Test this guard
      if (node_exists_by_name(name))
      {
         AllegroFlare::Logger::throw_error(
            "AllegroFlare::DialogTree::NodeBank::add_node",
            "This node bank already contains an node with the identifier \"" + name + "\""
         );
      }
      nodes[name] = node;


  - name: replace_node
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: node
        type: AllegroFlare::DialogTree::Nodes::Base*
        default_argument: nullptr
    guards: [ node, node_exists_by_name(name) ]
    body: |
      // TODO: Test this
      nodes[name] = node;


  - name: node_exists_by_name
    type: bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    body: |
      return (nodes.find(name) != nodes.end());


  - name: find_node_by_name
    type: AllegroFlare::DialogTree::Nodes::Base*
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    body: |
      if (nodes.find(name) == nodes.end()) return nullptr;
      return nodes[name];


  - name: delete_all_nodes_and_clear
    body: |
      for (auto &node : nodes)
      {
         // TODO: Consider deleting or placing this in a try{} catch{}, Consider throwing if nullptr
         // TODO: Add test for deleted nodes (see AllegroFlare/Testing/MemoryAllocationDeallocationObserver)
         if (node.second != nullptr) delete node.second;
      }
      nodes.clear();
      return;


  - name: merge
    parameters:
      - name: other_node_bank
        type: AllegroFlare::DialogTree::NodeBank*
        default_argument: nullptr
    guards: [ other_node_bank ]
    body: |
      std::set<std::string> shared_node_names = find_shared_node_names(other_node_bank);
      if (!shared_node_names.empty())
      {
         std::string shared_node_names_str =
            AllegroFlare::StringTransformer::join_quoted_with_commas(&shared_node_names);
         AllegroFlare::Logger::throw_error(
            "AllegroFlare::DialogTree::NodeBank::merge",
            "Cannot merge two node_bank objects because they contain duplicate node identifiers. The node identifiers "
               "that are shared between the merging node_banks are [" + shared_node_names_str + "]."
         );
      }

      std::map<std::string, AllegroFlare::DialogTree::Nodes::Base*> &other_nodes = other_node_bank->get_nodes_ref();
      nodes.insert(other_nodes.begin(), other_nodes.end());

      return;
    body_dependency_symbols:
      - AllegroFlare::Logger
      - AllegroFlare::StringTransformer


  - name: find_shared_node_names
    type: std::set<std::string>
    parameters:
      - name: other_node_bank
        type: AllegroFlare::DialogTree::NodeBank*
        default_argument: nullptr
    guards: [ other_node_bank ]
    body: |
      std::set<std::string> shared_names;
      for (auto &other_node : other_node_bank->get_nodes_ref())
      {
         if (this->node_exists_by_name(other_node.first)) shared_names.insert(other_node.first);
      }
      return shared_names;


dependencies:


  - symbol: AllegroFlare::DialogTree::NodeBank
    headers: [ ]
  - symbol: AllegroFlare::DialogTree::Nodes::Base
    headers: [ AllegroFlare/DialogTree/Nodes/Base.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::StringTransformer
    headers: [ AllegroFlare/StringTransformer.hpp ]


