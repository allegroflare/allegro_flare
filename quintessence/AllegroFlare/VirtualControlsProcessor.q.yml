properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: keyboard_button_map
    type: std::map<uint32_t, std::pair<int, int>>
    init_with: ''
    getter: true

  - name: joystick_button_map
    type: std::map<int, int>
    init_with: ''
    getter: true

  - name: joystick_devices
    type: std::map<ALLEGRO_JOYSTICK*, int>
    init_with: '{}'

  - name: initialized
    type: bool
    init_with: false
    getter: true


documentation:


  - properties:
      - name: joystick_devices
        description: a map, the second value representing the player num (starting from 0).


functions:


  - name: initialize
    guards: [ (!initialized), al_is_system_installed(), al_is_joystick_installed() ]
    body: |
      keyboard_button_map = build_sensible_keyboard_button_map();
      joystick_button_map = build_sensible_joystick_button_map();
      setup_configuration_of_connected_joystick_devices();
      initialized = true;
      return;


  - name: setup_configuration_of_connected_joystick_devices
    private: true
    body: |
      // NOTE: There may need to be a "migration path to reconfiguration" for existing devices that may get lost
      // during reconfiguration.
      al_reconfigure_joysticks();
      joystick_devices.clear();
      for (int i=0; i<al_get_num_joysticks(); i++)
      {
         joystick_devices[al_get_joystick(i)] = i;
      }
      return;


  - name: infer_num_joystick_devices_connected
    type: int
    guards: [ initialized ]
    body: |
      return joystick_devices.size();


  - name: build_sensible_joystick_button_map
    type: std::map<int, int>
    body: |
      std::map<int, int> result_button_map = {
        { 1, AllegroFlare::VirtualControls::BUTTON_A }, // for x-box controller, but buttons named like SNES layout
        { 0, AllegroFlare::VirtualControls::BUTTON_B },
        { 4, AllegroFlare::VirtualControls::BUTTON_X },
        { 3, AllegroFlare::VirtualControls::BUTTON_Y },

        { 6, AllegroFlare::VirtualControls::BUTTON_LEFT_BUMPER },
        { 7, AllegroFlare::VirtualControls::BUTTON_RIGHT_BUMPER },

        { 11, AllegroFlare::VirtualControls::BUTTON_START },
      };
      return result_button_map;


  - name: build_sensible_keyboard_button_map
    type: std::map<uint32_t, std::pair<int, int>>
    body: |
      static int PLAYER_0 = 0;
             // { keyboard_key, { player_num, virtual_button } }
      std::map<uint32_t, std::pair<int, int>> result_button_map = {
        { ALLEGRO_KEY_ENTER, { PLAYER_0, AllegroFlare::VirtualControls::BUTTON_START } },
        { ALLEGRO_KEY_SPACE, { PLAYER_0, AllegroFlare::VirtualControls::BUTTON_A } },
        { ALLEGRO_KEY_A,     { PLAYER_0, AllegroFlare::VirtualControls::BUTTON_A } },
        { ALLEGRO_KEY_B,     { PLAYER_0, AllegroFlare::VirtualControls::BUTTON_B } },
        { ALLEGRO_KEY_X,     { PLAYER_0, AllegroFlare::VirtualControls::BUTTON_X } },
        { ALLEGRO_KEY_Y,     { PLAYER_0, AllegroFlare::VirtualControls::BUTTON_Y } },
        { ALLEGRO_KEY_UP,    { PLAYER_0, AllegroFlare::VirtualControls::BUTTON_UP } },
        { ALLEGRO_KEY_DOWN,  { PLAYER_0, AllegroFlare::VirtualControls::BUTTON_DOWN } },
        { ALLEGRO_KEY_LEFT,  { PLAYER_0, AllegroFlare::VirtualControls::BUTTON_LEFT } },
        { ALLEGRO_KEY_RIGHT, { PLAYER_0, AllegroFlare::VirtualControls::BUTTON_RIGHT } },
        { ALLEGRO_KEY_R,     { PLAYER_0, AllegroFlare::VirtualControls::BUTTON_RIGHT_BUMPER } },
        { ALLEGRO_KEY_E,     { PLAYER_0, AllegroFlare::VirtualControls::BUTTON_LEFT_BUMPER } },
      };
      return result_button_map;
    body_dependency_symbols:
      - AllegroFlare::VirtualControls
      - ALLEGRO_KEY_


  - name: find_player_num_from_al_joystick
    type: int
    parameters:
      - name: al_joystick
        type: ALLEGRO_JOYSTICK*
        default_argument: nullptr
    body: |
      // returns -1 when the joystick is not found
      if (joystick_devices.count(al_joystick) == 0) return -1;
      return joystick_devices[al_joystick];


  - name: handle_raw_keyboard_key_down_event
    parameters:
      - name: event
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized, event_emitter, event ]
    body: |
      std::pair<int, int> player_num_and_virtual_button =
         get_keyboard_mapped_player_num_and_virtual_button(event->keyboard.keycode);
      if (player_num_and_virtual_button == std::pair<int, int>{-1, -1}) return;
         // ^^ TODO: this behavior should be a little better; Maybe "has_mapping" first

      int player_num = player_num_and_virtual_button.first;
      int virtual_button = player_num_and_virtual_button.second;

      emit_virtual_controls_button_down_event(player_num, virtual_button);
      return;
    body_dependency_symbols:
      - std::cout


  - name: handle_raw_keyboard_key_up_event
    parameters:
      - name: event
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized, event_emitter, event ]
    body: |
      std::pair<int, int> player_num_and_virtual_button =
         get_keyboard_mapped_player_num_and_virtual_button(event->keyboard.keycode);
      if (player_num_and_virtual_button == std::pair<int, int>{-1, -1}) return;
         // ^^ TODO: this behavior should be a little better; Maybe "has_mapping" first

      int player_num = player_num_and_virtual_button.first;
      int virtual_button = player_num_and_virtual_button.second;
   
      emit_virtual_controls_button_up_event(player_num, virtual_button);
      return;
    body_dependency_symbols:
      - std::cout


  - name: handle_raw_joystick_button_down_event
    parameters:
      - name: event
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized, event_emitter, event ]
    body: |
      int player_num = find_player_num_from_al_joystick(event->joystick.id);
      int virtual_button = get_joystick_mapped_virtual_button(event->joystick.button);
      if (virtual_button == -1) return; // TODO: this behavior should be a little better; Maybe "has_mapping" first

      emit_virtual_controls_button_down_event(player_num, virtual_button);
      return;
    body_dependency_symbols:
      - std::cout


  - name: handle_raw_joystick_button_up_event
    parameters:
      - name: event
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized, event_emitter, event ]
    body: |
      int player_num = find_player_num_from_al_joystick(event->joystick.id);
      int virtual_button = get_joystick_mapped_virtual_button(event->joystick.button);
      if (virtual_button == -1) return; // TODO: this behavior should be a little better; Maybe "has_mapping" first

      emit_virtual_controls_button_up_event(player_num, virtual_button);
      return;
    body_dependency_symbols:
      - std::cout


  - name: handle_raw_joystick_axis_change_event
    parameters:
      - name: event
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized, event_emitter, event ]
    body: |
      int player_num = find_player_num_from_al_joystick(event->joystick.id);
      emit_virtual_controls_axis_change_event(
         player_num,
         event->joystick.stick,
         event->joystick.axis,
         event->joystick.pos
      );
      return;
    body_dependency_symbols:
      - std::cout


  - name: handle_joystick_device_configuration_change_event
    parameters:
      - name: event
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized, event_emitter, event ]
    body: |
      AllegroFlare::Logger::info_from(
         "AllegroFlare::VirtualControlsProcessor::handle_joystick_device_configuration_change_event",
         "Joystick configuration changed on the system. A device has been connected or disconnected."
      );

      setup_configuration_of_connected_joystick_devices();

      return;
    body_dependency_symbols:
      - AllegroFlare::Logger
      - std::cout


  - name: get_joystick_mapped_virtual_button
    type: int
    private: true
    parameters:
      - name: native_button_num
        type: int
        default_argument: -1
    body: |
      bool map_value_exists = joystick_button_map.find(native_button_num) != joystick_button_map.end();
      if (!map_value_exists) return -1;
      int virtual_button = joystick_button_map[native_button_num];
      return virtual_button;


  - name: get_keyboard_mapped_player_num_and_virtual_button
    type: std::pair<int, int>
    private: true
    parameters:
      - name: native_key_num
        type: int
        default_argument: -1
    body: |
      bool map_value_exists = keyboard_button_map.find(native_key_num) != keyboard_button_map.end();
      if (!map_value_exists) return { -1, -1 };

      std::pair<int, int> virtual_player_num_and_virtual_button = keyboard_button_map[native_key_num];
      //int virtual_button = keyboard_button_map[native_key_num].second;

      return virtual_player_num_and_virtual_button;


  - name: emit_virtual_controls_button_up_event
    parameters:
      - name: player_num
        type: int
        default_argument: 0
      - name: virtual_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized, event_emitter ]
    body: |
      // TODO: consider using non-global event names for these types, or a better design for this scope
      event_emitter->emit_event(
         ALLEGRO_FLARE_EVENT_VIRTUAL_CONTROL_BUTTON_UP,
         player_num,
         virtual_button_num,
         is_repeat
      );
      return;
    body_dependency_symbols:
      - AllegroFlare::EventNames
 

  - name: emit_virtual_controls_button_down_event
    parameters:
      - name: player_num
        type: int
        default_argument: 0
      - name: virtual_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized, event_emitter ]
    body: |
      // TODO: consider using non-global event names for these types, or a better design for this scope
      event_emitter->emit_event(
         ALLEGRO_FLARE_EVENT_VIRTUAL_CONTROL_BUTTON_DOWN,
         player_num,
         virtual_button_num,
         is_repeat
      );
      return;
    body_dependency_symbols:
      - AllegroFlare::EventNames
 

  - name: emit_virtual_controls_axis_change_event
    parameters:
      - name: player_num
        type: int
        default_argument: 0
      - name: stick
        type: int
        default_argument: 0
      - name: axis
        type: int
        default_argument: 0
      - name: position
        type: float
        default_argument: 0.0f
    guards: [ initialized, event_emitter ]
    body: |
      // TODO: consider using non-global event names for these types, or a better design for this scope
      event_emitter->emit_event(
         ALLEGRO_FLARE_EVENT_VIRTUAL_CONTROL_AXIS_CHANGE,
         player_num,
         stick,
         axis,
         (int)(position * 255)
      );
      return;
    body_dependency_symbols:
      - AllegroFlare::EventNames


dependencies:


  - symbol: AllegroFlare::EventNames
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: AllegroFlare::EventEmitter*
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: ALLEGRO_EVENT*
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_JOYSTICK
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_KEY_
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::VirtualControls
    headers: [ AllegroFlare/VirtualControls.hpp ]


