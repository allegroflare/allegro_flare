properties:


  - name: input_devices_list
    type: AllegroFlare::InputDevicesList*
    init_with: nullptr
    constructor_arg: true
    setter: false

  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true
    setter: false

  - name: physical_input_device_to_virtual_control_mappings
    type: std::vector<AllegroFlare::PhysicalInputDeviceToVirtualControllerMapping>
    init_with: '{}'
    getter_ref: true

  - name: initialized
    type: bool
    init_with: false
    getter: true


functions:


  - name: set_input_devices_list
    parameters:
      - name: input_devices_list
        type: AllegroFlare::InputDevicesList*
        default_argument: nullptr
    guards: [ (!initialized) ]
    body: |
      this->input_devices_list = input_devices_list;
      return;


  - name: set_event_emitter
    parameters:
      - name: event_emitter
        type: AllegroFlare::EventEmitter*
        default_argument: nullptr
    guards: [ (!initialized) ]
    body: |
      this->event_emitter = event_emitter;
      return;


  - name: initialize
    guards: [ (!initialized), al_is_system_installed(), al_is_joystick_installed(), input_devices_list, event_emitter ]
    body: |
      AllegroFlare::PhysicalInputDeviceToVirtualControllerMappingFactory factory; // TODO: remove factory as dependency
      AllegroFlare::PhysicalInputDeviceToVirtualControllerMapping mapping =
      factory.create_single_player_keyboard_mapping_from_scratch();

      physical_input_device_to_virtual_control_mappings = { mapping };

      // TODO: Create basic mapping for joysticks
      initialized = true;
      return;
    body_dependency_symbols:
      - AllegroFlare::PhysicalInputDeviceToVirtualControllerMappingFactory


  - name: handle_raw_keyboard_key_down_event
    parameters:
      - name: event
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized, event_emitter, event ]
    body: |
      AllegroFlare::PhysicalInputDeviceToVirtualControllerMapping *mapping =
         get_keyboard_mapped_physical_input_device_to_virtual_controller_mapping(event->keyboard.keycode);

      if (!mapping) return;

      emit_virtual_controls_button_down_event(
         mapping->get_player(),
         mapping->get_virtual_controller(),
         mapping->get_mapping(event->keyboard.keycode),
         event->keyboard.repeat // NOTE: this will not fire unless the event is a "ALLEGRO_EVENT_KEY_CHAR" event
      );
      return;
    body_dependency_symbols:
      - std::cout


  - name: handle_raw_keyboard_key_up_event
    parameters:
      - name: event
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized, event_emitter, event ]
    body: |
      AllegroFlare::PhysicalInputDeviceToVirtualControllerMapping *mapping =
         get_keyboard_mapped_physical_input_device_to_virtual_controller_mapping(event->keyboard.keycode);

      if (!mapping) return;

      emit_virtual_controls_button_up_event(
         mapping->get_player(),
         mapping->get_virtual_controller(),
         mapping->get_mapping(event->keyboard.keycode),
         event->keyboard.repeat // NOTE: this will not fire unless the event is a "ALLEGRO_EVENT_KEY_CHAR" event
      );
      return;
    body_dependency_symbols:
      - std::cout


  - name: handle_raw_joystick_button_down_event
    parameters:
      - name: event
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized, event_emitter, event ]
    body: |
      // TODO: Remove this throw
      // TODO: Implement this function
      throw std::runtime_error("VirtualControlsProcessor::handle_raw_joystick_button_down_event: not implemented");
      return;
    body_dependency_symbols:
      - std::cout


  - name: handle_raw_joystick_button_up_event
    parameters:
      - name: event
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized, event_emitter, event ]
    body: |
      // TODO: Remove this throw
      // TODO: Implement this function
      throw std::runtime_error("VirtualControlsProcessor::handle_raw_joystick_button_up_event: not implemented");
      return;
    body_dependency_symbols:
      - std::cout


  - name: handle_raw_joystick_axis_change_event
    parameters:
      - name: event
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized, event_emitter, event ]
    body: |
      // TODO: Remove this throw
      // TODO: Implement this function
      throw std::runtime_error("VirtualControlsProcessor::handle_raw_joystick_button_up_event: not implemented");
      return;
    body_dependency_symbols:
      - std::cout


  - name: handle_joystick_device_configuration_change_event
    parameters:
      - name: event
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized, event_emitter, event ]
    body: |
      // TODO: Remove this throw
      // TODO: Implement this function
      throw std::runtime_error("VirtualControlsProcessor::handle_joystick_device_configuration_change_event: not implemented");
      return;
    body_dependency_symbols:
      - AllegroFlare::Logger
      - std::cout


  - name: get_joystick_mapped_virtual_button
    type: int
    private: true
    parameters:
      - name: native_button_num
        type: int
        default_argument: -1
    body: |
      // TODO: Remove this throw
      // TODO: Implement this function
      throw std::runtime_error("VirtualControlsProcessor::get_joystick_mapped_virtual_button: not implemented");
      return 0;


  - name: get_keyboard_mapped_physical_input_device_to_virtual_controller_mapping
    type: AllegroFlare::PhysicalInputDeviceToVirtualControllerMapping*
    private: true
    parameters:
      - name: al_keyboard_keycode
        type: int
        default_argument: -1
    body: |
      AllegroFlare::PhysicalInputDeviceToVirtualControllerMapping *mapping = nullptr;

      for (auto &physical_input_device_to_virtual_control_mapping : physical_input_device_to_virtual_control_mappings)
      {
         // This mapping should only be looked up if it is a keyboard, continue on if this mapping is not to the
         // physical keyboard
         if (!physical_input_device_to_virtual_control_mapping.physical_input_device_is_keyboard()) continue;

         // If there is no mapping for this keyboard key, continue to the next one.
         if (!physical_input_device_to_virtual_control_mapping
               .mapping_exists_on_physical_device_button(al_keyboard_keycode)
         ) continue;

         // We found a mapping for that keyboard
         mapping = &physical_input_device_to_virtual_control_mapping;
         break;
      }

      return mapping;


  - name: emit_virtual_controls_button_up_event
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized, event_emitter ]
    body: |
      AllegroFlare::GameEventDatas::VirtualControllerButtonReleasedEventData *event_data = new
         AllegroFlare::GameEventDatas::VirtualControllerButtonReleasedEventData();

      event_data->set_player(player);
      event_data->set_virtual_controller(virtual_controller);
      event_data->set_virtual_controller_button_num(virtual_controller_button_num);
      // TODO: Consider adding "is_repeat"

      event_emitter->emit_event(
         ALLEGRO_FLARE_EVENT_VIRTUAL_CONTROL_BUTTON_UP,
         (intptr_t)event_data
      );
      return;
    body_dependency_symbols:
      - AllegroFlare::EventNames
      - AllegroFlare::GameEventDatas::VirtualControllerButtonReleasedEventData
 

  - name: emit_virtual_controls_button_down_event
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized, event_emitter ]
    body: |
      AllegroFlare::GameEventDatas::VirtualControllerButtonPressedEventData *event_data = new
         AllegroFlare::GameEventDatas::VirtualControllerButtonPressedEventData();

      event_data->set_player(player);
      event_data->set_virtual_controller(virtual_controller);
      event_data->set_virtual_controller_button_num(virtual_controller_button_num);
      // TODO: Consider adding "is_repeat"

      event_emitter->emit_event(
         ALLEGRO_FLARE_EVENT_VIRTUAL_CONTROL_BUTTON_DOWN,
         (intptr_t)event_data
      );
      return;
    body_dependency_symbols:
      - AllegroFlare::EventNames
      - AllegroFlare::GameEventDatas::VirtualControllerButtonPressedEventData
 

  - name: emit_virtual_controls_axis_change_event
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_stick
        type: int
        default_argument: 0
      - name: virtual_controller_axis
        type: int
        default_argument: 0
      - name: virtual_controller_position
        type: float
        default_argument: 0.0f
    guards: [ initialized, event_emitter ]
    body: |
      // TODO: consider using non-global event names for these types, or a better design for this scope
      AllegroFlare::GameEventDatas::VirtualControllerAxisChangeEventData *event_data = new
         AllegroFlare::GameEventDatas::VirtualControllerAxisChangeEventData();

      event_data->set_player(player);
      event_data->set_virtual_controller(virtual_controller);
      event_data->set_virtual_controller_stick(virtual_controller_stick);
      event_data->set_virtual_controller_axis(virtual_controller_axis);
      event_data->set_virtual_controller_position(virtual_controller_position);

      event_emitter->emit_event(
         ALLEGRO_FLARE_EVENT_VIRTUAL_CONTROL_AXIS_CHANGE,
         (intptr_t)event_data
         //player_num,
         //stick,
         //axis,
         //(int)(position * 255)
      );
      return;
    body_dependency_symbols:
      - AllegroFlare::EventNames
      - AllegroFlare::GameEventDatas::VirtualControllerAxisChangeEventData


dependencies:


  - symbol: AllegroFlare::EventNames
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: AllegroFlare::EventEmitter*
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: ALLEGRO_EVENT*
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_JOYSTICK
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_KEY_
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::VirtualController
    headers: [ AllegroFlare/VirtualController.hpp ]
  - symbol: AllegroFlare::PhysicalInputDevices::Joysticks::Base
    headers: [ AllegroFlare/PhysicalInputDevices/Joysticks/Base.hpp ]
  - symbol: AllegroFlare::PhysicalInputDevices::Base
    headers: [ AllegroFlare/PhysicalInputDevices/Base.hpp ]
  - symbol: AllegroFlare::PhysicalInputDeviceToVirtualControllerMapping
    headers: [ AllegroFlare/PhysicalInputDeviceToVirtualControllerMapping.hpp ]
  - symbol: AllegroFlare::PhysicalInputDeviceToVirtualControllerMappingFactory
    headers: [ AllegroFlare/PhysicalInputDeviceToVirtualControllerMappingFactory.hpp ]
  - symbol: AllegroFlare::Player
    headers: [ AllegroFlare/Player.hpp ]
  - symbol: AllegroFlare::VirtualControllers::Base
    headers: [ AllegroFlare/VirtualControllers/Base.hpp ]
  - symbol: AllegroFlare::GameEventDatas::VirtualControllerAxisChangeEventData
    headers: [ AllegroFlare/GameEventDatas/VirtualControllerAxisChangeEventData.hpp ]
  - symbol: AllegroFlare::GameEventDatas::VirtualControllerButtonPressedEventData
    headers: [ AllegroFlare/GameEventDatas/VirtualControllerButtonPressedEventData.hpp ]
  - symbol: AllegroFlare::GameEventDatas::VirtualControllerButtonReleasedEventData
    headers: [ AllegroFlare/GameEventDatas/VirtualControllerButtonReleasedEventData.hpp ]
  - symbol: AllegroFlare::InputDevicesList
    headers: [ AllegroFlare/InputDevicesList.hpp ]


