properties:


  - name: text
    type: std::string
    init_with: '"[unset-text]"'
    constructor_arg: true
    getter: true


documentation:


  - todos:
      - There's a good "replace()" in Logger, as well as a few other string manipulation methods. You should move
        them here.


methods:


  - name: upcase
    type: AllegroFlare::StringTransformer&
    body: |
      //std::string result = original_text;
      // note: the 4th argument casts std::toupper with a specific signature.  This is to prevent
      // a compile error on Windows that is unable to resolve which "std::toupper" function to use
      // see https://stackoverflow.com/a/16792532
      std::transform(
         text.begin(),
         text.end(),
         text.begin(),
         static_cast<int(*)(int)>(std::toupper)
      );

      return *this;
    body_dependency_symbols:
      - std::transform
      - std::toupper


  - name: expand
    type: AllegroFlare::StringTransformer&
    parameters:
      - name: num_spaces
        type: int
        default_argument: 3
    guards: [ (num_spaces >= 0) ]
    body: |
      std::string interpolate_string(num_spaces, ' ');
      std::stringstream result;

      for (size_t i=0; i<text.size(); i++)
      {
         result << text[i];

         // Append interpolate_string if not at the last character
         if (i != text.size() - 1) {
             result << interpolate_string;
         }
      }

      text = result.str();

      return *this;
    body_dependency_symbols:
      - std::stringstream


  - name: join_quoted_with_commas
    static: true
    type: std::string
    parameters:
      - name: elements
        type: std::set<std::string>*
        default_argument: nullptr
    guards: [ elements ]
    body: |
      std::ostringstream result;
      for (auto it = elements->begin(); it != elements->end(); ++it)
      {
          if (it != elements->begin()) result << ", ";
          result << quote_and_escape_inner_quotes(*it);
      }
      return result.str();
    body_dependency_symbols:
      - std::stringstream


  - name: join_with_commas
    static: true
    type: std::string
    parameters:
      - name: elements
        type: std::set<std::string>*
        default_argument: nullptr
    guards: [ elements ]
    body: |
      std::ostringstream result;
      for (auto it = elements->begin(); it != elements->end(); ++it)
      {
          if (it != elements->begin()) result << ", ";
          result << *it;
      }
      return result.str();
    body_dependency_symbols:
      - std::stringstream


  - name: join
    static: true
    type: std::string
    parameters:
      - name: elements
        type: std::vector<std::string>*
        default_argument: nullptr
      - name: interpolation_string
        type: std::string
        default_argument: '", "'
    guards: [ elements ]
    body: |
      std::ostringstream result;
      for (auto it = elements->begin(); it != elements->end(); ++it)
      {
          if (it != elements->begin()) result << interpolation_string;
          result << *it;
      }
      return result.str();
    body_dependency_symbols:
      - std::stringstream


  - name: remove_non_alphanumeric
    type: std::string
    static: true
    parameters:
      - name: input
        type: std::string
        default_argument: '"[unset-input]"'
    body: |
      std::string output = "";
      for (std::size_t i=0; i<input.size(); i++)
      {
          if (isalnum(input[i])) output += input[i];
          //|| isspace(input[i]))
          //{
              //output += input[i];
          //}
      }
      return output;
    body_dependency_symbols:
      - isalnum
      - isspace
      - isalnum


  - name: quote_and_escape_inner_quotes
    private: true
    static: true
    type: std::string
    parameters:
      - name: subject
        type: std::string
        default_argument: '"[unset-subject]"'
    body: |
      // TODO: Test this
      return "\"" + replace(subject, "\"", "\\\"") + "\"";
    body_dependency_symbols:
      - std::stringstream


  - name: replace
    private: true
    static: true
    type: std::string
    parameters:
      - name: subject
        type: std::string
        default_argument: '"[unset-subject]"'
      - name: search
        type: std::string
        default_argument: '"[unset-search]"'
      - name: replace
        type: std::string
        default_argument: '"[unset-replace]"'
    body: |
      std::string buffer;

      int sealeng = search.length();
      int strleng = subject.length();

      if (sealeng==0)
         return subject;//no change

      for(int i=0, j=0; i<strleng; j=0 )
      {
         while (i+j<strleng && j<sealeng && subject[i+j]==search[j])
            j++;
         if (j==sealeng)//found 'search'
         {
            buffer.append(replace);
            i+=sealeng;
         }
         else
         {
            buffer.append( &subject[i++], 1);
         }
      }
      subject = buffer;
      return subject;


dependencies:


  - symbol: AllegroFlare::StringTransformer
    headers: [ AllegroFlare/StringTransformer.hpp ]
  - symbol: std::transform
    headers: [ algorithm ]
  - symbol: std::toupper
    headers: [ cctype ]
  - symbol: isspace
    headers: [ cctype ]
  - symbol: isalnum
    headers: [ cctype ]


