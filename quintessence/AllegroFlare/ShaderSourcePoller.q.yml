properties:


  - name: event_queue
    type: ALLEGRO_EVENT_QUEUE*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: false

  - name: vertex_source_filename
    type: std::string
    init_with: '"[unset-vertex_source_filename]"'
    constructor_arg: true
    getter: true
    setter: true

  - name: fragment_source_filename
    type: std::string
    init_with: '"[unset-vertex_source_filename]"'
    constructor_arg: true
    getter: true
    setter: true

  - name: path
    type: std::string
    init_with: '"[unset-path]"'
    constructor_arg: true
    getter: true
    setter: true

  - name: last_recorded_vertex_source_file_changed_at
    type: std::filesystem::file_time_type
    init_with: ''
    getter: true

  - name: last_recorded_fragment_source_file_changed_at
    type: std::filesystem::file_time_type
    init_with: ''
    getter: true

  - name: polling_timer
    type: ALLEGRO_TIMER*
    init_with: nullptr
    getter: true

  - name: polling_active
    type: bool
    init_with: false
    getter: false

  - name: initialized
    type: bool
    init_with: false


functions:


  - name: set_event_queue
    parameters:
      - name: event_queue
        type: ALLEGRO_EVENT_QUEUE*
        default_argument: nullptr
    guards: [ (!initialized), event_queue ]
    body: |
      this->event_queue = event_queue;
      return;


  - name: initialize
    guards: [ (!initialized), al_is_system_installed(), event_queue ]
    body: |
      polling_timer = al_create_timer(ALLEGRO_BPS_TO_SECS(1)); // one poll per second
      initialized = true;
      poll();
      return;


  - name: start_polling
    guards: [ initialized, (!polling_active) ]
    body: |
      al_register_event_source(event_queue, al_get_timer_event_source(polling_timer));
      al_start_timer(polling_timer);
      polling_active = true;
      return;


  - name: stop_polling
    guards: [ initialized, polling_active ]
    body: |
      al_stop_timer(polling_timer);
      al_unregister_event_source(event_queue, al_get_timer_event_source(polling_timer));
      polling_active = false;
      return;


  - name: read_vertex_source_code_from_file
    type: std::string
    guards:
      - initialized
      - std::filesystem::exists(path + vertex_source_filename)
    body: |
      return AllegroFlare::php::file_get_contents(path + vertex_source_filename);
    body_dependency_symbols:
      - AllegroFlare::php::file_get_contents


  - name: read_fragment_source_code_from_file
    type: std::string
    guards:
      - initialized
      - std::filesystem::exists(path + fragment_source_filename)
    body: |
      return AllegroFlare::php::file_get_contents(path + fragment_source_filename);
    body_dependency_symbols:
      - AllegroFlare::php::file_get_contents


  - name: poll
    type: bool
    guards:
      - initialized
      - std::filesystem::exists(path + vertex_source_filename)
      - std::filesystem::exists(path + fragment_source_filename)
    body: |
      // TODO: consider adding better error messages on exists() that would also include the current path
      bool files_have_changed = false;
      std::filesystem::file_time_type vertex_polled_source_time =
         std::filesystem::last_write_time(path + vertex_source_filename);
      std::filesystem::file_time_type fragment_polled_source_time =
         std::filesystem::last_write_time(path + fragment_source_filename);

      if (last_recorded_vertex_source_file_changed_at != vertex_polled_source_time)
      {
         last_recorded_vertex_source_file_changed_at = vertex_polled_source_time;
         files_have_changed = true;
      }

      if (last_recorded_fragment_source_file_changed_at != fragment_polled_source_time)
      {
         last_recorded_fragment_source_file_changed_at = fragment_polled_source_time;
         files_have_changed = true;
      }

      return files_have_changed;
    body_dependency_symbols:
      - std::filesystem::last_write_time


dependencies:


  - symbol: std::filesystem::file_time_type
    headers: [ filesystem ]
  - symbol: std::filesystem::last_write_time
    headers: [ filesystem ]
  - symbol: ALLEGRO_EVENT_QUEUE
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_TIMER
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::php::file_get_contents
    headers: [ AllegroFlare/UsefulPHP.hpp ]


