parent_classes:


  - class: AllegroFlare::DisplaySettingsInterfaces::Base
    scope: public
    init_with: AllegroFlare::DisplaySettingsInterfaces::Live::TYPE


properties:


  - name: display
    type: ALLEGRO_DISPLAY*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: windowed_mode_width
    type: int
    init_with: 1920

  - name: windowed_mode_height
    type: int
    init_with: 1080

  - name: screensaver_inhibited
    type: bool
    init_with: false

  - name: mouse_cursor_hidden
    type: bool
    init_with: false

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/DisplaySettingsInterfaces/Live"'
    static: true
    constexpr: true


methods:


  - name: hide_mouse_cursor
    virtual: true
    override: true
    body: |
      bool mouse_hide_successful = al_hide_mouse_cursor(display);
      if (!mouse_hide_successful)
      {
         AllegroFlare::Logger::throw_error(
            "AllegroFlare::DisplaySettingsInterfaces::Live::hide_mouse_cursor",
            "Allegro returned false when trying to hide the mouse cursor"
         );
      }
      mouse_cursor_hidden = true;
      return;


  - name: show_mouse_cursor
    virtual: true
    override: true
    body: |
      bool mouse_show_successful = al_show_mouse_cursor(display);
      if (!mouse_show_successful)
      {
         AllegroFlare::Logger::throw_error(
            "AllegroFlare::DisplaySettingsInterfaces::Live::show_mouse_cursor",
            "Allegro returned false when trying to show the mouse cursor"
         );
      }
      mouse_cursor_hidden = false;
      return;


  - name: toggle_hide_mouse_cursor
    virtual: true
    override: true
    body: |
      if (mouse_cursor_hidden) show_mouse_cursor();
      else hide_mouse_cursor();


  - name: is_mouse_cursor_hidden
    virtual: true
    override: true
    type: bool
    body: |
      return mouse_cursor_hidden;


  - name: activate_fullscreen
    virtual: true
    override: true
    guards: [ display ]
    body: |
      if (is_fullscreen()) return;

      bool toggle_supported = al_set_display_flag(display, ALLEGRO_FULLSCREEN_WINDOW, true);
      if (!toggle_supported)
      {
         AllegroFlare::Logger::throw_error(
            "AllegroFlare::DisplaySettingsInterfaces::Live::activate_fullscreen",
            "Allegro returned false when trying to set ALLEGRO_FULLSCREEN_WINDOW, indicating it is not supported by "
               "Allegro's driver."
         );
      }

      // Validate the change
      if (!is_fullscreen())
      {
         AllegroFlare::Logger::throw_error(
            "AllegroFlare::DisplaySettingsInterfaces::Live::activate_fullscreen",
            "The ALLEGRO_FULLSCREEN_WINDOW display flag was set successfully, but the property did not actually change."
         );
      }
      return;


  - name: deactivate_fullscreen
    virtual: true
    override: true
    guards: [ display ]
    body: |
      if (!is_fullscreen()) return;

      bool toggle_supported = al_set_display_flag(display, ALLEGRO_FULLSCREEN_WINDOW, false);
      if (!toggle_supported)
      {
         AllegroFlare::Logger::throw_error(
            "AllegroFlare::DisplaySettingsInterfaces::Live::deactivate_fullscreen",
            "Allegro returned false when trying to set ALLEGRO_FULLSCREEN_WINDOW, indicating it is not supported by "
               "Allegro's driver."
         );
      }

      // Validate the change
      if (is_fullscreen())
      {
         AllegroFlare::Logger::throw_error(
            "AllegroFlare::DisplaySettingsInterfaces::Live::deactivate_fullscreen",
            "The ALLEGRO_FULLSCREEN_WINDOW display flag was set successfully, but the property did not actually change."
         );
      }
      return;


  - name: toggle_fullscreen
    virtual: true
    override: true
    guards: [ display ]
    body: |
      if (is_fullscreen()) deactivate_fullscreen();
      else activate_fullscreen();
      return;


  - name: is_fullscreen
    virtual: true
    override: true
    type: bool
    guards: [ display ]
    body: |
      // TODO: Add test
      int flags = al_get_display_flags(display);
      return flags & ALLEGRO_FULLSCREEN_WINDOW;
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: set_window_size
    virtual: true
    override: true
    parameters:
      - name: width
        type: int
        default_argument: 1920
      - name: height
        type: int
        default_argument: 1080
    guards: [ display, (!is_fullscreen()) ]
    body: |
      bool resize_was_successful = al_resize_display(display, width, height);
      if (!resize_was_successful)
      {
         AllegroFlare::Logger::throw_error(
            "AllegroFlare::DisplaySettingsInterfaces::Live::set_window_size",
            "Allegro returned false while trying to resize the display."
         );
      }
      windowed_mode_width = width;
      windowed_mode_height = height;
      return;


  - name: get_window_size
    virtual: true
    override: true
    type: std::pair<int, int>
    guards: [ display ]
    body: |
      return std::pair<int, int>(
         windowed_mode_width,
         windowed_mode_height
      );


  - name: get_display_size
    virtual: true
    override: true
    type: std::pair<int, int>
    body: |
      return std::pair<int, int>(
         al_get_display_width(display),
         al_get_display_height(display)
      );


  - name: manually_mark_screensaver_as_inhibited
    virtual: true
    override: true
    body: |
      screensaver_inhibited = true;
      //std::cout << "manually_mark: " << screensaver_inhibited << std::endl;
      return;


  - name: enable_inhibit_screensaver
    virtual: true
    override: true
    body: |
      bool inhibit_result = al_inhibit_screensaver(true);
      if (!inhibit_result)
      {
         AllegroFlare::Logger::throw_error(
            "AllegroFlare::DisplaySettingsInterfaces::Live::enable_inhibit_screensaver",
            "al_inhibit_screensaver(true) returned false, indicating it was not successfully inhibited."
         );
      }
      screensaver_inhibited = true;
      // TODO: Test this message
      AllegroFlare::Logger::info_from(
         "AllegroFlare::DisplaySettingsInterfaces::Live::enable_inhibit_screensaver",
         "Screensaver inhibited successfully."
      );
      return;


  - name: disable_inhibit_screensaver
    virtual: true
    override: true
    body: |
      bool inhibit_result = al_inhibit_screensaver(false);
      if (!inhibit_result)
      {
         AllegroFlare::Logger::throw_error(
            "AllegroFlare::DisplaySettingsInterfaces::Live::disable_inhibit_screensaver",
            "al_inhibit_screensaver(false) returned false, indicating it was not successfully disabled."
         );
      }
      screensaver_inhibited = false;
      // TODO: Test this message
      AllegroFlare::Logger::info_from(
         "AllegroFlare::DisplaySettingsInterfaces::Live::enable_inhibit_screensaver",
         "Screensaver inhibiting has been disabled and is no longer in effect."
      );
      return;


  - name: toggle_inhibit_screensaver
    virtual: true
    override: true
    body: |
      if (screensaver_inhibited) disable_inhibit_screensaver();
      else enable_inhibit_screensaver();
      return;


  - name: is_screensaver_inhibited
    type: bool
    virtual: true
    override: true
    body: |
      return screensaver_inhibited;


dependencies:


  - symbol: ALLEGRO_DISPLAY
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::DisplaySettingsInterfaces::Base
    headers: [ AllegroFlare/DisplaySettingsInterfaces/Base.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]


