properties:


  - name: bitmap
    type: ALLEGRO_BITMAP*
    init_with: nullptr
    constructor_arg: true
    setter: before_initialized

  - name: width
    type: int
    init_with: 0

  - name: height
    type: int
    init_with: 0

  - name: pixel_format
    type: int
    init_with: 0

  - name: flags
    type: int
    init_with: 0

  - name: samples
    type: int
    init_with: 0

  - name: is_sub_bitmap
    type: bool
    init_with: false

  - name: sub_bitmap_x
    type: int
    init_with: 0

  - name: sub_bitmap_y
    type: int
    init_with: 0

  - name: parent_bitmap
    type: ALLEGRO_BITMAP*
    init_with: nullptr

  - name: initialized
    type: bool
    init_with: false
    getter: true


methods:


  - name: initialize
    guards: [ bitmap, (!initialized) ]
    body: |
      //this->bitmap = bitmap;
      flags = al_get_bitmap_flags(bitmap);
      pixel_format = al_get_bitmap_format(bitmap);
      //depth = al_get_bitmap_depth(bitmap); // NOTE: Depth cannot be included unless ALLEGRO_UNSTABLE is defined
                                             // before #include <allegro5/allegro.h>. Simply adding AllegroUnstable
                                             // as a dependency here will not get the order correct when the header
                                             // is generated
      width = al_get_bitmap_width(bitmap);
      height = al_get_bitmap_height(bitmap);
      flags = al_get_bitmap_flags(bitmap);
      //samples = al_get_bitmap_samples(bitmap); // Might also require ALLEGRO_UNSTABLE
      is_sub_bitmap = al_is_sub_bitmap(bitmap);
      sub_bitmap_x = al_get_bitmap_x(bitmap);
      sub_bitmap_y = al_get_bitmap_y(bitmap);
      parent_bitmap = al_get_parent_bitmap(bitmap);
      initialized = true;
      return;


  - name: build_report
    type: std::string
    guards: [ initialized ]
    body: |
      std::stringstream bitmap_ss;
      bitmap_ss << std::hex << bitmap;

      std::stringstream parent_bitmap_ss;
      parent_bitmap_ss << std::hex << parent_bitmap;

      std::vector<std::tuple<std::string, std::string>> data = {
         { "bitmap", bitmap_ss.str() },
         { "width", std::to_string(width) },
         { "height", std::to_string(height) },
         { "flags", std::to_string(flags) },
         { "pixel_format", std::to_string(pixel_format) },
         { "samples", std::to_string(samples) },
         { "is_sub_bitmap", std::to_string(is_sub_bitmap) },
         { "sub_bitmap_x", std::to_string(sub_bitmap_x) },
         { "sub_bitmap_y", std::to_string(sub_bitmap_y) },
         { "parent_bitmap", parent_bitmap_ss.str() },
      };
      //int longest_label_length = 0;
      //int longest_duration_length_in_chars = 0;
      //for (auto &timer : timers)
      //{
         //int duration = timer.second.get_elapsed_time_milliseconds();
      
      //data.push_back({timer.first, duration));
      //int duration_length_in_chars = count_digits(duration);

         //if (timer.first.size() > longest_label_length) longest_label_length = timer.first.size();
         //if (duration_length_in_chars > longest_duration_length_in_chars)
         //{
            //longest_duration_length_in_chars = duration_length_in_chars;
         //}
      //}

      return format_table(
         data,
         16,
         10
      );


  - name: format_table
    type: std::string
    parameters:
      - name: data
        type: std::vector<std::tuple<std::string, std::string>>
        default_argument: '{}'
      - name: label_width
        type: int
        default_argument: 16
      - name: number_width
        type: int
        default_argument: 10
    guards: [ initialized ]
    body: |
      std::ostringstream result;

      for (const auto& [label, number] : data)
      {
         // Format each line with right-aligned text, padding with dashes
         result << std::right << std::setw(label_width) << label;
         result << " " << std::right << std::setfill('-') << std::setw(number_width + 1) << " " << number;
         result << std::setfill(' ');
         //result << " " << unit << "\n";
         result << std::endl;
      }

      return result.str();
    body_dependency_symbols:
      - std::setw
      - std::setfill


dependencies:


  - symbol: ALLEGRO_BITMAP
    headers: [ allegro5/allegro.h ]
  - symbol: std::setw
    headers: [ iomanip ]
  - symbol: std::setfill
    headers: [ iomanip ]


