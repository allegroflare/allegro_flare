documentation:


  todos:
    - consider removing "static" attribute from "once_emitted_warnings", and all other remaining ones as well
  internal: |
    Below is a code example showing variadic arguments in C++ using std::format (will be available in C++20.
    See: https://codereview.stackexchange.com/questions/269425/implementing-stdformat

    template<typename T>
    void format_helper(std::ostringstream& oss, std::string_view& str, const T& value)
    {
        std::size_t openBracket = str.find('{');
        if (openBracket == std::string::npos) { return; }
        std::size_t closeBracket = str.find('}', openBracket + 1);
        if (closeBracket == std::string::npos) { return; }
        oss << str.substr(0, openBracket) << value;
        str = str.substr(closeBracket + 1);
    }

    template<typename... Targs>
    std::string format(std::string_view str, Targs...args)
    {
        std::ostringstream oss;
        (format_helper(oss, str, args),...);
        oss << str;
        return oss.str();
    }


properties:


  - name: once_emitted_warnings
    static: true
    type: std::set<std::string>
    init_with: '{}'

  - name: log_filename
    static: true
    type: std::string
    init_with: DEFAULT_LOG_FILENAME
    setter: explicit

  - name: log_file
    static: true
    type: std::ofstream
    init_with: '{}'

  - name: log_file_initialized
    static: true
    type: bool
    init_with: false

  - name: instrumentation_log_filename
    static: true
    type: std::string
    init_with: DEFAULT_INSTRUMENTATION_LOG_FILENAME
    setter: explicit

  - name: instrumentation_log_file
    static: true
    type: std::ofstream
    init_with: '{}'

  - name: instrumentation_log_file_initialized
    static: true
    type: bool
    init_with: false

  - name: instance
    static: true
    type: AllegroFlare::Logger*
    init_with: nullptr
    setter: explicit
    getter: false

  - name: DEFAULT_INSTRUMENTATION_LOG_FILENAME
    type: char*
    constexpr: true
    const: true
    static: true
    init_with: '(char*)"instrumentation.log"'

  - name: DEFAULT_LOG_FILENAME
    type: char*
    constexpr: true
    const: true
    static: true
    init_with: '(char*)"allegro_flare.log"'


methods:


  - name: set_instance
    static: true
    parameters:
      - name: instance_to_use
        type: AllegroFlare::Logger*
        default_argument: nullptr
    guards: [ (!instance) ]
    body: |
      instance = instance_to_use;
      return;


  - name: clear_instance
    static: true
    body: |
      instance = nullptr;
      return;


  - name: has_instance
    type: bool
    static: true
    body: |
      return (instance != nullptr);


  - name: set_log_filename
    guards: [ (!log_file_initialized) ]
    parameters:
      - name: log_filename
        type: std::string
        default_argument: DEFAULT_LOG_FILENAME
    body: |
      this->log_filename = log_filename;
      return;


  - name: initialize_log_file
    guards: [ (!log_file_initialized) ]
    body: |
      log_file.open(log_filename);
      if (!log_file.is_open()) {
         std::string error_message = build_error_message(
               "AllegroFlare::Logger::initialize_log_file",
               "Could not open log file for writing. Expecting to open() on filename \"" + log_filename + "\"."
            );
         // TODO: throw std::runtime_error(error_message.str());
      }
      log_file_initialized = true;
      return;


  - name: close_log_file
    guards: [ (log_file_initialized) ]
    body: |
      log_file.close();
      if (log_file.is_open()) {
         std::string error_message = build_error_message(
               "AllegroFlare::Logger::close_log_file",
               "Attempted not open log file for writing. Expecting to open() on filename \"" + log_filename + "\"."
            );
         // TODO: throw std::runtime_error(error_message.str());
      }
      log_file_initialized = false;
      return;


  - name: set_instrumentation_log_filename
    guards: [ (!instrumentation_log_file_initialized) ]
    parameters:
      - name: instrumentation_log_filename
        type: std::string
        default_argument: DEFAULT_INSTRUMENTATION_LOG_FILENAME
    body: |
      this->instrumentation_log_filename = instrumentation_log_filename;
      return;


  - name: initialize_instrumentation_log_file
    guards: [ (!instrumentation_log_file_initialized) ]
    body: |
      instrumentation_log_file.open(instrumentation_log_filename, std::ofstream::out | std::ofstream::app);
      if (!instrumentation_log_file.is_open()) {
         std::string error_message = build_error_message(
               "AllegroFlare::Logger::initialize_instrumentation_log_file",
               "Could not open instrumentation_log file for writing. Expecting to open() on filename \"" + instrumentation_log_filename + "\"."
            );
          throw std::runtime_error(error_message);
      }
      instrumentation_log_file_initialized = true;
      return;


  - name: close_instrumentation_log_file
    guards: [ (instrumentation_log_file_initialized) ]
    body: |
      instrumentation_log_file.close();
      if (instrumentation_log_file.is_open()) {
         std::string error_message = build_error_message(
               "AllegroFlare::Logger::close_instrumentation_log_file",
               "Attempted not open instrumentation_log file for writing. Expecting to open() on filename \"" + instrumentation_log_filename + "\"."
            );
         throw std::runtime_error(error_message);
      }
      instrumentation_log_file_initialized = false;
      return;


  - name: outstream_instrumentation_metric
    static: true
    parameters:
      - name: metric
        type: AllegroFlare::Instrumentation::PrimaryProcessEventMetric*
        default_argument: nullptr
    guards: [ instance, instance->instrumentation_log_file_initialized, metric ]
    body: |
      static const std::string div = "\t";
      //if (instance && instance->instrumentation_log_file_initialized)
      instance->instrumentation_log_file << metric->event_type
                                  << div << metric->event_time
                                  << div << metric->processing_start_time
                                  << div << metric->processing_end_time
                                  << div << metric->primary_timer_events_dropped
                                  << div << metric->al_flip_display_start_time
                                  << div << metric->al_flip_display_end_time
                                         << std::endl;
      //std::
      //std::stringstream result;
      //result << CONSOLE_COLOR_RED << "[" << from << "]: error: " << message << CONSOLE_COLOR_DEFAULT;
      //return result.str();
    body_dependency_symbols:
      - AllegroFlare::ConsoleColors
      - std::stringstream


  - name: build_error_message
    static: true
    parameters:
      - name: from
        type: std::string
        default_argument: '"[unset-from]"'
      - name: message
        type: std::string
        default_argument: '"[unset-message]"'
    type: std::string
    body: |
      std::stringstream result;
      result << CONSOLE_COLOR_RED << "[" << from << "]: error: " << message << CONSOLE_COLOR_DEFAULT;
      return result.str();
    body_dependency_symbols:
      - AllegroFlare::ConsoleColors
      - std::stringstream


  - name: build_guard_error_message
    static: true
    parameters:
      - name: from
        type: std::string
        default_argument: '"[unset-from]"'
      - name: guard_statement
        type: std::string
        default_argument: '"[unset-guard_statement]"'
    type: std::string
    body: |
      std::stringstream result;

      // TODO: I don't think there should be a newline at the end of this statement, but it exists in the blast error
      // message, and should probably be removed. Consider modifying the blast error message and removing it.
      result << CONSOLE_COLOR_RED << "[" << from << "]: error: guard \"" << guard_statement << "\" not met. "
             << "An exception will be thrown to halt the program." << CONSOLE_COLOR_DEFAULT
             << std::endl;
      return result.str();
    body_dependency_symbols:
      - AllegroFlare::ConsoleColors
      - std::stringstream


  - name: build_warning_message
    static: true
    parameters:
      - name: from
        type: std::string
        default_argument: '"[unset-from]"'
      - name: message
        type: std::string
        default_argument: '"[unset-message]"'
      - name: is_warn_once
        type: bool
        default_argument: false
    type: std::string
    body: |
      std::stringstream result;
      result << CONSOLE_COLOR_YELLOW << "[" << from << "]: warning";
      if (is_warn_once) result << " (once)";
      result << ": " << message << CONSOLE_COLOR_DEFAULT;
      return result.str();
    body_dependency_symbols:
      - AllegroFlare::ConsoleColors
      - std::stringstream


  - name: build_not_included_message
    type: std::string
    static: true
    parameters:
      - name: element_not_present
        type: std::string
        default_argument: '"[unset-missing_element]"'
      - name: valid_elements
        type: std::vector<std::string>
        default_argument: '{}'
    body: |
      std::stringstream result;
      result << "The element "
             << quote_and_escape_inner_quotes(element_not_present)
             << " is not in the list of valid elements [";
      for (auto &valid_element : valid_elements)
      {
         valid_element = quote_and_escape_inner_quotes(valid_element);
      }
      result << join(valid_elements, ", ");
      result << "]";
      return result.str();


  - name: build_unimplemented_for_base_class_message
    static: true
    parameters:
      - name: from
        type: std::string
        default_argument: '"[unset-from]"'
    type: std::string
    body: |
      return build_error_message(from,
                                 "This method is a virtual method an is expected to be implemented by the "
                                 "derived class that is calling it"
                                );
    body_dependency_symbols:
      - AllegroFlare::ConsoleColors
      - std::stringstream



  - name: build_info_message
    static: true
    parameters:
      - name: from
        type: std::string
        default_argument: '"[unset-from]"'
      - name: message
        type: std::string
        default_argument: '"[unset-message]"'
    type: std::string
    body: |
      std::stringstream result;
      result << CONSOLE_COLOR_CYAN << "[" << from << "]: info: " << message << CONSOLE_COLOR_DEFAULT;
      return result.str();
    body_dependency_symbols:
      - AllegroFlare::ConsoleColors
      - std::stringstream


  - name: build_unhandled_case_message
    type: std::string
    static: true
    parameters:
      - name: unhandled_case
        type: std::string
        default_argument: '"[unset-unhandled_case]"'
    parameters:
    body: |
      std::stringstream result;
      result << "Unhandled case for case " << quote_and_escape_inner_quotes(unhandled_case) << ".";
      return result.str();


  - name: throw_missing_file_error
    static: true
    parameters:
      - name: from
        type: std::string
        default_argument: '"[unset-from]"'
      - name: filename
        type: std::string
        default_argument: '"[unset-filename]"'
      - name: filetype
        type: std::string
        default_argument: '"[unset-filetype]"'
    body: |
      std::stringstream error_message;
      std::string current_path = std::filesystem::current_path().string();

      error_message << "The expected " << filetype << " file does not exist. "
                    << "Looking for \"" << filename << "\" from the current path "
                    << "\"" << current_path << "\".";
      throw_error(from, error_message.str());
      return;
    body_dependency_symbols:
      - AllegroFlare::ConsoleColors
      - std::filesystem


  - name: throw_unimplemented_for_base_class_error
    static: true
    parameters:
      - name: from
        type: std::string
        default_argument: '"[unset-from]"'
    body: |
      // This is incorrect somehow, feel free to fix
      throw_error(from, build_unimplemented_for_base_class_message(from));
      return;
    body_dependency_symbols:
      - AllegroFlare::ConsoleColors
      - std::filesystem


  - name: info_from
    static: true
    parameters:
      - name: from
        type: std::string
        default_argument: '"[unset-from]"'
      - name: message
        type: std::string
        default_argument: '"[unset-message]"'
    body: |
      std::string info_message = build_info_message(from, message);
      std::cout << info_message << std::endl;
      if (instance && instance->log_file_initialized) instance->log_file << info_message << std::endl;
    body_dependency_symbols:
      - AllegroFlare::ConsoleColors
      - std::stringstream
      - std::cout


  - name: warn_from
    static: true
    parameters:
      - name: from
        type: std::string
        default_argument: '"[unset-from]"'
      - name: message
        type: std::string
        default_argument: '"[unset-message]"'
    body: |
      std::string warning_message = build_warning_message(from, message);
      std::cout << warning_message << std::endl;
      if (instance && instance->log_file_initialized) instance->log_file << warning_message << std::endl;
    body_dependency_symbols:
      - AllegroFlare::ConsoleColors
      - std::stringstream
      - std::cout


  - name: warn_from_once
    static: true
    parameters:
      - name: from
        type: std::string
        default_argument: '"[unset-from]"'
      - name: message
        type: std::string
        default_argument: '"[unset-message]"'
    body: |
      std::string composite_message = build_warning_message(from, message, true);
      bool message_already_emitted = once_emitted_warnings.find(composite_message) != once_emitted_warnings.end();
      if (!message_already_emitted)
      {
         warn_from(from, message);
         once_emitted_warnings.insert(composite_message);
      }
    body_dependency_symbols:
      - AllegroFlare::ConsoleColors
      - std::stringstream
      - std::cout


  - name: throw_error
    static: true
    parameters:
      - name: from
        type: std::string
        default_argument: '"[unset-from]"'
      - name: message
        type: std::string
        default_argument: '"[unset-message]"'
    body: |
      std::stringstream error_message;
      error_message << "[" << from << "]: error: " << message;

      std::stringstream error_message_for_cout;
      error_message_for_cout << CONSOLE_COLOR_RED
                             << "[" << from << "] error: " << message
                             << CONSOLE_COLOR_DEFAULT << std::endl;

      std::cout << error_message_for_cout.str();

      throw std::runtime_error(error_message.str());
    body_dependency_symbols:
      - AllegroFlare::ConsoleColors
      - std::stringstream
      - std::cout


  - name: error_from
    static: true
    parameters:
      - name: from
        type: std::string
        default_argument: '"[unset-from]"'
      - name: message
        type: std::string
        default_argument: '"[unset-message]"'
    body: |
      // NOTE: "error_from" is the same as "throw_from" but does not throw.
      std::stringstream error_message;
      error_message << "[" << from << "]: error: " << message;

      std::stringstream error_message_for_cout;
      error_message_for_cout << CONSOLE_COLOR_RED
                             << "[" << from << "] error: " << message
                             << CONSOLE_COLOR_DEFAULT << std::endl;

      std::cout << error_message_for_cout.str();
      return;
    body_dependency_symbols:
      - AllegroFlare::ConsoleColors
      - std::stringstream
      - std::cout


  - name: throw_unhandled_case
    static: true
    parameters:
      - name: from
        type: std::string
        default_argument: '"[unset-from]"'
      - name: unhandled_case
        type: std::string
        default_argument: '"[unset-unhandled_case]"'
    body: |
      std::stringstream error_message;
      std::string message = build_unhandled_case_message(unhandled_case);
      error_message << "[" << from << "]: error: " << message;

      std::stringstream error_message_for_cout;
      error_message_for_cout << CONSOLE_COLOR_RED
                             << "[" << from << "] error: " << message
                             << CONSOLE_COLOR_DEFAULT << std::endl;

      std::cout << error_message_for_cout.str();

      throw std::runtime_error(error_message.str());
    body_dependency_symbols:
      - AllegroFlare::ConsoleColors
      - std::stringstream
      - std::cout


  - name: join
    private: true
    static: true
    type: std::string
    parameters:
      - name: tokens
        type: std::vector<std::string>
        default_argument: '{}'
      - name: delimiter
        type: std::string
        default_argument: '", "'
    body: |
      std::stringstream result;
      bool last = false;

      for (unsigned i=0; i<tokens.size(); i++)
      {
         result << tokens[i];
         if (i == tokens.size()-1) last = true;
         if (!last) result << delimiter;
      }

      return result.str();
    body_dependency_symbols:
      - std::stringstream


  - name: quote_and_escape_inner_quotes
    private: true
    static: true
    type: std::string
    parameters:
      - name: subject
        type: std::string
        default_argument: '"[unset-subject]"'
    body: |
      return "\"" + replace(subject, "\"", "\\\"") + "\"";
    body_dependency_symbols:
      - std::stringstream


  - name: replace
    private: true
    static: true
    type: std::string
    parameters:
      - name: subject
        type: std::string
        default_argument: '"[unset-subject]"'
      - name: search
        type: std::string
        default_argument: '"[unset-search]"'
      - name: replace
        type: std::string
        default_argument: '"[unset-replace]"'
    body: |
      std::string buffer;

      int sealeng = search.length();
      int strleng = subject.length();

      if (sealeng==0)
         return subject;//no change

      for(int i=0, j=0; i<strleng; j=0 )
      {
         while (i+j<strleng && j<sealeng && subject[i+j]==search[j])
            j++;
         if (j==sealeng)//found 'search'
         {
            buffer.append(replace);
            i+=sealeng;
         }
         else
         {
            buffer.append( &subject[i++], 1);
         }
      }
      subject = buffer;
      return subject;


dependencies:


  - symbol: std::filesystem
    headers: [ filesystem ]
  - symbol: AllegroFlare::ConsoleColors
    headers: [ AllegroFlare/ConsoleColors.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::Instrumentation::PrimaryProcessEventMetric
    headers: [ AllegroFlare/Instrumentation/PrimaryProcessEventMetric.hpp ]


