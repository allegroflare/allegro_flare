documentation:


  - internal: |
      Below is a code example showing variadic arguments in C++ using std::format (will be available in C++20.
      See: https://codereview.stackexchange.com/questions/269425/implementing-stdformat

      template<typename T>
      void format_helper(std::ostringstream& oss,
                         std::string_view& str, const T& value)
      {
          std::size_t openBracket = str.find('{');
          if (openBracket == std::string::npos) { return; }
          std::size_t closeBracket = str.find('}', openBracket + 1);
          if (closeBracket == std::string::npos) { return; }
          oss << str.substr(0, openBracket) << value;
          str = str.substr(closeBracket + 1);
      }

      template<typename... Targs>
      std::string format(std::string_view str, Targs...args)
      {
          std::ostringstream oss;
          (format_helper(oss, str, args),...);
          oss << str;
          return oss.str();
      }


functions:


  - name: build_error_message
    static: true
    parameters:
      - name: from
        type: std::string
        default_argument: '"[unset-from]"'
      - name: message
        type: std::string
        default_argument: '"[unset-message]"'
    type: std::string
    body: |
      //const std::string CONSOLE_COLOR_RED = "\033[1;31m";
      //const std::string CONSOLE_COLOR_DEFAULT = "\033[0m";
      std::stringstream result;
      result << CONSOLE_COLOR_RED << "[" << from << "]: error: " << message << CONSOLE_COLOR_DEFAULT;
      return result.str();
    body_dependency_symbols:
      - AllegroFlare::ConsoleColors
      - std::stringstream


  - name: build_warning_message
    static: true
    parameters:
      - name: from
        type: std::string
        default_argument: '"[unset-from]"'
      - name: message
        type: std::string
        default_argument: '"[unset-message]"'
    type: std::string
    body: |
      //const std::string CONSOLE_COLOR_RED = "\033[1;31m";
      //const std::string CONSOLE_COLOR_DEFAULT = "\033[0m";
      std::stringstream result;
      result << CONSOLE_COLOR_YELLOW << "[" << from << "]: warning: " << message << CONSOLE_COLOR_DEFAULT;
      return result.str();
    body_dependency_symbols:
      - AllegroFlare::ConsoleColors
      - std::stringstream


  - name: build_not_included_message
    type: std::string
    static: true
    parameters:
      - name: element_not_present
        type: std::string
        default_argument: '"[unset-missing_element]"'
      - name: valid_elements
        type: std::vector<std::string>
        default_argument: '{}'
    body: |
      std::stringstream result;
      result << "The element "
             << quote_and_escape_inner_quotes(element_not_present)
             << " is not in the list of valid elements [";
      for (auto &valid_element : valid_elements)
      {
         valid_element = quote_and_escape_inner_quotes(valid_element);
      }
      result << join(valid_elements, ", ");
      result << "]";
      return result.str();


  - name: build_unhandled_case_message
    type: std::string
    static: true
    parameters:
      - name: unhandled_case
        type: std::string
        default_argument: '"[unset-unhandled_case]"'
    parameters:
    body: |
      std::stringstream result;
      result << "Unhandled case for case " << quote_and_escape_inner_quotes(unhandled_case) << ".";
      return result.str();


  - name: build_info_message
    static: true
    parameters:
      - name: from
        type: std::string
        default_argument: '"[unset-from]"'
      - name: message
        type: std::string
        default_argument: '"[unset-message]"'
    type: std::string
    body: |
      //const std::string CONSOLE_COLOR_RED = "\033[1;31m";
      //const std::string CONSOLE_COLOR_DEFAULT = "\033[0m";
      std::stringstream result;
      result << CONSOLE_COLOR_CYAN << "[" << from << "]: info: " << message << CONSOLE_COLOR_DEFAULT;
      return result.str();
    body_dependency_symbols:
      - AllegroFlare::ConsoleColors
      - std::stringstream


  - name: throw_missing_file_error
    static: true
    parameters:
      - name: from
        type: std::string
        default_argument: '"[unset-from]"'
      - name: filename
        type: std::string
        default_argument: '"[unset-filename]"'
      - name: filetype
        type: std::string
        default_argument: '"[unset-filetype]"'
    body: |
      std::stringstream error_message;
      std::string current_path = std::filesystem::current_path().string();

      error_message << "The expected " << filetype << " file does not exist. "
                    << "Looking for \"" << filename << "\" from the current path "
                    << "\"" << current_path << "\".";
      throw_error(from, error_message.str());
      return;
    body_dependency_symbols:
      - AllegroFlare::ConsoleColors
      - std::filesystem


  - name: info_from
    static: true
    parameters:
      - name: from
        type: std::string
        default_argument: '"[unset-from]"'
      - name: message
        type: std::string
        default_argument: '"[unset-message]"'
    body: |
      std::cout << build_info_message(from, message) << std::endl;
    body_dependency_symbols:
      - AllegroFlare::ConsoleColors
      - std::stringstream
      - std::cout


  - name: warn_from
    static: true
    parameters:
      - name: from
        type: std::string
        default_argument: '"[unset-from]"'
      - name: message
        type: std::string
        default_argument: '"[unset-message]"'
    body: |
      std::cout << build_warning_message(from, message) << std::endl;
    body_dependency_symbols:
      - AllegroFlare::ConsoleColors
      - std::stringstream
      - std::cout


  - name: throw_error
    static: true
    parameters:
      - name: from
        type: std::string
        default_argument: '"[unset-from]"'
      - name: message
        type: std::string
        default_argument: '"[unset-message]"'
    body: |
      std::stringstream error_message;
      error_message << "[" << from << "]: error: " << message;

      //const std::string CONSOLE_COLOR_RED = "\033[1;31m";
      //const std::string CONSOLE_COLOR_DEFAULT = "\033[0m";
      std::stringstream error_message_for_cout;
      error_message_for_cout << CONSOLE_COLOR_RED
                             << "[" << from << "] error: " << message
                             << CONSOLE_COLOR_DEFAULT << std::endl;

      std::cout << error_message_for_cout.str();

      throw std::runtime_error(error_message.str());
    body_dependency_symbols:
      - AllegroFlare::ConsoleColors
      - std::stringstream
      - std::cout


  - name: throw_unhandled_case
    static: true
    parameters:
      - name: from
        type: std::string
        default_argument: '"[unset-from]"'
      - name: unhandled_case
        type: std::string
        default_argument: '"[unset-unhandled_case]"'
    body: |
      std::stringstream error_message;
      std::string message = build_unhandled_case_message(unhandled_case);
      error_message << "[" << from << "]: error: " << message;

      std::stringstream error_message_for_cout;
      error_message_for_cout << CONSOLE_COLOR_RED
                             << "[" << from << "] error: " << message
                             << CONSOLE_COLOR_DEFAULT << std::endl;

      std::cout << error_message_for_cout.str();

      throw std::runtime_error(error_message.str());
    body_dependency_symbols:
      - AllegroFlare::ConsoleColors
      - std::stringstream
      - std::cout


  - name: join
    private: true
    static: true
    type: std::string
    parameters:
      - name: tokens
        type: std::vector<std::string>
        default_argument: '{}'
      - name: delimiter
        type: std::string
        default_argument: '", "'
    body: |
      std::stringstream result;
      bool last = false;

      for (unsigned i=0; i<tokens.size(); i++)
      {
         result << tokens[i];
         if (i == tokens.size()-1) last = true;
         if (!last) result << delimiter;
      }

      return result.str();
    body_dependency_symbols:
      - std::stringstream


  - name: quote_and_escape_inner_quotes
    private: true
    static: true
    type: std::string
    parameters:
      - name: subject
        type: std::string
        default_argument: '"[unset-subject]"'
    body: |
      return "\"" + replace(subject, "\"", "\\\"") + "\"";
    body_dependency_symbols:
      - std::stringstream


  - name: replace
    private: true
    static: true
    type: std::string
    parameters:
      - name: subject
        type: std::string
        default_argument: '"[unset-subject]"'
      - name: search
        type: std::string
        default_argument: '"[unset-search]"'
      - name: replace
        type: std::string
        default_argument: '"[unset-replace]"'
    body: |
      std::string buffer;

      int sealeng = search.length();
      int strleng = subject.length();

      if (sealeng==0)
         return subject;//no change

      for(int i=0, j=0; i<strleng; j=0 )
      {
         while (i+j<strleng && j<sealeng && subject[i+j]==search[j])
            j++;
         if (j==sealeng)//found 'search'
         {
            buffer.append(replace);
            i+=sealeng;
         }
         else
         {
            buffer.append( &subject[i++], 1);
         }
      }
      subject = buffer;
      return subject;


dependencies:


  - symbol: std::filesystem
    headers: [ filesystem ]
  - symbol: AllegroFlare::ConsoleColors
    headers: [ AllegroFlare/ConsoleColors.hpp ]


