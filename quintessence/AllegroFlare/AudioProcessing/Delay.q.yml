properties:


  - name: delay_sec
    type: float
    init_with: 1.0
    constructor_arg: true
    getter: true

  - name: decay
    type: float
    init_with: 0.8
    constructor_arg: true
    getter: true

  - name: mixer
    type: AllegroFlare::AudioMixer
    init_with: '{}'

  - name: memory
    type: AllegroFlare::AudioDataBlock
    init_with: '{}'

  - name: initialized
    type: bool
    init_with: false


functions:


  - name: get_al_mixer
    type: ALLEGRO_MIXER*
    guards: [ initialized ]
    body: |
      return mixer.get_mixer();


  - name: initialize
    guards: [ (!initialized) ]
    body: |
      // initialize the mixer
      mixer.initialize();

      // initialize the memory
      float frequency = memory.get_frequency(); // same as "samples per second"
      int samples_needed = (int)(frequency * delay_sec);
      memory.set_sample_count(samples_needed);
      memory.initialize();

      // attach the
      mixer.set_postprocess_callback(mixer_postprocess_callback, this);

      // set initialized
      initialized = true;
      return;


  - name: mixer_postprocess_callback
    type: void
    static: true
    parameters:
      - name: buf
        type: void*
        default_argument: nullptr
      - name: samples
        type: unsigned int
        default_argument: 0
      - name: data
        type: void*
        default_argument: nullptr
    guards: [ data ]
    body: |
      float *fbuf = (float *)buf;
      AllegroFlare::AudioProcessing::Delay *delay = static_cast<AllegroFlare::AudioProcessing::Delay*>(data);
      float wet = 0.8;
      float dry = 1.0;
      int channel_count = delay->mixer.get_channel_count();

      for (int i=0; i<(samples * channel_count); i += channel_count)
      {
         // TODO: write the sample with delay and fill the memory bufer

         //float swap_l = fbuf[i+0];
         //float swap_r = fbuf[i+1];

         //fbuf[i+0] = fbuf[i+0] * dry + memory.get_sample_at(i, 0) * wet;
         //fbuf[i+1] = fbuf[i+1] * dry + memory.get_sample_at(i, 1) * wet;
      }
 
      return;
    body_dependency_symbols:
      - std::cout


dependencies:


  - symbol: AllegroFlare::AudioDataBlock
    headers: [ AllegroFlare/AudioDataBlock.hpp ]
  - symbol: AllegroFlare::AudioMixer
    headers: [ AllegroFlare/AudioMixer.hpp ]
  - symbol: ALLEGRO_MIXER
    headers: [ allegro5/allegro_audio.h ]


