properties:


  - name: delay_sec
    type: float
    init_with: 1.0
    constructor_arg: true
    getter: true
    setter: false

  - name: decay
    type: float
    init_with: 0.8
    constructor_arg: true
    getter: true

  - name: mixer
    type: AllegroFlare::AudioMixer
    init_with: ''

  - name: data_block
    type: AllegroFlare::AudioDataBlock
    init_with: ''
    getter_ref: true

  - name: initialized
    type: bool
    init_with: false


functions:


  - name: set_delay_sec
    parameters:
      - name: delay_sec
        type: float
        default_argument: 1.0f
    body: |
      data_block.set_sample_count(data_block.get_frequency() * delay_sec);
      return;


  - name: get_al_mixer
    type: ALLEGRO_MIXER*
    guards: [ initialized ]
    body: |
      return mixer.get_mixer();


  - name: initialize
    guards: [ (!initialized) ]
    body: |
      // initialize the mixer
      // DEBUG:
      mixer.initialize();

      // initialize the data_block
      data_block.initialize();
      float frequency = data_block.get_frequency(); // same as "samples per second"
      int samples_needed = (int)(frequency * delay_sec);
      data_block.set_sample_count(samples_needed);

      // attach the
      mixer.set_postprocess_callback(mixer_postprocess_callback, this);

      // set initialized
      initialized = true;
      return;


  - name: mixer_postprocess_callback
    type: void
    static: true
    parameters:
      - name: buf
        type: void*
        default_argument: nullptr
      - name: samples
        type: unsigned int
        default_argument: 0
      - name: data
        type: void*
        default_argument: nullptr
    guards: [ data ]
    body: |
      float *fbuf = (float *)buf;
      AllegroFlare::AudioProcessing::Delay *delay = static_cast<AllegroFlare::AudioProcessing::Delay*>(data);
      AllegroFlare::AudioDataBlock &data_block = delay->get_data_block_ref();
      float wet = 0.8;
      float dry = 1.0;
      int channel_count = delay->mixer.get_channel_count();

      for (int i=0; i<samples; i++)
      {
         int bufpos = i * 2;

         float l_result = fbuf[bufpos+0] * dry + data_block.get_sample_at_mono(i, 0) * wet;
         float r_result = fbuf[bufpos+1] * dry + data_block.get_sample_at_mono(i, 1) * wet;

         data_block.set_sample_at(i-1, l_result, r_result);

         fbuf[bufpos+0] = l_result;
         fbuf[bufpos+1] = r_result;
      }
      data_block.move_sample_head_position_by(samples);
 
      return;
    body_dependency_symbols:
      - std::cout


dependencies:


  - symbol: AllegroFlare::AudioDataBlock
    headers: [ AllegroFlare/AudioDataBlock.hpp ]
  - symbol: AllegroFlare::AudioMixer
    headers: [ AllegroFlare/AudioMixer.hpp ]
  - symbol: ALLEGRO_MIXER
    headers: [ allegro5/allegro_audio.h ]


