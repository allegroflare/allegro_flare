parent_classes:


  - class: ::testing::Test
    scope: public
    init_with: ''


properties:


  - name: global_abort
    type: std::atomic<bool>
    init_with: false

  - name: captured_callback_messages
    type: std::vector<std::string>
    init_with: '{}'
    static: true
    getter: true


functions:


  - name: get_global_abort_ptr
    type: std::atomic<bool>*
    body: |
      return &global_abort;


  - name: SetUp
    type: void
    virtual: true
    override: true
    body: |
      captured_callback_messages.clear();
      return;
    body_dependency_symbols: []


  - name: TearDown
    type: void
    virtual: true
    override: true
    body: |
      return;


  - name: run_server_blocking
    static: true
    type: void
    parameters:
      - name: global_abort
        type: std::atomic<bool>*
        default_argument: nullptr
    body: |
      // TODO: bind this testing server to a proper testing port
      //https://stackoverflow.com/questions/18183174/how-do-i-correctly-randomly-assign-a-port-to-a-test-http-server-using-boost-asio

      AllegroFlare::Network2::Server server(global_abort);
      server.run_blocking_while_awaiting_abort();
      return;
    body_dependency_symbols:
      - AllegroFlare::Network2::Server


  - name: run_client_blocking
    static: true
    type: void
    parameters:
      - name: global_abort
        type: std::atomic<bool>*
        default_argument: nullptr
      - name: messages_queue
        type: std::vector<std::string>*
        default_argument: nullptr
      - name: messages_queue_mutex
        type: std::mutex*
        default_argument: nullptr
      - name: (*callback)(std::string, void*)
        type: void
        default_argument: nullptr
      - name: callback_data
        type: void*
        default_argument: nullptr
    body: |
      // TODO: bind this testing client to a proper testing port
      //https://stackoverflow.com/questions/18183174/how-do-i-correctly-randomly-assign-a-port-to-a-test-http-server-using-boost-asio
 
      AllegroFlare::Network2::Client client(global_abort, messages_queue, messages_queue_mutex, callback, callback_data);
      client.run_blocking_while_awaiting_abort();
      return;
    body_dependency_symbols:
      - AllegroFlare::Network2::Client


  - name: simple_capture_callback
    static: true
    type: void
    parameters:
      - name: message
        type: std::string
        default_argument: '"[unset-message]"'
      - name: data
        type: void*
        default_argument: nullptr
    body: |
      captured_callback_messages.push_back(message);
      return;


dependencies:


  - symbol: void*
    headers: [ ]
  - symbol: std::mutex*
    headers: [ mutex ]
  - symbol: std::vector<std::string>*
    headers: [ vector, string ]
  - symbol: std::atomic<bool>
    headers: [ atomic ]
  - symbol: std::atomic<bool>*
    headers: [ atomic ]
  - symbol: ::testing::Test
    headers: [ gtest/gtest.h ]
  - symbol: AllegroFlare::Network2::Client
    headers: [ AllegroFlare/Network2/Client.hpp ]
  - symbol: AllegroFlare::Network2::Server
    headers: [ AllegroFlare/Network2/Server.hpp ]
  - symbol: (void (*callback)(std::string))
    headers: [ string ]


