properties:


  - name: display
    type: ALLEGRO_DISPLAY*
    init_with: nullptr
    getter: true
    setter: explicit

  - name: primary_event_queue
    type: ALLEGRO_EVENT_QUEUE*
    init_with: nullptr
    getter: true
    setter: explicit

  - name: primary_timer
    type: ALLEGRO_TIMER*
    init_with: nullptr

  - name: primary_timer_is_active
    type: bool
    init_with: false
    getter: true

  - name: hyper_primary_timer
    type: ALLEGRO_TIMER*
    init_with: nullptr

  - name: target_fps
    type: int
    init_with: 60
    getter: true
    setter: explicit

  - name: display_refresh_rate
    type: int
    init_with: 0
    getter: explicit

  - name: num_nudge_notches
    type: int
    init_with: 16
    getter: true
    setter: explicit

  - name: num_hyper_primary_timer_units
    type: int
    init_with: 32
    getter: true
    setter: explicit

  - name: hyper_primary_timer_is_active
    type: bool
    init_with: false
    getter: true

  - name: auto_nudge_is_active
    type: bool
    init_with: false
    getter: true

  - name: num_measurer_samples
    type: int
    init_with: 64*4
    getter: true
    setter: explicit

  - name: primary_timer_measurer
    type: AllegroFlare::Instrumentation::Metrics::Double
    init_with: '{}'

  - name: update_measurer
    type: AllegroFlare::Instrumentation::DurationMeasurer
    init_with: '{}'

  - name: draw_measurer
    type: AllegroFlare::Instrumentation::DurationMeasurer
    init_with: '{}'

  - name: flip_display_measurer
    type: AllegroFlare::Instrumentation::DurationMeasurer
    init_with: '{}'

  - name: font
    type: ALLEGRO_FONT*
    init_with: nullptr

  - name: initialized
    type: bool
    init_with: false


documentation:


  - primary_event_queue must be passed in
  - primary_timer is owned and managed by the SyncOracle


methods:


  - name: set_display
    parameters:
      - name: display
        type: ALLEGRO_DISPLAY*
        default_argument: nullptr
    guards: [ (!initialized) ]
    body: |
       this->display = display;
       return;


  - name: get_display_refresh_rate
    type: int
    guards: [ initialized ]
    body: |
       return display_refresh_rate;


  - name: set_primary_event_queue
    parameters:
      - name: primary_event_queue
        type: ALLEGRO_EVENT_QUEUE*
        default_argument: nullptr
    guards: [ (!initialized) ]
    body: |
       this->primary_event_queue = primary_event_queue;
       return;


  - name: set_target_fps
    parameters:
      - name: target_fps
        type: int
        default_argument: 60
    guards: [ (target_fps > 0), (target_fps <= 240) ]
    body: |
       // NOTE: < 240 is just a safety limit, has not been tested at high values
       // TODO: Handle re-creation of timers when this changes
       this->target_fps = target_fps;

       // TODO: Test this block of code, which permits changing the target fps at runtime
       if (initialized)
       {
          al_set_timer_speed(primary_timer, calculate_frame_duration_sec());
          if (hyper_primary_timer_is_active)
          {
             al_set_timer_speed(hyper_primary_timer, calculate_frame_duration_sec() / num_hyper_primary_timer_units);
          }
       }
       return;


  - name: set_num_hyper_primary_timer_units
    parameters:
      - name: num_hyper_primary_timer_units
        type: int
        default_argument: 32
    guards: [ (num_hyper_primary_timer_units > 2), (num_hyper_primary_timer_units < 128) ]
    body: |
       this->num_hyper_primary_timer_units = num_hyper_primary_timer_units;

       // TODO: Test this block of code, which permits changing the number of hypertimer units at runtime
       if (hyper_primary_timer_is_active)
       {
          al_set_timer_speed(hyper_primary_timer, calculate_frame_duration_sec() / num_hyper_primary_timer_units);
       }
       return;


  - name: set_num_nudge_notches
    parameters:
      - name: num_nudge_notches
        type: int
        default_argument: 16
    guards: [ (num_nudge_notches > 2) && (num_nudge_notches < 32) ]
    body: |
       // NOTE: < 32 is just for sanity, it's never been used/tested at numbers higher
       // TODO: Handle re-creation of timers when this changes
       this->num_nudge_notches = num_nudge_notches;
       return;


  - name: set_num_measurer_samples
    parameters:
      - name: num_measurer_samples
        type: int
        default_argument: 64*4
    guards: [ (!initialized), (num_measurer_samples > 0) && (num_measurer_samples < 64*8) ]
    body: |
       // NOTE: < 64*8 is just for sanity, it's never been used/tested at numbers higher
       // TODO: Handle re-creation of timers when this changes
       this->num_measurer_samples = num_measurer_samples;
       return;


  - name: initialize
    guards:
      - (!initialized)
      - display
      - primary_event_queue
      - al_is_system_installed()
      - al_is_font_addon_initialized()
    body: |
       // Setup the timer
       primary_timer = al_create_timer(calculate_frame_duration_sec());
       al_register_event_source(primary_event_queue, al_get_timer_event_source(primary_timer));

       // Setup our instrumentation
       primary_timer_measurer.set_size(num_measurer_samples);
       primary_timer_measurer.initialize();
       update_measurer.set_size(num_measurer_samples);
       update_measurer.initialize();
       draw_measurer.set_size(num_measurer_samples);
       draw_measurer.initialize();
       flip_display_measurer.set_size(num_measurer_samples);
       flip_display_measurer.initialize();

       // Load our font
       font = al_create_builtin_font();

       // Extract our display info
       display_refresh_rate = al_get_display_refresh_rate(display);

       initialized = true;
       return;
    body_dependency_symbols:
      - al_is_system_installed


  - name: activate_primary_timer
    guards: [ initialized ]
    body: |
      if (primary_timer_is_active) return;
      al_start_timer(primary_timer);
      primary_timer_is_active = true;
      return;


  - name: deactivate_primary_timer
    guards: [ initialized ]
    body: |
      if (!primary_timer_is_active) return;
      al_stop_timer(primary_timer);
      primary_timer_is_active = false;
      return;


  - name: shutdown
    guards: [ initialized ]
    body: |
      if (primary_timer)
      {
         if (primary_timer_is_active)
         {
            al_stop_timer(primary_timer);
            primary_timer_is_active = false;
         }
         al_unregister_event_source(primary_event_queue, al_get_timer_event_source(primary_timer));
         al_destroy_timer(primary_timer);
         primary_timer = nullptr;
      }

      if (hyper_primary_timer)
      {
         al_stop_timer(hyper_primary_timer);
         al_destroy_timer(hyper_primary_timer);
         hyper_primary_timer = nullptr;
         hyper_primary_timer_is_active = false;
      }

      al_destroy_font(font);

      initialized = false;
      return;


  - name: activate_hyper_timer
    body: |
      if (hyper_primary_timer_is_active) return;

      hyper_primary_timer = al_create_timer(calculate_frame_duration_sec() / num_hyper_primary_timer_units);
      al_start_timer(hyper_primary_timer);
      hyper_primary_timer_is_active = true;
      return;


  - name: deactivate_hyper_timer
    body: |
      if (!hyper_primary_timer_is_active) return;

      al_stop_timer(hyper_primary_timer);
      al_destroy_timer(hyper_primary_timer);
      hyper_primary_timer = nullptr;
      hyper_primary_timer_is_active = false;
      return;


  - name: toggle_hyper_timer
    body: |
      if (!hyper_primary_timer_is_active) activate_hyper_timer();
      else deactivate_hyper_timer();
      return;


  - name: activate_auto_nudge
    body: |
      if (auto_nudge_is_active) return;
      auto_nudge_is_active = true;
      return;


  - name: deactivate_auto_nudge
    body: |
      if (!auto_nudge_is_active) return;
      auto_nudge_is_active = false;
      return;


  - name: toggle_auto_nudge
    body: |
      if (!auto_nudge_is_active) activate_auto_nudge();
      else deactivate_auto_nudge();
      return;


  - name: is_primary_timer_event
    type: bool
    parameters:
      - name: al_event
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
       if (!al_event) return false;
       return (al_event->type == ALLEGRO_EVENT_TIMER && al_event->timer.source == primary_timer);


  - name: capture_primary_timer_event_time
    parameters:
      - name: timer_event_time
        type: double
        default_argument: 0.0
    body: |
      double modded = std::fmod(timer_event_time, calculate_frame_duration_sec());
      primary_timer_measurer.capture(modded);
      return;
    body_dependency_symbols:
      - std::fmod


  - name: start_flip_measure
    body: |
      flip_display_measurer.start_capture();
      return;


  - name: end_flip_measure
    body: |
      flip_display_measurer.end_capture();
      if (auto_nudge_is_active)
      {
         double most_recent_flip_duration = flip_display_measurer.get_last_metric();
         if (most_recent_flip_duration > calculate_frame_duration_sec())
         {
            // TODO: Track this autonudge
            nudge_primary_timer(-2);
         }
      }


  - name: start_update_measure
    body: |
      update_measurer.start_capture();
      return;


  - name: end_update_measure
    body: |
      update_measurer.end_capture();


  - name: start_draw_measure
    body: |
      draw_measurer.start_capture();
      return;


  - name: end_draw_measure
    body: |
      draw_measurer.end_capture();


  - name: calculate_frame_duration_sec
    type: double
    body: |
      return 1.0 / target_fps;


  - name: calculate_duration_of_previous_frame_for_delta_time
    type: double
    body: |
      return calculate_frame_duration_sec(); // TODO: Find out best way to calcualte this frame duration


  - name: calculate_practical_fps
    type: int
    body: |
      // Practical FPS is the FPS that your game's operations (updating game state, drawing game state) are running at.
      // This is independent of any synchronization delays or offsets (which are managed by the SyncOracle).
      int average_over_n_samples = 20;

      double update_measurer_last_n_avg = update_measurer.average_of_last_n_metrics(average_over_n_samples);
      double draw_measurer_last_n_avg = draw_measurer.average_of_last_n_metrics(average_over_n_samples);

      double practical_duration_total = update_measurer_last_n_avg + draw_measurer_last_n_avg;

      return (int)(60.0 / practical_duration_total);


  - name: calculate_nudge_duration
    type: double
    parameters:
      - name: num_nudge_notches_delta
        type: int
        default_argument: 1
    body: |
      while (num_nudge_notches_delta < 0) num_nudge_notches_delta += num_nudge_notches;
      num_nudge_notches_delta = num_nudge_notches_delta % num_nudge_notches;
      return calculate_frame_duration_sec() / num_nudge_notches * num_nudge_notches_delta;


  - name: nudge_primary_timer
    parameters:
      - name: num_nudge_notches_to_move
        type: int
        default_argument: 1
    guards: [ initialized ]
    body: |
      // TODO: Test this
      bool primary_timer_is_running = al_get_timer_started(primary_timer);
      if (!primary_timer_is_running) return;

      double offset = calculate_nudge_duration(num_nudge_notches_to_move);
      double primary_timer_speed = al_get_timer_speed(primary_timer);
      double offsetting_timer_speed = primary_timer_speed + offset;

      ALLEGRO_EVENT_QUEUE *event_queue = al_create_event_queue();
      al_register_event_source(event_queue, al_get_timer_event_source(primary_timer));
      ALLEGRO_EVENT this_event;

      al_wait_for_event(event_queue, &this_event);
      al_set_timer_speed(primary_timer, offsetting_timer_speed);
      al_wait_for_event(event_queue, &this_event);
      al_set_timer_speed(primary_timer, primary_timer_speed);

      al_unregister_event_source(event_queue, al_get_timer_event_source(primary_timer));
      al_destroy_event_queue(event_queue);
      return;


  - name: nudge_primary_timer_forward
    body: |
      nudge_primary_timer(1);
      return;


  - name: nudge_primary_timer_backward
    body: |
      nudge_primary_timer(-1);
      return;


  - name: draw_graph
    body: |
      float x = 100;
      float y = 200;
      float h = 500;
      int x_scale = 4;
      double min = 0;
      double max = calculate_frame_duration_sec();
      float range = (max - min);
      std::vector<double> samples;

      ALLEGRO_COLOR white = ALLEGRO_COLOR{1.0, 1.0, 1.0, 1.0};
      ALLEGRO_COLOR primary_timer_color = ALLEGRO_COLOR{1.0, 0.4, 0.0, 1};
      ALLEGRO_COLOR update_color = ALLEGRO_COLOR{0.4, 0.4, 0.55, 1};
      ALLEGRO_COLOR draw_color = ALLEGRO_COLOR{0.3, 0.6, 0.9, 1};
      ALLEGRO_COLOR flip_display_color = ALLEGRO_COLOR{0, 1.0, 0.45, 1};
      
      al_draw_textf(font, primary_timer_color, x, y-20, 0, "primary_timer");
      al_draw_textf(font, update_color, x+150, y-20, 0, "update");
      al_draw_textf(font, draw_color, x+300, y-20, 0, "draw");
      al_draw_textf(font, flip_display_color, x+450, y-20, 0, "flip");

      // Draw the hyper_primary_timer status
      if (hyper_primary_timer_is_active)
      {
         al_draw_textf(font, white, x, y-60, 0, "hyper_primary_timer: ON");
      }
      else
      {
         al_draw_textf(font, white, x, y-60, 0, "hyper_primary_timer: OFF");
      }

      // Draw the auto_nudge status
      if (auto_nudge_is_active)
      {
         al_draw_textf(font, white, x, y-40, 0, "auto_nudge: ON");
      }
      else
      {
         al_draw_textf(font, white, x, y-40, 0, "auto_nudge: OFF");
      }

      // Draw our estimated "practical fps"
      {
         al_draw_textf(font, ALLEGRO_COLOR{1, 1, 1, 1}, x, y-80, 0, "practical fps:");
         al_draw_textf(font, ALLEGRO_COLOR{1, 1, 1, 1}, x+180, y-80, 0, "%d", calculate_practical_fps());
      }

      // Draw the primary_timer_measurer
      {
         ALLEGRO_COLOR color = primary_timer_color; //ALLEGRO_COLOR{1.0, 0.4, 0.0, 1};
         int num_samples = primary_timer_measurer.get_size();
         samples = primary_timer_measurer.get_last_n_metrics(num_samples);
         draw_metric(&samples, color, x, y, h, min, max, num_samples, x_scale);

         double avg = primary_timer_measurer.average_of_last_n_metrics(20);
         float nval = (avg - min) / range;
         float yy = y + (1.0 - nval) * h;
         draw_triangle(x-10, yy, 20, 18, color);
      }

      // Draw the update_measurer
      {
         ALLEGRO_COLOR color = update_color; //ALLEGRO_COLOR{0.5, 0.7, 0.8, 1};
         int num_samples = update_measurer.get_size();
         samples = update_measurer.get_last_n_metrics(num_samples);
         draw_metric(&samples, color, x, y, h, min, max, num_samples, x_scale);

         double avg = update_measurer.average_of_last_n_metrics(20);
         float nval = (avg - min) / range;
         float yy = y + (1.0 - nval) * h;
         draw_triangle(x-10, yy, 20, 18, color);
      }

      // Draw the draw_measurer
      {
         ALLEGRO_COLOR color = draw_color; //ALLEGRO_COLOR{0.3, 0.6, 0.9, 1};
         int num_samples = draw_measurer.get_size();
         samples = draw_measurer.get_last_n_metrics(num_samples);
         draw_metric(&samples, color, x, y, h, min, max, num_samples, x_scale);

         double avg = draw_measurer.average_of_last_n_metrics(20);
         float nval = (avg - min) / range;
         float yy = y + (1.0 - nval) * h;
         draw_triangle(x-10, yy, 20, 18, color);
      }

      // Draw the flip_display_measurer
      {
         ALLEGRO_COLOR color = flip_display_color; //ALLEGRO_COLOR{0, 1.0, 0.45, 1};
         int num_samples = flip_display_measurer.get_size();
         samples = flip_display_measurer.get_last_n_metrics(num_samples);
         draw_metric(&samples, color, x, y, h, min, max, num_samples, x_scale);

         double avg = flip_display_measurer.average_of_last_n_metrics(20);
         float nval = (avg - min) / range;
         float yy = y + (1.0 - nval) * h;
         draw_triangle(x-10, yy, 20, 18, color);
      }
      return;


  - name: draw_metric
    static: true
    parameters:
      - name: samples
        type: std::vector<double>*
        default_argument: nullptr
      - name: color
        type: ALLEGRO_COLOR
        default_argument: ALLEGRO_COLOR{1, 1, 1, 1}
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: h
        type: float
        default_argument: 0.0f
      - name: chart_min
        type: float
        default_argument: 0.0f
      - name: chart_max
        type: float
        default_argument: 0.0f
      - name: num_samples
        type: int
        default_argument: 64*4
      - name: scale
        type: int
        default_argument: 4
    guards: [ al_get_current_display(), al_is_primitives_addon_initialized(), samples ]
    body: |
      //float x_scale = 4.0; //w / num_samples; //3.0f; // IMPORTANT: Consider keeping this as an integer for visual
                                                      // pixel alignment making the motion smoother to read

      float w = num_samples * scale;

      float chart_range = (chart_max - chart_min);
      std::vector<ALLEGRO_VERTEX> v;
      v.resize(num_samples);
      //std::vector<double> samples = metric->get_last_n_metrics(num_samples);

      int i=0;
      for (auto &sample : *samples)
      {
         float chart_y = h - (sample / chart_range) * h;
         v[i] = ALLEGRO_VERTEX{
                  .x = x+i*scale,
                  .y = y + chart_y,
                  .z = 0,
                  .u = 0,
                  .v = 0,
                  .color = color,
               };
         i++;
      }
         
      al_draw_rectangle(x, y, x+w, y+h, ALLEGRO_COLOR{0.8, 0.2, 0.7, 1.0}, 1.0);
      al_draw_prim(&v[0], NULL, NULL, 0, v.size(), ALLEGRO_PRIM_LINE_STRIP);

      return;
    body_dependency_symbols:
      - al_get_current_display()
      - al_is_primitives_addon_initialized()


  - name: draw_triangle
    static: true
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: width
        type: float
        default_argument: 0.0f
      - name: height
        type: float
        default_argument: 0.0f
      - name: color
        type: ALLEGRO_COLOR
        default_argument: ALLEGRO_COLOR{0.0f, 0.0f, 0.0f, 0.0f}
    body: |
      x -= width;
      y -= height * 0.5;
      al_draw_filled_triangle(x, y, x+width, y+height*0.5, x, y+height, color);
      return;


dependencies:


  - symbol: ALLEGRO_DISPLAY
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_EVENT_QUEUE
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_TIMER
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_is_system_installed
    headers: [ allegro5/allegro.h ]
  - symbol: al_get_current_display
    headers: [ allegro5/allegro.h ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Instrumentation::DurationMeasurer
    headers: [ AllegroFlare/Instrumentation/DurationMeasurer.hpp ]
  - symbol: AllegroFlare::Instrumentation::Metrics::Double
    headers: [ AllegroFlare/Instrumentation/Metrics/Double.hpp ]
  - symbol: std::fmod
    headers: [ cmath ]


