parent_classes:


  - class: AllegroFlare::Routers::Base
    scope: public
    init_with: AllegroFlare::Routers::Standard::TYPE


properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: load_level_handler
    type: std::function<bool(AllegroFlare::RouteEventDatas::Base*)>
    init_with: 0
    constructor_arg: true
    getter: true
    setter: true

  - name: game_session
    type: AllegroFlare::GameSession
    init_with: ''
    getter_ref: true

  - name: on_route_event_unhandled_func
    type: std::function<bool(uint32_t, AllegroFlare::Routers::Standard*, void*)>
    init_with: '{}'
    getter: true
    setter: true

  - name: on_route_event_unhandled_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: on_load_last_played_session_or_start_new_func
    type: std::function<void(AllegroFlare::Routers::Standard*, void*)>
    init_with: '{}'
    getter: true
    setter: true

  - name: on_load_last_played_session_or_start_new_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: on_create_new_session_func
    type: std::function<void(AllegroFlare::Routers::Standard*, void*)>
    init_with: '{}'
    getter: true
    setter: true

  - name: on_create_new_session_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: on_continue_from_last_save_func
    type: std::function<void(AllegroFlare::Routers::Standard*, void*)>
    init_with: '{}'
    getter: true
    setter: true

  - name: on_continue_from_last_save_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: on_load_save_file_content_into_gameplay_func
    type: std::function<void(AllegroFlare::Routers::Standard*, void*)>
    init_with: '{}'
    getter: true
    setter: true

  - name: on_load_save_file_content_into_gameplay_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: on_start_new_game_with_empty_save_slot_func
    type: std::function<void(AllegroFlare::Routers::Standard*, void*)>
    init_with: '{}'
    getter: true
    setter: true

  - name: on_start_new_game_with_empty_save_slot_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: on_save_game_func
    type: std::function<void(AllegroFlare::Routers::Standard*, std::string, void*)>
    init_with: '{}'
    getter: true
    setter: true

  - name: on_save_game_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: on_gameplay_paused_func
    type: std::function<void(AllegroFlare::Routers::Standard*, void*)>
    init_with: '{}'
    getter: true
    setter: true

  - name: on_gameplay_paused_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: on_gameplay_unpaused_func
    type: std::function<void(AllegroFlare::Routers::Standard*, void*)>
    init_with: '{}'
    getter: true
    setter: true

  - name: on_gameplay_unpaused_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: on_save_file_loading_finished_func
    type: std::function<void(AllegroFlare::Routers::Standard*, void*)>
    init_with: '{}'
    getter: true
    setter: true

  - name: on_save_file_loading_finished_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: on_primary_gameplay_screen_finished_func
    type: std::function<void(AllegroFlare::Routers::Standard*, void*)>
    init_with: '{}'
    getter: true
    setter: true

  - name: on_primary_gameplay_screen_finished_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: on_arbitrary_storyboard_screen_finished_func
    type: std::function<void(AllegroFlare::Routers::Standard*, void*)>
    init_with: '{}'
    getter: true
    setter: true

  - name: on_arbitrary_storyboard_screen_finished_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: on_arbitrary_storyboard_screen_activated_func
    type: std::function<void(AllegroFlare::Routers::Standard*, void*)>
    init_with: '{}'
    getter: true
    setter: true

  - name: on_arbitrary_storyboard_screen_activated_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: INTRO_LOGOS_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"intro_logos_screen"'
    static: true
    const: true
    constexpr: true

  - name: INTRO_STORYBOARD_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"intro_storyboards_screen"'
    static: true
    const: true
    constexpr: true

  - name: TITLE_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"title_screen"'
    static: true
    const: true
    constexpr: true

  - name: ACHIEVEMENTS_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"achievements_screen"'
    static: true
    const: true
    constexpr: true

  - name: SETTINGS_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"settings_screen"'
    static: true
    const: true
    constexpr: true

  - name: DISPLAY_SETTINGS_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"display_settings_screen"'
    static: true
    const: true
    constexpr: true

  - name: VERSION_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"version_screen"'
    static: true
    const: true
    constexpr: true

  - name: LOAD_A_SAVED_GAME_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"load_a_saved_game_screen"'
    static: true
    const: true
    constexpr: true

  - name: NEW_GAME_INTRO_STORYBOARD_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"new_game_intro_storyboard_screen"'
    static: true
    const: true
    constexpr: true

  - name: LEVEL_SELECT_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"level_select_screen"'
    static: true
    const: true
    constexpr: true

  - name: ARBITRARY_STORYBOARD_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"arbitrary_storyboard_screen"'
    static: true
    const: true
    constexpr: true

  - name: GAME_OVER_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"game_over_screen"'
    static: true
    const: true
    constexpr: true

  - name: GAME_WON_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"game_won_screen"'
    static: true
    const: true
    constexpr: true

  - name: GAME_WON_OUTRO_STORYBOARD_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"game_won_outro_storyboard_screen"'
    static: true
    const: true
    constexpr: true

  - name: CHARACTER_NAME_INPUT_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"character_name_input_screen"'
    static: true
    const: true
    constexpr: true

  - name: CREDITS_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"credits_screen"'
    static: true
    const: true
    constexpr: true

  - name: PRIMARY_GAMEPLAY_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"primary_gameplay_screen"'
    static: true
    const: true
    constexpr: true

  - name: PRIMARY_GAMEPLAY_SUBSCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"primary_gameplay_subscreen"'
    static: true
    const: true
    constexpr: true

  - name: PAUSE_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"pause_gameplay_screen"'
    static: true
    const: true
    constexpr: true

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/Routers/Standard"'
    static: true
    const: true
    constexpr: true



documentation:


  - todos:
      - consider a EVENT_FINISH_LEVEL type of event, something that denotes progress in the game, a save, level beaten
      - test on_route_event_unhandled_func
  - on sessions:
      - there's currently some misalignment on what a session is, its relationship to GameProgressAndStateInfo, and
        the gameplay. A session could represent a currently loaded game (with context that would show/hide menu
        choices on the title screen), or it could represent an current run of gameplay (think super mario bros with
        number of lives, high score, and time played), or another, not yet surfaced representation.  At this time,
        the session represents the super mario brothers version and the logic is treated as such in the router, however
        this may need to be changed. GameProgressAndStateInfo is the user's custom data that travels along with the
        session. GameProgressAndStateInfo also serves as the content for the save file.


enums:


  - name: route_event
    scope: public
    enumerators:
      - EVENT_UNDEFINED

      - EVENT_INITIALIZE
      - EVENT_EXIT_GAME

      - EVENT_START_NEW_GAME
      - EVENT_CONTINUE_FROM_LAST_SAVE
      - EVENT_LOAD_A_SAVED_GAME
      - EVENT_START_NEW_GAME_ON_EMPTY_SAVE_SLOT
      - EVENT_SAVE_TO_MANUAL_SAVE
      - EVENT_SAVE_TO_AUTOSAVE_SAVE
      - EVENT_SAVE_TO_QUICKSAVE_SAVE
      - EVENT_PAUSE_GAME
      - EVENT_UNPAUSE_GAME
      - EVENT_WIN_GAME
      - EVENT_LOSE_GAME
      - EVENT_START_LEVEL
      - EVENT_EXIT_TO_TITLE_SCREEN

   # Notifications, used to advance to next screen
      - EVENT_INTRO_LOGOS_SCREEN_FINISHED
      - EVENT_INTRO_STORYBOARD_SCREEN_FINISHED
      - EVENT_SAVE_FILE_LOADING_FINISHED
      - EVENT_NEW_GAME_INTRO_STORYBOARD_SCREEN_FINISHED
      - EVENT_PRIMARY_GAMEPLAY_SCREEN_FINISHED
      - EVENT_ARBITRARY_STORYBOARD_SCREEN_FINISHED
      - EVENT_GAME_WON_OUTRO_STORYBOARD_SCREEN_FINISHED
      - EVENT_CREDITS_SCREEN_FINISHED
      - EVENT_TITLE_SCREEN_FINISHED

   # Logistics
      - EVENT_SUSPEND_ACCUMULATING_PLAYTIME
      - EVENT_START_OR_RESUME_ACCUMULATING_PLAYTIME

   # Screens
      - EVENT_ACTIVATE_INTRO_LOGOS_SCREEN
      - EVENT_ACTIVATE_INTRO_STORYBOARD_SCREEN
      - EVENT_ACTIVATE_TITLE_SCREEN
      - EVENT_ACTIVATE_ACHIEVEMENTS_SCREEN
      - EVENT_ACTIVATE_DISPLAY_SETTINGS_SCREEN
      - EVENT_ACTIVATE_SETTINGS_SCREEN
      - EVENT_ACTIVATE_VERSION_SCREEN
      - EVENT_ACTIVATE_CHARACTER_NAME_INPUT_SCREEN
      - EVENT_ACTIVATE_LOAD_A_SAVED_GAME_SCREEN
      - EVENT_ACTIVATE_NEW_GAME_INTRO_STORYBOARD_SCREEN
      - EVENT_ACTIVATE_LEVEL_SELECT_SCREEN
      - EVENT_ACTIVATE_ARBITRARY_STORYBOARD_SCREEN
      - EVENT_ACTIVATE_GAME_OVER_SCREEN
      - EVENT_ACTIVATE_GAME_WON_SCREEN
      - EVENT_ACTIVATE_GAME_WON_OUTRO_STORYBOARD_SCREEN
      - EVENT_ACTIVATE_CREDITS_SCREEN
      - EVENT_ACTIVATE_PRIMARY_GAMEPLAY_SCREEN
      - EVENT_ACTIVATE_PRIMARY_GAMEPLAY_SUBSCREEN
      - EVENT_ACTIVATE_PAUSE_SCREEN
      - EVENT_ACTIVATE_SCREEN_BY_IDENTIFIER

   # Internal
      - EVENT_LAST_EVENT


methods:


  - name: emit_route_event
    parameters:
      - name: route_event
        type: uint32_t
        default_argument: 0
      - name: route_event_data
        type: AllegroFlare::RouteEventDatas::Base*
        default_argument: nullptr
      - name: time_now
        type: float
        default_argument: 0.0f
    guards: [ event_emitter ]
    body: |
      event_emitter->emit_router_event(route_event, route_event_data, time_now);
      return;


  - name: suspend_accumulating_playtime
    guards: [ game_session.is_active() ]
    body: |
      game_session.get_playtime_tracker_ref().pause();
      return;


  - name: start_or_resume_accumulating_playtime
    guards: [ game_session.is_active() ]
    body: |
      game_session.get_playtime_tracker_ref().start();
      return;


  - name: name_for_route_event
    type: std::string
    static: true
    parameters:
      - name: route_event
        type: uint32_t
        default_argument: 0
    body: |
      static const std::unordered_map<uint32_t, std::string> event_names {
         {EVENT_UNDEFINED, "EVENT_UNDEFINED"},
         {EVENT_INITIALIZE, "EVENT_INITIALIZE"},
         {EVENT_EXIT_GAME, "EVENT_EXIT_GAME"},
         {EVENT_START_NEW_GAME, "EVENT_START_NEW_GAME"},
         {EVENT_CONTINUE_FROM_LAST_SAVE, "EVENT_CONTINUE_FROM_LAST_SAVE"},
         {EVENT_LOAD_A_SAVED_GAME, "EVENT_LOAD_A_SAVED_GAME" },
         {EVENT_START_NEW_GAME_ON_EMPTY_SAVE_SLOT, "START_NEW_GAME_ON_EMPTY_SAVE_SLOT" },
         {EVENT_SAVE_TO_MANUAL_SAVE, "EVENT_SAVE_TO_MANUAL_SAVE"},
         {EVENT_SAVE_TO_AUTOSAVE_SAVE, "EVENT_SAVE_TO_AUTOSAVE_SAVE"},
         {EVENT_SAVE_TO_QUICKSAVE_SAVE, "EVENT_SAVE_TO_QUICKSAVE_SAVE"},
         {EVENT_PAUSE_GAME, "EVENT_PAUSE_GAME"},
         {EVENT_UNPAUSE_GAME, "EVENT_UNPAUSE_GAME"},
         {EVENT_WIN_GAME, "EVENT_WIN_GAME"},
         {EVENT_LOSE_GAME, "EVENT_LOSE_GAME"},
         {EVENT_START_LEVEL, "EVENT_START_LEVEL"},
         {EVENT_EXIT_TO_TITLE_SCREEN, "EVENT_EXIT_TO_TITLE_SCREEN"},
         {EVENT_INTRO_LOGOS_SCREEN_FINISHED, "EVENT_INTRO_LOGOS_SCREEN_FINISHED"},
         {EVENT_INTRO_STORYBOARD_SCREEN_FINISHED, "EVENT_INTRO_STORYBOARD_SCREEN_FINISHED"},
         {EVENT_SAVE_FILE_LOADING_FINISHED, "EVENT_SAVE_FILE_LOADING_FINISHED"},
         {EVENT_NEW_GAME_INTRO_STORYBOARD_SCREEN_FINISHED, "EVENT_NEW_GAME_INTRO_STORYBOARD_SCREEN_FINISHED"},
         {EVENT_PRIMARY_GAMEPLAY_SCREEN_FINISHED, "EVENT_PRIMARY_GAMEPLAY_SCREEN_FINISHED"},
         {EVENT_ARBITRARY_STORYBOARD_SCREEN_FINISHED, "EVENT_ARBITRARY_STORYBOARD_SCREEN_FINISHED"},
         {EVENT_GAME_WON_OUTRO_STORYBOARD_SCREEN_FINISHED, "EVENT_GAME_WON_OUTRO_STORYBOARD_SCREEN_FINISHED"},
         {EVENT_CREDITS_SCREEN_FINISHED, "EVENT_CREDITS_SCREEN_FINISHED"},
         {EVENT_TITLE_SCREEN_FINISHED, "EVENT_TITLE_SCREEN_FINISHED"},
         {EVENT_SUSPEND_ACCUMULATING_PLAYTIME, "EVENT_SUSPEND_ACCUMULATING_PLAYTIME" },
         {EVENT_START_OR_RESUME_ACCUMULATING_PLAYTIME, "EVENT_START_OR_RESUME_ACCUMULATING_PLAYTIME" },
         {EVENT_ACTIVATE_INTRO_LOGOS_SCREEN, "EVENT_ACTIVATE_INTRO_LOGOS_SCREEN"},
         {EVENT_ACTIVATE_INTRO_STORYBOARD_SCREEN, "EVENT_ACTIVATE_INTRO_STORYBOARD_SCREEN"},
         {EVENT_ACTIVATE_TITLE_SCREEN, "EVENT_ACTIVATE_TITLE_SCREEN"},
         {EVENT_ACTIVATE_ACHIEVEMENTS_SCREEN, "EVENT_ACTIVATE_ACHIEVEMENTS_SCREEN"},
         {EVENT_ACTIVATE_CHARACTER_NAME_INPUT_SCREEN, "EVENT_CHARACTER_NAME_INPUT_SCREEN"},
         {EVENT_ACTIVATE_DISPLAY_SETTINGS_SCREEN, "EVENT_ACTIVATE_DISPLAY_SETTINGS_SCREEN"},
         {EVENT_ACTIVATE_SETTINGS_SCREEN, "EVENT_ACTIVATE_SETTINGS_SCREEN"},
         {EVENT_ACTIVATE_VERSION_SCREEN, "EVENT_ACTIVATE_VERSION_SCREEN"},
         {EVENT_ACTIVATE_NEW_GAME_INTRO_STORYBOARD_SCREEN, "EVENT_ACTIVATE_NEW_GAME_INTRO_STORYBOARD_SCREEN"},
         {EVENT_ACTIVATE_LEVEL_SELECT_SCREEN, "EVENT_ACTIVATE_LEVEL_SELECT_SCREEN"},
         {EVENT_ACTIVATE_ARBITRARY_STORYBOARD_SCREEN, "EVENT_ACTIVATE_ARBITRARY_STORYBOARD_SCREEN"},
         {EVENT_ACTIVATE_GAME_OVER_SCREEN, "EVENT_ACTIVATE_GAME_OVER_SCREEN"},
         {EVENT_ACTIVATE_GAME_WON_SCREEN, "EVENT_ACTIVATE_GAME_WON_SCREEN"},
         {EVENT_ACTIVATE_GAME_WON_OUTRO_STORYBOARD_SCREEN, "EVENT_ACTIVATE_GAME_WON_OUTRO_STORYBOARD_SCREEN"},
         {EVENT_ACTIVATE_CREDITS_SCREEN, "EVENT_ACTIVATE_CREDITS_SCREEN"},
         {EVENT_ACTIVATE_PRIMARY_GAMEPLAY_SCREEN, "EVENT_ACTIVATE_PRIMARY_GAMEPLAY_SCREEN"},
         {EVENT_ACTIVATE_PRIMARY_GAMEPLAY_SUBSCREEN, "EVENT_ACTIVATE_PRIMARY_GAMEPLAY_SUBSCREEN"},
         {EVENT_ACTIVATE_PAUSE_SCREEN, "EVENT_ACTIVATE_PAUSE_SCREEN"}
      };

      auto it = event_names.find(route_event);

      if (it == event_names.end())
      {
         return "UNKNOWN_EVENT";
      }
      else
      {
         return it->second;
      }
    body_dependency_symbols:
      - std::unordered_map


  - name: on_route_event
    virtual: true
    override: true
    parameters:
      - name: route_event
        type: uint32_t
        default_argument: EVENT_UNDEFINED
      - name: route_event_data
        type: AllegroFlare::RouteEventDatas::Base*
        default_argument: nullptr
      - name: time_now
        type: float
        default_argument: 0.0f
    guards: [ (route_event != EVENT_UNDEFINED), event_emitter ]
    body: |
      AllegroFlare::Logger::info_from(
         "AllegroFlare::Routers::Standard::on_route_event",
         "Route Event: " + name_for_route_event(route_event) + " (" + std::to_string(route_event) + ")"
      );

      std::map<uint32_t, std::function<void()>> event_map = {

         // System Events

         { EVENT_INITIALIZE, [this](){
            // TODO: Consider different initial route depending on deployment environment
            // TODO: Consider guard on event when a session is already active (e.g. already initialized)

            // TODO: Test this method callback
            if (on_load_last_played_session_or_start_new_func)
            {
               // TODO: Consider if this should return a boolean on success
               // As a convenience, attempt to load the game session that was running the last time the game was
               // played
               on_load_last_played_session_or_start_new_func(
                  this,
                  on_load_last_played_session_or_start_new_func_user_data
               );
            }
            else
            {
               // TODO: Add boolean option to remove this warning
               AllegroFlare::Logger::warn_from(
                  "AllegroFlare::Routers::Standard::on_route_event",
                  "on EVENT_INITIALIZE, expecting an \"on_load_last_played_session_or_start_new_func\" to be present, "
                     "but it is not."
               );
            }
            game_session.start_session();

            emit_route_event(EVENT_ACTIVATE_INTRO_LOGOS_SCREEN);
         }},
         { EVENT_EXIT_GAME, [this](){
            // End the session if active
            if (game_session.is_active()) game_session.end_session();

            // Emit an event to exit the game
            event_emitter->emit_exit_game_event();
         }},


         // Game Events

         { EVENT_START_NEW_GAME, [this](){
            // Start new session
            if (game_session.is_active())
            {
               // TODO: Consider a confirmation dialog somewhere, e.g. "Would you like to save existing progress before
               // starting a new game?"
               game_session.end_session();
            }

            // TODO: Test this method callback
            if (on_create_new_session_func)
            {
               // TODO: Consider if this should return a boolean on success
               on_create_new_session_func(this, on_create_new_session_func_user_data);
            }
            else
            {
               // TODO: Add boolean option to remove this warning
               AllegroFlare::Logger::warn_from(
                  "AllegroFlare::Routers::Standard::on_route_event",
                  "on EVENT_START_NEW_GAME, expecting an \"on_create_new_session_func\" to be present, "
                     "but it is not."
               );
            }
            game_session.start_session();

            // Start the intro storyboard
            // HERE: Inspect the intro storyboard and see if it should be skipped.
            emit_route_event(EVENT_ACTIVATE_NEW_GAME_INTRO_STORYBOARD_SCREEN);
         }},
         { EVENT_CONTINUE_FROM_LAST_SAVE, [this](){
            // TODO: Finish the actions in this event
            // Event data: game session id

            // restore session
            // TODO: game_session.continue_session();

            // activate gameplay_screen

            // TODO: Test this callback
            if (on_continue_from_last_save_func)
            {
               // TODO: Consider if this should return a boolean on success
               on_continue_from_last_save_func(this, on_continue_from_last_save_func_user_data);
            }
            else
            {
               AllegroFlare::Logger::throw_error(
                  "AllegroFlare::Routers::Standard::on_route_event",
                  "on EVENT_CONTINUE_FROM_LAST_SAVE, expecting an \"on_continue_from_last_save_func\" to be present, "
                     "but it is not."
               );
            }
            // TODO: Implement an callback on this event
         }},
         { EVENT_START_NEW_GAME_ON_EMPTY_SAVE_SLOT, [this](){
            // TODO: Test this callback
            if (on_start_new_game_with_empty_save_slot_func)
            {
               on_start_new_game_with_empty_save_slot_func(
                  this,
                  on_start_new_game_with_empty_save_slot_func_user_data
               );
            }
            else
            {
               AllegroFlare::Logger::throw_error(
                  "AllegroFlare::Routers::Standard::on_route_event",
                  "on EVENT_START_NEW_GAME_ON_EMPTY_SAVE_SLOT, expecting an "
                     "\"on_start_new_game_with_empty_save_slot_func\" to be present, but it is not."
               );
            }
         }},
         { EVENT_LOAD_A_SAVED_GAME, [this](){
            // TODO: Test this callback
            if (on_load_save_file_content_into_gameplay_func)
            {
               on_load_save_file_content_into_gameplay_func(
                  this,
                  on_load_save_file_content_into_gameplay_func_user_data
               );
            }
            else
            {
               AllegroFlare::Logger::throw_error(
                  "AllegroFlare::Routers::Standard::on_route_event",
                  "on EVENT_LOAD_A_SAVED_GAME, expecting an \"on_load_save_file_content_into_gameplay_func\" to be "
                     "present, but it is not."
               );
            }
         }},
         { EVENT_WIN_GAME, [this](){
            // TODO: Finish the actions in this event

            // Validate an active session
            if (!game_session.is_active())
            {
               AllegroFlare::Logger::throw_error(
                  "AllegroFlare::Routers::Standard::on_route_event",
                  "When handling an EVENT_WIN_GAME, the game_session is expected to be active but it was not."
               );
            }

            // End the session
            game_session.end_session();

            // Activate game won outro
            emit_route_event(EVENT_ACTIVATE_GAME_WON_OUTRO_STORYBOARD_SCREEN);
         }},
         { EVENT_LOSE_GAME, [this](){
            // TODO: Finish the actions in this event
            // Validate an active session
            if (!game_session.is_active())
            {
               AllegroFlare::Logger::throw_error(
                  "AllegroFlare::Routers::Standard::on_route_event",
                  "When handling an EVENT_LOSE_GAME, the game_session is expected to be active but it was not."
               );
            }

            // End the session
            game_session.end_session();

            // Activate the game_over_screen
            emit_route_event(EVENT_ACTIVATE_GAME_OVER_SCREEN);
         }},
         { EVENT_START_LEVEL, [this, route_event_data](){
            // TODO: Finish the actions in this event
            // TODO: Consider Validating an active session
            // TODO: Consider alternative to route_event_data that includes some "level to load" info
            // TODO: Consider boolean result for "load_level_handler", return to title screen if false is returned
            if (!load_level_handler)
            {
               AllegroFlare::Logger::warn_from(
                  "AllegroFlare::Routers::Standard::on_route_event",
                  "When handling EVENT_START_LEVEL, the load_level_handler was not preesnt. If this is expected "
                    "behavior and you do not wish to see this warning, please code in a flag to inhibit this message."
               );
            }
            else
            {
               bool level_load_was_successful = false;
               level_load_was_successful = load_level_handler(route_event_data);
               if (!level_load_was_successful)
               {
                  AllegroFlare::Logger::throw_error(
                     "AllegroFlare::Routers::Standard::on_route_event",
                     "When handling EVENT_START_LEVEL, the level load was not successful (it returned false "
                        "when called)."
                  );
               }
               else
               {
                  emit_route_event(EVENT_ACTIVATE_PRIMARY_GAMEPLAY_SCREEN);
               }
            }
         }},
         { EVENT_SAVE_TO_MANUAL_SAVE, [this](){
            // TODO: Consider that this callback method should be renamed or organized differently
            if (on_save_game_func)
            {
               on_save_game_func(this, "manual", on_save_game_func_user_data);
            }
         }},
         { EVENT_SAVE_TO_AUTOSAVE_SAVE, [this](){
            // TODO: Consider that this callback method should be renamed or organized differently
            if (on_save_game_func)
            {
               on_save_game_func(this, "autosave", on_save_game_func_user_data);
            }
         }},
         { EVENT_SAVE_TO_QUICKSAVE_SAVE, [this](){
            // TODO: Consider that this callback method should be renamed or organized differently
            if (on_save_game_func)
            {
               on_save_game_func(this, "quicksave", on_save_game_func_user_data);
            }
         }},
         { EVENT_PAUSE_GAME, [this](){
            // TODO: Test playtime is paused on this event
            // TODO: Consider if game time spent in the pause screen (on the map screen? on inventory changes, etc?)
            // should be counted towards accumulated play time or not.
            //suspend_accumulating_playtime();

            // Call the callback
            // TODO: Test this conditional
            if (!on_gameplay_paused_func)
            {
               // TODO: Test this warning message
               AllegroFlare::Logger::warn_from_once(
                  "AllegroFlare::Routers::Standard::on_route_event",
                  "Handling a EVENT_PAUSE_GAME but no \"on_gameplay_paused_func\" callback is present. Usually you "
                     "would use this callback to make changes to your system's state (e.g. activate a subscreen "
                     "or a pause screen)."
               );
            }
            else
            {
               // Call the callback
               on_gameplay_paused_func(this, on_gameplay_paused_func_user_data); // TODO: Test this
            }
         }},
         { EVENT_UNPAUSE_GAME, [this](){
            // TODO: Test this conditional
            if (!on_gameplay_unpaused_func)
            {
               // TODO: Test this warning message
               AllegroFlare::Logger::warn_from_once(
                  "AllegroFlare::Routers::Standard::on_route_event",
                  "Handling a EVENT_UNPAUSE_GAME but no \"on_gameplay_unpaused_func\" callback is present. Usually "
                     "you would use this callback to make changes to your system's state (e.g. re-activate gameplay "
                     "screen if it was deactivated in the \"on_gameplay_paused_func\" callback)."
               );
            }
            else
            {
               // Call the callback
               on_gameplay_unpaused_func(this, on_gameplay_unpaused_func_user_data); // TODO: Test this
            }

            // TODO: Test playtime is resumed on this event
            // TODO: Consider if game time spent in the pause screen (on the map screen? on inventory changes, etc?)
            // should be counted towards accumulated play time or not.
            // NOTE: For now, this has been moved up into the game configuration
            //start_or_resume_accumulating_playtime();
         }},
         { EVENT_EXIT_TO_TITLE_SCREEN, [this](){
            // Validate an active session
            if (!game_session.is_active())
            {
               AllegroFlare::Logger::throw_error(
                  "AllegroFlare::Routers::Standard::on_route_event",
                  "When handling an EVENT_EXIT_TO_TITLE_SCREEN, the game_session is expected to be active but it "
                     "was not."
               );
            }

            // End the session
            game_session.end_session();

            // Activate title_screen
            emit_route_event(EVENT_ACTIVATE_TITLE_SCREEN);
         }},


         // Suspend and resume playtime
         { EVENT_SUSPEND_ACCUMULATING_PLAYTIME, [this](){
            suspend_accumulating_playtime();
         }},
         { EVENT_START_OR_RESUME_ACCUMULATING_PLAYTIME, [this](){
            start_or_resume_accumulating_playtime();
         }},

         // Screens finished events

         { EVENT_INTRO_LOGOS_SCREEN_FINISHED, [this](){
            emit_route_event(EVENT_ACTIVATE_INTRO_STORYBOARD_SCREEN);
         }},
         { EVENT_INTRO_STORYBOARD_SCREEN_FINISHED, [this](){
            emit_route_event(EVENT_ACTIVATE_TITLE_SCREEN);
         }},
         { EVENT_SAVE_FILE_LOADING_FINISHED, [this](){
            if (on_save_file_loading_finished_func)
            {
               // TODO: Consider if this should return a boolean on success
               on_save_file_loading_finished_func(
                     this,
                     on_save_file_loading_finished_func_user_data
                  );
            }
            else
            {
               AllegroFlare::Logger::throw_error(
                  "AllegroFlare::Routers::Standard::on_route_event",
                  "on EVENT_SAVE_FILE_LOADING_FINISHED, expecting an "
                     "\"on_save_file_loading_finished_func\" to be present, but it is not."
               );
            }
         }},
         { EVENT_NEW_GAME_INTRO_STORYBOARD_SCREEN_FINISHED, [this](){
            // TODO: Inspect level select screen to see if it should be skipped, or, if it may want to automatically
            // load the first level and start the gameplay.
            // TODO: Review if "intro storyboard finishing" is even a realistic logic flow if there is no storyboard.
            emit_route_event(EVENT_ACTIVATE_LEVEL_SELECT_SCREEN);
         }},
         { EVENT_PRIMARY_GAMEPLAY_SCREEN_FINISHED, [this](){
            if (on_primary_gameplay_screen_finished_func)
            {
               // TODO: Consider if this should return a boolean on success
               on_primary_gameplay_screen_finished_func(this, on_primary_gameplay_screen_finished_func_user_data);
            }
            else
            {
               AllegroFlare::Logger::throw_error(
                  "AllegroFlare::Routers::Standard::on_route_event",
                  "on EVENT_PRIMARY_GAMEPLAY_SCREEN_FINISHED, expecting an "
                     "\"on_primary_gameplay_screen_finished_func\" to be present, but it is not."
               );
            }
         }},
         { EVENT_ARBITRARY_STORYBOARD_SCREEN_FINISHED, [this](){
            if (on_arbitrary_storyboard_screen_finished_func)
            {
               // TODO: Consider if this should return a boolean on success
               on_arbitrary_storyboard_screen_finished_func(
                     this,
                     on_arbitrary_storyboard_screen_finished_func_user_data
                  );
            }
            else
            {
               AllegroFlare::Logger::throw_error(
                  "AllegroFlare::Routers::Standard::on_route_event",
                  "on EVENT_ARBITRARY_STORYBOARD_SCREEN_FINISHED, expecting an "
                     "\"on_arbitrary_storyboard_screen_finished_func\" to be present, but it is not."
               );
            }
         }},
         { EVENT_GAME_WON_OUTRO_STORYBOARD_SCREEN_FINISHED, [this](){
            emit_route_event(EVENT_ACTIVATE_CREDITS_SCREEN);
         }},
         { EVENT_CREDITS_SCREEN_FINISHED, [this](){
            emit_route_event(EVENT_ACTIVATE_GAME_WON_SCREEN);
         }},
         { EVENT_TITLE_SCREEN_FINISHED, [this](){
            // NOTE: This is a loop to restart the intro(s) so the game is not stuck on title screen
            emit_route_event(EVENT_ACTIVATE_INTRO_LOGOS_SCREEN);
         }},


         // Activate Screens

         { EVENT_ACTIVATE_INTRO_LOGOS_SCREEN, [this](){
            activate_screen(INTRO_LOGOS_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_INTRO_STORYBOARD_SCREEN, [this](){
            activate_screen(INTRO_STORYBOARD_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_TITLE_SCREEN, [this](){
            activate_screen(TITLE_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_ACHIEVEMENTS_SCREEN, [this](){
            activate_screen(ACHIEVEMENTS_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_DISPLAY_SETTINGS_SCREEN, [this](){
            activate_screen(DISPLAY_SETTINGS_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_SETTINGS_SCREEN, [this](){
            activate_screen(SETTINGS_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_VERSION_SCREEN, [this](){
            activate_screen(VERSION_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_LOAD_A_SAVED_GAME_SCREEN, [this](){
            activate_screen(LOAD_A_SAVED_GAME_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_NEW_GAME_INTRO_STORYBOARD_SCREEN, [this](){
            activate_screen(NEW_GAME_INTRO_STORYBOARD_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_LEVEL_SELECT_SCREEN, [this](){
            // TODO: Consider a special case here to "skip" directly to next step if the level select screen is empty
            // or auto-advances. I think this most likely will be a callback with a value returned.
            activate_screen(LEVEL_SELECT_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_GAME_OVER_SCREEN, [this](){
            activate_screen(GAME_OVER_SCREEN_IDENTIFIER);
         }},
         // TODO: Test this emit reaction
         { EVENT_ACTIVATE_CHARACTER_NAME_INPUT_SCREEN, [this](){
            activate_screen(CHARACTER_NAME_INPUT_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_GAME_WON_SCREEN, [this](){
            activate_screen(GAME_WON_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_GAME_WON_OUTRO_STORYBOARD_SCREEN, [this](){
            activate_screen(GAME_WON_OUTRO_STORYBOARD_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_ARBITRARY_STORYBOARD_SCREEN, [this, route_event_data](){
            (void)(route_event_data); // TODO: See if this argument should just be removed
            if (on_arbitrary_storyboard_screen_activated_func)
            {
               // TODO: Consider if this should return a boolean on success
               // NOTE: Note this callback occurs *before* the screen is activated
               // NOTE: Typically this callback is used to load the storyboard (given data passed in through user_data).
               on_arbitrary_storyboard_screen_activated_func(
                     this,
                     on_arbitrary_storyboard_screen_activated_func_user_data
                  );
            }
            else
            {
               AllegroFlare::Logger::throw_error(
                  "AllegroFlare::Routers::Standard::on_route_event",
                  "on EVENT_ACTIVATE_ARBITRARY_STORYBOARD_SCREEN, expecting an "
                     "\"on_arbitrary_storyboard_screen_activated_func\" to be present, but it is not."
               );
            }

            activate_screen(ARBITRARY_STORYBOARD_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_CREDITS_SCREEN, [this](){
            activate_screen(CREDITS_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_PRIMARY_GAMEPLAY_SCREEN, [this](){
            activate_screen(PRIMARY_GAMEPLAY_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_PRIMARY_GAMEPLAY_SUBSCREEN, [this](){
            activate_screen(PRIMARY_GAMEPLAY_SUBSCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_PAUSE_SCREEN, [this](){
            activate_screen(PAUSE_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_SCREEN_BY_IDENTIFIER, [this, route_event_data](){
            (void)(route_event_data); // TODO: See if this argument should just be removed
            // TODO: Test this event

            // TODO: Test this condition
            if (!route_event_data)
            {
               AllegroFlare::Logger::throw_error(
                  "AllegroFlare::Routers::Standard::on_route_event",
                  "Unable to handle event of type EVENT_ACTIVATE_SCREEN_BY_IDENTIFIER because \"route_event_data\" is "
                     "a nullptr."
               );
            }
            // TODO: Test this condition
            if (!route_event_data->is_type(AllegroFlare::RouteEventDatas::ActivateScreenByIdentifier::TYPE))
            {
               AllegroFlare::Logger::throw_error(
                  "AllegroFlare::Routers::Standard::on_route_event",
                  "Unable to handle event of type EVENT_ACTIVATE_SCREEN_BY_IDENTIFIER because \"route_event_data\" is "
                     "not the expected type AllegroFlare::RouteEventDatas::ActivateScreenByIdentifier::TYPE."
               );
            }

            AllegroFlare::RouteEventDatas::ActivateScreenByIdentifier *as_activate_screen_by_identifier =
               static_cast<AllegroFlare::RouteEventDatas::ActivateScreenByIdentifier*>(route_event_data);

            std::string screen_identifier = as_activate_screen_by_identifier->get_screen_identifier();
            activate_screen(screen_identifier);
         }},
      };

      // Locate and call the function to handle the event
      if (event_map.count(route_event) == 0)
      {
         if (on_route_event_unhandled_func)
         {
            bool callback_result_successful =
               on_route_event_unhandled_func(route_event, this, on_route_event_unhandled_func_user_data);

            if (!callback_result_successful)
            {
               AllegroFlare::Logger::throw_error(
                     "AllegroFlare::Routers::Standard::on_route_event",
                     "A user callback was used to handle an unknown event of type " + std::to_string(route_event) + ", "
                        "but the callback returned false, indicating that there was a failure to handle the event."
                  );
            }
         }
         else
         {
            // event not found
            AllegroFlare::Logger::throw_error(
                  "AllegroFlare::Routers::Standard::on_route_event",
                  "Unable to handle event of type " + std::to_string(route_event) + "."
               );
         }
      }
      else
      {
         // call the event
         event_map[route_event]();
      }

      return;
    body_dependency_symbols:
      - AllegroFlare::Logger
      - AllegroFlare::RouteEventDatas::ActivateScreenByIdentifier


dependencies:


  - symbol: AllegroFlare::Routers::Standard
    headers: [ AllegroFlare/Routers/Standard.hpp ]
  - symbol: AllegroFlare::GameSession
    headers: [ AllegroFlare/GameSession.hpp ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::Frameworks::Full
    headers: [ AllegroFlare/Frameworks/Full.hpp ]
  - symbol: AllegroFlare::Routers::Base
    headers: [ AllegroFlare/Routers/Base.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::RouteEventDatas::Base
    headers: [ AllegroFlare/RouteEventDatas/Base.hpp ]
  - symbol: AllegroFlare::RouteEventDatas::ActivateScreenByIdentifier
    headers: [ AllegroFlare/RouteEventDatas/ActivateScreenByIdentifier.hpp ]
  - symbol: AllegroFlare::Screens::Gameplay
    headers: [ AllegroFlare/Screens/Gameplay.hpp ]


