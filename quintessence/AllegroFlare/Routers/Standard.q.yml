parent_classes:


  - class: AllegroFlare::Routers::Base
    scope: public
    init_with: AllegroFlare::Routers::Standard::TYPE


properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: load_level_handler
    type: std::function<bool(AllegroFlare::RouteEventDatas::Base*)>
    init_with: 0
    constructor_arg: true
    getter: true
    setter: true

  - name: game_session
    type: AllegroFlare::GameSession
    init_with: ''
    getter_ref: true

  - name: INTRO_LOGOS_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"intro_logos_screen"'
    static: true
    const: true
    constexpr: true

  - name: INTRO_STORYBOARD_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"intro_storyboards_screen"'
    static: true
    const: true
    constexpr: true

  - name: TITLE_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"title_screen"'
    static: true
    const: true
    constexpr: true

  - name: ACHIEVEMENTS_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"achievements_screen"'
    static: true
    const: true
    constexpr: true

  - name: SETTINGS_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"settings_screen"'
    static: true
    const: true
    constexpr: true

  - name: VERSION_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"version_screen"'
    static: true
    const: true
    constexpr: true

  - name: NEW_GAME_INTRO_STORYBOARD_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"new_game_intro_storyboard_screen"'
    static: true
    const: true
    constexpr: true

  - name: LEVEL_SELECT_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"level_select_screen"'
    static: true
    const: true
    constexpr: true

  - name: GAME_OVER_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"game_over_screen"'
    static: true
    const: true
    constexpr: true

  - name: GAME_WON_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"game_won_screen"'
    static: true
    const: true
    constexpr: true

  - name: GAME_WON_OUTRO_STORYBOARD_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"game_won_outro_storyboard_screen"'
    static: true
    const: true
    constexpr: true

  - name: CREDITS_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"credits_screen"'
    static: true
    const: true
    constexpr: true

  - name: PRIMARY_GAMEPLAY_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"primary_gameplay_screen"'
    static: true
    const: true
    constexpr: true

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/Routers/Standard"'
    static: true
    const: true
    constexpr: true



documentation:


  - todos:
      - consider a EVENT_FINISH_LEVEL type of event, something that denotes progress in the game, a save, level beaten
      - consider a EVENT_GAMEPLAY_SCREEN_FINISHED type of event


enums:


  - name: route_event
    scope: public
    enumerators:
      - EVENT_UNDEFINED

      - EVENT_INITIALIZE
      - EVENT_EXIT_GAME

      - EVENT_START_NEW_GAME
      - EVENT_CONTINUE_A_SAVED_GAME
      - EVENT_WIN_GAME
      - EVENT_LOSE_GAME
      - EVENT_START_LEVEL
      - EVENT_EXIT_TO_TITLE_SCREEN

      - EVENT_INTRO_LOGOS_SCREEN_FINISHED
      - EVENT_INTRO_STORYBOARD_SCREEN_FINISHED
      - EVENT_NEW_GAME_INTRO_STORYBOARD_SCREEN_FINISHED
      - EVENT_PRIMARY_GAMEPLAY_SCREEN_FINISHED
      - EVENT_GAME_WON_OUTRO_STORYBOARD_SCREEN_FINISHED
      - EVENT_CREDITS_SCREEN_FINISHED
      - EVENT_TITLE_SCREEN_FINISHED

      - EVENT_ACTIVATE_INTRO_LOGOS_SCREEN
      - EVENT_ACTIVATE_INTRO_STORYBOARD_SCREEN
      - EVENT_ACTIVATE_TITLE_SCREEN
      - EVENT_ACTIVATE_ACHIEVEMENTS_SCREEN
      - EVENT_ACTIVATE_SETTINGS_SCREEN
      - EVENT_ACTIVATE_VERSION_SCREEN
      - EVENT_ACTIVATE_NEW_GAME_INTRO_STORYBOARD_SCREEN
      - EVENT_ACTIVATE_LEVEL_SELECT_SCREEN
      - EVENT_ACTIVATE_GAME_OVER_SCREEN
      - EVENT_ACTIVATE_GAME_WON_SCREEN
      - EVENT_ACTIVATE_GAME_WON_OUTRO_STORYBOARD_SCREEN
      - EVENT_ACTIVATE_CREDITS_SCREEN
      - EVENT_ACTIVATE_PRIMARY_GAMEPLAY_SCREEN


functions:


  - name: emit_route_event
    parameters:
      - name: route_event
        type: uint32_t
        default_argument: 0
      - name: route_event_data
        type: AllegroFlare::RouteEventDatas::Base*
        default_argument: nullptr
      - name: time_now
        type: float
        default_argument: 0.0f
    guards: [ event_emitter ]
    body: |
      event_emitter->emit_router_event(route_event, route_event_data, time_now);
      return;


  - name: name_for_route_event
    type: std::string
    static: true
    parameters:
      - name: route_event
        type: uint32_t
        default_argument: 0
    body: |
      static const std::unordered_map<uint32_t, std::string> event_names {
         {EVENT_UNDEFINED, "EVENT_UNDEFINED"},
         {EVENT_INITIALIZE, "EVENT_INITIALIZE"},
         {EVENT_EXIT_GAME, "EVENT_EXIT_GAME"},
         {EVENT_START_NEW_GAME, "EVENT_START_NEW_GAME"},
         {EVENT_CONTINUE_A_SAVED_GAME, "EVENT_CONTINUE_A_SAVED_GAME"},
         {EVENT_WIN_GAME, "EVENT_WIN_GAME"},
         {EVENT_LOSE_GAME, "EVENT_LOSE_GAME"},
         {EVENT_START_LEVEL, "EVENT_START_LEVEL"},
         {EVENT_EXIT_TO_TITLE_SCREEN, "EVENT_EXIT_TO_TITLE_SCREEN"},
         {EVENT_INTRO_LOGOS_SCREEN_FINISHED, "EVENT_INTRO_LOGOS_SCREEN_FINISHED"},
         {EVENT_INTRO_STORYBOARD_SCREEN_FINISHED, "EVENT_INTRO_STORYBOARD_SCREEN_FINISHED"},
         {EVENT_NEW_GAME_INTRO_STORYBOARD_SCREEN_FINISHED, "EVENT_NEW_GAME_INTRO_STORYBOARD_SCREEN_FINISHED"},
         {EVENT_PRIMARY_GAMEPLAY_SCREEN_FINISHED, "EVENT_PRIMARY_GAMEPLAY_SCREEN_FINISHED"},
         {EVENT_GAME_WON_OUTRO_STORYBOARD_SCREEN_FINISHED, "EVENT_GAME_WON_OUTRO_STORYBOARD_SCREEN_FINISHED"},
         {EVENT_CREDITS_SCREEN_FINISHED, "EVENT_CREDITS_SCREEN_FINISHED"},
         {EVENT_TITLE_SCREEN_FINISHED, "EVENT_TITLE_SCREEN_FINISHED"},
         {EVENT_ACTIVATE_INTRO_LOGOS_SCREEN, "EVENT_ACTIVATE_INTRO_LOGOS_SCREEN"},
         {EVENT_ACTIVATE_INTRO_STORYBOARD_SCREEN, "EVENT_ACTIVATE_INTRO_STORYBOARD_SCREEN"},
         {EVENT_ACTIVATE_TITLE_SCREEN, "EVENT_ACTIVATE_TITLE_SCREEN"},
         {EVENT_ACTIVATE_ACHIEVEMENTS_SCREEN, "EVENT_ACTIVATE_ACHIEVEMENTS_SCREEN"},
         {EVENT_ACTIVATE_SETTINGS_SCREEN, "EVENT_ACTIVATE_SETTINGS_SCREEN"},
         {EVENT_ACTIVATE_VERSION_SCREEN, "EVENT_ACTIVATE_VERSION_SCREEN"},
         {EVENT_ACTIVATE_NEW_GAME_INTRO_STORYBOARD_SCREEN, "EVENT_ACTIVATE_NEW_GAME_INTRO_STORYBOARD_SCREEN"},
         {EVENT_ACTIVATE_LEVEL_SELECT_SCREEN, "EVENT_ACTIVATE_LEVEL_SELECT_SCREEN"},
         {EVENT_ACTIVATE_GAME_OVER_SCREEN, "EVENT_ACTIVATE_GAME_OVER_SCREEN"},
         {EVENT_ACTIVATE_GAME_WON_SCREEN, "EVENT_ACTIVATE_GAME_WON_SCREEN"},
         {EVENT_ACTIVATE_GAME_WON_OUTRO_STORYBOARD_SCREEN, "EVENT_ACTIVATE_GAME_WON_OUTRO_STORYBOARD_SCREEN"},
         {EVENT_ACTIVATE_CREDITS_SCREEN, "EVENT_ACTIVATE_CREDITS_SCREEN"},
         {EVENT_ACTIVATE_PRIMARY_GAMEPLAY_SCREEN, "EVENT_ACTIVATE_PRIMARY_GAMEPLAY_SCREEN"}
      };

      auto it = event_names.find(route_event);

      if (it == event_names.end())
      {
         return "UNKNOWN_EVENT";
      }
      else
      {
         return it->second;
      }
    body_dependency_symbols:
      - std::unordered_map


  - name: on_route_event
    virtual: true
    override: true
    parameters:
      - name: route_event
        type: uint32_t
        default_argument: EVENT_UNDEFINED
      - name: route_event_data
        type: AllegroFlare::RouteEventDatas::Base*
        default_argument: nullptr
      - name: time_now
        type: float
        default_argument: 0.0f
    guards: [ (route_event != EVENT_UNDEFINED), event_emitter ]
    body: |
      AllegroFlare::Logger::info_from(
         "AllegroFlare::Routers::Standard::on_route_event",
         "Route Event: " + name_for_route_event(route_event) + " (" + std::to_string(route_event) + ")"
      );

      std::map<uint32_t, std::function<void()>> event_map = {

         // System Events

         { EVENT_INITIALIZE, [this](){
            // TODO: Consider different initial route depending on deployment environment
            emit_route_event(EVENT_ACTIVATE_INTRO_LOGOS_SCREEN);
         }},
         { EVENT_EXIT_GAME, [this](){
            // End the session if active
            if (game_session.is_active()) game_session.end_session();

            // Emit an event to exit the game
            event_emitter->emit_exit_game_event();
         }},


         // Game Events

         { EVENT_START_NEW_GAME, [this](){
            // start new session
            game_session.start_session();

            // activate new_game_intro_storyboards
            emit_route_event(EVENT_ACTIVATE_NEW_GAME_INTRO_STORYBOARD_SCREEN);
         }},
         { EVENT_CONTINUE_A_SAVED_GAME, [this](){
            // TODO: Finish the actions in this event
            // Event data: game session id

            // restore session
            // TODO: game_session.continue_session();

            // activate gameplay_screen
         }},
         { EVENT_WIN_GAME, [this](){
            // TODO: Finish the actions in this event
            // Validate an active session
            if (!game_session.is_active())
            {
               AllegroFlare::Logger::throw_error(
                  "AllegroFlare::Routers::Standard::on_route_event",
                  "When handling an EVENT_WIN_GAME, the game_session is expected to be active but it was not."
               );
            }
            // End the session
            game_session.end_session();
            // Activate game won outro
            emit_route_event(EVENT_ACTIVATE_GAME_WON_OUTRO_STORYBOARD_SCREEN);
         }},
         { EVENT_LOSE_GAME, [this](){
            // TODO: Finish the actions in this event
            // Validate an active session
            if (!game_session.is_active())
            {
               AllegroFlare::Logger::throw_error(
                  "AllegroFlare::Routers::Standard::on_route_event",
                  "When handling an EVENT_LOSE_GAME, the game_session is expected to be active but it was not."
               );
            }
            // End the session
            game_session.end_session();
            // Activate the game_over_screen
            emit_route_event(EVENT_ACTIVATE_GAME_OVER_SCREEN);
         }},
         { EVENT_START_LEVEL, [this, route_event_data](){
            // TODO: Finish the actions in this event
            // TODO: Consider Validating an active session
            // TODO: Consider alternative to route_event_data that includes some "level to load" info
            // TODO: Consider boolean result for "load_level_handler", return to title screen if false is returned
            if (!load_level_handler)
            {
               AllegroFlare::Logger::warn_from(
                  "AllegroFlare::Routers::Standard::on_route_event",
                  "When handling EVENT_START_LEVEL, the load_level_handler was not preesnt. If this is expected "
                    "behavior and you do not wish to see this warning, please code in a flag to inhibit this message."
               );
            }
            else
            {
               bool level_load_was_successful = false;
               level_load_was_successful = load_level_handler(route_event_data);
               if (!level_load_was_successful)
               {
                  AllegroFlare::Logger::throw_error(
                     "AllegroFlare::Routers::Standard::on_route_event",
                     "When handling EVENT_START_LEVEL, the level load was not successful (it returned false "
                        "when called)."
                  );
               }
               else
               {
                  emit_route_event(EVENT_ACTIVATE_PRIMARY_GAMEPLAY_SCREEN);
               }
            }
         }},
         //{ EVENT_PAUSE_GAME, [this](){
            // TODO: Finish the actions in this event
            // guard: not already pause screen
            // pause session?
            //screen_identifier_before_pause = get_framework()->get_currently_active_screen_name();
            // capture "pre-pause screen"
            // activate pause_screen
         //}},
         //{ EVENT_UNPAUSE_GAME, [this](){
            // TODO: Finish the actions in this event
            // guard: is paused
            // unpause session?

            // activate "pre-pause screen"
            //activate_screen(screen_identifier_before_pause);
         //}},
         { EVENT_EXIT_TO_TITLE_SCREEN, [this](){
            // Validate an active session
            if (!game_session.is_active())
            {
               AllegroFlare::Logger::throw_error(
                  "AllegroFlare::Routers::Standard::on_route_event",
                  "When handling an EVENT_EXIT_TO_TITLE_SCREEN, the game_session is expected to be active but it "
                     "was not."
               );
            }
            // End the session
            game_session.end_session();
            // Activate title_screen
            emit_route_event(EVENT_ACTIVATE_TITLE_SCREEN);
         }},


         // Screens finished events

         { EVENT_INTRO_LOGOS_SCREEN_FINISHED, [this](){
            emit_route_event(EVENT_ACTIVATE_INTRO_STORYBOARD_SCREEN);
         }},
         { EVENT_INTRO_STORYBOARD_SCREEN_FINISHED, [this](){
            emit_route_event(EVENT_ACTIVATE_TITLE_SCREEN);
         }},
         { EVENT_NEW_GAME_INTRO_STORYBOARD_SCREEN_FINISHED, [this](){
            emit_route_event(EVENT_ACTIVATE_LEVEL_SELECT_SCREEN);
         }},
         { EVENT_PRIMARY_GAMEPLAY_SCREEN_FINISHED, [this](){
            // TODO: Consider querying if game is won. If so, emit EVENT_WIN_GAME. As an alternative, consider that
            // that the level select screen could emit an EMIT_WIN_GAME event when all levels are finished.
            emit_route_event(EVENT_ACTIVATE_LEVEL_SELECT_SCREEN);
         }},
         { EVENT_GAME_WON_OUTRO_STORYBOARD_SCREEN_FINISHED, [this](){
            emit_route_event(EVENT_ACTIVATE_CREDITS_SCREEN);
         }},
         { EVENT_CREDITS_SCREEN_FINISHED, [this](){
            emit_route_event(EVENT_ACTIVATE_GAME_WON_SCREEN);
         }},
         { EVENT_TITLE_SCREEN_FINISHED, [this](){
            // This is a loop to restart the intro(s) so the game is not stuck on title screen
            emit_route_event(EVENT_ACTIVATE_INTRO_LOGOS_SCREEN);
         }},


         // Activate Screens

         { EVENT_ACTIVATE_INTRO_LOGOS_SCREEN, [this](){
            activate_screen(INTRO_LOGOS_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_INTRO_STORYBOARD_SCREEN, [this](){
            activate_screen(INTRO_STORYBOARD_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_TITLE_SCREEN, [this](){
            activate_screen(TITLE_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_ACHIEVEMENTS_SCREEN, [this](){
            activate_screen(ACHIEVEMENTS_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_SETTINGS_SCREEN, [this](){
            activate_screen(SETTINGS_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_VERSION_SCREEN, [this](){
            activate_screen(VERSION_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_NEW_GAME_INTRO_STORYBOARD_SCREEN, [this](){
            activate_screen(NEW_GAME_INTRO_STORYBOARD_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_LEVEL_SELECT_SCREEN, [this](){
            activate_screen(LEVEL_SELECT_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_GAME_OVER_SCREEN, [this](){
            activate_screen(GAME_OVER_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_GAME_WON_SCREEN, [this](){
            activate_screen(GAME_WON_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_GAME_WON_OUTRO_STORYBOARD_SCREEN, [this](){
            activate_screen(GAME_WON_OUTRO_STORYBOARD_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_CREDITS_SCREEN, [this](){
            activate_screen(CREDITS_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_PRIMARY_GAMEPLAY_SCREEN, [this](){
            activate_screen(PRIMARY_GAMEPLAY_SCREEN_IDENTIFIER);
         }},
      };

      // locate and call the function to handle the event
      if (event_map.count(route_event) == 0)
      {
         // event not found
         AllegroFlare::Logger::throw_error(
            "AllegroFlare::Routers::Standard::on_route_event",
            "Unable to handle event of type " + std::to_string(route_event) + "."
         );
      }
      else
      {
         // call the event
         event_map[route_event]();
      }

      return;
    body_dependency_symbols:
      - AllegroFlare::Logger


dependencies:


  - symbol: AllegroFlare::GameSession
    headers: [ AllegroFlare/GameSession.hpp ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::Frameworks::Full
    headers: [ AllegroFlare/Frameworks/Full.hpp ]
  - symbol: AllegroFlare::Routers::Base
    headers: [ AllegroFlare/Routers/Base.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::RouteEventDatas::Base
    headers: [ AllegroFlare/RouteEventDatas/Base.hpp ]


