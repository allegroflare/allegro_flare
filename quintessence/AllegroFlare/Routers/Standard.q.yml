parent_classes:


  - class: AllegroFlare::Routers::Base
    scope: public
    init_with: AllegroFlare::Routers::Standard::TYPE


properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: game_session
    type: AllegroFlare::GameSession
    init_with: ''
    getter_ref: true

  - name: INTRO_LOGOS_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"intro_logos_screen"'
    static: true
    const: true
    constexpr: true

  - name: INTRO_STORYBOARD_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"intro_storyboards_screen"'
    static: true
    const: true
    constexpr: true

  - name: TITLE_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"title_screen"'
    static: true
    const: true
    constexpr: true

  - name: ACHIEVEMENTS_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"achievements_screen"'
    static: true
    const: true
    constexpr: true

  - name: SETTINGS_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"settings_screen"'
    static: true
    const: true
    constexpr: true

  - name: VERSION_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"version_screen"'
    static: true
    const: true
    constexpr: true

  - name: NEW_GAME_INTRO_STORYBOARD_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"new_game_intro_storyboard_screen"'
    static: true
    const: true
    constexpr: true

  - name: LEVEL_SELECT_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"level_select_screen"'
    static: true
    const: true
    constexpr: true

  - name: GAME_OVER_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"game_over_screen"'
    static: true
    const: true
    constexpr: true

  - name: GAME_WON_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"game_won_screen"'
    static: true
    const: true
    constexpr: true

  - name: GAME_WON_OUTRO_STORYBOARD_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"game_won_outro_storyboard_screen"'
    static: true
    const: true
    constexpr: true

  - name: CREDITS_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"credits_screen"'
    static: true
    const: true
    constexpr: true

  - name: PRIMARY_GAMEPLAY_SCREEN_IDENTIFIER
    type: char*
    init_with: '(char*)"primary_gameplay_screen"'
    static: true
    const: true
    constexpr: true

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/Routers/Standard"'
    static: true
    const: true
    constexpr: true


enums:


  - name: route_event
    scope: public
    enumerators:
      - EVENT_UNDEFINED

      - EVENT_INITIALIZE
      - EVENT_EXIT_GAME

      - EVENT_START_NEW_GAME
      - EVENT_CONTINUE_A_SAVED_GAME
      - EVENT_WIN_GAME
      - EVENT_LOSE_GAME
      - EVENT_START_LEVEL
      - EVENT_EXIT_TO_TITLE_SCREEN

      - EVENT_INTRO_LOGOS_INISHED
      - EVENT_INTRO_STORYBOARD_FINISHED
      - EVENT_NEW_GAME_INTRO_STORYBOARD_FINISHED
      - EVENT_GAME_WON_OUTRO_STORYBOARD_FINISHED
      - EVENT_CREDITS_SCREEN_FINISHED
      - EVENT_TITLE_SCREEN_TIMEOUT

      - EVENT_ACTIVATE_INTRO_LOGOS_SCREEN
      - EVENT_ACTIVATE_INTRO_STORYBOARD_SCREEN
      - EVENT_ACTIVATE_TITLE_SCREEN
      - EVENT_ACTIVATE_ACHIEVEMENTS_SCREEN
      - EVENT_ACTIVATE_SETTINGS_SCREEN
      - EVENT_ACTIVATE_VERSION_SCREEN
      - EVENT_ACTIVATE_NEW_GAME_INTRO_STORYBOARD_SCREEN
      - EVENT_ACTIVATE_LEVEL_SELECT_SCREEN
      - EVENT_ACTIVATE_GAME_OVER_SCREEN
      - EVENT_ACTIVATE_GAME_WON_SCREEN
      - EVENT_ACTIVATE_GAME_WON_OUTRO_STORYBOARD_SCREEN
      - EVENT_ACTIVATE_CREDITS_SCREEN
      - EVENT_ACTIVATE_PRIMARY_GAMEPLAY_SCREEN


functions:


  - name: emit_route_event
    parameters:
      - name: route_event
        type: uint32_t
        default_argument: 0
      - name: time_now
        type: float
        default_argument: 0.0f
    guards: [ event_emitter ]
    body: |
      event_emitter->emit_router_event(route_event);
      return;


  - name: on_route_event
    virtual: true
    override: true
    parameters:
      - name: route_event
        type: uint32_t
        default_argument: EVENT_UNDEFINED
      - name: time_now
        type: float
        default_argument: 0.0f
    guards: [ (route_event != 0), event_emitter ]
    body: |
      std::map<uint32_t, std::function<void()>> event_map = {

         // System Events

         { EVENT_INITIALIZE, [this](){
            // TODO: Consider different initial route depending on deployment environment
            emit_route_event(EVENT_ACTIVATE_INTRO_LOGOS_SCREEN);
         }},
         { EVENT_EXIT_GAME, [this](){
            // close session

            if (game_session.is_active()) game_session.end_session();
            // TODO: abort = true;
         }},


         // Game Events

         { EVENT_START_NEW_GAME, [this](){
            // start new session
            game_session.start_session();

            // activate new_game_intro_storyboards
            emit_route_event(EVENT_ACTIVATE_NEW_GAME_INTRO_STORYBOARD_SCREEN);
         }},
         { EVENT_CONTINUE_A_SAVED_GAME, [this](){
            // TODO: Finish the actions in this event
            // Event data: game session id

            // restore session
            // TODO: game_session.continue_session();

            // activate gameplay_screen
         }},
         { EVENT_WIN_GAME, [this](){
            // TODO: Finish the actions in this event
            // Validate an active session
            if (!game_session.is_active())
            {
               AllegroFlare::Logger::throw_error(
                  "AllegroFlare::Routers::Standard::on_route_event",
                  "When handling an EVENT_WIN_GAME, the game_session is expected to be active but it was not."
               );
            }
            // End the session
            game_session.end_session();
            // Activate game won outro
            emit_route_event(EVENT_ACTIVATE_GAME_WON_OUTRO_STORYBOARD_SCREEN);
         }},
         { EVENT_LOSE_GAME, [this](){
            // TODO: Finish the actions in this event
            // Validate an active session
            if (!game_session.is_active())
            {
               AllegroFlare::Logger::throw_error(
                  "AllegroFlare::Routers::Standard::on_route_event",
                  "When handling an EVENT_LOSE_GAME, the game_session is expected to be active but it was not."
               );
            }
            // End the session
            game_session.end_session();
            // Activate the game_over_screen
            emit_route_event(EVENT_ACTIVATE_GAME_OVER_SCREEN);
         }},
         { EVENT_START_LEVEL, [this](){
            // TODO: Finish the actions in this event
            // Event data: level info
            // primary_gameplay_screen-> load level
            // activate primary_gameplay_screen
         }},
         //{ EVENT_PAUSE_GAME, [this](){
            // TODO: Finish the actions in this event
            // guard: not already pause screen
            // pause session?
            //screen_identifier_before_pause = get_framework()->get_currently_active_screen_name();
            // capture "pre-pause screen"
            // activate pause_screen
         //}},
         //{ EVENT_UNPAUSE_GAME, [this](){
            // TODO: Finish the actions in this event
            // guard: is paused
            // unpause session?

            // activate "pre-pause screen"
            //activate_screen(screen_identifier_before_pause);
         //}},
         { EVENT_EXIT_TO_TITLE_SCREEN, [this](){
            // stop session
            // activate title_screen
         }},


         // Screens finished events

         { EVENT_INTRO_LOGOS_INISHED, [this](){
            // TODO
         }},
         { EVENT_INTRO_STORYBOARD_FINISHED, [this](){
            // TODO
         }},
         { EVENT_NEW_GAME_INTRO_STORYBOARD_FINISHED, [this](){
            // TODO
         }},
         { EVENT_GAME_WON_OUTRO_STORYBOARD_FINISHED, [this](){
            // TODO
         }},
         { EVENT_CREDITS_SCREEN_FINISHED, [this](){
            // TODO
         }},
         { EVENT_TITLE_SCREEN_TIMEOUT, [this](){
            // TODO
         }},


         // Activate Screens

         { EVENT_ACTIVATE_INTRO_LOGOS_SCREEN, [this](){
            activate_screen(INTRO_LOGOS_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_INTRO_STORYBOARD_SCREEN, [this](){
            activate_screen(INTRO_STORYBOARD_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_TITLE_SCREEN, [this](){
            activate_screen(TITLE_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_ACHIEVEMENTS_SCREEN, [this](){
            activate_screen(ACHIEVEMENTS_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_SETTINGS_SCREEN, [this](){
            activate_screen(SETTINGS_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_VERSION_SCREEN, [this](){
            activate_screen(VERSION_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_NEW_GAME_INTRO_STORYBOARD_SCREEN, [this](){
            activate_screen(NEW_GAME_INTRO_STORYBOARD_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_LEVEL_SELECT_SCREEN, [this](){
            activate_screen(LEVEL_SELECT_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_GAME_OVER_SCREEN, [this](){
            activate_screen(GAME_OVER_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_GAME_WON_SCREEN, [this](){
            activate_screen(GAME_WON_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_GAME_WON_OUTRO_STORYBOARD_SCREEN, [this](){
            activate_screen(GAME_WON_OUTRO_STORYBOARD_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_CREDITS_SCREEN, [this](){
            activate_screen(CREDITS_SCREEN_IDENTIFIER);
         }},
         { EVENT_ACTIVATE_PRIMARY_GAMEPLAY_SCREEN, [this](){
            activate_screen(PRIMARY_GAMEPLAY_SCREEN_IDENTIFIER);
         }},
      };

      // locate and call the function to handle the event
      if (event_map.count(route_event) == 0)
      {
         // event not found
         AllegroFlare::Logger::throw_error(
            "AllegroFlare::Routers::Standard::on_route_event",
            "Unable to handle event of type " + std::to_string(route_event) + "."
         );
      }
      else
      {
         // call the event
         event_map[route_event]();
      }

      return;
    body_dependency_symbols:
      - AllegroFlare::Logger


dependencies:


  - symbol: AllegroFlare::GameSession
    headers: [ AllegroFlare/GameSession.hpp ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::Frameworks::Full
    headers: [ AllegroFlare/Frameworks/Full.hpp ]
  - symbol: AllegroFlare::Routers::Base
    headers: [ AllegroFlare/Routers/Base.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]


