properties:


  - name: type
    type: std::string
    init_with: AllegroFlare::Routers::Base::TYPE
    constructor_arg: true
    getter: true

  - name: screen_manager
    type: AllegroFlare::ScreenManagers::Dictionary*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/Routers/Base"'
    static: true
    constexpr: true


functions:


  - name: register_screen
    parameters:
      - name: screen_identifier
        type: std::string
        default_argument: '"[unset-screen_identifier]"'
      - name: screen
        type: AllegroFlare::Screens::Base*
        default_argument: nullptr
    guards: [ screen_manager, screen ]
    body: |
      screen_manager->add(screen_identifier, screen);
      return;


  - name: unregister_screen
    parameters:
      - name: screen
        type: AllegroFlare::Screens::Base*
        default_argument: nullptr
    guards: [ screen_manager, screen ]
    body: |
      screen_manager->remove(screen);
      return;


  - name: activate_screen
    parameters:
      - name: screen_identifier
        type: std::string
        default_argument: '"[unset-screen_identifier]"'
    guards: [ screen_manager ]
    body: |
      screen_manager->activate(screen_identifier);
      return;


  - name: on_route_event
    virtual: true
    parameters:
      - name: route_event
        type: uint32_t
        default_argument: 0
      - name: time_now
        type: float
        default_argument: 0.0f
    guards: [ (route_event != 0) ]
    body: |
      // TODO: consider making this function pure virutal instead of throwing an error
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::Routers::Base::on_route_event",
         "This function is expected be implemented on the base class."
      );
      return;
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: is_type
    type: bool
    parameters:
      - name: possible_type
        type: std::string
        default_argument: '""'
    body: |
      return (possible_type == get_type());


dependencies:


  - symbol: AllegroFlare::Frameworks::Full
    headers: [ AllegroFlare/Frameworks/Full.hpp ]
  - symbol: AllegroFlare::GameSession
    headers: [ AllegroFlare/GameSession.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::ScreenManagers::Dictionary
    headers: [ AllegroFlare/ScreenManagers/Dictionary.hpp ]


