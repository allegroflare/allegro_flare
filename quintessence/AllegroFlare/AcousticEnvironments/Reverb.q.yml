parent_classes:


  - class: AllegroFlare::AcousticEnvironments::Base
    scope: public
    init_with: AllegroFlare::AcousticEnvironments::Reverb::TYPE


properties:


  - name: property
    type: std::string
    init_with: '"[unset-property]"'
    constructor_arg: true
    getter: true

  - name: TYPE
    type: char*
    init_with: '"AcousticEnvironments/Reverb"'
    static: true
    constexpr: true

  - name: master_mixer
    type: ALLEGRO_MIXER*
    init_with: nullptr

  - name: reverb_mixer
    type: ALLEGRO_MIXER*
    init_with: nullptr
    getter: explicit
  
  - name: reverb_mixer_depth
    type: ALLEGRO_AUDIO_DEPTH
    init_with: ALLEGRO_AUDIO_DEPTH_FLOAT32
    getter: true

  - name: reverb_mixer_depth_size
    type: std::size_t
    init_with: 0
    getter: true

  - name: reverb_mixer_frequency
    type: unsigned int
    init_with: 0
    getter: true

  - name: reverb_mixer_channel_configuration
    type: ALLEGRO_CHANNEL_CONF
    init_with: ALLEGRO_CHANNEL_CONF_2
    getter: true

  - name: reverb_mixer_channel_count
    type: std::size_t
    init_with: 0
    getter: true

  - name: initialized
    type: bool
    init_with: false

  - name: processing_buffer
    type: std::vector<float>
    init_with: '{}'

  - name: swap_buffer
    type: std::vector<float>
    init_with: '{}'

  - name: PROCESSING_BUFFER_INITIAL_SIZE
    constexpr: true
    static: true
    type: int
    init_with: 2048


functions:


  - name: get_reverb_mixer
    type: ALLEGRO_MIXER*
    guards: [ initialized ]
    body: |
      return reverb_mixer;


  - name: mixer_postprocess_callback
    type: void
    static: true
    parameters:
      - name: buf
        type: void*
        default_argument: nullptr
      - name: samples
        type: unsigned int
        default_argument: 0
      - name: data
        type: void*
        default_argument: nullptr
    guards: [ data ]
    body: |
      AllegroFlare::AcousticEnvironments::Reverb *reverb_environment =
         static_cast<AllegroFlare::AcousticEnvironments::Reverb*>(data);

      // validate configuration
      if (reverb_environment->get_reverb_mixer_depth() != ALLEGRO_AUDIO_DEPTH_FLOAT32)
      {
         std::stringstream error_message;
         error_message << "AllegroFlare::AcousticEnvironments::Reverb::mixer_postprocess_callback: error: "
                       << "expecting reverb_mixer_depth of the passed AcousticEnvironments::Reverb to be "
                       << "ALLEGRO_AUDIO_DEPTH_FLOAT32 but it is not.";
         throw std::runtime_error(error_message.str());
      }
      if (reverb_environment->get_reverb_mixer_channel_configuration() != ALLEGRO_CHANNEL_CONF_2)
      {
         std::stringstream error_message;
         error_message << "AllegroFlare::AcousticEnvironments::Reverb::mixer_postprocess_callback: error: "
                       << "expecting reverb_mixer_depth of the passed AcousticEnvironments::Reverb to be "
                       << "ALLEGRO_CHANNEL_CONF_2 but it is not.";
         throw std::runtime_error(error_message.str());
      }
      if (reverb_environment->get_reverb_mixer_frequency() != 44100)
      {
         std::stringstream error_message;
         error_message << "AllegroFlare::AcousticEnvironments::Reverb::mixer_postprocess_callback: error: "
                       << "expecting reverb_mixer_depth of the passed AcousticEnvironments::Reverb to be "
                       << "44100 but it is not.";
         throw std::runtime_error(error_message.str());
      }
      if (samples != PROCESSING_BUFFER_INITIAL_SIZE)
      {
         std::stringstream error_message;
         error_message << "AllegroFlare::AcousticEnvironments::Reverb::mixer_postprocess_callback: error: "
                       << "expecting number of samples to of the passed data to be "
                       << PROCESSING_BUFFER_INITIAL_SIZE << " but it was not (" << samples << ").";
         throw std::runtime_error(error_message.str());
      }

      float *fbuf = (float *)buf;
      std::size_t depth_size = reverb_environment->get_reverb_mixer_depth_size();
      unsigned int channel_count = reverb_environment->get_reverb_mixer_channel_count();
      float *swap_buffer = reverb_environment->swap_buffer.data();
      float *processing_buffer = reverb_environment->processing_buffer.data();

      // output some debug data
      std::cout << "Callback on \"" << reverb_environment->get_type() << "\":" << std::endl
                << "  - samples: " << samples << std::endl
                << "  - depth_size: " << depth_size << std::endl
                << "  - channel_count: " << channel_count << std::endl
                << "  - first_sample_value: " << fbuf[0] << std::endl;

      // capture the existing buffer into our processing_buffer
      memcpy(swap_buffer, fbuf, samples * depth_size * channel_count);

      // TODO: process audio here
      for (int i=0; i<(samples * depth_size * channel_count); i++)
      {
         fbuf[i] = swap_buffer[i];
      }

      memcpy(processing_buffer, swap_buffer, samples * depth_size * channel_count);
 
      return;
    body_dependency_symbols:
      - std::cout


  - name: initialize
    guards: [ al_is_system_installed(), al_is_audio_installed(), al_get_default_mixer() ]
    body: |
      // set the master_mixer provided by allegro
      master_mixer = al_get_default_mixer();
      if (!master_mixer)
      {
         std::stringstream error_message;
         error_message << "AllegroFlare::AcousticEnvironments::Reverb::initialize error: "
                       << "there was an error getting the master_mixer from allegro.";
         throw std::runtime_error(error_message.str());
      }

      // create our reverb mixer with properties that match the master_mixer
      reverb_mixer_depth = al_get_mixer_depth(master_mixer);
      reverb_mixer_frequency = al_get_mixer_frequency(master_mixer);
      reverb_mixer_channel_configuration = al_get_mixer_channels(master_mixer);
      reverb_mixer = al_create_mixer(reverb_mixer_frequency, reverb_mixer_depth, reverb_mixer_channel_configuration);
      reverb_mixer_depth_size = al_get_audio_depth_size(reverb_mixer_depth);
      reverb_mixer_channel_count = al_get_channel_count(reverb_mixer_channel_configuration);
      if (!reverb_mixer)
      {
         std::stringstream error_message;
         error_message << "AllegroFlare::AcousticEnvironments::Reverb::initialize error: "
                       << "there was an error creating the reverb_mixer.";
         throw std::runtime_error(error_message.str());
      }

      bool mixer_attachment_was_successful = al_attach_mixer_to_mixer(reverb_mixer, master_mixer);
      if (!mixer_attachment_was_successful)
      {
         std::stringstream error_message;
         error_message << "AllegroFlare::AcousticEnvironments::Reverb::initialize error: "
                       << "there was an error attaching the reverb_mixer to the master_mixer.";
         throw std::runtime_error(error_message.str());
      }

       //setup the mixer callback
      bool mixer_postprocess_callback_setup_was_successful = al_set_mixer_postprocess_callback(
         reverb_mixer,
         AllegroFlare::AcousticEnvironments::Reverb::mixer_postprocess_callback,
         this
      );
      if (!mixer_postprocess_callback_setup_was_successful)
      {
         std::stringstream error_message;
         error_message << "AllegroFlare::AcousticEnvironments::Reverb::initialize error: "
                       << "there was an error setting up the mixer postprocess callback.";
         throw std::runtime_error(error_message.str());
      }

      // setup the processing buffer
      processing_buffer.resize(PROCESSING_BUFFER_INITIAL_SIZE * 4 * 2, 0);
      swap_buffer.resize(PROCESSING_BUFFER_INITIAL_SIZE * 4 * 2, 0);

      initialized = true;
      return;
    body_dependency_symbols:
     - al_is_system_installed
     - al_is_audio_installed


dependencies:


  - symbol: al_is_system_installed
    headers: [ allegro5/allegro.h ]
  - symbol: al_is_audio_installed
    headers: [ allegro5/allegro_audio.h ]
  - symbol: ALLEGRO_MIXER
    headers: [ allegro5/allegro_audio.h ]
  - symbol: AllegroFlare::AcousticEnvironments::Base
    headers: [ AllegroFlare/AcousticEnvironments/Base.hpp ]
  - symbol: ALLEGRO_AUDIO_DEPTH
    headers: [ allegro5/allegro_audio.h ]
  - symbol: ALLEGRO_CHANNEL_CONF
    headers: [ allegro5/allegro_audio.h ]
  - symbol: std::size_t
    headers: [ cstddef ]


