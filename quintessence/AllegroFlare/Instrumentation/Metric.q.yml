properties:


  - name: metrics
    type: std::vector<double>
    init_with: false
    getter_ref: true

  - name: size
    type: int
    init_with: 64*4
    setter: explicit
    getter: true

  - name: head
    type: int
    init_with: 0
    getter: true

  - name: initialized
    type: bool
    init_with: false


methods:


  - name: set_size
    parameters:
      - name: size
        type: int
        default_argument: 64*4
    guards: [ (!initialized), (size >= 32) ]
    body: |
      this->size = size;
      return;


  - name: initialize
    guards: [ (!initialized) ]
    body: |
      metrics.reserve(size);
      metrics.resize(size);
      initialized = true;
      head = 0;
      return;


  - name: capture
    guards: [ initialized ]
    parameters:
      - name: metric
        type: double
        default_argument: 0.0
    body: |
      std::cout << "head(start): " << head << std::endl;
      head++;
      if (head >= metrics.size()) head = 0;
      metrics[head] = metric;
      std::cout << "head(end): " << head << std::endl;
      return;


  - name: head_delta
    type: int
    parameters:
      - name: delta
        type: int
        default_argument: 0
    guards: [ initialized ]
    body: |
      int pos = head + delta;
      while (pos < 0) pos += metrics.size();
      if (pos >= metrics.size()) pos = pos % metrics.size();
      return pos;


  - name: average_of_last_n_metrics
    type: double
    parameters:
      - name: count
        type: int
        default_argument: 64
    guards: [ initialized ]
    body: |
      double sum = 0.0;
      for (int i=0; i<count; i++)
      {
         int index = head_delta(-i);
         sum += metrics[index];
      };
      return sum / count;


  - name: get_last_n_metrics
    type: std::vector<double>
    parameters:
      - name: count
        type: int
        default_argument: 64
    guards: [ initialized ]
    body: |
      // TODO: Test this
      std::vector<double> result;
      result.resize(count);
      for (int i=0; i<result.size(); i++)
      {
         int index = head_delta(-i);
         result[i] = metrics[index];
      };
      return result;


