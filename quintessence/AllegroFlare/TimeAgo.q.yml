methods:


  - name: time_ago
    type: std::pair<std::time_t, std::string>
    static: true
    parameters:
      - name: past_time
        type: std::time_t
        default_argument: 'std::time(0)'
      - name: current_time
        type: std::time_t
        default_argument: 'std::time(0)'
    body: |
      //std::time_t current_time = std::time(0);
      double diff_seconds = difftime(current_time, past_time);

      // Calculate time difference in different units
      const int seconds_in_minute = 60;
      const int seconds_in_hour = 3600;
      const int seconds_in_day = 86400;
      const int seconds_in_month = 2592000; // Approximation (30 days)
      const int seconds_in_year = 31536000; // Approximation (365 days)

      const int margin_of_error_for_just_now = 14; // 0-14 seconds is "Just now", 15 seconds is "15 seconds ago"

      if (diff_seconds < 0)
      {
         return { 0, "Invalid time (future date)" };
      }
      else if (diff_seconds <= margin_of_error_for_just_now)
      {
         return { 0, "Just now" };
      }
      else if (diff_seconds < seconds_in_minute)
      {
         //return std::to_string(static_cast<int>(diff_seconds)) + " seconds ago";
         return { diff_seconds, format(static_cast<int>(diff_seconds), "second") };
         //return std::to_string(static_cast<int>(diff_seconds)) + " seconds ago";
      }
      else if (diff_seconds < seconds_in_hour)
      {
         //return std::to_string(static_cast<int>(diff_seconds / seconds_in_minute)) + " minutes ago";
         return { diff_seconds, format(static_cast<int>(diff_seconds / seconds_in_minute), "minute") };
      }
      else if (diff_seconds < seconds_in_day)
      {
         //return std::to_string(static_cast<int>(diff_seconds / seconds_in_hour)) + " hours ago";
         return { diff_seconds, format(static_cast<int>(diff_seconds / seconds_in_hour), "hour") };
      }
      else if (diff_seconds < seconds_in_month)
      {
         //return std::to_string(static_cast<int>(diff_seconds / seconds_in_day)) + " days ago";
         return { diff_seconds, format(static_cast<int>(diff_seconds / seconds_in_day), "day") };
      }
      else if (diff_seconds < seconds_in_year)
      {
         //return std::to_string(static_cast<int>(diff_seconds / seconds_in_month)) + " months ago";
         return { diff_seconds, format(static_cast<int>(diff_seconds / seconds_in_month), "month") };
      }
      else
      {
         //return std::to_string(static_cast<int>(diff_seconds / seconds_in_year)) + " years ago";
         return { diff_seconds, format(static_cast<int>(diff_seconds / seconds_in_year), "year") };
      }

      // TODO: Consider throwing error

      return { 0, "Error" };


  - name: generate_time_now_since_epoch
    type: std::time_t
    static: true
    body: |
      return std::time(nullptr);
    body_dependency_symbols:
      - std::time_t


  - name: format
    type: std::string
    static: true
    parameters:
      - name: value
        type: int
        default_argument: 0
      - name: unit
        type: std::string
        default_argument: '"[unset-unit]"'
    body: |
      return std::to_string(value) + " " + unit + (value == 1 ? "" : "s") + " ago";


dependencies:


  - symbol: std::time_t
    headers: [ ctime ]


