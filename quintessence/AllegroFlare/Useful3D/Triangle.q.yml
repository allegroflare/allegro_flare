properties:


  - name: v0
    type: AllegroFlare::vec3d
    constructor_arg: true
    init_with: '{}'
    exposed: true

  - name: v1
    type: AllegroFlare::vec3d
    constructor_arg: true
    init_with: '{}'
    exposed: true

  - name: v2
    type: AllegroFlare::vec3d
    constructor_arg: true
    init_with: '{}'
    exposed: true


functions:


  - name: intersect
    type: bool
    parameters:
      - name: ray_
        type: AllegroFlare::Useful3D::Ray*
        default_argument: nullptr
      - name: intersect_data
        type: AllegroFlare::Useful3D::IntersectData*
        default_argument: nullptr
      - name: backface_culling
        type: bool
        default_argument: false
    guards: [ ray_, intersect_data ]
    body: |
      const float EPSILON = 1e-6f;
      IntersectData &isectData = (*intersect_data);
      Ray &ray = (*ray_);

      // http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-9-ray-triangle-intersection/m-ller-trumbore-algorithm/
      // TODO: Add an epsilon for edge cases: https://chatgpt.com/c/68195505-3f88-800f-8d6f-ab6c89ebe14d

      AllegroFlare::vec3d edge1 = v1 - v0;
      AllegroFlare::vec3d edge2 = v2 - v0;
      AllegroFlare::vec3d pvec = cross_product(ray.dir, edge2);

      float det = dot_product(edge1, pvec);
      if (det == 0) return false;
      if (backface_culling && det < EPSILON) return false; // Suggested by ChatGPT
      float invDet = 1 / det;
      AllegroFlare::vec3d tvec = ray.orig - v0;
      isectData.u = dot_product(tvec, pvec) * invDet;
      if (isectData.u < 0 || isectData.u > 1) return false;
      AllegroFlare::vec3d qvec = cross_product(tvec, edge1);
      isectData.v = dot_product(ray.dir, qvec) * invDet;
      if (isectData.v < 0 || isectData.u + isectData.v > 1) return false;
      isectData.t = dot_product(edge2, qvec) * invDet;

      return true;
    body_dependency_symbols:
      - cross_product


  - name: draw
    parameters:
      - name: color
        type: ALLEGRO_COLOR
        default_argument: 'ALLEGRO_COLOR{1, 1, 1, 1}'
    guards: [ al_is_primitives_addon_initialized() ]
    body: |
      ALLEGRO_VERTEX vtx[3];
      vtx[0] = AllegroFlare::build_vertex(v0.x, v0.y, v0.z, color, 0, 0);
      vtx[1] = AllegroFlare::build_vertex(v1.x, v1.y, v1.z, color, 0, 0);
      vtx[2] = AllegroFlare::build_vertex(v2.x, v2.y, v2.z, color, 0, 0);
      al_draw_prim(vtx, NULL, NULL, 0, 3, ALLEGRO_PRIM_TRIANGLE_FAN);
      return;
    body_dependency_symbols:
      - AllegroFlare::Useful3D::build_vertex


dependencies:


  - symbol: cross_product
    headers: [ AllegroFlare/Useful.hpp ]
  - symbol: AllegroFlare::vec3d
    headers: [ AllegroFlare/Vec3D.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Useful3D::build_vertex
    headers: [ AllegroFlare/Useful.hpp ]
  - symbol: AllegroFlare::Useful3D::Ray*
    headers: [ AllegroFlare/Useful3D/Ray.hpp ]
  - symbol: AllegroFlare::Useful3D::IntersectData*
    headers: [ AllegroFlare/Useful3D/IntersectData.hpp ]

  - symbol: AllegroFlare::Useful3D::IntersectData
    headers: [ AllegroFlare/Useful3D/IntersectData.hpp ]
  - symbol: AllegroFlare::Useful3D::Ray
    headers: [ AllegroFlare/Useful3D/Ray.hpp ]

