properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    setter: false

  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: page_factory
    type: AllegroFlare::StoryboardPageFactory
    private: true
    init_with: 'font_bin'


functions:


  - name: set_font_bin
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
    body: |
      this->font_bin = font_bin;
      page_factory.set_font_bin(font_bin);
      return;


  - name: create_images_storyboard_screen
    type: AllegroFlare::Screens::Storyboard*
    parameters:
      - name: source_bitmaps
        type: std::vector<ALLEGRO_BITMAP*>
        default_argument: '{}'
      - name: button_font_size
        type: int
        default_argument: -40
    body: |
      AllegroFlare::Screens::Storyboard* result;
      result = new AllegroFlare::Screens::Storyboard(event_emitter, font_bin);
      result->set_auto_advance(true);
      result->initialize();

      std::vector<AllegroFlare::Elements::StoryboardPages::Base *> pages;
      for (auto &source_bitmap : source_bitmaps)
      {
         pages.push_back(new AllegroFlare::Elements::StoryboardPages::Image(source_bitmap));
      };

      AllegroFlare::Elements::Storyboard &storyboard_element = result->get_storyboard_element_ref();
      storyboard_element.set_button_font_size(button_font_size);
      storyboard_element.set_pages(pages);

      return result;
    body_dependency_symbols:
      - AllegroFlare::Elements::StoryboardPages::Image*


  - name: create_advancing_text_storyboard_screen
    type: AllegroFlare::Screens::Storyboard*
    parameters:
      - name: pages_text
        type: std::vector<std::string>
        default_argument: '{}'
      - name: button_font_size
        type: int
        default_argument: -40
      - name: page_top_padding
        type: float
        default_argument: 400
      - name: page_left_padding
        type: float
        default_argument: 400
      - name: page_right_padding
        type: float
        default_argument: 400
      - name: page_text_font_size
        type: int
        default_argument: AllegroFlare::Elements::StoryboardPages::AdvancingText::DEFAULT_FONT_SIZE
      - name: page_text_font_name
        type: std::string
        default_argument: AllegroFlare::Elements::StoryboardPages::AdvancingText::DEFAULT_FONT_NAME
      - name: page_text_line_height_multiplier
        type: float
        default_argument: 1.5
    body: |
      AllegroFlare::Screens::Storyboard* result;

      // create the storyboard container
      result = new AllegroFlare::Screens::Storyboard(event_emitter, font_bin);
      result->initialize();

      // tweak the button styling
      AllegroFlare::Elements::Storyboard &storyboard_element = result->get_storyboard_element_ref();
      storyboard_element.set_button_font_size(button_font_size);

      // create all the pages
      std::vector<AllegroFlare::Elements::StoryboardPages::Base *> pages;
      for (auto &page_text : pages_text)
      {
         AllegroFlare::Elements::StoryboardPages::AdvancingText* advancing_text_page =
            page_factory.create_advancing_text_page(page_text);
         advancing_text_page->set_top_padding(page_top_padding);
         advancing_text_page->set_left_padding(page_left_padding);
         advancing_text_page->set_right_padding(page_right_padding);
         advancing_text_page->set_font_name(page_text_font_name);
         advancing_text_page->set_font_size(page_text_font_size);
         advancing_text_page->set_line_height_multiplier(page_text_line_height_multiplier);
         pages.push_back(advancing_text_page);
      }
      storyboard_element.set_pages(pages);

      // return the result
      return result;
    body_dependency_symbols:
      - AllegroFlare::Elements::StoryboardPages::AdvancingText*


dependencies:


  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::EventEmitter*
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: std::vector<ALLEGRO_BITMAP*>
    headers: [ vector, allegro5/allegro.h ]
  - symbol: AllegroFlare::Elements::StoryboardPages::Text*
    headers: [ AllegroFlare/Elements/StoryboardPages/Text.hpp ]
  - symbol: AllegroFlare::Elements::StoryboardPages::Base*
    headers: [ AllegroFlare/Elements/StoryboardPages/Base.hpp ]
  - symbol: AllegroFlare::Elements::StoryboardPages::Image*
    headers: [ AllegroFlare/Elements/StoryboardPages/Image.hpp ]
  - symbol: AllegroFlare::Elements::StoryboardPages::AdvancingText*
    headers: [ AllegroFlare/Elements/StoryboardPages/AdvancingText.hpp ]
  - symbol: AllegroFlare::Screens::Storyboard*
    headers: [ AllegroFlare/Screens/Storyboard.hpp ]
  - symbol: AllegroFlare::StoryboardPageFactory
    headers: [ AllegroFlare/StoryboardPageFactory.hpp ]

  - symbol: ALLEGRO_BITMAP
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Screens::Storyboard
    headers: [ AllegroFlare/Screens/Storyboard.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::Elements::StoryboardPages::Image
    headers: [ AllegroFlare/Elements/StoryboardPages/Image.hpp ]
  - symbol: AllegroFlare::Elements::StoryboardPages::AdvancingText
    headers: [ AllegroFlare/Elements/StoryboardPages/AdvancingText.hpp ]

