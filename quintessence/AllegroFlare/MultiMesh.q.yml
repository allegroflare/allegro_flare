properties:


  - name: vertex_buffer
    type: ALLEGRO_VERTEX_BUFFER*
    init_with: nullptr

  - name: index_buffer
    type: ALLEGRO_INDEX_BUFFER*
    init_with: nullptr

  - name: texture
    type: ALLEGRO_BITMAP*
    init_with: nullptr
    getter: true
    setter: true

  - name: indexes_in_use
    type: int
    init_with: 0

  - name: VERTEXES_PER_ITEM
    const: true
    type: int
    init_with: 6

  - name: initialized
    type: bool
    init_with: false


functions:


  - name: initialize
    guards: [ (!initialized), al_is_system_installed(), al_is_primitives_addon_initialized() ]
    body: |
      int num_items = 50;
      int num_vertices = num_items * VERTEXES_PER_ITEM;

      // create the vertex declaration
      ALLEGRO_VERTEX_ELEMENT elems[] = {
         {ALLEGRO_PRIM_POSITION, ALLEGRO_PRIM_FLOAT_3, offsetof(ALLEGRO_VERTEX, x)},
         {ALLEGRO_PRIM_TEX_COORD_PIXEL, ALLEGRO_PRIM_FLOAT_2, offsetof(ALLEGRO_VERTEX, u)},
         {ALLEGRO_PRIM_COLOR_ATTR, 0, offsetof(ALLEGRO_VERTEX, color)},
         {0, 0, 0}
      };
      ALLEGRO_VERTEX_DECL* decl = al_create_vertex_decl(elems, sizeof(ALLEGRO_VERTEX));

      // vertex buffer, data will be uninitialized
      const void* initial_data_vb = nullptr;
      vertex_buffer = al_create_vertex_buffer(
         decl,
         initial_data_vb,
         num_vertices,
         ALLEGRO_PRIM_BUFFER_READWRITE
      );

      // index buffer, data will be uninitialized
      // size of the buffer is 2, which is a short, limiting the size to a certain amount (TODO, figure out amount)
      const void* initial_data_ib = nullptr;
      index_buffer = al_create_index_buffer(
         sizeof(short),
         initial_data_ib,
         num_vertices,
         ALLEGRO_PRIM_BUFFER_READWRITE
      );

      initialized = true;
      return;


  - name: append
    parameters:
      - name: x
        type: float
        default_argument: 0
      - name: y
        type: float
        default_argument: 0
      - name: w
        type: float
        default_argument: 1
      - name: h
        type: float
        default_argument: 1
    guards: [ initialized ]
    body: |
      float u1 = 100.0f; // uvs using pixel coorindates; TODO: revise
      float v1 = 100.0f;
      float u2 = 200.0f;
      float v2 = 200.0f;
      ALLEGRO_COLOR color{1, 1, 1, 1};
      ALLEGRO_VERTEX item_vertexes[6] = {
         ALLEGRO_VERTEX{x+0, y+0, 0, u1, v1, color},
         ALLEGRO_VERTEX{x+0, y+h, 0, u1, v2, color},
         ALLEGRO_VERTEX{x+w, y+0, 0, u2, v1, color},
         ALLEGRO_VERTEX{x+w, y+0, 0, u2, v1, color},
         ALLEGRO_VERTEX{x+0, y+h, 0, u1, v2, color},
         ALLEGRO_VERTEX{x+w, y+h, 0, u2, v2, color},
      };

      ALLEGRO_VERTEX* start = (ALLEGRO_VERTEX*)al_lock_vertex_buffer(
         vertex_buffer,
         indexes_in_use,
         VERTEXES_PER_ITEM,
         ALLEGRO_LOCK_WRITEONLY
      );

      // fill 6 vertexes @ indexs
      for (int i=0; i<6; i++) start[i] = item_vertexes[i];

      // unlock
      al_unlock_vertex_buffer(vertex_buffer);
      // increase indexes_in_use by 6
      indexes_in_use += 6;
      return;


  - name: remove
    parameters:
      - name: at_index
        type: int
        default_argument: 0
    guards: [ initialized ]
    body: |
      // TODO
      // lock @ index to indexes_in_use
      // copy vertexes from end into removed position (if not already at end)
      // reduce indexes_in_use by 6
      // unlock
      return;


  - name: render
    guards: [ initialized ]
    body: |
      if (indexes_in_use == 0) return;
      al_draw_vertex_buffer(vertex_buffer, texture, 0, indexes_in_use, ALLEGRO_PRIM_TRIANGLE_LIST);
      //al_draw_indexed_buffer(vertex_buffer, texture, index_buffer, 0, indexes_in_use, ALLEGRO_PRIM_TRIANGLE_LIST);
      return;


dependencies:


  - symbol: ALLEGRO_VERTEX_BUFFER*
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: ALLEGRO_INDEX_BUFFER*
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: ALLEGRO_BITMAP*
    headers: [ allegro5/allegro.h ]


