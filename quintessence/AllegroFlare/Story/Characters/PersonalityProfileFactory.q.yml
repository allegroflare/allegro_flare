properties:


  - name: personality_profile_matrix
    type: AllegroFlare::Story::Characters::PersonalityProfileMatrix
    init_with: ''

  - name: initialized
    type: bool
    init_with: false


functions:


  - name: initialize
    guards: [ (!initialized) ]
    body: |
      personality_profile_matrix =
         AllegroFlare::Story::Characters::PersonalityProfileMatrixFactory::build_standard_matrix();

      initialized = true;

      return;
    body_dependency_symbols:
      - AllegroFlare::Story::Characters::PersonalityProfileMatrixFactory


  - name: build_random_personality_profile
    type: std::string
    parameters:
      - name: character_name
        type: std::string
        default_argument: '"this character"'
      - name: num_traits
        type: std::size_t
        default_argument: 5
      - name: seed
        type: unsigned int
        default_argument: 0
    guards: [ initialized, (num_traits > 1), (num_traits <= personality_profile_matrix.num_dimensions()) ]
    body: |
      // Select the random seed mechanism we'll use (typically either knowable or unpredictable)
      static AllegroFlare::Random static_random; // NOTE: if seed is 0, then an unpredictable random will be used
      AllegroFlare::Random seeded_random(seed);  // NOTE: if seed is non-zero, then a freshly seeded randomizer is used
      AllegroFlare::Random &random = (seed == 0) ? static_random : seeded_random;

      // Capture the available dimensions
      std::vector<AllegroFlare::Story::Characters::PersonalityDimension> available_personality_dimensions =
         personality_profile_matrix.get_dimensions();
      random.shuffle_elements(available_personality_dimensions);

      // Cap the available traits to the "num_traits" that were asked for
      if (available_personality_dimensions.size() > num_traits) available_personality_dimensions.resize(num_traits);

      // Assemble our writeup text
      std::stringstream writeup;
      for (auto &dimension : available_personality_dimensions)
      {
         std::string dimension_name = dimension.get_name();
         std::string dimension_description = dimension.get_description();
         uint32_t dimension_ranking_level = random.get_random_int(0, 4);
         std::string dimension_descriptor_for_level = dimension.get_descriptor_for_level(dimension_ranking_level);

         writeup << build_writeup_for_dimension(
            character_name,
            dimension_name,
            dimension_description,
            dimension_ranking_level,
            dimension_descriptor_for_level
         );
         writeup << std::endl;
      }

      return writeup.str();
    body_dependency_symbols:
      - AllegroFlare::Random


  - name: build_writeup_for_dimension
    type: std::string
    parameters:
      - name: character_name
        type: std::string
        default_argument: '"this character"'
      - name: dimension_name
        type: std::string
        default_argument: '"[unset-dimension_name]"'
      - name: dimension_description
        type: std::string
        default_argument: '"[unset-dimension_description]"'
      - name: dimension_ranking_level
        type: uint32_t
        default_argument: 0
      - name: dimension_descriptor_for_level
        type: std::string
        default_argument: '"[unset-dimension_descriptor_for_level]"'
    guards: [ initialized ]
    body: |
      std::stringstream writeup;

      writeup << "In the personality category of \"" << dimension_name << "\" (" << dimension_description
              << "), " << character_name << " ranks " << ranking_level_to_text(dimension_ranking_level) << ", meaning "
              << character_name << " " << dimension_descriptor_for_level << ".";

      return writeup.str();
    body_dependency_symbols:
      - std::stringstream


  - name: ranking_level_to_text
    parameters:
      - name: ranking_level
        type: uint32_t
        default_argument: 0
    type: std::string
    guards: [ (ranking_level >= 0), (ranking_level < 5) ]
    body: |
      std::map<uint32_t, std::string> dictionary = {
         { 0, "VERY_LOW" },
         { 1, "LOW" },
         { 2, "BALANCED" },
         { 3, "HIGH" },
         { 4, "VERY_HIGH" },
      };
      return dictionary[ranking_level];
    body_dependency_symbols:
      - std::map


dependencies:


  - symbol: AllegroFlare::Story::Characters::PersonalityProfile
    headers: [ AllegroFlare/Story/Characters/PersonalityProfile.hpp ]
  - symbol: AllegroFlare::Story::Characters::PersonalityProfileMatrix
    headers: [ AllegroFlare/Story/Characters/PersonalityProfileMatrix.hpp ]
  - symbol: AllegroFlare::Story::Characters::PersonalityProfileMatrixFactory
    headers: [ AllegroFlare/Story/Characters/PersonalityProfileMatrixFactory.hpp ]
  - symbol: AllegroFlare::Random
    headers: [ AllegroFlare/Random.hpp ]


