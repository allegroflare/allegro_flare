properties:


  - name: character_name
    type: std::string
    init_with: '"[unset-character_name]"'
    constructor_arg: true
    getter: true
    setter: true

  - name: personality_dimensions
    type: std::vector<AllegroFlare::Story::Characters::PersonalityProfileDimension>
    constructor_arg: true
    init_with: '{}'
    getter: true
    setter: true


functions:


  - name: num_personality_dimensions
    type: std::size_t
    body: |
      return personality_dimensions.size();


  - name: add_personality_dimension
    parameters:
      - name: personality_dimension
        type: AllegroFlare::Story::Characters::PersonalityProfileDimension
        default_argument: '{}'
    guards: [ (!personality_dimension_with_title_exists(personality_dimension.get_title())) ]
    body: |
      // TODO: Add tests for this functionality
      personality_dimensions.push_back(personality_dimension);
      return;


  - name: personality_dimension_with_title_exists
    type: bool
    parameters:
      - name: title
        type: std::string
        default_argument: '"[unset-title]"'
    body: |
      // TODO: Add tests for this functionality
      for (auto &personality_dimension : personality_dimensions)
      {
         if (personality_dimension.get_title() == title) return true;
      }
      return false;


  - name: get_personality_dimension_by_index
    type: AllegroFlare::Story::Characters::PersonalityProfileDimension
    parameters:
      - name: index
        type: std::size_t
        default_argument: 0
    guards: [ (index >= 0), (index < personality_dimensions.size()) ]
    body: |
      return personality_dimensions[index];


  - name: build_personality_dimensions_writeup
    type: std::string
    body: |
      std::stringstream writeup;
      for (auto &dimension : personality_dimensions)
      {
         std::string dimension_name = dimension.get_title();
         std::string dimension_description = dimension.get_description();
         int dimension_ranking_size = dimension.get_scoring_max();
         int dimension_ranking_level = dimension.get_scoring();
         std::string dimension_descriptor_for_level = dimension.get_scoring_descriptor();

         writeup << build_writeup_for_dimension(
            character_name,
            dimension_name,
            dimension_description,
            dimension_ranking_level,
            dimension_descriptor_for_level
         );
         writeup << std::endl;
      }

      return writeup.str();
    body_dependency_symbols:
      - std::stringstream


  - name: build_writeup_for_dimension
    static: true
    type: std::string
    parameters:
      - name: character_name
        type: std::string
        default_argument: '"this character"'
      - name: dimension_name
        type: std::string
        default_argument: '"[unset-dimension_name]"'
      - name: dimension_description
        type: std::string
        default_argument: '"[unset-dimension_description]"'
      - name: dimension_ranking_level
        type: uint32_t
        default_argument: 0
      - name: dimension_descriptor_for_level
        type: std::string
        default_argument: '"[unset-dimension_descriptor_for_level]"'
    body: |
      std::stringstream writeup;

      writeup << "In the personality category of \"" << dimension_name << "\" (" << dimension_description
              << "), " << character_name << " ranks " << ranking_level_to_text(dimension_ranking_level) << ", meaning "
              << character_name << " " << dimension_descriptor_for_level << ".";

      return writeup.str();
    body_dependency_symbols:
      - std::stringstream


  - name: build_brief_writeup_for_dimension
    type: std::string
    body: |
      std::stringstream writeup;
      std::vector<std::string> personality_descriptors;

      for (auto &dimension : personality_dimensions)
      {
         std::string dimension_name = dimension.get_title();
         std::string dimension_description = dimension.get_description();
         int dimension_ranking_size = dimension.get_scoring_max();
         int dimension_ranking_level = dimension.get_scoring();
         std::string dimension_descriptor_for_level = dimension.get_scoring_descriptor();

         personality_descriptors.push_back(dimension_descriptor_for_level);

         writeup << std::endl;
      }

      std::string joined_descriptors = join_with_and(personality_descriptors, ", ");

      writeup << character_name << " " << joined_descriptors << ".";

      return writeup.str();
    body_dependency_symbols:
      - std::stringstream


  - name: ranking_level_to_text
    static: true
    parameters:
      - name: ranking_level
        type: uint32_t
        default_argument: 0
    type: std::string
    guards: [ (ranking_level >= 0), (ranking_level < 5) ]
    body: |
      std::map<uint32_t, std::string> dictionary = {
         { 0, "VERY_LOW" },
         { 1, "LOW" },
         { 2, "BALANCED" },
         { 3, "HIGH" },
         { 4, "VERY_HIGH" },
      };
      return dictionary[ranking_level];
    body_dependency_symbols:
      - std::map


  - name: join
    type: std::string
    private: true
    parameters:
      - name: tokens
        type: std::vector<std::string>
        default_argument: '{}'
      - name: delimiter
        type: std::string
        default_argument: '", "'
    body: |
      std::stringstream result;
      bool last = false;

      for (unsigned i=0; i<tokens.size(); i++)
      {
         result << tokens[i];
         if (i == tokens.size()-1) last = true;
         if (!last) result << delimiter;
      }

      return result.str();
    body_dependency_symbols:
      - std::stringstream


  - name: join_with_and
    type: std::string
    parameters:
      - name: tokens
        type: std::vector<std::string>
        default_argument: '{}'
      - name: delimiter
        type: std::string
        default_argument: '", "'
      - name: use_and
        type: bool
        default_argument: false
    body: |
      std::stringstream result;
      int size = tokens.size();

      for (int i = 0; i < size; ++i)
      {
         if (i > 0)
         {
            result << delimiter;
            if (use_and && i == size - 1)
            {
               result << "and ";
            }
         }
         result << tokens[i];
      }

      return result.str();


dependencies:


  - symbol: AllegroFlare::Story::Characters::PersonalityProfileDimension
    headers: [ AllegroFlare/Story/Characters/PersonalityProfileDimension.hpp ]


