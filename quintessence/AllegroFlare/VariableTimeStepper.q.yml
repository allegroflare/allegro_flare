properties:


  - name: atomic_time_stepper
    type: AllegroFlare::AtomicTimeStepper
    init_with: '{}'

  - name: max_allowed_steps
    type: int
    init_with: 10
    getter: true
    setter: explicit


methods:


  - name: get_total_accumulated_time
    type: double
    body: |
      return atomic_time_stepper.get_total_accumulated_time();


  - name: set_atomic_on_step_func
    parameters:
      - name: on_step_func
        type: std::function<void(double, double, void*)>
        default_argument: '{}'
    body: |
      atomic_time_stepper.set_on_step_func(on_step_func);
      return;


  - name: set_atomic_on_step_func_user_data
    parameters:
      - name: on_step_func_user_data
        type: void*
        default_argument: nullptr
    body: |
      atomic_time_stepper.set_on_step_func_user_data(on_step_func_user_data);
      return;


  - name: set_max_allowed_steps
    parameters:
      - name: max_allowed_steps
        type: int
        default_argument: 10
    guards: [ max_allowed_steps > 0 ]
    body: |
      this->max_allowed_steps = max_allowed_steps;
      return;


  - name: step_ahead_to
    type: std::tuple<double, int, int>
    parameters:
      - name: time_to_step_to
        type: double
        default_argument: 1.0/60.0
    body: |
      const double current_time = atomic_time_stepper.get_total_accumulated_time();

      if (time_to_step_to <= current_time)
      {
          // Target time is not in the future. Return status.
          return { time_to_step_to - current_time, 0, 0 };
      }

      // Calculate the number of steps required
      const double duration_to_step = time_to_step_to - current_time;
      const double time_step_res = atomic_time_stepper.get_time_step_resolution();
      int num_steps_to_take = static_cast<int>(std::floor(duration_to_step / time_step_res));
      int excess_steps_not_taken = 0;

      // Cap the number of steps to perform to prevent the "spiral of death".
      if (num_steps_to_take > max_allowed_steps)
      {
          excess_steps_not_taken = num_steps_to_take - max_allowed_steps;
          num_steps_to_take = max_allowed_steps;
      }

      if (num_steps_to_take > 0)
      {
          atomic_time_stepper.step_n_times(num_steps_to_take);
      }

      // Calculate final remaining time and return the complete result.
      const double new_current_time = atomic_time_stepper.get_total_accumulated_time();
      const double remaining_time = time_to_step_to - new_current_time;

      return { remaining_time, num_steps_to_take, excess_steps_not_taken };
    body_dependency_symbols:
      - std::floor


dependencies:


  - symbol: AllegroFlare::AtomicTimeStepper
    headers: [ AllegroFlare/AtomicTimeStepper.hpp ]
  - symbol: std::floor
    headers: [ cmath ]


