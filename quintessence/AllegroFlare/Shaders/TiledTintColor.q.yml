parent_classes:


  - class: AllegroFlare::Shaders::Base
    scope: public
    init_with: "AllegroFlare::Shaders::TiledTintColor::TYPE, obtain_vertex_source(), obtain_fragment_source()"


properties:


  - name: tint_color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{1, 1, 1, 1}
    getter: true
    setter: explicit

  - name: tint_color_is_used
    type: bool
    init_with: false
    getter: true
    setter: explicit


  - name: flat_color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{1, 1, 1, 1}
    getter: true
    setter: explicit

  - name: flat_color_intensity
    type: float
    init_with: 0.0f
    getter: true
    setter: explicit

  - name: darkness
    type: float
    init_with: 0.0f
    getter: true
    setter: explicit

  - name: saturation
    type: float
    init_with: 1.0f
    getter: true
    setter: explicit

  - name: red_channel_multiplier
    type: float
    init_with: 1.0f
    getter: true
    setter: explicit

  - name: green_channel_multiplier
    type: float
    init_with: 1.0f
    getter: true
    setter: explicit

  - name: blue_channel_multiplier
    type: float
    init_with: 1.0f
    getter: true
    setter: explicit

  - name: hue_rotation
    type: float
    init_with: 1.0f
    getter: true
    setter: explicit

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/Shaders/TiledTintColor"'
    static: true
    constexpr: true

  - name: initialized
    type: bool
    init_with: false


methods:


  - name: initialize
    type: void
    body: |
      if (!initialized) AllegroFlare::Shaders::Base::initialize();
      initialized = true;


  - name: set_flat_color
    parameters:
      - name: flat_color
        type: ALLEGRO_COLOR
        default_argument: ALLEGRO_COLOR{1, 1, 1, 1}
    body: |
      this->flat_color = flat_color;
      if (is_active()) set_vec3("flat_color", flat_color.r, flat_color.g, flat_color.b);
      return;


  - name: set_tint_color
    parameters:
      - name: tint_color
        type: ALLEGRO_COLOR
        default_argument: ALLEGRO_COLOR{1, 1, 1, 1}
    body: |
      this->tint_color = tint_color;
      if (is_active()) set_vec3("tint_color", tint_color.r, tint_color.g, tint_color.b);
      return;


  - name: set_tint_color_is_used
    parameters:
      - name: tint_color_is_used
        type: bool
        default_argument: false
    body: |
      this->tint_color_is_used = tint_color_is_used;
      if (is_active()) set_bool("tint_color_is_used", tint_color_is_used);
      return;


  - name: set_saturation
    parameters:
      - name: saturation
        type: float
        default_argument: 1.0f
    guards: [ (saturation >= 0.0f), (saturation <= 2.0f) ]
    body: |
      this->saturation = saturation;
      if (is_active()) set_float("saturation", saturation);
      return;


  - name: set_flat_color_intensity
    parameters:
      - name: flat_color_intensity
        type: float
        default_argument: 1.0f
    guards: [ (flat_color_intensity >= 0.0f), (flat_color_intensity <= 1.0f) ]
    body: |
      this->flat_color_intensity = flat_color_intensity;
      if (is_active()) set_float("flat_color_intensity", flat_color_intensity);
      return;


  - name: set_darkness
    parameters:
      - name: darkness
        type: float
        default_argument: 0.0f
    xguards: [ (darkness >= 0.0f), (darkness <= 1.0f) ]
    body: |
      this->darkness = darkness;
      if (is_active()) set_float("inv_darkness", 1.0 - darkness);
      return;


  - name: set_red_channel_multiplier
    parameters:
      - name: red_channel_multiplier
        type: float
        default_argument: 0.0f
    xguards: [ (red_channel_multiplier >= 0.0f), (red_channel_multiplier <= 1.0f) ]
    body: |
      this->red_channel_multiplier = red_channel_multiplier;
      if (is_active()) set_float("red_channel_multiplier", red_channel_multiplier);
      return;


  - name: set_green_channel_multiplier
    parameters:
      - name: green_channel_multiplier
        type: float
        default_argument: 0.0f
    xguards: [ (green_channel_multiplier >= 0.0f), (green_channel_multiplier <= 1.0f) ]
    body: |
      this->green_channel_multiplier = green_channel_multiplier;
      if (is_active()) set_float("green_channel_multiplier", green_channel_multiplier);
      return;


  - name: set_blue_channel_multiplier
    parameters:
      - name: blue_channel_multiplier
        type: float
        default_argument: 0.0f
    xguards: [ (blue_channel_multiplier >= 0.0f), (blue_channel_multiplier <= 1.0f) ]
    body: |
      this->blue_channel_multiplier = blue_channel_multiplier;
      if (is_active()) set_float("blue_channel_multiplier", blue_channel_multiplier);
      return;


  - name: set_hue_rotation
    parameters:
      - name: hue_rotation
        type: float
        default_argument: 0.0f
    xguards: [ (hue_rotation >= 0.0f), (hue_rotation <= 1.0f) ]
    body: |
      this->hue_rotation = hue_rotation;
      if (is_active()) set_float("hue_rotation", hue_rotation);
      return;


  - name: activate
    type: void
    guards: [ initialized ]
    body: |
      AllegroFlare::Shaders::Base::activate();
      set_values_to_activated_shader();
      //AllegroFlare::Shaders::Base::activate();


  - name: set_values_to_activated_shader
    private: true
    body: |
      set_bool("tint_color_is_used", tint_color_is_used);
      set_vec3("tint_color", tint_color.r, tint_color.g, tint_color.b);
      set_vec3("flat_color", flat_color.r, flat_color.g, flat_color.b);
      set_float("flat_color_intensity", flat_color_intensity);
      set_float("inv_darkness", 1.0 - darkness);
      set_float("red_channel_multiplier", red_channel_multiplier);
      set_float("green_channel_multiplier", green_channel_multiplier);
      set_float("blue_channel_multiplier", blue_channel_multiplier);
      set_float("hue_rotation", hue_rotation);
      set_float("saturation", saturation);
      return;
    body_dependency_symbols:
      - std::cout


  - name: obtain_vertex_source
    type: std::string
    static: true
    private: true
    body: |
      static const std::string source = R"DELIM(
        attribute vec4 al_pos;
        attribute vec4 al_color;
        attribute vec2 al_texcoord;
        uniform mat4 al_projview_matrix;
        uniform bool al_use_tex_matrix;
        uniform mat4 al_tex_matrix;
        varying vec4 varying_color;
        varying vec2 varying_texcoord;
        void main()
        {
          varying_color = al_color;
          if (al_use_tex_matrix) {
            vec4 uv = al_tex_matrix * vec4(al_texcoord, 0, 1);
            varying_texcoord = vec2(uv.x, uv.y);
          }
          else
            varying_texcoord = al_texcoord;
          gl_Position = al_projview_matrix * al_pos;
        }
      )DELIM";
      return source;


  - name: obtain_fragment_source
    type: std::string
    static: true
    private: true
    body: |
      static const std::string source = R"DELIM(
        #ifdef GL_ES
        precision lowp float;
        #endif
        uniform sampler2D al_tex;
        uniform bool al_use_tex;
        uniform bool al_alpha_test;
        uniform int al_alpha_func;
        uniform float al_alpha_test_val;
        varying vec4 varying_color;
        varying vec2 varying_texcoord;

        bool alpha_test_func(float x, int op, float compare);

        uniform bool tint_color_is_used;
        uniform vec3 tint_color;
        uniform vec3 flat_color;
        uniform float flat_color_intensity;
        uniform float inv_darkness;
        uniform float red_channel_multiplier;
        uniform float green_channel_multiplier;
        uniform float blue_channel_multiplier;
        uniform float hue_rotation; // Normalized [0-1] value for hue rotation
        uniform float saturation; // 0 == gray, 1.0 == normal, 2.0 == double_saturation

        vec3 saturation_adjust(vec3 rgb, float adjustment)
        // From:
        // https://github.com/minus34/cesium1/blob/master/Cesium/Shaders/Builtin/Functions/saturation.glsl
        {
           // Algorithm from Chapter 16 of OpenGL Shading Language
           const vec3 W = vec3(0.2125, 0.7154, 0.0721);
           vec3 intensity = vec3(dot(rgb, W));
           return mix(intensity, rgb, adjustment);
        }

        vec4 hue_adjust(vec4 color, float hueAdjust)
        {
           // Original source from:
           // https://stackoverflow.com/questions/9234724/how-to-change-hue-of-a-texture-with-glsl
           // ChatGPT has made some suggestions to potentially improve performance on this function:
           // https://chatgpt.com/c/678d9da9-4378-800f-8236-b233c91aa12a

           const vec4  kRGBToYPrime = vec4 (0.299, 0.587, 0.114, 0.0);
           const vec4  kRGBToI     = vec4 (0.596, -0.275, -0.321, 0.0);
           const vec4  kRGBToQ     = vec4 (0.212, -0.523, 0.311, 0.0);

           const vec4  kYIQToR   = vec4 (1.0, 0.956, 0.621, 0.0);
           const vec4  kYIQToG   = vec4 (1.0, -0.272, -0.647, 0.0);
           const vec4  kYIQToB   = vec4 (1.0, -1.107, 1.704, 0.0);

           // Sample the input pixel
           //vec4    color   = texture2DRect (inputTexture, gl_TexCoord [ 0 ].xy);

           // Convert to YIQ
           float   YPrime  = dot (color, kRGBToYPrime);
           float   I      = dot (color, kRGBToI);
           float   Q      = dot (color, kRGBToQ);

           // Calculate the hue and chroma
           float   hue     = atan (Q, I);
           float   chroma  = sqrt (I * I + Q * Q);

           // Make the user's adjustments
           hue += hueAdjust;

           // Convert back to YIQ
           Q = chroma * sin (hue);
           I = chroma * cos (hue);

           // Convert back to RGB
           vec4    yIQ   = vec4 (YPrime, I, Q, 0.0);
           color.r = dot (yIQ, kYIQToR);
           color.g = dot (yIQ, kYIQToG);
           color.b = dot (yIQ, kYIQToB);

           return color;
        }

        vec4 tint_color_it_plz(vec4 tmp)
        {
           //float inverse_color_intensity = 1.0 - flat_color_intensity;
           tmp.r = tmp.r * tint_color.r;
           tmp.g = tmp.g * tint_color.g;
           tmp.b = tmp.b * tint_color.b;
           tmp.a = tmp.a;
           return tmp;
        }

        vec4 flat_color_it_plz(vec4 tmp)
        {
           float inverse_color_intensity = 1.0 - flat_color_intensity;
           tmp.r = (tmp.r * inverse_color_intensity + flat_color.r * flat_color_intensity) * tmp.a;
           tmp.g = (tmp.g * inverse_color_intensity + flat_color.g * flat_color_intensity) * tmp.a;
           tmp.b = (tmp.b * inverse_color_intensity + flat_color.b * flat_color_intensity) * tmp.a;
           tmp.a = tmp.a;
           return tmp;
        }

        void main()
        {
          vec4 c;

          if (al_use_tex)
          {
            c = varying_color * texture2D(al_tex, varying_texcoord);
          }
          else
          {
            c = varying_color;
          }

          // Apply the 
          if (!al_alpha_test || alpha_test_func(c.a, al_alpha_func, al_alpha_test_val))
          {
             // Apply hue rotation
             //float angle = hue_rotation * 2.0 * 3.14159265; // Convert normalized value to radians
             //c.rgb = rotate_hue(c.rgb, angle);
             //c.rgb = hue_adjust(c.rgb
             //c = hue_adjust(c, 0.0);
             if (hue_rotation < -0.01 || hue_rotation > 0.01) c = hue_adjust(c, hue_rotation * 2.0 * 3.14159265);

             // Apply saturation adjustment
             if (saturation < 0.99 || saturation > 1.01) c.rgb = saturation_adjust(c.rgb, saturation);

             // Adjust the darkness
             c.r = c.r * inv_darkness * red_channel_multiplier;
             c.g = c.g * inv_darkness * green_channel_multiplier;
             c.b = c.b * inv_darkness * blue_channel_multiplier;

             if (tint_color_is_used) c = tint_color_it_plz(c);
           
             gl_FragColor = c;
             //gl_FragColor = flat_color_it_plz(c);
          }
          else
          {
            discard;
          }
        }

        bool alpha_test_func(float x, int op, float compare)
        {
          if (op == 0) return false;
          else if (op == 1) return true;
          else if (op == 2) return x < compare;
          else if (op == 3) return x == compare;
          else if (op == 4) return x <= compare;
          else if (op == 5) return x > compare;
          else if (op == 6) return x != compare;
          else if (op == 7) return x >= compare;
          return false;
        }
      )DELIM";
      return source;


dependencies:


  - symbol: AllegroFlare::Shaders::Base
    headers: [ AllegroFlare/Shaders/Base.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]


