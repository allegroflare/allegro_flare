properties:


  - name: type
    type: std::string
    init_with: AllegroFlare::Shaders::Base::TYPE
    constructor_arg: true
    getter: true

  - name: vertex_source_code
    type: std::string
    init_with: DEFAULT_VERTEX_SOURCE_CODE
    constructor_arg: true
    getter: true
    setter: explicit

  - name: fragment_source_code
    type: std::string
    init_with: DEFAULT_FRAGMENT_SOURCE_CODE
    constructor_arg: true
    getter: true
    setter: explicit

  - name: al_shader
    type: ALLEGRO_SHADER*
    init_with: nullptr
    getter: true

  - name: initialized
    type: bool
    init_with: false
    getter: true

  - name: DEFAULT_VERTEX_SOURCE_CODE
    type: char*
    init_with: '(char*)"[unset-default_vertex_source_code]"'
    static: true
    constexpr: true

  - name: DEFAULT_FRAGMENT_SOURCE_CODE
    type: char*
    init_with: '(char*)"[unset-default_fragment_source_code]"'
    static: true
    constexpr: true

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/Shaders/Base"'
    static: true
    constexpr: true


documentation:


  - todo:
      - Consider removing "vertex_source_code" and "fragment_source_code" as constructor args


functions:


  - name: set_vertex_source_code
    parameters:
      - name: vertex_source_code
        type: std::string
        default_argument: DEFAULT_VERTEX_SOURCE_CODE
    guards: [ (!initialized) ]
    body: |
      // TODO: Test this
      this->vertex_source_code = vertex_source_code;
      return;


  - name: set_fragment_source_code
    parameters:
      - name: fragment_source_code
        type: std::string
        default_argument: DEFAULT_FRAGMENT_SOURCE_CODE
    guards: [ (!initialized) ]
    body: |
      // TODO: Test this
      this->fragment_source_code = fragment_source_code;
      return;


  - name: is_type
    type: bool
    parameters:
      - name: possible_type
        type: std::string
        default_argument: '""'
    body: |
      return (possible_type == get_type());


  - name: is_active
    type: bool
    body: |
      return (get_al_shader() == al_get_current_shader());
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: display_is_opengl
    type: bool
    static: true
    parameters:
      - name: display
        type: ALLEGRO_DISPLAY*
        default_argument: nullptr
    guards: [ display ]
    body: |
      // TODO: Test this
      return (ALLEGRO_OPENGL == (al_get_display_flags(display) & ALLEGRO_OPENGL));


  - name: display_is_programmable_pipeline
    type: bool
    static: true
    parameters:
      - name: display
        type: ALLEGRO_DISPLAY*
        default_argument: nullptr
    guards: [ display ]
    body: |
      // TODO: Test this
      return (ALLEGRO_PROGRAMMABLE_PIPELINE == (al_get_display_flags(display) & ALLEGRO_PROGRAMMABLE_PIPELINE));


  - name: initialize
    type: bool
    guards:
      - (!initialized)
      - al_is_system_installed()
      - al_get_current_display()
      - display_is_opengl(al_get_current_display())
      - display_is_programmable_pipeline(al_get_current_display())
    body: |
      al_shader = al_create_shader(ALLEGRO_SHADER_GLSL);
      if (!al_shader) throw std::runtime_error("Could not create Shader");
      attach_source_code();
      build();
      initialized = true;
      return true;


  - name: attach_source_code
    type: bool
    parameters:
      - name: throw_on_error
        type: bool
        default_argument: true
    guards: [ (!vertex_source_code_is_default()), (!fragment_source_code_is_default()) ]
    body: |
      if (!al_attach_shader_source(al_shader, ALLEGRO_VERTEX_SHADER, vertex_source_code.c_str()))
      {
         // TODO: Replace these messages with AllegroFlare::Logger::throw_from
         std::stringstream error_message;
         error_message << "There was an error attaching the VERTEX shader source code:"
            << std::endl << al_get_shader_log(al_shader);
         if (throw_on_error)
         {
            throw std::runtime_error(error_message.str());
         }
         else
         {
            // TODO: improve the formatting of this error message
            std::cout << error_message.str() << std::endl;
         }
      }

      if (!al_attach_shader_source(al_shader, ALLEGRO_PIXEL_SHADER, fragment_source_code.c_str()))
      {
         // TODO: Replace these messages with AllegroFlare::Logger::throw_from
         std::stringstream error_message;
         error_message << "There was an error attaching the FRAGMENT shader source code:"
            << std::endl << al_get_shader_log(al_shader);
         if (throw_on_error)
         {
            throw std::runtime_error(error_message.str());
         }
         else
         {
            // TODO: improve the formatting of this error message
            std::cout << error_message.str() << std::endl;
         }
      }

      return true;


  - name: build
    private: true
    body: |
      if (!al_build_shader(al_shader))
      {
         std::stringstream error_message;
         error_message << "There were errors when building the shader. The shader log contained the following message: "
                       << al_get_shader_log(al_shader);
         AllegroFlare::Logger::throw_error("AllegroFlare::Shaders::Base::build", error_message.str());
      }
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: destroy
    guards: [ initialized ]
    body: |
      // TODO: find a safer usage of this function.  Some examples
      //   - prevent function calls after destruction
      //   - find callers and besure destroy is called
      if (al_shader) al_destroy_shader(al_shader);


  - name: activate
    virtual: true
    guards: [ initialized ]
    body: |
      al_use_shader(al_shader);
      //set_values_to_activated_shader(); // TODO: <-- introduce this function here


  - name: deactivate
    virtual: true
    body: |
      al_use_shader(nullptr);


  - name: global_deactivate
    static: true
    body: |
      // NOTE: needed for one case in WickedDemos/SceneRenderer
      // TODO: please factor out this function
      al_use_shader(nullptr);


  - name: set_sampler
    static: true
    type: bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: bitmap
        type: ALLEGRO_BITMAP*
        default_argument: nullptr
      - name: unit
        type: int
        default_argument: 0
    body: |
      return al_set_shader_sampler(name.c_str(), bitmap, unit);


  - name: set_mat4
    static: true
    type: bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: transform
        type: ALLEGRO_TRANSFORM*
        default_argument: nullptr
    body: |
      return al_set_shader_matrix(name.c_str(), transform);


  - name: set_int
    static: true
    type: bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: value
        type: int
        default_argument: 0
    body: |
      return al_set_shader_int(name.c_str(), value);


  - name: set_float
    static: true
    type: bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: value
        type: float
        default_argument: 0.0f
    body: |
      return al_set_shader_float(name.c_str(), value);


  - name: set_bool
    static: true
    type: bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: value
        type: bool
        default_argument: false
    body: |
      return al_set_shader_bool(name.c_str(), value);


  - name: set_int2
    static: true
    type: bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: x
        type: int
        default_argument: 0
      - name: y
        type: int
        default_argument: 0
    body: |
      // TODO: Test that this works
      int vec2[2] = {x, y};
      return al_set_shader_int_vector(name.c_str(), 2, &vec2[0], 1);


  - name: set_int3
    static: true
    type: bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: x
        type: int
        default_argument: 0
      - name: y
        type: int
        default_argument: 0
      - name: z
        type: int
        default_argument: 0
    body: |
      // TODO: Test that this works
      int vec3[3] = {x, y, z};
      return al_set_shader_int_vector(name.c_str(), 3, &vec3[0], 1);


  - name: set_vec2
    static: true
    type: bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
    body: |
      float vec2[2] = {x, y};
      return al_set_shader_float_vector(name.c_str(), 2, &vec2[0], 1);


  - name: set_vec3
    static: true
    type: bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: z
        type: float
        default_argument: 0.0f
    body: |
      float vec3[3] = {x, y, z};
      return al_set_shader_float_vector(name.c_str(), 3, &vec3[0], 1);


  - name: set_vec3
    static: true
    type: bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: vec
        type: AllegroFlare::Vec3D
        default_argument: '{}'
    body: |
      return set_vec3(name.c_str(), vec.x, vec.y, vec.z);


  - name: set_vec4
    static: true
    type: bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: z
        type: float
        default_argument: 0.0f
      - name: a
        type: float
        default_argument: 0.0f
    body: |
      float vec4[4] = {x, y, z, a};
      return al_set_shader_float_vector(name.c_str(), 4, &vec4[0], 1);


  - name: set_sampler_cube
    static: true
    type: bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: cubemap
        type: AllegroFlare::Cubemap*
        default_argument: nullptr
      - name: unit
        type: int
        default_argument: 0
    body: |
      AllegroFlare::CubemapTextureBinder cubemap_texture_binder(name, cubemap, unit);
      return cubemap_texture_binder.bind();
    body_dependency_symbols:
      - AllegroFlare::CubemapTextureBinder


  - name: hotload
    parameters:
      - name: vertex_source_code
        type: std::string
        default_argument: '""'
      - name: fragment_source_code
        type: std::string
        default_argument: '""'
    guards: [ initialized ]
    body: |
      al_use_shader(nullptr); // TODO: only disable the shader if it is the currently active one. Restore otherwise
                              // TODO: consider doing the thing

      // Destroy our current shader
      // TODO: determine if the shader can actually be re-used
      if (al_shader)
      {
         al_destroy_shader(al_shader);
         al_shader = nullptr;
      }
      al_shader = al_create_shader(ALLEGRO_SHADER_GLSL);
      if (!al_shader) throw std::runtime_error("Could not create Shader");

      // set our local copy of the code
      this->vertex_source_code = vertex_source_code;
      this->fragment_source_code = fragment_source_code;

      // set our base copy of the code
      // TODO: after flattening AllegroFlare::Shader into AllegroFlare::Shaders::Base, this line should be removed
      //AllegroFlare::Shader::vertex_source_code = vertex_source_code;
      //AllegroFlare::Shader::fragment_source_code = fragment_source_code;

      attach_source_code(false);
      build();

      return;


  - name: vertex_source_code_is_default
    type: bool
    body: |
      // TODO: Test this method
      return vertex_source_code == DEFAULT_VERTEX_SOURCE_CODE;


  - name: fragment_source_code_is_default
    type: bool
    body: |
      // TODO: Test this method
      return fragment_source_code == DEFAULT_FRAGMENT_SOURCE_CODE;


dependencies:


  - symbol: ALLEGRO_SHADER
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_BITMAP
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_TRANSFORM
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Vec3D
    headers: [ AllegroFlare/Vec3D.hpp ]
  - symbol: AllegroFlare::Cubemap
    headers: [ AllegroFlare/Cubemap.hpp ]
  - symbol: AllegroFlare::CubemapTextureBinder
    headers: [ AllegroFlare/CubemapTextureBinder.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: ALLEGRO_DISPLAY
    headers: [ allegro5/allegro.h ]


