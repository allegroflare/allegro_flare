parent_classes:


  - class: AllegroFlare::Shaders::Base
    scope: public
    init_with: "AllegroFlare::Shaders::PostProcessing::DipToBlack::TYPE, obtain_vertex_source(), obtain_fragment_source()"


properties:


  - name: surface_width
    type: int
    init_with: 1920

  - name: surface_height
    type: int
    init_with: 1080

  - name: transition_playhead_position
    type: float
    init_with: 0.0f
    getter: true
    setter: false

  - name: color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{0, 0, 0, 1}
    getter: true
    setter: false

  - name: initialized
    type: bool
    init_with: false

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/Shaders/PostProcessing/DipToBlack"'
    static: true
    constexpr: true


functions:


  - name: initialize
    type: void
    body: |
      if (!initialized) AllegroFlare::Shaders::Base::initialize();
      initialized = true;


  - name: set_transition_playhead_position
    parameters:
      - name: transition_playhead_position
        type: float
        default_argument: 0.0f
    body: |
      transition_playhead_position = std::max(0.0f, std::min(1.0f, transition_playhead_position));
      this->transition_playhead_position = transition_playhead_position;
      // TODO: include this condition
      //if (this_is_the_currently_active_shader)
      //{
         set_float("transition_playhead_position", transition_playhead_position);
      //}
      return;
    body_dependency_symbols:
      - std::max
      - std::min


  - name: set_color
    parameters:
      - name: color
        type: ALLEGRO_COLOR
        default_argument: ALLEGRO_COLOR{0, 0, 0, 1}
    body: |
      this->color = color;
      // TODO: include this condition
      //if (this_is_the_currently_active_shader)
      //{
         set_vec3("color", color.r, color.g, color.b);
      //}
      return;
    body_dependency_symbols:
      - std::max
      - std::min


  - name: activate
    type: void
    guards: [ initialized ]
    body: |
      AllegroFlare::Shaders::Base::activate();
      set_vec2("surface_dimensions", surface_width, surface_height);
      set_float("transition_playhead_position", transition_playhead_position);
      set_vec3("color", color.r, color.g, color.b);


  - name: obtain_vertex_source
    type: std::string
    static: true
    private: true
    body: |
      static const std::string source = R"DELIM(
        attribute vec4 al_pos;
        attribute vec4 al_color;
        attribute vec2 al_texcoord;
        uniform mat4 al_projview_matrix;
        uniform bool al_use_tex_matrix;
        uniform mat4 al_tex_matrix;
        varying vec4 varying_color;
        varying vec2 varying_texcoord;

        void main()
        {
          varying_color = al_color;
          if (al_use_tex_matrix) {
            vec4 uv = al_tex_matrix * vec4(al_texcoord, 0, 1);
            varying_texcoord = vec2(uv.x, uv.y);
          }
          else
            varying_texcoord = al_texcoord;
          gl_Position = al_projview_matrix * al_pos;
        }
      )DELIM";
      return source;


  - name: obtain_fragment_source
    type: std::string
    static: true
    private: true
    body: |
      static const std::string source = R"DELIM(
        #ifdef GL_ES
        precision lowp float;
        #endif
        uniform sampler2D al_tex;
        uniform bool al_use_tex;
        uniform bool al_alpha_test;
        uniform int al_alpha_func;
        uniform float al_alpha_test_val;
        varying vec4 varying_color;
        varying vec2 varying_texcoord;
        uniform vec2 surface_dimensions;
        uniform float transition_playhead_position;
        uniform vec3 color;

        bool alpha_test_func(float x, int op, float compare);

        void main()
        {
          vec4 c;
          if (al_use_tex)
          {
             c = varying_color * texture2D(al_tex, varying_texcoord);
          }
          else
          {
             c = varying_color;
          }

          if (!al_alpha_test || alpha_test_func(c.a, al_alpha_func, al_alpha_test_val))
          {
            gl_FragColor = mix(c, vec4(color, 1), transition_playhead_position);
          }
          else
          {
            discard;
          }
        }

        bool alpha_test_func(float x, int op, float compare)
        {
          if (op == 0) return false;
          else if (op == 1) return true;
          else if (op == 2) return x < compare;
          else if (op == 3) return x == compare;
          else if (op == 4) return x <= compare;
          else if (op == 5) return x > compare;
          else if (op == 6) return x != compare;
          else if (op == 7) return x >= compare;
          return false;
        }
      )DELIM";
      return source;


dependencies:


  - symbol: AllegroFlare::Shaders::Base
    headers: [ AllegroFlare/Shaders/Base.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]


