parent_classes:


  - class: AllegroFlare::Shaders::Base
    scope: public
    init_with: "AllegroFlare::Shaders::Multitexture::TYPE, obtain_vertex_source(), obtain_fragment_source()"


properties:


  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/Shaders/Multitexture"'
    static: true
    constexpr: true

  - name: initialized
    type: bool
    init_with: false


functions:


  - name: initialize
    type: void
    body: |
      if (!initialized) AllegroFlare::Shaders::Base::initialize();
      initialized = true;


  - name: activate
    type: void
    guards: [ initialized ]
    body: |
      AllegroFlare::Shaders::Base::activate();
      set_values_to_activated_shader();


  - name: set_values_to_activated_shader
    private: true
    body: |
      // TODO: set values
      //set_sampler_cube("cube_map_A", cube_map, 5); // ?? why 5? dunno
      //set_vec3("camera_position", camera_position);
      //set_mat4("position_transform", &object_placement_transform);
      //set_bool("reflecting", reflecting);
      return;


  - name: obtain_vertex_source
    type: std::string
    static: true
    private: true
    body: |
      static const std::string source = R"DELIM(
        attribute vec4 al_pos;
        attribute vec4 al_color;
        attribute vec2 al_texcoord;
        uniform mat4 al_projview_matrix;
        uniform bool al_use_tex_matrix;
        uniform mat4 al_tex_matrix;
        varying vec4 varying_color;
        varying vec2 varying_texcoord_1;
        void main()
        {
          varying_color = al_color;
          if (al_use_tex_matrix) {
            vec4 uv1 = al_tex_matrix * vec4(al_texcoord, 0, 1);
            varying_texcoord_1 = vec2(uv1.x, uv1.y);
          }
          else
            varying_texcoord_1 = al_texcoord;
          gl_Position = al_projview_matrix * al_pos;
        }
      )DELIM";
      return source;


  - name: obtain_fragment_source
    type: std::string
    static: true
    private: true
    body: |
      static const std::string source = R"DELIM(
        #ifdef GL_ES
        precision lowp float;
        #endif
        uniform sampler2D al_tex;
        uniform bool al_use_tex;
        uniform bool al_alpha_test;
        uniform int al_alpha_func;
        uniform float al_alpha_test_val;
        varying vec4 varying_color;
        varying vec2 varying_texcoord_1;

        bool alpha_test_func(float x, int op, float compare);

        void main()
        {
          vec4 c;
          if (al_use_tex)
            c = varying_color * texture2D(al_tex, varying_texcoord_1);
          else
            c = varying_color;
          if (!al_alpha_test || alpha_test_func(c.a, al_alpha_func, al_alpha_test_val))
            gl_FragColor = c;
          else
            discard;
        }

        bool alpha_test_func(float x, int op, float compare)
        {
          if (op == 0) return false;
          else if (op == 1) return true;
          else if (op == 2) return x < compare;
          else if (op == 3) return x == compare;
          else if (op == 4) return x <= compare;
          else if (op == 5) return x > compare;
          else if (op == 6) return x != compare;
          else if (op == 7) return x >= compare;
          return false;
        }
      )DELIM";
      return source;


dependencies:


  - symbol: AllegroFlare::Shaders::Base
    headers: [ AllegroFlare/Shaders/Base.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]


