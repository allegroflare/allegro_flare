properties:


  - name: collided_tile_coordinate
    type: AllegroFlare::Physics::Int2D
    init_with: '{ -1, -1 }'
    constructor_arg: true
    getter: true
    setter: true

  - name: tile_value
    type: int
    init_with: 0
    constructor_arg: true
    getter: true
    setter: true

  - name: collision_velocity_x
    type: float
    init_with: 0
    constructor_arg: true
    getter: true
    setter: true
    
  - name: collision_velocity_y
    type: float
    init_with: 0
    constructor_arg: true
    getter: true
    setter: true

  - name: stopped_by_this_collision
    type: bool
    init_with: false
    constructor_arg: true
    getter: true
    setter: true

  - name: event
    type: int
    init_with: EVENT_UNDEFINED
    constructor_arg: true
    getter: true
    setter: true

  - name: collided_against_block_edge
    type: AllegroFlare::Physics::TileMapCollisionStepperCollisionInfo::CollidingBlockEdge
    init_with: CollidingBlockEdge::EDGE_UNDEFINED
    constructor_arg: true
    getter: true
    setter: true

  - name: EVENT_UNDEFINED
    constexpr: true
    static: true
    type: int
    init_with: 1

  - name: EVENT_ENTERED
    constexpr: true
    static: true
    type: int
    init_with: 2

  - name: EVENT_EXITED
    constexpr: true
    static: true
    type: int
    init_with: 3

  - name: EVENT_COLLIDED_AGAINST
    constexpr: true
    static: true
    type: int
    init_with: 4

  - name: EVENT_STAYED_ON
    constexpr: true
    static: true
    type: int
    init_with: 5


enums:


  - name: CollidingBlockEdge
    scope: public
    enumerators:
      - EDGE_UNDEFINED
      - EDGE_TOP
      - EDGE_RIGHT
      - EDGE_BOTTOM
      - EDGE_LEFT


documentation:


  - todos:
      - Sort member variables into a better order. Note that the constructor argument order may be a thing in
        the callers.


functions:


  - name: is_tile_value
    type: bool
    parameters:
      - name: tile_value
        type: int
        default_argument: -999
    body: |
      return this->tile_value == tile_value;


  - name: is_event
    type: bool
    parameters:
      - name: event
        type: int
        default_argument: EVENT_UNDEFINED
    body: |
      return this->event == event;


  - name: infer_is_a_ground_land
    type: bool
    body: |
      return (stopped_by_this_collision && event == EVENT_COLLIDED_AGAINST && collided_against_block_edge == EDGE_TOP);


  - name: build_event_name
    static: true
    type: std::string
    parameters:
      - name: event
        type: int
        default_argument: 0
    body: |
      switch(event)
      {
         case EVENT_UNDEFINED:
            return "undefined";
         break;

         case EVENT_ENTERED:
            return "entered";
         break;

         case EVENT_EXITED:
            return "exited";
         break;

         case EVENT_COLLIDED_AGAINST:
            return "collided_against";
         break;

         case EVENT_STAYED_ON:
            return "stayed_on";
         break;
      }
      return "[build_event_name-error_value]";


  - name: collided_block_edge_is_left_edge
    type: bool
    body: |
      return (collided_against_block_edge == EDGE_LEFT);


  - name: collided_block_edge_is_right_edge
    type: bool
    body: |
      return (collided_against_block_edge == EDGE_RIGHT);


  - name: collided_block_edge_is_top_edge
    type: bool
    body: |
      return (collided_against_block_edge == EDGE_TOP);


  - name: collided_block_edge_is_bottom_edge
    type: bool
    body: |
      return (collided_against_block_edge == EDGE_BOTTOM);


  - name: build_collided_block_edge_name
    static: true
    type: std::string
    parameters:
      - name: event
        type: AllegroFlare::Physics::TileMapCollisionStepperCollisionInfo::CollidingBlockEdge
        default_argument: CollidingBlockEdge::EDGE_UNDEFINED
    body: |
      switch(event)
      {
         case EDGE_UNDEFINED:
            return "undefined_edge";
         break;

         case EDGE_TOP:
            return "top_edge";
         break;

         case EDGE_RIGHT:
            return "right_edge";
         break;

         case EDGE_BOTTOM:
            return "bottom_edge";
         break;

         case EDGE_LEFT:
            return "left_edge";
         break;
      }
      return "[build_collided_block_edge_name_name-error_value]";


dependencies:


  - symbol: AllegroFlare::Physics::Int2D
    headers: [ AllegroFlare/Physics/Int2D.hpp ]
  - symbol: AllegroFlare::Physics::TileMapCollisionStepperCollisionInfo::CollidingBlockEdge
    headers: [ AllegroFlare/Physics/TileMapCollisionStepperCollisionInfo.hpp ]


