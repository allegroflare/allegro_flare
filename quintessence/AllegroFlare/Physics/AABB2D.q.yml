properties:


  - name: x
    type: float
    init_with: 0.0f
    getter: true
    setter: true
    constructor_arg: true

  - name: y
    type: float
    init_with: 0.0f
    getter: true
    setter: true
    constructor_arg: true

  - name: w
    type: float
    init_with: 0.0f
    getter: true
    setter: true
    constructor_arg: true
    
  - name: h
    type: float
    init_with: 0.0f
    getter: true
    setter: true
    constructor_arg: true

  - name: velocity_x
    type: float
    init_with: 0.0f
    getter: true
    setter: true
    constructor_arg: true
    
  - name: velocity_y
    type: float
    init_with: 0.0f
    getter: true
    setter: true
    constructor_arg: true
    

functions:


  - name: get_left_edge
    type: float
    body: |
      return x;


  - name: get_right_edge
    type: float
    body: |
      return x + w;


  - name: get_top_edge
    type: float
    body: |
      return y;


  - name: get_bottom_edge
    type: float
    body: |
      return y + h;


  - name: set_left_edge
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
    body: |
      this->x = x;
      return;


  - name: set_right_edge
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
    body: |
      this->x = x - w;
      return;


  - name: set_top_edge
    parameters:
      - name: y
        type: float
        default_argument: 0.0f
    body: |
      this->y = y;
      return;


  - name: set_bottom_edge
    parameters:
      - name: y
        type: float
        default_argument: 0.0f
    body: |
      this->y = y - h;
      return;


  - name: collides
    type: bool
    parameters:
      - name: other
        type: AllegroFlare::Physics::AABB2D*
        default_argument: nullptr
      - name: self_offset
        type: AllegroFlare::Vec2D
        default_argument: AllegroFlare::Vec2D()
      - name: other_offset
        type: AllegroFlare::Vec2D
        default_argument: AllegroFlare::Vec2D()
    guards: [ other ]
    body: |
      // TODO: consider less assignment, add values directly into the conditional

      AllegroFlare::Vec2D a_min = AllegroFlare::Vec2D(x, y) + self_offset;
      AllegroFlare::Vec2D a_max = AllegroFlare::Vec2D(x+w, y+h) + self_offset;
      AllegroFlare::Vec2D b_min = AllegroFlare::Vec2D(other->x, other->y) + other_offset;
      AllegroFlare::Vec2D b_max = AllegroFlare::Vec2D(other->x + other->w, other->y + other->h) + other_offset;

      return (
         a_min.x <= b_max.x &&
         a_max.x >= b_min.x &&
         a_min.y <= b_max.y &&
         a_max.y >= b_min.y
      );


dependencies:


  - symbol: AllegroFlare::Physics::AABB2D
    headers: [ AllegroFlare/Physics/AABB2D.hpp ]
  - symbol: AllegroFlare::Vec2D
    headers: [ AllegroFlare/Vec2D.hpp ]


