parent_classes:


  - class: AllegroFlare::Screens::Base
    scope: public
    init_with: '"CharacterNameInput"'


properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: software_keyboard
    type: AllegroFlare::SoftwareKeyboard::SoftwareKeyboard
    constructor_arg: true
    init_with: '{}'

  - name: mode
    type: int
    init_with: MODE_USING_VIRTUAL_CONTROLS

  - name: initialized
    type: bool
    init_with: false

  - name: MODE_USING_VIRTUAL_CONTROLS
    type: int
    static: true
    constexpr: true
    init_with: 1

  - name: MODE_USING_KEYBOARD
    type: int
    static: true
    constexpr: true
    init_with: 2


functions:


  - name: initialize
    guards: [ (!initialized), event_emitter, font_bin ]
    body: |
      software_keyboard.set_event_emitter(event_emitter);
      software_keyboard.set_font_bin(font_bin);
      software_keyboard.initialize();
      software_keyboard.set_keys(AllegroFlare::SoftwareKeyboard::SoftwareKeyboard::build_boilerplate_keyboard_keys());
      AllegroFlare::Vec2D keyboard_dimentions =
      AllegroFlare::SoftwareKeyboard::SoftwareKeyboard::calculate_boilerplate_keyboard_dimentions();
      software_keyboard.set_keyboard_dimentions(keyboard_dimentions.x, keyboard_dimentions.y);
      software_keyboard.set_keyboard_position(1920/2, 1080/12*7 + 20);
      initialized = true;
      return;


  - name: on_activate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      software_keyboard.reset();
      return;


  - name: primary_timer_func
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      render();
      return;


  - name: mode_is_using_keyboard
    type: bool
    body: |
      return mode == MODE_USING_KEYBOARD;


  - name: mode_is_using_virtual_controls
    type: bool
    body: |
      return mode == MODE_USING_VIRTUAL_CONTROLS;


  - name: set_mode_to_using_keyboard
    body: |
      mode = MODE_USING_KEYBOARD;
      return;


  - name: set_mode_to_using_virtual_controls
    body: |
      mode = MODE_USING_VIRTUAL_CONTROLS;
      return;


  - name: virtual_control_button_down_func
    virtual: true
    override: true
    parameters:
      - name: player_num
        type: int
        default_argument: 0
      - name: button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: 'false'
    guards: [ initialized ]
    body: |
      if (mode != MODE_USING_VIRTUAL_CONTROLS) return;

      switch(button_num)
      {
         case AllegroFlare::VirtualControls::BUTTON_UP:
            software_keyboard.move_cursor_up();
         break;

         case AllegroFlare::VirtualControls::BUTTON_DOWN:
            software_keyboard.move_cursor_down();
         break;

         case AllegroFlare::VirtualControls::BUTTON_LEFT:
            software_keyboard.decrement_cursor_pos();
         break;

         case AllegroFlare::VirtualControls::BUTTON_RIGHT:
            software_keyboard.increment_cursor_pos();
         break;

         case AllegroFlare::VirtualControls::BUTTON_A:
            software_keyboard.press_key_under_cursor();
         break;

         case AllegroFlare::VirtualControls::BUTTON_X:
            software_keyboard.press_key_by_name("BACKSPACE");
         break;
      }

      return;
    body_dependency_symbols:
      - "AllegroFlare:::VirtualControls::"


  - name: key_char_func
    virtual: true
    override: true
    parameters:
      - name: event
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized, event ]
    body: |
      if (mode != MODE_USING_KEYBOARD) return;

      switch(event->keyboard.keycode)
      {
         case ALLEGRO_KEY_UP:
            software_keyboard.move_cursor_up();
         break;

         case ALLEGRO_KEY_DOWN:
            software_keyboard.move_cursor_down();
         break;

         case ALLEGRO_KEY_RIGHT:
            software_keyboard.increment_cursor_pos();
         break;

         case ALLEGRO_KEY_LEFT:
            software_keyboard.decrement_cursor_pos();
         break;

         case ALLEGRO_KEY_ENTER:
            {
               bool shift = (event->keyboard.modifiers & ALLEGRO_KEYMOD_SHIFT);
               if (shift) { software_keyboard.press_key_by_name("OK"); }
               else { software_keyboard.press_key_under_cursor(); }
            }
         break;

         case ALLEGRO_KEY_BACKSPACE:
            software_keyboard.press_key_by_name("BACKSPACE");
         break;

         case ALLEGRO_KEY_SPACE:
            software_keyboard.press_key_by_name("SPACE");
         break;

         default:
            std::string s(1, event->keyboard.unichar);
            software_keyboard.press_key_by_name(s);
         break;
      }
      return;


  - name: render
    guards: [ initialized ]
    body: |
      software_keyboard.render();
      return;


dependencies:


  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::SoftwareKeyboard::SoftwareKeyboard
    headers: [ AllegroFlare/SoftwareKeyboard/SoftwareKeyboard.hpp ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: "AllegroFlare:::VirtualControls::"
    headers: [ AllegroFlare/VirtualControls.hpp ]


