properties:


  - name: DEFAULT_DATA_FOLDER_PATH
    type: char*
    init_with: '(char*)"[unset-data_folder_path]"'
    static: true
    constexpr: true

  - name: RESUME_PAUSED_GAMEPLAY_EVENT_NAME
    type: char*
    init_with: '(char*)"resume_suspended_gameplay"'
    static: true
    constexpr: true

  - name: EXIT_TO_TITLE_SCREEN_EVENT_NAME
    type: char*
    init_with: '(char*)"exit_to_title_screen"'
    static: true
    constexpr: true


methods:


  - name: create_standard_pause_screen
    static: true
    type: AllegroFlare::Screens::TitledMenuScreen*
    parameters:
      - name: data_folder_path
        type: std::string
        default_argument: DEFAULT_DATA_FOLDER_PATH
      - name: footer_text_probably_game_name_and_version
        type: std::string
        default_argument: '""'
    guards: [ (data_folder_path != DEFAULT_DATA_FOLDER_PATH) ]
    body: |
      AllegroFlare::Screens::TitledMenuScreen* result = new AllegroFlare::Screens::TitledMenuScreen(data_folder_path);

      // Title
      result->set_title_text("PAUSED");

      // Footer
      result->set_footer_text(footer_text_probably_game_name_and_version);

      // Menus
      result->set_menu_options({
         { "Resume", RESUME_PAUSED_GAMEPLAY_EVENT_NAME },
         { "Exit to Title Screen", EXIT_TO_TITLE_SCREEN_EVENT_NAME },
      });
      result->set_show_triangle_cursor(true);

      // Pause screen menu should be usable instantly with no delay
      // TODO: Test this
      result->set_reveal_duration(0.0);

      // Unpausing should occour instantly
      // TODO: Test this
      result->set_menu_option_chosen_to_activation_delay(0.0);

      // Menu Font
      result->set_menu_font_name("RobotoCondensed-Regular.ttf");

      result->initialize();

      return result;
    body_dependency_symbols:
      - AllegroFlare::Screens::TitledMenuScreen


  - name: create_standard_title_screen
    static: true
    type: AllegroFlare::Screens::TitledMenuScreen*
    parameters:
      - name: data_folder_path
        type: std::string
        default_argument: DEFAULT_DATA_FOLDER_PATH
      - name: game_title
        type: std::string
        default_argument: '""'
      - name: footer_text_probably_copyright_game_name_and_version
        type: std::string
        default_argument: '""'
    guards: [ (data_folder_path != DEFAULT_DATA_FOLDER_PATH) ]
    body: |
      AllegroFlare::Screens::TitledMenuScreen* result = new AllegroFlare::Screens::TitledMenuScreen(data_folder_path);

      // Title
      result->set_title_text(game_title);

      // Footer
      result->set_footer_text(footer_text_probably_copyright_game_name_and_version);

      // Menus
      result->set_menu_options({
         { "Start new game", "start_new_game" }, // NOTE: This value is a constant expected by Routers/Complete
         { "Credits", "goto_credits_screen" }, // NOTE: This value is a constant expected by Routers/Complete
         { "Exit", "quit" } // NOTE: This value is a constant expected by Routers/Complete
      });

      // Menu Font
      result->set_menu_font_name("RobotoCondensed-Regular.ttf");

      result->initialize();

      return result;
    body_dependency_symbols:
      - AllegroFlare::Screens::TitledMenuScreen


  - name: create_standard_game_won_screen
    static: true
    type: AllegroFlare::Screens::TitledMenuScreen*
    parameters:
      - name: data_folder_path
        type: std::string
        default_argument: DEFAULT_DATA_FOLDER_PATH
      - name: title_text
        type: std::string
        default_argument: '"YOU WIN"'
    guards: [ (data_folder_path != DEFAULT_DATA_FOLDER_PATH) ]
    body: |
      // Some options could be "YOU WIN", "GAME OVER", "THANK YOU FOR PLAYING"
      AllegroFlare::Screens::TitledMenuScreen* result = new AllegroFlare::Screens::TitledMenuScreen(data_folder_path);

      // Title
      result->set_title_text("YOU WIN");
      result->set_title_position_y(1080 / 14 * 6);

      // Footer
      result->set_footer_text(""); // Consider adding "clear_footer_text"

      // Menus
      result->clear_menu_options();

      // Empty state text
      //title_screen.set_upcase_empty_state_text(true);
      result->set_empty_state_text(""); // Consider adding "
      result->set_empty_state_text_font_name("RobotoCondensed-Regular.ttf");

      result->initialize();

      return result;
    body_dependency_symbols:
      - AllegroFlare::Screens::TitledMenuScreen


  - name: create_standard_game_over_screen
    static: true
    type: AllegroFlare::Screens::TitledMenuScreen*
    parameters:
      - name: data_folder_path
        type: std::string
        default_argument: DEFAULT_DATA_FOLDER_PATH
    guards: [ (data_folder_path != DEFAULT_DATA_FOLDER_PATH) ]
    body: |
      AllegroFlare::Screens::TitledMenuScreen* result = new AllegroFlare::Screens::TitledMenuScreen(data_folder_path);

      // Title
      result->set_title_text("GAME OVER");

      // Footer
      result->set_footer_text(""); // Consider adding "clear_footer_text"

      // Menus
      result->clear_menu_options();

      // Empty state text
      result->set_upcase_empty_state_text(true);
      result->set_empty_state_text("Press any key to continue");
      result->set_empty_state_text_font_name("RobotoCondensed-Regular.ttf");

      result->initialize();

      return result;
    body_dependency_symbols:
      - AllegroFlare::Screens::TitledMenuScreen


dependencies:


  - symbol: AllegroFlare::Screens::TitledMenuScreen
    headers: [ AllegroFlare/Screens/TitledMenuScreen.hpp ]


