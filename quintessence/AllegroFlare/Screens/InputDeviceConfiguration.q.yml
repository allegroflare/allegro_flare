parent_classes:


  - class: AllegroFlare::Screens::Base
    scope: public
    init_with: AllegroFlare::Screens::InputDeviceConfiguration::TYPE


properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true
    setter: false

  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    setter: false

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    setter: false

  - name: surface_width
    type: std::size_t
    init_with: 1920
    constructor_arg: true
    getter: true
    setter: true

  - name: surface_height
    type: std::size_t
    init_with: 1090
    constructor_arg: true
    getter: true
    setter: true

  - name: on_exit_callback_func
    type: std::function<void(AllegroFlare::Screens::InputDeviceConfiguration*, void*)>
    init_with: ''
    getter: true
    setter: true

  - name: on_exit_callback_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: input_devices_list
    type: AllegroFlare::InputDevicesList*
    constructor_arg: true
    init_with: nullptr
    setter: false

  - name: input_devices_list_element
    type: AllegroFlare::Elements::InputDevicesList
    init_with: ''
    getter_ref: true

  - name: input_device_configuration_element
    type: AllegroFlare::Elements::InputDeviceConfigurationList
    init_with: ''
    getter_ref: true

  - name: initialized
    type: bool
    init_with: false

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/Screens/InputDeviceConfiguration"'
    static: true
    constexpr: true


documentation:


  - todos:
      - Add an "exit screen" command
      - Add a "reset to default" option
      - Remove redundant self-dependent AllegroFlare/Screens/Achievements dependency
    


functions:


  - name: set_event_emitter
    guards: [ (!initialized) ]
    parameters:
      - name: event_emitter
        type: AllegroFlare::EventEmitter*
        default_argument: nullptr
    body: |
      this->event_emitter = event_emitter;
      return;


  - name: set_bitmap_bin
    guards: [ (!initialized) ]
    parameters:
      - name: bitmap_bin
        type: AllegroFlare::BitmapBin*
        default_argument: nullptr
    body: |
      this->bitmap_bin = bitmap_bin;
      return;


  - name: set_font_bin
    guards: [ (!initialized) ]
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
    body: |
      input_device_configuration_element.set_font_bin(font_bin);
      input_devices_list_element.set_font_bin(font_bin);
      this->font_bin = font_bin;
      return;


  - name: set_input_devices_list
    guards: [ (!initialized) ]
    parameters:
      - name: input_devices_list
        type: AllegroFlare::InputDevicesList*
        default_argument: nullptr
    body: |
      this->input_devices_list = input_devices_list;
      return;


  - name: initialize
    guards:
      - (!initialized)
      - al_is_system_installed()
      - al_is_primitives_addon_initialized()
      - al_is_font_addon_initialized()
      - event_emitter
      - bitmap_bin
      - font_bin
    body: |
      input_device_configuration_element.initialize();
      input_devices_list_element.initialize();

      initialized = true;
      return;
    body_dependency_symbols:
      - al_is_primitives_addon_initialized


  - name: on_activate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      //emit_event_to_update_input_hints_bar();
      //emit_show_and_size_input_hints_bar_event();
      return;


  - name: on_deactivate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      //emit_hide_and_restore_size_input_hints_bar_event();
      return;


  - name: update
    body: |
      input_device_configuration_element.update();
      return;


  - name: render
    body: |
      input_device_configuration_element.render();
      return;


  - name: primary_timer_func
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      update();
      render();
      return;


  - name: call_on_exit_callback
    private: true
    body: |
      // TODO: Test this callback
      if (on_exit_callback_func) on_exit_callback_func(this, on_exit_callback_func_user_data);
      return;


  - name: virtual_control_button_up_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      // TODO: consider if this function needs implementing
      return;


  - name: virtual_control_button_down_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      // TODO: Have this function account for state of the input_device_configuration_element
      switch(virtual_controller_button_num)
      {
         case AllegroFlare::VirtualControllers::GenericController::BUTTON_UP:
            input_device_configuration_element.move_cursor_up();
         break;

         case AllegroFlare::VirtualControllers::GenericController::BUTTON_DOWN:
            input_device_configuration_element.move_cursor_down();
         break;

         default:
            call_on_exit_callback(); // TODO: Set conditions when then is permitted and/or blocked (for example, when
                                     // in the middle of remapping a device
         break;
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::VirtualControllers::GenericController


  - name: virtual_control_axis_change_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      // TODO: this function
      return;


dependencies:


  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]
  - symbol: AllegroFlare::SampleBin
    headers: [ AllegroFlare/SampleBin.hpp ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Elements::InputDeviceConfigurationList
    headers: [ AllegroFlare/Elements/InputDeviceConfigurationList.hpp ]
  - symbol: AllegroFlare::Player
    headers: [ AllegroFlare/Player.hpp ]
  - symbol: AllegroFlare::VirtualControllers::Base
    headers: [ AllegroFlare/VirtualControllers/Base.hpp ]
  - symbol: AllegroFlare::VirtualControllers::GenericController
    headers: [ AllegroFlare/VirtualControllers/GenericController.hpp ]
  - symbol: AllegroFlare::InputDevicesList
    headers: [ AllegroFlare/InputDevicesList.hpp ]
  - symbol: AllegroFlare::Elements::InputDevicesList
    headers: [ AllegroFlare/Elements/InputDevicesList.hpp ]
  - symbol: AllegroFlare::Screens::InputDeviceConfiguration
    headers: [ AllegroFlare/Screens/InputDeviceConfiguration.hpp ]


