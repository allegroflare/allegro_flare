parent_classes:


  - class: AllegroFlare::Screens::Base
    scope: public
    init_with: '"PauseScreen"'


properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: title_text
    type: std::string
    init_with: '"GAME PAUSED"'
    constructor_arg: true
    getter: true
    setter: true

  - name: footer_text
    type: std::string
    init_with: '"version 0.1"'
    constructor_arg: true
    getter: true
    setter: true

  - name: background_bitmap_name
    type: std::string
    init_with: '""'
    constructor_arg: true
    getter: true
    setter: true

  - name: title_bitmap_name
    type: std::string
    init_with: '""'
    constructor_arg: true
    getter: true
    setter: true

  - name: font_name
    type: std::string
    init_with: '"Inter-Medium.ttf"'
    constructor_arg: true
    getter: true
    setter: true

  - name: title_text_color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{1, 1, 1, 1}
    constructor_arg: true
    getter: true
    setter: true

  - name: menu_text_color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{1, 1, 1, 1}
    constructor_arg: true
    getter: true
    setter: true

  - name: menu_selector_color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{1, 1, 1, 1}
    constructor_arg: true
    getter: true
    setter: true

  - name: footer_text_color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{0.2, 0.2, 0.25, 1.0}
    constructor_arg: true
    getter: true
    setter: true

  - name: title_font_size
    type: int
    init_with: -70
    constructor_arg: true
    getter: true
    setter: true

  - name: menu_font_size
    type: int
    init_with: -30
    constructor_arg: true
    getter: true
    setter: true

  - name: footer_font_size
    type: int
    init_with: -28
    constructor_arg: true
    getter: true
    setter: true

  - name: menu_options
    type: std::vector<std::pair<std::string, std::string>>
    init_with: 'build_default_menu_options()'
    getter: true

  - name: cursor_position
    type: int
    init_with: 0
    getter: true

  - name: title_menu_gutter
    type: float
    init_with: 80
    getter: true
    setter: true


functions:


  - name: on_activate
    virtual: true
    override: true
    body: |
      cursor_position = 0;
      return;


  - name: set_menu_options
    parameters:
      - name: menu_options
        type: std::vector<std::pair<std::string, std::string>>
        default_argument: '{}'
    body: |
      this->menu_options = menu_options;
      cursor_position = 0;
      return;


  - name: move_cursor_up
    private: true
    body: |
      if (menu_is_empty()) return;

      cursor_position--;
      if (cursor_position < 0) cursor_position += menu_options.size();
      return;


  - name: move_cursor_down
    private: true
    body: |
      if (menu_is_empty()) return;

      cursor_position++;
      if (cursor_position >= menu_options.size()) cursor_position = cursor_position % menu_options.size();
      return;


  - name: activate_menu_option
    virtual: true
    parameters:
      - name: menu_option_name
        type: std::string
        default_argument: '"[unset-menu-option-name]"'
    body: |
      event_emitter->emit_game_event(menu_option_name);


  - name: select_menu_option
    private: true
    guards: [ event_emitter ]
    body: |
      if (menu_is_empty())
      {
         std::cout <<
            "[AllegroFlare::Screens::TitleScreen::select_menu_option()] error: can not select a menu item, "
            "the menu is empty."
            << std::endl;
         return;
      }

      std::string current_menu_option_value = infer_current_menu_option_value();

      activate_menu_option(current_menu_option_value);

      return;
    body_dependency_symbols:
      - ALLEGRO_FLARE_EVENT_START_NEW_GAME


  - name: primary_timer_func
    virtual: true
    override: true
    body: |
      render();
      return;


  - name: render
    guards: [ al_is_system_installed(), al_is_font_addon_initialized() ]
    body: |
      draw_background();
      draw_title();
      draw_footer_text();
      draw_menu();
      return;


  - name: draw_background
    body: |
      if (background_bitmap_name.empty()) return;
      ALLEGRO_BITMAP *background = obtain_background_bitmap();
      if (!background) return;

      al_draw_scaled_bitmap(background,
         0, 0, al_get_bitmap_width(background), al_get_bitmap_height(background),
         0, 0, 1920, 1080, 0);

      return;


  - name: draw_title
    body: |
      int surface_width = 1920;
      int surface_height = 1080;

      float title_x = surface_width/2;
      float title_y = surface_height/2 - title_menu_gutter/2;

      if (!title_bitmap_name.empty())
      {
         ALLEGRO_BITMAP *title_bitmap = obtain_title_bitmap();
         if (title_bitmap)
         {
            AllegroFlare::Placement2D place;
            place.position.x = title_x;
            place.position.y = title_y;
            place.size.x = al_get_bitmap_width(title_bitmap);
            place.size.y = al_get_bitmap_height(title_bitmap);
            place.align.y = 1.0f;

            place.start_transform();
            al_draw_bitmap(title_bitmap, 0, 0, 0);
            place.restore_transform();
         }
      }
      else if (!title_text.empty())
      {
         // TODO: review guards on this function
         ALLEGRO_FONT *title_font = obtain_title_font();
         al_draw_text(
            title_font,
            title_text_color, //ALLEGRO_COLOR{1, 1, 1, 1},
            title_x,
            title_y - al_get_font_line_height(title_font), // / 2,
            ALLEGRO_ALIGN_CENTER,
            get_title_text().c_str()
         );
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::Placement2D


  - name: draw_footer_text
    body: |
      // TODO: review guards on this function
      ALLEGRO_FONT *footer_font = obtain_footer_font();
      int surface_width = 1920;
      int surface_height = 1080;
      al_draw_text(
         footer_font,
         footer_text_color, //ALLEGRO_COLOR{1, 1, 1, 1},
         surface_width / 2,
         surface_height - 100,
         ALLEGRO_ALIGN_CENTER,
         get_footer_text().c_str()
      );
      return;


  - name: draw_menu
    guards: [ al_is_primitives_addon_initialized() ]
    body: |
      // TODO: review guards on this function
      ALLEGRO_FONT *menu_font = obtain_menu_font();
      int surface_width = 1920;
      int surface_height = 1080;
      float h_font_line_height = (int)(al_get_font_line_height(menu_font) * 0.5f);
      float menu_item_vertical_spacing = (int)(al_get_font_line_height(menu_font) * 1.25f);
      float h_menu_item_vertical_spacing = (int)(al_get_font_line_height(menu_font) * 1.25f);
      int menu_item_num = 0;

      float menu_x = surface_width/2;
      float menu_y = surface_height/2 + title_menu_gutter / 2; //surface_height/6;

      // get longest menu option text length
      int longest_menu_option_text_width = 0;
      for (auto &menu_option : menu_options)
      {
         std::string menu_item_text = std::get<0>(menu_option);
         int this_menu_item_text_width = al_get_text_width(menu_font, menu_item_text.c_str());
         if (this_menu_item_text_width > longest_menu_option_text_width)
            longest_menu_option_text_width = this_menu_item_text_width;
      }

      // render each menu item
      for (auto &menu_option : menu_options)
      {
         bool showing_cursor_on_this_option = false;
         if (menu_item_num == cursor_position) showing_cursor_on_this_option = true;
         std::string menu_item_text = std::get<0>(menu_option);

         ALLEGRO_COLOR this_menu_text_color = showing_cursor_on_this_option
            ? ALLEGRO_COLOR{0, 0, 0, 1.0} : menu_text_color;

         float x = menu_x;
         float y = menu_y + menu_item_vertical_spacing * menu_item_num;

         if (showing_cursor_on_this_option)
         {
            float box_width = longest_menu_option_text_width + 48;
            float box_height = al_get_font_line_height(menu_font) + 6;
            float h_box_width = box_width * 0.5;
            float h_box_height = box_height * 0.5;
            al_draw_filled_rectangle(x-h_box_width, y-h_box_height, x+h_box_width, y+h_box_height, menu_selector_color);
         }

         al_draw_text(
            menu_font,
            this_menu_text_color,
            (int)x,
            (int)(y-h_font_line_height),
            ALLEGRO_ALIGN_CENTER,
            menu_item_text.c_str()
         );

         menu_item_num++;
      }
      return;
    body_dependency_symbols:
      - al_draw_filled_rectangle
      - al_is_primitives_addon_initialized


  - name: infer_current_menu_option_value
    private: true
    type: std::string
    body: |
      if (menu_options.empty()) return "";
      if (cursor_position < 0 || cursor_position >= menu_options.size())
      {
         throw std::runtime_error("[AllegroFlare/Screens/TitleScreen]: error: cursor_position is not in "
                                  "a valid position to get the current menu choice's value.");
      }
      std::string current_menu_option_value = std::get<1>(menu_options[cursor_position]);
      return current_menu_option_value;


  - name: infer_current_menu_option_label
    private: true
    type: std::string
    body: |
      if (menu_options.empty()) return "";
      if (cursor_position < 0 || cursor_position >= menu_options.size())
      {
         throw std::runtime_error("[AllegroFlare/Screens/TitleScreen]: error: cursor_position is not in "
                                  "a valid position to get the current menu choice's label.");
      }
      std::string current_menu_option_value = std::get<1>(menu_options[cursor_position]);
      return current_menu_option_value;


  - name: obtain_title_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      std::stringstream composite_font_str;
      composite_font_str << font_name << " " << title_font_size;
      return font_bin->auto_get(composite_font_str.str());


  - name: obtain_menu_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      std::stringstream composite_font_str;
      composite_font_str << font_name << " " << menu_font_size;
      return font_bin->auto_get(composite_font_str.str());


  - name: obtain_footer_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      std::stringstream composite_font_str;
      composite_font_str << font_name << " " << footer_font_size;
      return font_bin->auto_get(composite_font_str.str());


  - name: obtain_background_bitmap
    private: true
    type: ALLEGRO_BITMAP*
    guards: [ bitmap_bin ]
    body: |
      return bitmap_bin->auto_get(background_bitmap_name);


  - name: obtain_title_bitmap
    private: true
    type: ALLEGRO_BITMAP*
    guards: [ bitmap_bin ]
    body: |
      return bitmap_bin->auto_get(title_bitmap_name);


  - name: virtual_control_button_down_func
    virtual: true
    override: true
    parameters:
      - name: player_num
        type: int
        default_argument: 0
      - name: button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: 'false'
    body: |
      if (button_num == VirtualControls::get_BUTTON_UP()) move_cursor_up();
      if (button_num == VirtualControls::get_BUTTON_DOWN()) move_cursor_down();
      if (button_num == VirtualControls::get_BUTTON_A()
         || button_num == VirtualControls::get_BUTTON_START()
         )
      {
         select_menu_option();
      }
    body_dependency_symbols:
      - AllegroFlare::VirtualControls


  - name: menu_is_empty
    type: bool
    private: true
    body: |
      return menu_options.empty();


  - name: menu_has_items
    type: bool
    private: true
    body: |
      return !menu_is_empty();


  - name: build_default_menu_options
    type: std::vector<std::pair<std::string, std::string>>
    static: true
    body: |
      std::vector<std::pair<std::string, std::string>> result;
      result = { { "Resume", "unpause_game" }, { "Exit to title screen", "go_to_title_screen" }, { "Quit", "exit_game" } };
      return result;


dependencies:

  - symbol: ALLEGRO_EVENT*
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_FLARE_EVENT_START_NEW_GAME
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: AllegroFlare::EventEmitter*
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: std::vector<std::pair<std::string, std::string>>
    headers: [ vector, utility, string ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::BitmapBin*
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: ALLEGRO_BITMAP*
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]
  - symbol: AllegroFlare::VirtualControls
    headers: [ AllegroFlare/VirtualControls.hpp ]
  - symbol: al_draw_filled_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]

