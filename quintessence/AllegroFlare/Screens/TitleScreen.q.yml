parent_classes:


  - class: AllegroFlare::Screens::Base
    scope: public
    init_with: '"TitleScreen"'


properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: title_text
    type: std::string
    init_with: '"Untitled Game"'
    constructor_arg: true
    getter: true
    setter: true

  - name: copyright_text
    type: std::string
    init_with: '"Copyright 2022"'
    constructor_arg: true
    getter: true
    setter: true

  - name: background_bitmap_name
    type: std::string
    init_with: '""'
    constructor_arg: true
    getter: true
    setter: true

  - name: title_bitmap_name
    type: std::string
    init_with: '""'
    constructor_arg: true
    getter: true
    setter: true

  - name: font_name
    type: std::string
    init_with: '"DroidSans.ttf"'
    constructor_arg: true
    getter: true
    setter: true

  - name: title_text_color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{1, 1, 1, 1}
    constructor_arg: true
    getter: true
    setter: true

  - name: menu_text_color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{1, 1, 1, 1}
    constructor_arg: true
    getter: true
    setter: true

  - name: copyright_text_color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{1, 1, 1, 1}
    constructor_arg: true
    getter: true
    setter: true

  - name: menu_options
    type: std::vector<std::pair<std::string, std::string>>
    init_with: 'build_default_menu_options()'
    getter: true

  - name: cursor_position
    type: int
    init_with: 0


functions:


  - name: set_menu_options
    parameters:
      - name: menu_options
        type: std::vector<std::pair<std::string, std::string>>
        default_argument: '{}'
    body: |
      this->menu_options = menu_options;
      cursor_position = 0;
      return;


  - name: move_cursor_up
    private: true
    body: |
      if (menu_is_empty()) return;

      cursor_position++;
      if (cursor_position >= menu_options.size()) cursor_position = cursor_position % menu_options.size();
      return;


  - name: move_cursor_down
    private: true
    body: |
      if (menu_is_empty()) return;

      cursor_position--;
      if (cursor_position < 0) cursor_position += menu_options.size();
      return;


  - name: activate_menu_option
    virtual: true
    parameters:
      - name: menu_option_name
        type: std::string
        default_argument: '"[unset-menu-option-name]"'
    body: |
      event_emitter->emit_game_event(menu_option_name);

      //if (menu_option_name == "start_new_game")
      //{
         //event_emitter->emit_event(ALLEGRO_FLARE_EVENT_START_NEW_GAME);
         ////event_emitter->emit_game_event(ALLEGRO_FLARE_EVENT_START_NEW_GAME);
      //}
      //else if (menu_option_name == "exit_game")
      //{
         //event_emitter->emit_event(ALLEGRO_FLARE_EVENT_EXIT_GAME);
         ////event_emitter->emit_game_event(menu_option_name);
      //}
      //else
      //{
         //std::stringstream ss;
         //ss << "[AllegroFlare::Screens::TitleScreen::activate_menu_option()] error: There is no consequential action "
               //"assigned for the menu option value \"" << menu_option_name <<  "\".  Note this is "
               //"the value for the menu item labeled \"" << menu_option_name << "\".";
         //throw std::runtime_error(ss.str());
      //}
      //return;
    

  - name: select_menu_option
    private: true
    guards: [ event_emitter ]
    body: |
      if (menu_is_empty())
      {
         std::cout <<
            "[AllegroFlare::Screens::TitleScreen::select_menu_option()] error: can not select a menu item, "
            "the menu is empty."
            << std::endl;
         return;
      }

      std::string current_menu_option_value = infer_current_menu_option_value();

      activate_menu_option(current_menu_option_value);

      return;
    body_dependency_symbols:
      - ALLEGRO_FLARE_EVENT_START_NEW_GAME


  - name: primary_timer_func
    virtual: true
    override: true
    body: |
      render();
      return;


  - name: render
    guards: [ al_is_system_installed(), al_is_font_addon_initialized() ]
    body: |
      draw_background();
      draw_title();
      draw_copyright_text();
      draw_menu();
      return;


  - name: draw_background
    body: |
      if (background_bitmap_name.empty()) return;
      ALLEGRO_BITMAP *background = obtain_background_bitmap();
      if (!background) return;

      al_draw_scaled_bitmap(background,
         0, 0, al_get_bitmap_width(background), al_get_bitmap_height(background),
         0, 0, 1920, 1080, 0);

      return;


  - name: draw_title
    body: |
      ALLEGRO_BITMAP *title_bitmap = obtain_title_bitmap();
      if (title_bitmap)
      {
         AllegroFlare::Placement2D place;
         place.position.x = 1920 / 2;
         place.position.y = 1080 / 3;
         place.size.x = al_get_bitmap_width(title_bitmap);
         place.size.y = al_get_bitmap_height(title_bitmap);
         place.start_transform();
         al_draw_bitmap(title_bitmap, 0, 0, 0);
         place.restore_transform();
      }
      else if (!title_text.empty())
      {
         // TODO: review guards on this function
         ALLEGRO_FONT *title_font = obtain_title_font();
         int surface_width = 1920;
         int surface_height = 1080;
         al_draw_text(
            title_font,
            title_text_color, //ALLEGRO_COLOR{1, 1, 1, 1},
            surface_width / 2,
            surface_height / 3,
            ALLEGRO_ALIGN_CENTER,
            get_title_text().c_str()
         );
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::Placement2D


  - name: draw_copyright_text
    body: |
      // TODO: review guards on this function
      ALLEGRO_FONT *copyright_font = obtain_copyright_font();
      int surface_width = 1920;
      int surface_height = 1080;
      al_draw_text(
         copyright_font,
         copyright_text_color, //ALLEGRO_COLOR{1, 1, 1, 1},
         surface_width / 2,
         surface_height - 100,
         ALLEGRO_ALIGN_CENTER,
         get_copyright_text().c_str()
      );
      return;


  - name: draw_menu
    body: |
      // TODO: review guards on this function
      ALLEGRO_FONT *menu_font = obtain_menu_font();
      int surface_width = 1920;
      int surface_height = 1080;
      float menu_item_vertical_spacing = (int)(al_get_font_line_height(menu_font) * 1.25f);
      int menu_item_num = 0;

      for (auto &menu_option : menu_options)
      {
         bool showing_cursor_on_this_option = false;
         if (menu_item_num == cursor_position) showing_cursor_on_this_option = true;

         std::string menu_item_text = std::get<0>(menu_option);
         al_draw_text(
            menu_font,
            menu_text_color, //ALLEGRO_COLOR{1, 1, 1, 1},
            surface_width / 2,
            surface_height / 2 + menu_item_vertical_spacing * menu_item_num,
            ALLEGRO_ALIGN_CENTER,
            menu_item_text.c_str()
         );

         if (showing_cursor_on_this_option)
         {
            float menu_item_text_width = al_get_text_width(menu_font, menu_item_text.c_str());
            al_draw_text(
               menu_font,
               menu_text_color, //ALLEGRO_COLOR{1, 1, 1, 1},
               surface_width / 2 - (menu_item_text_width * 0.5),
               surface_height / 2 + menu_item_vertical_spacing * menu_item_num,
               ALLEGRO_ALIGN_RIGHT,
               ">  "
            );
         }

         menu_item_num++;
      }
      return;


  - name: infer_current_menu_option_value
    private: true
    type: std::string
    body: |
      if (menu_options.empty()) return "";
      if (cursor_position < 0 || cursor_position >= menu_options.size())
      {
         throw std::runtime_error("[AllegroFlare/Screens/TitleScreen]: error: cursor_position is not in "
                                  "a valid position to get the current menu choice's value.");
      }
      std::string current_menu_option_value = std::get<1>(menu_options[cursor_position]);
      return current_menu_option_value;


  - name: infer_current_menu_option_label
    private: true
    type: std::string
    body: |
      if (menu_options.empty()) return "";
      if (cursor_position < 0 || cursor_position >= menu_options.size())
      {
         throw std::runtime_error("[AllegroFlare/Screens/TitleScreen]: error: cursor_position is not in "
                                  "a valid position to get the current menu choice's label.");
      }
      std::string current_menu_option_value = std::get<1>(menu_options[cursor_position]);
      return current_menu_option_value;


  - name: obtain_title_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      std::stringstream composite_font_str;
      int font_size = -90;
      composite_font_str << font_name << " " << font_size;
      return font_bin->auto_get(composite_font_str.str());


  - name: obtain_menu_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      std::stringstream composite_font_str;
      int font_size = -56;
      composite_font_str << font_name << " " << font_size;
      return font_bin->auto_get(composite_font_str.str());


  - name: obtain_copyright_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      std::stringstream composite_font_str;
      int font_size = -32;
      composite_font_str << font_name << " " << font_size;
      return font_bin->auto_get(composite_font_str.str());


  - name: obtain_background_bitmap
    private: true
    type: ALLEGRO_BITMAP*
    guards: [ bitmap_bin ]
    body: |
      return bitmap_bin->auto_get(background_bitmap_name);


  - name: obtain_title_bitmap
    private: true
    type: ALLEGRO_BITMAP*
    guards: [ bitmap_bin ]
    body: |
      return bitmap_bin->auto_get(title_bitmap_name);


  - name: virtual_control_button_down_func
    virtual: true
    override: true
    parameters:
      - name: player_num
        type: int
        default_argument: 0
      - name: button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: 'false'
    body: |
      if (button_num == VirtualControls::get_BUTTON_UP()) move_cursor_up();
      if (button_num == VirtualControls::get_BUTTON_DOWN()) move_cursor_down();
      if (button_num == VirtualControls::get_BUTTON_A()) select_menu_option();
    body_dependency_symbols:
      - AllegroFlare::VirtualControls


  - name: menu_is_empty
    type: bool
    private: true
    body: |
      return menu_options.empty();


  - name: menu_has_items
    type: bool
    private: true
    body: |
      return !menu_is_empty();


  - name: build_default_menu_options
    type: std::vector<std::pair<std::string, std::string>>
    static: true
    body: |
      std::vector<std::pair<std::string, std::string>> result;
      result = { { "Start new game", "start_new_game" }, { "Exit", "exit_game" } };
      return result;


dependencies:

  - symbol: ALLEGRO_EVENT*
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_FLARE_EVENT_START_NEW_GAME
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: AllegroFlare::EventEmitter*
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: std::vector<std::pair<std::string, std::string>>
    headers: [ vector, utility, string ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::BitmapBin*
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: ALLEGRO_BITMAP*
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]
  - symbol: AllegroFlare::VirtualControls
    headers: [ AllegroFlare/VirtualControls.hpp ]


