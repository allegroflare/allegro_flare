parent_classes:


  - class: AllegroFlare::Screens::Base
    scope: public
    init_with: '"Achievements"'


properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    setter: false

  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true
    setter: false

  - name: achievements
    type: AllegroFlare::Achievements*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: scrollbar_dest_position
    type: float
    init_with: 0.0f
    constructor_arg: true

  - name: achievements_list
    type: AllegroFlare::Elements::AchievementsList
    init_with: '{}'
    getter_ref: true

  - name: on_exit_callback_func
    type: std::function<void(AllegroFlare::Screens::Achievements*, void*)>
    init_with: ''
    getter: true
    setter: true

  - name: on_exit_callback_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: game_event_name_to_emit_on_exit
    type: std::string
    init_with: DEFAULT_EVENT_NAME_ON_EXIT
    constructor_arg: true
    getter: true
    setter: true

  - name: background
    type: AllegroFlare::Elements::Backgrounds::Base*
    init_with: nullptr
    constructor_arg: true
    setter: true
    getter: true

  - name: initialized
    type: bool
    init_with: false

  - name: DEFAULT_EVENT_NAME_ON_EXIT
    type: char*
    init_with: '(char*)"exit_achievements_screen"'
    static: true
    constexpr: true


documentation:


  - todos:
      - Remove redundant self-dependent AllegroFlare/Screens/Achievements dependency
    

functions:


  - name: set_font_bin
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
    body: |
      this->font_bin = font_bin;
      achievements_list.set_font_bin(font_bin);
      return;


  - name: set_event_emitter
    parameters:
      - name: event_emitter
        type: AllegroFlare::EventEmitter*
        default_argument: nullptr
    guards: [ (!initialized) ]
    body: |
      this->event_emitter = event_emitter;
      return;


  - name: refresh_achievements_list
    body: |
      std::vector<std::tuple<std::string, std::string, std::string>> result;
      for (auto &achievement : achievements->get_achievements())
      {
         AllegroFlare::Achievement *ach = std::get<1>(achievement);
         bool unlocked = std::get<2>(achievement);
         bool hidden = std::get<3>(achievement);
         // TODO: test this
         std::string status = unlocked ? "unlocked" : (hidden ? "hidden" : "locked" );
         result.push_back({ status, ach->get_title(), ach->get_description() });
      }
      achievements_list.set_achievements(result);
      return;


  - name: on_activate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      if (background) background->activate();
      // refresh the achievements from the actual list of achievements
      refresh_achievements_list();

      // position cursor such that it will scroll to the top
      achievements_list.set_scrollbar_position_to_max();
      move_scrollbar_position_to(0);

      // emit events to show and set the input hints
      emit_event_to_set_input_hints();
      event_emitter->emit_show_input_hints_bar_event();
      return;


  - name: on_deactivate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      if (background) background->deactivate();
      // emit events to show and set the input hints
      // TODO: add ALLEGRO_FLARE_EVENT_CLEAR_INPUT_HINTS_BAR
      event_emitter->emit_set_input_hints_bar_event({});
      event_emitter->emit_hide_input_hints_bar_event();
      return;


  - name: initialize
    guards:
      - (!initialized)
      - al_is_system_installed()
      - al_is_font_addon_initialized()
      - font_bin
      - event_emitter
      - achievements
    body: |
      achievements_list.set_font_bin(font_bin);
      refresh_achievements_list();
      //achievements_list.set_achievements(build_achievements());
      initialized = true;
      return;


  - name: primary_timer_func
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      update();
      render();
      return;


  - name: update
    private: true
    guards: [ initialized ]
    body: |
      if (background) background->update();
      float scrollbar_position = achievements_list.get_scrollbar_position();
      if (scrollbar_position != scrollbar_dest_position)
      {
         float update_rate = 0.2f;
         scrollbar_position += (scrollbar_dest_position - scrollbar_position) * update_rate;
         achievements_list.set_scrollbar_position(scrollbar_position);
      }
      return;


  - name: exit
    body: |
      call_on_exit_callback();
      return;


  - name: call_on_exit_callback
    private: true
    body: |
      // TODO: Test this condition
      if (event_emitter && !game_event_name_to_emit_on_exit.empty())
      {
         event_emitter->emit_game_event(game_event_name_to_emit_on_exit);
      }
      // TODO: Test this condition
      if (on_exit_callback_func)
      {
         on_exit_callback_func(this, on_exit_callback_func_user_data);
      }
      return;


  - name: move_scrollbar_position_to
    private: true
    parameters:
      - name: position
        type: float
        default_argument: 0.0f
    guards: [ initialized ]
    body: |
      scrollbar_dest_position = position;
      limit_scrollbar_dest_position();
      return;


  - name: move_scrollbar_position_up
    private: true
    guards: [ initialized ]
    body: |
      scrollbar_dest_position -= 36.0f;
      limit_scrollbar_dest_position();
      return;


  - name: move_scrollbar_position_down
    private: true
    guards: [ initialized ]
    body: |
      scrollbar_dest_position += 36.0f;
      limit_scrollbar_dest_position();
      return;


  - name: virtual_control_button_down_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    body: |
      if (virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_UP)
         move_scrollbar_position_up();
      if (virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_DOWN)
         move_scrollbar_position_down();
      else
         exit(); // TODO: Consider appropriate inputs to call this exit
    body_dependency_symbols:
      - AllegroFlare::VirtualControllers::GenericController


  - name: render
    type: void
    xprivate: true
    guards: [ initialized ]
    body: |
      if (background) background->render();
      achievements_list.render();
      return;
    body_dependency_symbols:
      - AllegroFlare::Elements::AchievementsList


  - name: set_placeholder_achievements
    body: |
      return achievements_list.set_achievements(build_achievements());


  - name: build_achievements
    type: std::vector<std::tuple<std::string, std::string, std::string>>
    body: |
      return AllegroFlare::Elements::AchievementsList::build_placeholder_achievements();


  - name: limit_scrollbar_dest_position
    private: true
    body: |
      float scrollbar_max_position = achievements_list.infer_scrollbar_max_position();
      scrollbar_dest_position = std::max(0.0f, std::min(scrollbar_dest_position, scrollbar_max_position));
      return;


  - name: emit_event_to_set_input_hints
    private: true
    guards: [ initialized, event_emitter ]
    body: |
      std::vector<std::string> scrollbar_tokens = { "UP", "%SPACE", "DOWN", "%SPACER", "LABEL>>", "Scroll up/down", };
      std::vector<std::string> return_tokens = { "X", "%SPACER", "LABEL>>", "Return", };
      std::vector<std::string> separator_tokens = { "%SEPARATOR" };
      std::vector<std::string> result_tokens;

      if (infer_scrollbar_is_showing())
      {
         result_tokens.insert(result_tokens.end(), scrollbar_tokens.begin(), scrollbar_tokens.end());
         result_tokens.insert(result_tokens.end(), separator_tokens.begin(), separator_tokens.end());
      }

      result_tokens.insert(result_tokens.end(), return_tokens.begin(), return_tokens.end());

      event_emitter->emit_set_input_hints_bar_event(result_tokens);
      return;


  - name: infer_scrollbar_is_showing
    type: bool
    body: |
      return !achievements_list.scrollbar_is_autohidden_because_list_contents_is_smaller_than_the_container();


dependencies:


  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::Elements::AchievementsList
    headers: [ AllegroFlare/Elements/AchievementsList.hpp ]
  - symbol: std::vector<std::tuple<std::string, std::string, std::string>>
    headers: [ vector, tuple, string ]
  - symbol: AllegroFlare::VirtualController
    headers: [ AllegroFlare/VirtualController.hpp ]
  - symbol: std::min, std::max
    headers: [ algorithm ]

  - symbol: AllegroFlare::Achievements
    headers: [ AllegroFlare/Achievements.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::Player
    headers: [ AllegroFlare/Player.hpp ]
  - symbol: AllegroFlare::VirtualControllers::Base
    headers: [ AllegroFlare/VirtualControllers/Base.hpp ]
  - symbol: AllegroFlare::VirtualControllers::GenericController
    headers: [ AllegroFlare/VirtualControllers/GenericController.hpp ]
  - symbol: AllegroFlare::Screens::Achievements
    headers: [ AllegroFlare/Screens/Achievements.hpp ]
  - symbol: AllegroFlare::Elements::Backgrounds::Base
    headers: [ AllegroFlare/Elements/Backgrounds/Base.hpp ]


