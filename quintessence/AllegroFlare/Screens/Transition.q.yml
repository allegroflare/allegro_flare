parent_classes:


  - class: AllegroFlare::Screens::Base
    scope: public
    init_with: '"TitleScreen"'



properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: from_screen
    type: AllegroFlare::Screens::Base*
    init_with: nullptr
    constructor_arg: true

  - name: to_screen
    type: AllegroFlare::Screens::Base*
    init_with: nullptr
    constructor_arg: true

  - name: transition_fx
    type: AllegroFlare::TransitionFX::Base*
    init_with: nullptr
    constructor_arg: true

  - name: game_event_name_to_emit_after_completing
    type: std::string
    init_with: '"transition_finished"'
    constructor_arg: true
    getter: true
    setter: true

  - name: target
    type: ALLEGRO_BITMAP*
    init_with: nullptr

  - name: finished
    type: bool
    init_with: false
    getter: true

  - name: initialized
    type: bool
    init_with: false


functions:


  - name: initialize
    guards: [ al_is_system_installed(), (!initialized), al_get_current_display() ]
    body: |
      ALLEGRO_BITMAP *backbuffer = al_get_backbuffer(al_get_current_display());

      target = al_create_sub_bitmap(
         backbuffer, 0, 0, al_get_bitmap_width(backbuffer), al_get_bitmap_height(backbuffer));
      initialized = true;
      return;


  - name: primary_timer_func
    virtual: true
    override: true
    guards: [ initialized, transition_fx ]
    body: |
      if (to_screen)
      {
         //al_clear_to_color(ALLEGRO_COLOR{0, 0, 0, 0});
         to_screen->primary_timer_func();
         draw_backbuffer_to_pasteboard_a_bitmap();
      }

      if (from_screen)
      {
         //al_clear_to_color(ALLEGRO_COLOR{0, 0, 0, 0});
         from_screen->primary_timer_func();
         draw_backbuffer_to_pasteboard_b_bitmap();
      }
      
      transition_fx->update();
      ALLEGRO_STATE previous_render_state;
      al_store_state(&previous_render_state, ALLEGRO_STATE_TARGET_BITMAP);
      al_set_target_bitmap(target);
      al_clear_to_color(ALLEGRO_COLOR{0.2, 0.2, 0.21, 1.0});
      transition_fx->render();
      al_restore_state(&previous_render_state);

      if (!finished && transition_fx->get_finished())
      {
         finished = true;
         emit_completion_event();
      }

      return;


  - name: draw_backbuffer_to_pasteboard_a_bitmap
    private: true
    body: |
      ALLEGRO_BITMAP *source_bitmap = al_get_backbuffer(al_get_current_display());
      ALLEGRO_STATE previous_state;
      al_store_state(&previous_state, ALLEGRO_STATE_TARGET_BITMAP);

      al_set_target_bitmap(transition_fx->get_pasteboard_a());

      al_draw_bitmap(source_bitmap, 0, 0, 0);

      al_restore_state(&previous_state);
      return;


  - name: draw_backbuffer_to_pasteboard_b_bitmap
    private: true
    body: |
      ALLEGRO_BITMAP *source_bitmap = al_get_backbuffer(al_get_current_display());
      ALLEGRO_STATE previous_state;
      al_store_state(&previous_state, ALLEGRO_STATE_TARGET_BITMAP);

      al_set_target_bitmap(transition_fx->get_pasteboard_b());

      al_draw_bitmap(source_bitmap, 0, 0, 0);

      al_restore_state(&previous_state);
      return;


  - name: emit_completion_event
    private: true
    type: void
    body: |
      if (!game_event_name_to_emit_after_completing.empty())
      {
         //event_emitter->emit_game_event(AllegroFlare::GameEvent(game_event_name_to_emit_after_completing));
      }
      return;


dependencies:


  - symbol: ALLEGRO_BITMAP*
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::Screens::Base*
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::TransitionFX::Base*
    headers: [ AllegroFlare/TransitionFX/Base.hpp ]
  - symbol: AllegroFlare::EventEmitter*
    headers: [ AllegroFlare/EventEmitter.hpp ]


