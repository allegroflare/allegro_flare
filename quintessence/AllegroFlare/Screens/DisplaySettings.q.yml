parent_classes:


  - class: AllegroFlare::Screens::Base
    scope: public
    init_with: AllegroFlare::Screens::DisplaySettings::TYPE


properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true

  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: model_bin
    type: AllegroFlare::ModelBin*
    init_with: nullptr
    constructor_arg: true

  - name: display_settings_interface
    type: AllegroFlare::DisplaySettingsInterfaces::Base*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: explicit

  - name: on_exit_callback_func
    type: std::function<void(AllegroFlare::Screens::DisplaySettings*, void*)>
    init_with: ''
    getter: true
    setter: true

  - name: on_exit_callback_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: surface_width
    type: int
    init_with: 1920
    getter: true
    getter: true

  - name: surface_height
    type: int
    init_with: 1080
    getter: true
    setter: true

  - name: base_font_size
    type: int
    init_with: -34
    constructor_arg: true
    getter: true
    setter: true

  - name: cursor_y
    type: int
    init_with: 0

  - name: cursor_x
    type: int
    init_with: 0

  - name: up_pressed
    type: bool
    init_with: false

  - name: up_pressed_at
    type: double
    init_with: 0

  - name: down_pressed
    type: bool
    init_with: false

  - name: down_pressed_at
    type: double
    init_with: 0

  - name: initialized
    type: bool
    init_with: false

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/Screens/DisplaySettings"'
    static: true
    constexpr: true


methods:


  - name: set_event_emitter
    guards: [ (!initialized) ]
    parameters:
      - name: event_emitter
        type: AllegroFlare::EventEmitter*
        default_argument: nullptr
    body: |
      this->event_emitter = event_emitter;
      return;


  - name: set_bitmap_bin
    guards: [ (!initialized) ]
    parameters:
      - name: bitmap_bin
        type: AllegroFlare::BitmapBin*
        default_argument: nullptr
    body: |
      this->bitmap_bin = bitmap_bin;
      return;


  - name: set_font_bin
    guards: [ (!initialized) ]
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
    body: |
      this->font_bin = font_bin;
      return;


  - name: set_model_bin
    guards: [ (!initialized) ]
    parameters:
      - name: model_bin
        type: AllegroFlare::ModelBin*
        default_argument: nullptr
    body: |
      this->model_bin = model_bin;
      return;


  - name: set_display_settings_interface
    guards: [ (!initialized) ]
    parameters:
      - name: display_settings_interface
        type: AllegroFlare::DisplaySettingsInterfaces::Base*
        default_argument: nullptr
    body: |
      this->display_settings_interface = display_settings_interface;
      return;


  - name: initialize
    guards:
      - (!initialized)
      - al_is_system_installed()
      - al_is_primitives_addon_initialized()
      - al_is_font_addon_initialized()
      - event_emitter
      - bitmap_bin
      - font_bin
      - model_bin
      - display_settings_interface
    body: |
      set_update_strategy(AllegroFlare::Screens::Base::UpdateStrategy::SEPARATE_UPDATE_AND_RENDER_FUNCS);
      initialized = true;
      return;
    body_dependency_symbols:
      - al_is_primitives_addon_initialized


  - name: exit_screen
    body: |
      if (on_exit_callback_func)
      {
         on_exit_callback_func(this, on_exit_callback_func_user_data);
      }
      else
      {
         AllegroFlare::Logger::throw_error(
            "AllegroFlare::Screens::DisplaySettings::exit_screen",
            "Expecting an \"on_exit_callback_func\" to be present, but it is not."
         );
      }

      return;
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: on_activate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      cursor_x = 0;
      cursor_y = 0;
      // Show input hints:
      {
         std::vector<std::string> tokens = {
            "A", "%SPACER", "LABEL>>", "Toggle / choose option",
            "%SEPARATOR",
            "UP", "%SPACE", "DOWN", "%SPACE", "LEFT", "%SPACE", "RIGHT", "%SPACER", "LABEL>>", "Move cursor",
         };
         event_emitter->emit_set_input_hints_bar_event(tokens);
         event_emitter->emit_show_input_hints_bar_event();
      }
      deactivate_up_down_keypress_repeat_tracking();
      return;


  - name: on_deactivate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      // Hide input hints:
      {
         event_emitter->emit_hide_input_hints_bar_event();
      }
      deactivate_up_down_keypress_repeat_tracking();
      return;


  - name: deactivate_up_down_keypress_repeat_tracking
    body: |
      up_pressed = false;
      up_pressed_at = 0;
      down_pressed = false;
      down_pressed_at = 0;
      return;


  - name: move_cursor_up
    body: |
      if (cursor_x == 0)
      {
         cursor_y--;
         if (cursor_y < 0) cursor_y = 0;
      }
      else
      {
         increment_current_option();
         // Move cursor within the current element
      }
      return;


  - name: move_cursor_down
    body: |
      if (cursor_x == 0)
      {
         cursor_y++;
         if (cursor_y >= infer_num_elements()) cursor_y = (infer_num_elements() - 1);
      }
      else
      {
         decrement_current_option();
         // Move cursor within the current element
      }
      return;


  - name: move_cursor_left
    body: |
      cursor_x--;
      if (cursor_x < 0) cursor_x = 0;
      return;


  - name: move_cursor_right
    body: |
      cursor_x++;
      if (cursor_x >= infer_current_element_depth()) cursor_x = (infer_current_element_depth() - 1);
      return;


  - name: infer_num_elements
    type: int
    body: |
      return 6;


  - name: infer_current_element_depth
    type: int
    body: |
      if (cursor_y == 1)
      {
         bool is_disabled = obtain_fullscreen_status();
         if (is_disabled)
         {
            return 1;
         }
         else
         {
            return 3;
         }
      }
      return 1;


  - name: is_cursor_at
    type: bool
    parameters:
      - name: x
        type: int
        default_argument: 0
      - name: y
        type: int
        default_argument: 0
    body: |
      return (cursor_x == x && cursor_y == y);


  - name: activate_current_option
    body: |
      if (cursor_y == 0) display_settings_interface->toggle_fullscreen();
      else if (cursor_y == 3) display_settings_interface->toggle_inhibit_screensaver();
      else if (cursor_y == 4) display_settings_interface->toggle_hide_mouse_cursor();
      else if (cursor_y == (infer_num_elements() - 1))
      {
         exit_screen();
      }
      return;


  - name: increment_current_option
    body: |
      //std::cout << "-- increment" << std::endl;
      //if (cursor_y == 1) // Window size
      //{
         //bool is_disabled = obtain_fullscreen_status();

         //if (!is_disabled)
         //{
            if (is_cursor_at(1, 1))
            {
               // increment display width
               int display_width;
               int display_height;
               std::tie(display_width, display_height) = obtain_display_dimensions();
               // NOTE: For some reason, macos only supports increments of two here, otherwise there are glitches
               display_settings_interface->set_window_size(display_width+2, display_height);
            }
            else if (is_cursor_at(2, 1))
            {
               // increment display height
               int display_width;
               int display_height;
               std::tie(display_width, display_height) = obtain_display_dimensions();
               // NOTE: For some reason, macos only supports increments of two here, otherwise there are glitches
               display_settings_interface->set_window_size(display_width, display_height+2);
            }
         //}
      //}
      return;


  - name: decrement_current_option
    body: |
      //std::cout << "-- decrement" << std::endl;

      if (is_cursor_at(1, 1))
      {
         // decrement display width
         int display_width;
         int display_height;
         std::tie(display_width, display_height) = obtain_display_dimensions();
         // NOTE: For some reason, macos only supports increments of two here, otherwise there are glitches
         display_settings_interface->set_window_size(display_width-2, display_height);
      }
      else if (is_cursor_at(2, 1))
      {
         // decrement display height
         int display_width;
         int display_height;
         std::tie(display_width, display_height) = obtain_display_dimensions();
         // NOTE: For some reason, macos only supports increments of two here, otherwise there are glitches
         display_settings_interface->set_window_size(display_width, display_height-2);
      }
      return;


  - name: update
    body: |
      do_manual_key_repat_logic();
      return;


  - name: render
    body: |
      ALLEGRO_FONT *heading_font = obtain_heading_font();

      float x_nud = 6;
      float left_column_x = 320 + x_nud;
      float column1_x = 320 + x_nud;
      float column2_x = 640 + x_nud;
      float column3_x = 970 + x_nud;

      float column2_c = column2_x + (column3_x - column2_x) / 2;

      float settings_list_y = 368;
      float row_h = 110; // 160
      int row_counter = 0;
      float row_y = settings_list_y + row_counter * row_h;

      // Draw the heading
      al_draw_text(
         heading_font,
         ALLEGRO_COLOR{1, 1, 1, 1},
         320,
         150, //surface_height/2-100,
         ALLEGRO_ALIGN_LEFT,
         "DISPLAY SETTINGS"
      );



      //
      // Draw each settings option in the list
      //

      float cursor_off = 52;
      if (cursor_y == row_counter) draw_cursor_pointer(left_column_x - cursor_off, row_y, ALLEGRO_COLOR{1, 1, 1, 1});


      {
         draw_label("Fullscreen", column1_x, row_y);
         draw_slider_toggle_box(obtain_fullscreen_status(), column2_x, row_y);
      }


      row_counter++;
      row_y = settings_list_y + row_counter * row_h;
      if (cursor_y == row_counter) draw_cursor_pointer(left_column_x - cursor_off, row_y, ALLEGRO_COLOR{1, 1, 1, 1});


      {
         bool is_disabled = obtain_fullscreen_status();
         int window_width;
         int window_height;
         std::tie(window_width, window_height) = obtain_window_dimensions();
         float spacing = 160;
         draw_label("Window Size", column1_x, row_y);
         draw_int_spinner(window_width, is_cursor_at(1, row_counter), column2_x, row_y, is_disabled);
         draw_int_spinner(window_height, is_cursor_at(2, row_counter), column2_x + spacing, row_y, is_disabled);
         std::string helper_text;
         if (is_disabled)
         {
            helper_text = "Cannot change window size while in fullscreen mode.";
         }
         else
         {
            //helper_text = "The window size while not in fullscreen mode. This currently cannot be changed.";
         }
         if (!helper_text.empty()) draw_helper_text(helper_text, column3_x, row_y);
      }


      row_counter++;
      row_y = settings_list_y + row_counter * row_h;
      if (cursor_y == row_counter) draw_cursor_pointer(left_column_x - cursor_off, row_y, ALLEGRO_COLOR{1, 1, 1, 1});


      {
         int display_width;
         int display_height;
         std::tie(display_width, display_height) = obtain_display_dimensions();
         float spacing = 160;
         draw_label("Actual Display Size", column1_x, row_y);
         draw_int_spinner(display_width, is_cursor_at(1, row_counter), column2_x, row_y, true);
         draw_int_spinner(display_height, is_cursor_at(2, row_counter), column2_x + spacing, row_y, true);
      }


      row_counter++;
      row_y = settings_list_y + row_counter * row_h;
      if (cursor_y == row_counter) draw_cursor_pointer(left_column_x - cursor_off, row_y, ALLEGRO_COLOR{1, 1, 1, 1});


      {
         draw_label("Inhibit screensaver", column1_x, row_y);
         draw_slider_toggle_box(obtain_screensaver_inhibited(), column2_x, row_y);
         draw_helper_text(
            "When on, prevents your computer from starting the screensaver while the game is running.",
            column3_x, row_y);
      }


      row_counter++;
      row_y = settings_list_y + row_counter * row_h;
      if (cursor_y == row_counter) draw_cursor_pointer(left_column_x - cursor_off, row_y, ALLEGRO_COLOR{1, 1, 1, 1});


      {
         draw_label("Hide mouse cursor", column1_x, row_y);
         draw_slider_toggle_box(obtain_mouse_cursor_hidden(), column2_x, row_y);
      }


      row_counter++;
      row_y = settings_list_y + row_counter * row_h;
      if (cursor_y == row_counter) draw_cursor_pointer(left_column_x - cursor_off, row_y, ALLEGRO_COLOR{1, 1, 1, 1});


      {
         draw_label("Exit", column1_x, row_y);
      }


      row_counter++;
      row_y = settings_list_y + row_counter * row_h;
      if (cursor_y == row_counter) draw_cursor_pointer(left_column_x - cursor_off, row_y, ALLEGRO_COLOR{1, 1, 1, 1});
      //if (cursor_y == row_counter) al_draw_filled_circle(left_column_x - 40, row_y, 8, ALLEGRO_COLOR{1, 1, 1, 1});




      return;


  - name: do_manual_key_repat_logic
    body: |
      double time_now = al_get_time();
      double repeat_duration = 0.3;
      if (up_pressed || down_pressed)
      {
         static int mod_interval = 3;

         // Key up press
         if (up_pressed)
         {
            double up_pressed_age = time_now - up_pressed_at;
            if (up_pressed_age > repeat_duration)
            {
               mod_interval++;
               if (mod_interval > 3)
               {
                  move_cursor_up();
               }
            }
         }

         // Key down press
         if (down_pressed)
         {
            double down_pressed_age = time_now - down_pressed_at;
            if (down_pressed_age > repeat_duration)
            {
               mod_interval++;
               if (mod_interval > 3)
               {
                  move_cursor_down();
               }
            }
         }
      }
      return;


  - name: primary_update_func
    virtual: true
    override: true
    parameters:
      - name: time_now
        type: double
        default_argument: 0.0
      - name: delta_time
        type: double
        default_argument: 0.0
    guards: [ initialized ]
    body: |
      update();
      return;


  - name: primary_render_func
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      render();
      return;


  - name: draw_cursor_pointer
    static: true
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: color
        type: ALLEGRO_COLOR
        default_argument: ALLEGRO_COLOR{0.0f, 0.0f, 0.0f, 0.0f}
    body: |
      float width = 36;
      float height = 24;
      x -= width;
      y -= height * 0.5;
      al_draw_filled_triangle(x, y, x+width, y+height*0.5, x, y+height, color);
      return;


  - name: draw_label
    parameters:
      - name: label
        type: std::string
        default_argument: '"[unset-label]"'
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
    guards: [ initialized ]
    body: |
      ALLEGRO_FONT *label_font = obtain_label_font();
      int h_line_height = al_get_font_line_height(label_font) / 2;
      al_draw_text(
         label_font,
         ALLEGRO_COLOR{1.0, 1.0, 1.0, 1.0},
         x,
         y - h_line_height,
         ALLEGRO_ALIGN_LEFT,
         label.c_str()
      );
      return;


  - name: draw_helper_text
    parameters:
      - name: text
        type: std::string
        default_argument: '"[unset-text]"'
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: width
        type: float
        default_argument: 712.0f
    guards: [ initialized ]
    body: |
      ALLEGRO_FONT *label_font = obtain_label_font();
      int h_line_height = al_get_font_line_height(label_font) / 2;
      al_draw_multiline_text(
         label_font,
         ALLEGRO_COLOR{0.53, 0.53, 0.53, 0.53},
         x,
         y - h_line_height,
         width,
         al_get_font_line_height(label_font),
         ALLEGRO_ALIGN_LEFT,
         text.c_str()
      );
      return;


  - name: draw_slider_toggle_box
    parameters:
      - name: onoff
        type: bool
        default_argument: true
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
    guards: [ initialized ]
    body: |
      AllegroFlare::Elements::UI::SliderToggle slider_toggle;
      //float width = slider_toggle.get_width();
      float height = slider_toggle.get_height();
      slider_toggle.set_font_bin(font_bin);
      slider_toggle.set_font_size(base_font_size);
      slider_toggle.set_x(x); // - width / 2);
      slider_toggle.set_y(y - height / 2);
      slider_toggle.set_onoff(onoff);
      slider_toggle.render();
      return;
    body_dependency_symbols:
      - AllegroFlare::Elements::UI::SliderToggle


  - name: draw_int_spinner
    parameters:
      - name: number
        type: int
        default_argument: 1920
      - name: selected
        type: bool
        default_argument: false
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: disabled
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      // TODO: Improve the arguments for "selected" and "disabled"
      AllegroFlare::Elements::UI::IntSpinner int_spinner;
      float height = int_spinner.get_height();
      if (selected) int_spinner.set_state(AllegroFlare::Elements::UI::IntSpinner::STATE_ACTIVE_FOCUS);
      if (disabled) int_spinner.set_state(AllegroFlare::Elements::UI::IntSpinner::STATE_DISABLED);
      int_spinner.set_font_bin(font_bin);
      int_spinner.set_font_size(base_font_size);
      int_spinner.set_x(x);
      int_spinner.set_y(y - height / 2);
      int_spinner.set_number(number);
      int_spinner.render();
      return;
    body_dependency_symbols:
      - AllegroFlare::Elements::UI::IntSpinner


  - name: virtual_control_button_up_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      switch(virtual_controller_button_num)
      {
         case AllegroFlare::VirtualControllers::GenericController::BUTTON_UP:
            if (!is_repeat)
            {
               up_pressed = false;
               up_pressed_at = 0;
            }
         break;

         case AllegroFlare::VirtualControllers::GenericController::BUTTON_DOWN:
            if (!is_repeat)
            {
               down_pressed = false;
               down_pressed_at = 0;
            }
         break;
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::VirtualControllers::GenericController


  - name: virtual_control_button_down_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      switch(virtual_controller_button_num)
      {
         case AllegroFlare::VirtualControllers::GenericController::BUTTON_UP:
            if (!is_repeat)
            {
               move_cursor_up();
               up_pressed = true;
               up_pressed_at = al_get_time();
            }
         break;

         case AllegroFlare::VirtualControllers::GenericController::BUTTON_DOWN:
            if (!is_repeat)
            {
               move_cursor_down();
               down_pressed = true;
               down_pressed_at = al_get_time();
            }
         break;

         case AllegroFlare::VirtualControllers::GenericController::BUTTON_RIGHT:
            move_cursor_right();
         break;

         case AllegroFlare::VirtualControllers::GenericController::BUTTON_LEFT:
            move_cursor_left();
         break;

         case AllegroFlare::VirtualControllers::GenericController::BUTTON_A:
            activate_current_option();
         break;

         default:
         break;
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::VirtualControllers::GenericController


  - name: virtual_control_axis_change_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      // TODO: this function
      return;


  - name: obtain_fullscreen_status
    type: bool
    body: |
      return display_settings_interface->is_fullscreen();
    body_dependency_symbols:
      - AllegroFlare::Screens::DisplaySettings


  - name: obtain_screensaver_inhibited
    type: bool
    body: |
      return display_settings_interface->is_screensaver_inhibited();
    body_dependency_symbols:
      - AllegroFlare::Screens::DisplaySettings


  - name: obtain_mouse_cursor_hidden
    type: bool
    body: |
      return display_settings_interface->is_mouse_cursor_hidden();
    body_dependency_symbols:
      - AllegroFlare::Screens::DisplaySettings


  - name: obtain_window_dimensions
    type: std::pair<int, int>
    body: |
      return display_settings_interface->get_window_size();
    body_dependency_symbols:
      - AllegroFlare::Screens::DisplaySettings


  - name: obtain_display_dimensions
    type: std::pair<int, int>
    body: |
      return display_settings_interface->get_display_size();
    body_dependency_symbols:
      - AllegroFlare::Screens::DisplaySettings


  - name: obtain_heading_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Oswald-Medium.ttf -82");


  - name: obtain_label_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      std::stringstream ss;
      ss << "Inter-Regular.ttf " << base_font_size;
      return font_bin->auto_get(ss.str().c_str());


dependencies:


  - symbol: AllegroFlare::Screens::DisplaySettings
    headers: [ AllegroFlare/Screens/DisplaySettings.hpp ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Player
    headers: [ AllegroFlare/Player.hpp ]
  - symbol: AllegroFlare::VirtualControllers::Base
    headers: [ AllegroFlare/VirtualControllers/Base.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::Elements::UI::SliderToggle
    headers: [ AllegroFlare/Elements/UI/SliderToggle.hpp ]
  - symbol: AllegroFlare::DisplaySettingsInterfaces::Base
    headers: [ AllegroFlare/DisplaySettingsInterfaces/Base.hpp ]
  - symbol: AllegroFlare::VirtualControllers::GenericController
    headers: [ AllegroFlare/VirtualControllers/GenericController.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Elements::UI::IntSpinner
    headers: [ AllegroFlare/Elements/UI/IntSpinner.hpp ]


