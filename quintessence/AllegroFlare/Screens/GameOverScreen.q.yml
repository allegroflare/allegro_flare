parent_classes:


  - class: AllegroFlare::Screens::Base
    scope: public
    init_with: '"GameOverScreen"'


properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: menu_options
    type: std::vector<std::pair<std::string, std::string>>
    init_with: '{}'

  - name: cursor_position
    type: int
    init_with: 0

  - name: initialized
    type: bool
    init_with: false
    getter: true


functions:


  - name: initialize
    body: |
      menu_options = { { "Try again", "try_again" }, { "Go to Title Screen", "start_title_screen" } };
      cursor_position = 0;
      initialized = true;
      return;


  - name: move_cursor_up
    private: true
    body: |
      cursor_position++;
      if (cursor_position >= menu_options.size()) cursor_position = cursor_position % menu_options.size();
      return;


  - name: move_cursor_down
    private: true
    body: |
      cursor_position--;
      if (cursor_position < 0) cursor_position += menu_options.size();
      return;


  - name: select_menu_option
    private: true
    guards: [ event_emitter ]
    body: |
      std::string current_menu_option_value = infer_current_menu_option_value();
      event_emitter->emit_game_event(current_menu_option_value);
      return;


  - name: primary_timer_func
    virtual: true
    override: true
    body: |
      render();
      return;


  - name: render
    guards: [ al_is_system_installed(), al_is_font_addon_initialized(), get_initialized() ]
    body: |
      draw_primary_text();
      draw_menu();
      return;


  - name: draw_primary_text
    body: |
      // TODO: review guards on this function
      ALLEGRO_FONT *title_font = obtain_title_font();
      float font_line_height = al_get_font_line_height(title_font);
      int surface_width = 1920;
      int surface_height = 1080;
      al_draw_text(
         title_font,
         ALLEGRO_COLOR{1, 1, 1, 1},
         surface_width / 2,
         surface_height / 2 - font_line_height*2,
         ALLEGRO_ALIGN_CENTER,
         "G     A     M     E         O     V     E     R"
      );
      return;


  - name: draw_menu
    body: |
      // TODO: review guards on this function
      ALLEGRO_FONT *menu_font = obtain_menu_font();
      int surface_width = 1920;
      int surface_height = 1080;
      float menu_item_vertical_spacing = (int)(al_get_font_line_height(menu_font) * 1.25f);
      int menu_item_num = 0;

      for (auto &menu_option : menu_options)
      {
         bool showing_cursor_on_this_option = false;
         if (menu_item_num == cursor_position) showing_cursor_on_this_option = true;

         std::string menu_item_text = std::get<0>(menu_option);
         al_draw_text(
            menu_font,
            ALLEGRO_COLOR{1, 1, 1, 1},
            surface_width / 2,
            surface_height / 2 + menu_item_vertical_spacing * menu_item_num,
            ALLEGRO_ALIGN_CENTER,
            menu_item_text.c_str()
         );

         if (showing_cursor_on_this_option)
         {
            float menu_item_text_width = al_get_text_width(menu_font, menu_item_text.c_str());
            al_draw_text(
               menu_font,
               ALLEGRO_COLOR{1, 1, 1, 1},
               surface_width / 2 - (menu_item_text_width * 0.5),
               surface_height / 2 + menu_item_vertical_spacing * menu_item_num,
               ALLEGRO_ALIGN_RIGHT,
               ">  "
            );
         }

         menu_item_num++;
      }
      return;


  - name: infer_current_menu_option_value
    private: true
    type: std::string
    body: |
      if (menu_options.empty()) return "";
      if (cursor_position < 0 || cursor_position >= menu_options.size())
      {
         throw std::runtime_error("[AllegroFlare/Screens/TitleScreen]: error: cursor_position is not in "
                                  "a valid position to get the current menu choice's value.");
      }
      std::string current_menu_option_value = std::get<1>(menu_options[cursor_position]);
      return current_menu_option_value;


  - name: infer_current_menu_option_label
    private: true
    type: std::string
    body: |
      if (menu_options.empty()) return "";
      if (cursor_position < 0 || cursor_position >= menu_options.size())
      {
         throw std::runtime_error("[AllegroFlare/Screens/TitleScreen]: error: cursor_position is not in "
                                  "a valid position to get the current menu choice's label.");
      }
      std::string current_menu_option_value = std::get<1>(menu_options[cursor_position]);
      return current_menu_option_value;


  - name: obtain_title_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("DroidSans.ttf -56");


  - name: obtain_menu_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("DroidSans.ttf -48");


  - name: virtual_control_button_down_func
    virtual: true
    override: true
    parameters:
      - name: player_num
        type: int
        default_argument: 0
      - name: button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: 'false'
    body: |
      if (button_num == VirtualControls::get_BUTTON_UP()) move_cursor_up();
      if (button_num == VirtualControls::get_BUTTON_DOWN()) move_cursor_down();
      if (button_num == VirtualControls::get_BUTTON_A()) select_menu_option();
    body_dependency_symbols:
      - AllegroFlare::VirtualControls


dependencies:


  - symbol: ALLEGRO_EVENT*
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::EventEmitter*
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: std::vector<std::pair<std::string, std::string>>
    headers: [ vector, utility, string ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: AllegroFlare::VirtualControls
    headers: [ AllegroFlare/VirtualControls.hpp ]


