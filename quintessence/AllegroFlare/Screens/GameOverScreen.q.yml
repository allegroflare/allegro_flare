parent_classes:


  - class: AllegroFlare::Screens::Base
    scope: public
    init_with: '"GameOverScreen"'


properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: title_text
    type: std::string
    init_with: DEFAULT_TITLE_TEXT
    constructor_arg: true
    setter: true

  - name: menu_options
    type: std::vector<std::pair<std::string, std::string>>
    init_with: DEFAULT_MENU_OPTIONS
    setter: false

  - name: fallback_instruction_text_when_no_menu_options
    type: std::string
    init_with: DEFAULT_FALLBACK_INSTRUCTION_TEXT_WHEN_NO_MENU_OPTIONS
    getter: false
    setter: false

  - name: on_menu_choice_callback_func
    type: std::function<void(AllegroFlare::Screens::GameOverScreen*, void*)>
    init_with: ''
    getter: true
    setter: true

  - name: on_menu_choice_callback_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: cursor_position
    type: int
    init_with: 0

  - name: title_font_name
    type: std::string
    init_with: '"Inter-Regular.ttf"'
    constructor_arg: true
    getter: true
    setter: true

  - name: title_font_size
    type: int
    init_with: -64
    constructor_arg: true
    getter: true
    setter: true

  - name: menu_font_name
    type: std::string
    init_with: '"Inter-Regular.ttf"'
    constructor_arg: true
    getter: true
    setter: true

  - name: menu_font_size
    type: int
    init_with: -32
    constructor_arg: true
    getter: true
    setter: true

  - name: reveal_counter
    type: float
    init_with: 0

  - name: state
    type: uint32_t
    init_with: STATE_UNDEF

  - name: state_is_busy
    type: bool
    init_with: false

  - name: state_changed_at
    type: float
    init_with: 0.0f

  - name: initialized
    type: bool
    init_with: false
    getter: true

  - name: DEFAULT_TITLE_TEXT
    type: std::string
    init_with: '"GAME OVER"'
    static: true
    const: true
    setter: false

  - name: DEFAULT_MENU_OPTIONS
    type: std::vector<std::pair<std::string, std::string>>
    init_with: '{ { "Try again", "try_again" }, { "Go to Title Screen", "start_title_screen" } }'
    static: true
    const: true
    setter: false

  - name: DEFAULT_FALLBACK_INSTRUCTION_TEXT_WHEN_NO_MENU_OPTIONS
    type: std::string
    init_with: '"press any key to continue"'
    static: true
    const: true
    setter: false


enums:


  - name: States
    enumerators:
      - STATE_UNDEF
      - STATE_REVEALING
      - STATE_AWAITING_USER_INPUT
      - STATE_CLOSING_DOWN
      - STATE_DISABLED


documentation:


  - todos:
      - add test for DEFAULT_MENU_OPTION value
      - background does not have clarity on how or if it should use "activate()" or "show()". Same with "deactivate"
        or "hide()"
      - Remove redundant self-dependent AllegroFlare/Screens/GameOverScreen dependency


functions:


  - name: set_menu_options
    parameters:
      - name: menu_options
        type: std::vector<std::pair<std::string, std::string>>
        default_argument: '{}'
    body: |
      // TODO: add tests for this feature
      // TODO: Validate menu options (unique labels, non-empty datas)
      this->menu_options = menu_options;
      cursor_position = 0;
      return;


  - name: clear_menu_options
    body: |
      set_menu_options({});
      return;


  - name: initialize
    body: |
      //menu_options = { { "Try again", "try_again" }, { "Go to Title Screen", "start_title_screen" } };
      cursor_position = 0;
      initialized = true;
      return;


  - name: on_activate
    virtual: true
    override: true
    body: |
      cursor_position = 0;
      set_state(STATE_REVEALING);
      return;


  - name: on_deactivate
    virtual: true
    override: true
    body: |
      set_state(STATE_DISABLED);
      return;


  - name: move_cursor_up
    private: true
    body: |
      if (menu_options.empty()) return;
      cursor_position--;
      if (cursor_position < 0) cursor_position += menu_options.size();
      return;


  - name: move_cursor_down
    private: true
    body: |
      if (menu_options.empty()) return;
      cursor_position++;
      if (cursor_position >= menu_options.size()) cursor_position = cursor_position % menu_options.size();
      return;


  - name: activate_current_chosen_menu_option
    private: true
    guards: [ event_emitter ]
    body: |
      // TODO: Test this callback
      // TODO: Consider if callback should override emission of game event
      if (on_menu_choice_callback_func) on_menu_choice_callback_func(this, on_menu_choice_callback_func_user_data);
      return;


  - name: choose_menu_option
    guards: [ event_emitter ]
    body: |
      // TODO: Add a delay mechanism or spawn an animation prior to activating the menu option
      //activate_current_chosen_menu_option();
      set_state(STATE_CLOSING_DOWN);
      return;


  - name: primary_timer_func
    virtual: true
    override: true
    body: |
      update();
      render();
      return;


  - name: render
    guards: [ al_is_system_installed(), al_is_font_addon_initialized(), get_initialized() ]
    body: |
      draw_primary_text();
      draw_menu();
      return;


  - name: draw_primary_text
    body: |
      // TODO: review guards on this function
      ALLEGRO_FONT *title_font = obtain_title_font();
      float font_line_height = al_get_font_line_height(title_font);
      int surface_width = 1920;
      int surface_height = 1080;

      ALLEGRO_COLOR text_color = ALLEGRO_COLOR{0.8, 0.72, 0.61, 1.0};
      text_color.r *= reveal_counter;
      text_color.g *= reveal_counter;
      text_color.b *= reveal_counter;
      text_color.a *= reveal_counter;

      al_draw_text(
         title_font,
         text_color,
         surface_width / 2,
         surface_height / 2 - font_line_height,
         ALLEGRO_ALIGN_CENTER,
         title_text.c_str()
      );
      return;


  - name: draw_menu
    body: |
      if (!is_state(STATE_AWAITING_USER_INPUT)) return;

      // TODO: review guards on this function
      ALLEGRO_FONT *menu_font = obtain_menu_font();
      float font_line_height = al_get_font_line_height(menu_font);
      int surface_width = 1920;
      int surface_height = 1080;

      float menu_item_vertical_spacing = (int)(al_get_font_line_height(menu_font) * 1.25f);
      int menu_item_num = 0;

      if (menu_options.empty())
      {
         al_draw_text(
            menu_font,
            ALLEGRO_COLOR{1, 1, 1, 1},
            surface_width / 2,
            surface_height / 2 + menu_item_vertical_spacing * menu_item_num + font_line_height * 2,
            ALLEGRO_ALIGN_CENTER,
            fallback_instruction_text_when_no_menu_options.c_str()
         );
      }
      else
      {
         for (auto &menu_option : menu_options)
         {
            bool showing_cursor_on_this_option = false;
            if (menu_item_num == cursor_position) showing_cursor_on_this_option = true;

            std::string menu_item_text = std::get<0>(menu_option);
            al_draw_text(
               menu_font,
               ALLEGRO_COLOR{1, 1, 1, 1},
               surface_width / 2,
               surface_height / 2 + menu_item_vertical_spacing * menu_item_num + font_line_height * 2,
               ALLEGRO_ALIGN_CENTER,
               menu_item_text.c_str()
            );

            if (showing_cursor_on_this_option)
            {
               float menu_item_text_width = al_get_text_width(menu_font, menu_item_text.c_str());
               al_draw_text(
                  menu_font,
                  ALLEGRO_COLOR{1, 1, 1, 1},
                  surface_width / 2 - (menu_item_text_width * 0.5),
                  surface_height / 2 + menu_item_vertical_spacing * menu_item_num + font_line_height * 2,
                  ALLEGRO_ALIGN_RIGHT,
                  ">  "
               );
            }

            menu_item_num++;
         }
      }
      return;


  - name: infer_current_menu_option_value
    type: std::string
    body: |
      if (menu_options.empty()) return "";
      if (cursor_position < 0 || cursor_position >= menu_options.size())
      {
         throw std::runtime_error("[AllegroFlare/Screens/TitleScreen]: error: cursor_position is not in "
                                  "a valid position to get the current menu choice's value.");
      }
      std::string current_menu_option_value = std::get<1>(menu_options[cursor_position]);
      return current_menu_option_value;


  - name: infer_current_menu_option_label
    type: std::string
    body: |
      if (menu_options.empty()) return "";
      if (cursor_position < 0 || cursor_position >= menu_options.size())
      {
         throw std::runtime_error("[AllegroFlare/Screens/TitleScreen]: error: cursor_position is not in "
                                  "a valid position to get the current menu choice's label.");
      }
      std::string current_menu_option_value = std::get<1>(menu_options[cursor_position]);
      return current_menu_option_value;


  - name: virtual_control_button_down_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    body: |
      if (!is_state(STATE_AWAITING_USER_INPUT)) return;

      if (virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_UP) move_cursor_up();
      if (virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_DOWN) move_cursor_down();
      if (virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_A
         || virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_MENU
         )
      {
         choose_menu_option();
      }
    body_dependency_symbols:
      - AllegroFlare::VirtualControllers::GenericController


  - name: set_state
    parameters:
      - name: state
        type: uint32_t
        default_argument: STATE_UNDEF
      - name: override_if_busy
        type: bool
        default_argument: false
    guards: [ is_valid_state(state) ]
    body: |
      if (this->state == state) return;
      if (!override_if_busy && state_is_busy) return;
      uint32_t previous_state = this->state;

      switch (state)
      {
         case STATE_REVEALING: {
            reveal_counter = 0.0f;
         } break;

         case STATE_AWAITING_USER_INPUT: {
            reveal_counter = 1.0f;
         } break;

         case STATE_CLOSING_DOWN: {
         } break;

         case STATE_DISABLED: {
         } break;

         default: {
            throw std::runtime_error("weird error");
         } break;
      }

      this->state = state;
      state_changed_at = al_get_time();

      return;


  - name: update
    parameters:
      - name: time_now
        type: float
        default_argument: al_get_time()
    guards: [ is_valid_state(state) ]
    body: |
      float age = infer_current_state_age(time_now);

      switch (state)
      {
         case STATE_REVEALING: {
            float reveal_speed = 0.01f;
            reveal_counter += reveal_speed;
            if (reveal_counter >= 1.0)
            {
               reveal_counter = 0.01f;
               set_state(STATE_AWAITING_USER_INPUT);
            }
         } break;

         case STATE_AWAITING_USER_INPUT: {
         } break;

         case STATE_CLOSING_DOWN: {
            float hide_speed = 0.01f;
            reveal_counter -= hide_speed;
            if (reveal_counter <= 0.0)
            {
               reveal_counter = 0.0f;
               activate_current_chosen_menu_option();
            }
         } break;

         case STATE_DISABLED: {
         } break;

         default: {
            throw std::runtime_error("weird error");
         } break;
      }

      return;


  - name: is_valid_state
    type: bool
    static: true
    parameters:
      - name: state
        type: uint32_t
        default_argument: STATE_UNDEF
    body: |
      std::set<uint32_t> valid_states =
      {
         STATE_REVEALING,
         STATE_AWAITING_USER_INPUT,
         STATE_CLOSING_DOWN,
         STATE_DISABLED,
      };
      return (valid_states.count(state) > 0);
    body_dependency_symbols:
      - std::set


  - name: is_state
    type: bool
    parameters:
      - name: possible_state
        type: uint32_t
        default_argument: STATE_UNDEF
    body: |
     return (state == possible_state);


  - name: infer_current_state_age
    type: float
    parameters:
      - name: time_now
        type: float
        default_argument: al_get_time()
    body: |
      return (time_now - state_changed_at);


  - name: obtain_title_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      std::stringstream title_font_identifier;
      title_font_identifier << title_font_name << " " << title_font_size;
      return font_bin->auto_get(title_font_identifier.str());


  - name: obtain_menu_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      std::stringstream menu_font_identifier;
      menu_font_identifier << menu_font_name << " " << menu_font_size;
      return font_bin->auto_get(menu_font_identifier.str());


dependencies:


  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::VirtualController
    headers: [ AllegroFlare/VirtualController.hpp ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::Player
    headers: [ AllegroFlare/Player.hpp ]
  - symbol: AllegroFlare::VirtualControllers::Base
    headers: [ AllegroFlare/VirtualControllers/Base.hpp ]
  - symbol: AllegroFlare::VirtualControllers::GenericController
    headers: [ AllegroFlare/VirtualControllers/GenericController.hpp ]
  - symbol: AllegroFlare::Elements::Backgrounds::Base
    headers: [ AllegroFlare/Elements/Backgrounds/Base.hpp ]
  - symbol: AllegroFlare::Screens::GameOverScreen
    headers: [ AllegroFlare/Screens/GameOverScreen.hpp ]


