parent_classes:


  - class: AllegroFlare::Screens::Base
    scope: public
    init_with: AllegroFlare::Screens::Gameplay::TYPE


properties:


  - name: on_finished_callback_func
    type: std::function<void(AllegroFlare::Screens::Gameplay*, void*)>
    init_with: ''
    getter: true
    setter: true

  - name: on_finished_callback_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: player_input_controller
    type: AllegroFlare::PlayerInputControllers::Base*
    init_with: nullptr
    getter: true
    setter: explicit

  - name: gameplay_suspended
    type: bool
    init_with: false
    getter: true

  - name: suspended_keyboard_state
    type: AllegroFlare::SuspendedKeyboardState
    init_with: '{}'
    getter: true
    getter_ref: true

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/Screens/Gameplay"'
    static: true
    constexpr: true


documentation:


  - notes:
     - Note that TYPE is not used from this class. Ideally, quintessence would have a "passthrough" and type would be
       passed along to the base class
     - Ideally would like to remove "load_level_by_identifier" from this class
     - Note that using "set_player_input_controller" will deactivate and activate the current controller
  - todos:
     - Include SuspendedJoystickState as well (find a way to inject the joystick)
     - Finish integrating the player_input_controller by routing the remaining events to it
     - Have a shutdown, so the player_input_controller needs to have on_deactivate() called
     - Migrate this class to use "primary_update_func" and "primary_render_func" with that required update strategy,
       e.g. set_update_strategy(AllegroFlare::Screens::Base::UpdateStrategy::SEPARATE_UPDATE_AND_RENDER_FUNCS);


methods:


  - name: set_player_input_controller
    parameters:
      - name: player_input_controller
        type: AllegroFlare::PlayerInputControllers::Base*
        default_argument: nullptr
    body: |
      if (player_input_controller)
      {
         AllegroFlare::Logger::info_from(
            "AllegroFlare::Screens::Gameplay::set_player_input_controller",
            "deactivating current player_input_controller"
         );
         player_input_controller->on_deactivate();
      }
      this->player_input_controller = player_input_controller;
      AllegroFlare::Logger::info_from(
         "AllegroFlare::Screens::Gameplay::set_player_input_controller",
         "activating new player_input_controller"
      );
      this->player_input_controller->on_activate();
      return;
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: dialog_system_switch_in_func
    virtual: true
    override: true
    body: |
      // Function that is called on ALLEGRO_FLARE_DIALOG_SWITCHED_IN
      // TODO: Consider disabling automatic suspend and unsuspend with an option on this class
      suspend_gameplay();
      return;


  - name: dialog_system_switch_out_func
    virtual: true
    override: true
    body: |
      // Function that is called on ALLEGRO_FLARE_DIALOG_SWITCHED_OUT
      // TODO: Consider disabling automatic suspend and unsuspend with an option on this class
      resume_suspended_gameplay();
      return;


  - name: suspend_gameplay
    body: |
      if (gameplay_suspended) return; // TODO: Should this throw? (it caused an issue in a Routers/Standard test)
      suspended_keyboard_state.capture_initial_keyboard_state(); // TODO: Add guard if state cannot be captured
      gameplay_suspended = true;
      gameplay_suspend_func();

      // Suspend the player input controls
      if (player_input_controller) player_input_controller->gameplay_suspend_func();

      return;


  - name: resume_suspended_gameplay
    body: |
      if (!gameplay_suspended) return; // TODO: Should this throw? (it caused an issue in a Routers/Standard test)
      gameplay_suspended = false;
      suspended_keyboard_state.capture_subsequent_keyboard_state(); // TODO: Add guard if state cannot be captured
      suspended_keyboard_state.calculate_keyboard_state_changes(); // TODO: Add guard if state cannot be captured
      gameplay_resume_func();
      suspended_keyboard_state.reset();

      // Resume the player input controls
      if (player_input_controller) player_input_controller->gameplay_resume_func();

      return;


  - name: toggle_suspend_gameplay
    body: |
      gameplay_suspended = !gameplay_suspended;
      if (gameplay_suspended) gameplay_suspend_func();
      else gameplay_resume_func();
      return;


  - name: gameplay_suspend_func
    virtual: true
    body: |
      // Function that is called immediately after the gameplay is suspended.
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::Screens::Gameplay::gameplay_suspend_func",
         "Not implemented in the base class. This method must be implemented in the derived class. Take into account "
            "the AllegroFlare/Screens/Gameplay class has a suspend_gameplay func"
      );
      return;


  - name: gameplay_resume_func
    virtual: true
    body: |
      // Function that is called immediately after the gameplay is resumed.
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::Screens::Gameplay::gameplay_suspend_func",
         "Not implemented in the base class. This method must be implemented in the derived class. Take into account "
            "the AllegroFlare/Screens/Gameplay class has a resume_gameplay func"
      );
      return;


  - name: primary_timer_func
    virtual: true
    override: true
    body: |
      if (player_input_controller)
      {
         double time_now = al_get_time();
         double placeholder_fps = 1.0/60.0;
         player_input_controller->update_time_step(time_now, placeholder_fps);
      }

      return;


  - name: primary_update_func
    virtual: true
    override: true
    parameters:
      - name: time_now
        type: double
        default_argument: al_get_time()
        default_argument_dependency_symbols: [ al_get_time ]
      - name: delta_time
        type: double
        default_argument: 1.0 / 60.0
    body: |
      if (player_input_controller) player_input_controller->update_time_step(time_now, delta_time);
      return;


  - name: primary_render_func
    virtual: true
    override: true
    body: |
      //if (player_input_controller)
      //{
         //player_input_controller->update_player_controlled_entity_velocity_from_player_input();
      //}
      return;


  - name: call_on_finished_callback_func
    body: |
      // TODO: Test this callback call
      if (on_finished_callback_func) on_finished_callback_func(this, on_finished_callback_func_user_data);
      return;
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: load_level_by_identifier
    type: bool
    virtual: true
    parameters:
      - name: possible_type
        type: std::string
        default_argument: '""'
    body: |
      AllegroFlare::Logger::warn_from(
         "AllegroFlare::Screens::Gameplay::load_level_by_identifier",
         "Nothing to do here, returning false (false indicates that no level was loaded as a result of this method "
            "call. Consider removing this method and have loading occur outside of this screen class."
      );
      return false; // NOTE: false indicates that no level was loaded as a result of this method call
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: virtual_control_button_down_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    body: |
      if (player_input_controller)
      {
         player_input_controller->virtual_control_button_down_func(
            player,
            virtual_controller,
            virtual_controller_button_num,
            is_repeat
         );
      }
      return;


  - name: virtual_control_button_up_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    body: |
      if (player_input_controller)
      {
         player_input_controller->virtual_control_button_up_func(
            player,
            virtual_controller,
            virtual_controller_button_num,
            is_repeat
         );
      }
      return;


  - name: joy_axis_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    body: |
      if (player_input_controller) player_input_controller->joy_axis_func(ev);
      return;


  - name: mouse_down_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    body: |
      if (player_input_controller) player_input_controller->mouse_down_func(ev);
      return;


  - name: mouse_axes_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    body: |
      if (player_input_controller) player_input_controller->mouse_axes_func(ev);
      return;


dependencies:


  - symbol: al_get_time
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::Screens::Gameplay
    headers: [ AllegroFlare/Screens/Gameplay.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::SuspendedKeyboardState
    headers: [ AllegroFlare/SuspendedKeyboardState.hpp ]
  - symbol: AllegroFlare::PlayerInputControllers::Base
    headers: [ AllegroFlare/PlayerInputControllers/Base.hpp ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Player
    headers: [ AllegroFlare/Player.hpp ]
  - symbol: AllegroFlare::VirtualControllers::Base
    headers: [ AllegroFlare/VirtualControllers/Base.hpp ]


