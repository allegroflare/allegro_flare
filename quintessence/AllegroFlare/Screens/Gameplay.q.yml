parent_classes:


  - class: AllegroFlare::Screens::Base
    scope: public
    init_with: AllegroFlare::Screens::Gameplay::TYPE


properties:


  - name: on_finished_callback_func
    type: std::function<void(AllegroFlare::Screens::Gameplay*, void*)>
    init_with: ''
    getter: true
    setter: true

  - name: on_finished_callback_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: gameplay_suspended
    type: bool
    init_with: false
    getter: true

  - name: suspended_keyboard_state
    type: AllegroFlare::SuspendedKeyboardState
    init_with: '{}'
    getter: true
    getter_ref: true

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/Screens/Gameplay"'
    static: true
    constexpr: true


documentation:


  - notes:
     - Note that TYPE is not used from this class. Ideally, quintessence would have a "passthrough" and type would be
       passed along to the base class
     - Ideally would like to remove "load_level_by_identifier" from this class
  - todos:
     - Include SuspendedJoystickState as well (find a way to inject the joystick)


methods:


  - name: dialog_system_switch_in_func
    virtual: true
    override: true
    body: |
      // Function that is called on ALLEGRO_FLARE_DIALOG_SWITCHED_IN
      // TODO: Consider disabling automatic suspend and unsuspend with an option on this class
      suspend_gameplay();
      return;


  - name: dialog_system_switch_out_func
    virtual: true
    override: true
    body: |
      // Function that is called on ALLEGRO_FLARE_DIALOG_SWITCHED_OUT
      // TODO: Consider disabling automatic suspend and unsuspend with an option on this class
      resume_suspended_gameplay();
      return;


  - name: gameplay_suspend_func
    virtual: true
    body: |
      // Function that is called immediately after the gameplay is suspended.
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::Screens::Gameplay::gameplay_suspend_func",
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      return;


  - name: gameplay_resume_func
    virtual: true
    body: |
      // Function that is called immediately after the gameplay is resumed.
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::Screens::Gameplay::gameplay_suspend_func",
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      return;


  - name: suspend_gameplay
    body: |
      if (gameplay_suspended) return;
      suspended_keyboard_state.capture_initial_keyboard_state(); // TODO: Add guard if state cannot be captured
      gameplay_suspended = true;
      gameplay_suspend_func();
      return;


  - name: resume_suspended_gameplay
    body: |
      if (!gameplay_suspended) return;
      gameplay_suspended = false;
      suspended_keyboard_state.capture_subsequent_keyboard_state(); // TODO: Add guard if state cannot be captured
      suspended_keyboard_state.calculate_keyboard_state_changes(); // TODO: Add guard if state cannot be captured
      gameplay_resume_func();
      suspended_keyboard_state.reset();
      return;


  - name: toggle_suspend_gameplay
    body: |
      gameplay_suspended = !gameplay_suspended;
      if (gameplay_suspended) gameplay_suspend_func();
      else gameplay_resume_func();
      return;


  - name: call_on_finished_callback_func
    body: |
      // TODO: Test this callback call
      if (on_finished_callback_func) on_finished_callback_func(this, on_finished_callback_func_user_data);
      return;
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: load_level_by_identifier
    virtual: true
    parameters:
      - name: possible_type
        type: std::string
        default_argument: '""'
    body: |
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::Screens::Gameplay::load_level_by_identifier",
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      return;
    body_dependency_symbols:
      - AllegroFlare::Logger


dependencies:


  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::Screens::Gameplay
    headers: [ AllegroFlare/Screens/Gameplay.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::SuspendedKeyboardState
    headers: [ AllegroFlare/SuspendedKeyboardState.hpp ]


