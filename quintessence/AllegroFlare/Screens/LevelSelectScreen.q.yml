parent_classes:


  - class: AllegroFlare::Screens::Base
    scope: public
    init_with: AllegroFlare::Screens::LevelSelectScreen::TYPE


properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true

  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: level_select_element
    type: AllegroFlare::Elements::LevelSelect
    init_with: ''
    getter_ref: true

  - name: on_menu_choice_callback_func
    type: std::function<void(AllegroFlare::Screens::LevelSelectScreen*, void*)>
    init_with: ''
    getter: true
    setter: true

  - name: on_menu_choice_callback_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: initialized
    type: bool
    init_with: false

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/Screens/LevelSelectScreen"'
    static: true
    constexpr: true


functions:


  - name: set_event_emitter
    guards: [ (!initialized) ]
    parameters:
      - name: event_emitter
        type: AllegroFlare::EventEmitter*
        default_argument: nullptr
    body: |
      this->event_emitter = event_emitter;
      return;


  - name: set_bitmap_bin
    guards: [ (!initialized) ]
    parameters:
      - name: bitmap_bin
        type: AllegroFlare::BitmapBin*
        default_argument: nullptr
    body: |
      this->bitmap_bin = bitmap_bin;
      return;


  - name: set_font_bin
    guards: [ (!initialized) ]
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
    body: |
      this->font_bin = font_bin;
      return;


  - name: set_levels_list
    parameters:
      - name: levels_list
        type: std::vector<std::pair<std::string, std::string>>
        default_argument: '{}'
    body: |
      level_select_element.set_levels_list(levels_list);
      return;


  - name: initialize
    guards:
      - (!initialized)
      - al_is_system_installed()
      - al_is_primitives_addon_initialized()
      - al_is_font_addon_initialized()
      - event_emitter
      - bitmap_bin
      - font_bin
    body: |
      initialized = true;

      level_select_element.set_event_emitter(event_emitter);
      level_select_element.set_font_bin(font_bin);
      level_select_element.set_on_menu_choice_callback_func([this](AllegroFlare::Elements::LevelSelect*, void*){
         if (on_menu_choice_callback_func)
            on_menu_choice_callback_func(this, on_menu_choice_callback_func_user_data);
      });

      return;
    body_dependency_symbols:
      - al_is_primitives_addon_initialized


  - name: on_activate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      // TODO: emit_event_to_update_input_hints_bar();
      // TODO: emit_show_and_size_input_hints_bar_event();

      // TODO: Test the calling and error message response here in this "submit_on_activate_if_empty" block
      bool submit_on_activate_if_empty = true;
      if (submit_on_activate_if_empty)
      {
         if (!on_menu_choice_callback_func)
         {
            AllegroFlare::Logger::throw_error(
               "AllegroFlare::Screens::LevelSelectScreen",
               "\"submit_on_activate_if_empty\" is set to true, thus expecting an \"on_menu_choice_callback_func\" "
                  " to be present but it is not."
            );
         }
         on_menu_choice_callback_func(this, on_menu_choice_callback_func_user_data);
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: on_deactivate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      // TODO: emit_hide_and_restore_size_input_hints_bar_event();
      return;


  - name: update
    guards: [ initialized ]
    body: |
      return;


  - name: render
    guards: [ initialized ]
    body: |
      level_select_element.render();
      return;


  - name: activate_selected_menu_option
    guards: [ initialized ]
    body: |
      level_select_element.activate_selected_menu_option();
      return;


  - name: infer_current_menu_option_value
    guards: [ initialized ]
    type: std::string
    body: |
      return level_select_element.infer_current_menu_option_value();


  - name: primary_timer_func
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      update();
      render();
      return;


  - name: virtual_control_button_up_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      // TODO: this function
      return;


  - name: virtual_control_button_down_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      // TODO: Confirm usage of VirtualControllers::GenericController

      switch(virtual_controller_button_num)
      {
         case VirtualControllers::GenericController::BUTTON_UP: {
            level_select_element.move_cursor_up();
         } break;

         case VirtualControllers::GenericController::BUTTON_DOWN: {
            level_select_element.move_cursor_down();
         } break;

         case VirtualControllers::GenericController::BUTTON_LEFT: {
            level_select_element.move_cursor_left();
         } break;

         case VirtualControllers::GenericController::BUTTON_RIGHT: {
            level_select_element.move_cursor_right();
         } break;

         case VirtualControllers::GenericController::BUTTON_A: {
            activate_selected_menu_option();
         } break;
      }

      return;
    body_dependency_symbols:
      - AllegroFlare::VirtualControllers::GenericController


  - name: virtual_control_axis_change_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      // TODO: this function
      return;


dependencies:


  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Player
    headers: [ AllegroFlare/Player.hpp ]
  - symbol: AllegroFlare::VirtualControllers::Base
    headers: [ AllegroFlare/VirtualControllers/Base.hpp ]
  - symbol: AllegroFlare::VirtualControllers::GenericController
    headers: [ AllegroFlare/VirtualControllers/GenericController.hpp ]
  - symbol: AllegroFlare::Elements::LevelSelect
    headers: [ AllegroFlare/Elements/LevelSelect.hpp ]
  - symbol: AllegroFlare::Screens::LevelSelectScreen
    headers: [ AllegroFlare/Screens/LevelSelectScreen.hpp ]
  - symbol: AllegroFlare::Elements::Backgrounds::Base
    headers: [ AllegroFlare/Elements/Backgrounds/Base.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]


