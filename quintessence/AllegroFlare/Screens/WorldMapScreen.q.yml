parent_classes:


  - class: AllegroFlare::Screens::Base
    scope: public
    init_with: AllegroFlare::Screens::WorldMapScreen::TYPE


properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: map_viewer
    type: AllegroFlare::Elements::WorldMapViewer
    init_with: '{}'

  - name: on_exit_callback_func
    type: std::function<void(AllegroFlare::Screens::WorldMapScreen*, void*)>
    init_with: ''
    getter: true
    setter: true

  - name: on_exit_callback_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: on_activate_callback_func
    type: std::function<void(AllegroFlare::Screens::WorldMapScreen*, void*)>
    init_with: ''
    getter: true
    setter: true

  - name: on_activate_callback_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: initialized
    type: bool
    init_with: false

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/Screens/WorldMapScreen"'
    static: true
    constexpr: true


methods:


  - name: set_bitmap_bin
    guards: [ (!initialized) ]
    parameters:
      - name: bitmap_bin
        type: AllegroFlare::BitmapBin*
        default_argument: nullptr
    body: |
      this->bitmap_bin = bitmap_bin;
      map_viewer.set_bitmap_bin(bitmap_bin);
      return;


  - name: set_font_bin
    guards: [ (!initialized) ]
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
    body: |
      this->font_bin = font_bin;
      map_viewer.set_font_bin(font_bin);
      return;


  - name: initialize
    guards:
      - (!initialized)
      - al_is_system_installed()
      - al_is_primitives_addon_initialized()
      - al_is_font_addon_initialized()
      - bitmap_bin
      - font_bin
    body: |
      initialized = true;

      map_viewer.set_bitmap_bin(bitmap_bin);
      map_viewer.set_font_bin(font_bin);
      map_viewer.initialize();
      //crime_summary.set_map(&map);

      return;
    body_dependency_symbols:
      - al_is_primitives_addon_initialized


  - name: set_map
    parameters:
      - name: map
        type: AllegroFlare::WorldMaps::Maps::Basic*
        default_argument: nullptr
    guards: [ bitmap_bin ]
    body: |
      map_viewer.set_map(map);
      return;


  - name: on_activate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      map_viewer.on_switch_in();
      //emit_event_to_update_input_hints_bar(); // Requires event_emitter
      //emit_show_and_size_input_hints_bar_event();
      return;


  - name: on_deactivate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      map_viewer.on_switch_out();
      //emit_hide_and_restore_size_input_hints_bar_event();
      return;


  - name: primary_timer_func
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      map_viewer.update();
      map_viewer.render();
      return;


  - name: activate_at_cursor
    body: |
      if (on_activate_callback_func) on_activate_callback_func(this, on_activate_callback_func_user_data);
      return;


  - name: activate_exit_screen
    body: |
      if (on_exit_callback_func) on_exit_callback_func(this, on_exit_callback_func_user_data);
      return;


  - name: virtual_control_button_up_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      switch(virtual_controller_button_num)
      {
         case AllegroFlare::VirtualControllers::GenericController::BUTTON_UP:
         case AllegroFlare::VirtualControllers::GenericController::BUTTON_DOWN:
            map_viewer.unset_cursor_moving_vertical();
         break;

         case AllegroFlare::VirtualControllers::GenericController::BUTTON_LEFT:
         case AllegroFlare::VirtualControllers::GenericController::BUTTON_RIGHT:
            map_viewer.unset_cursor_moving_horizontal();
         break;
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::VirtualControllers::GenericController


  - name: virtual_control_button_down_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      //if (mode != MODE_USING_VIRTUAL_CONTROLS) return;

      // TODO: validate VirtualControllers::GenericController type

      switch(virtual_controller_button_num)
      {
         case AllegroFlare::VirtualControllers::GenericController::BUTTON_UP:
            map_viewer.set_cursor_moving_up();
         break;

         case AllegroFlare::VirtualControllers::GenericController::BUTTON_DOWN:
            map_viewer.set_cursor_moving_down();
         break;

         case AllegroFlare::VirtualControllers::GenericController::BUTTON_LEFT:
            map_viewer.set_cursor_moving_left();
         break;

         case AllegroFlare::VirtualControllers::GenericController::BUTTON_RIGHT:
            map_viewer.set_cursor_moving_right();
         break;

         case AllegroFlare::VirtualControllers::GenericController::BUTTON_RIGHT_BUMPER:
            map_viewer.step_zoom_in();
         break;

         case AllegroFlare::VirtualControllers::GenericController::BUTTON_LEFT_BUMPER:
            map_viewer.step_zoom_out();
         break;

         case AllegroFlare::VirtualControllers::GenericController::BUTTON_A: {
            activate_at_cursor();
         } break;

         case AllegroFlare::VirtualControllers::GenericController::BUTTON_B: {
            map_viewer.snap_cursor_to_origin_or_primary_point_of_interest();
         } break;

         case AllegroFlare::VirtualControllers::GenericController::BUTTON_X:
            activate_exit_screen();
         break;
      }

      return;
    body_dependency_symbols:
      - AllegroFlare::VirtualControllers::GenericController


  - name: virtual_control_axis_change_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      // TODO: this function
      return;



dependencies:


  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Player
    headers: [ AllegroFlare/Player.hpp ]
  - symbol: AllegroFlare::VirtualControllers::Base
    headers: [ AllegroFlare/VirtualControllers/Base.hpp ]
  - symbol: AllegroFlare::Screens::WorldMapScreen
    headers: [ AllegroFlare/Screens/WorldMapScreen.hpp ]
  - symbol: AllegroFlare::Elements::WorldMapViewer
    headers: [ AllegroFlare/Elements/WorldMapViewer.hpp ]
  - symbol: AllegroFlare::WorldMaps::Maps::Basic
    headers: [ AllegroFlare/WorldMaps/Maps/Basic.hpp ]
  - symbol: AllegroFlare::VirtualControllers::GenericController
    headers: [ AllegroFlare/VirtualControllers/GenericController.hpp ]


