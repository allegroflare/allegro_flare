parent_classes:


  - class: AllegroFlare::Screens::Base
    scope: public
    init_with: '"Storyboard"'


properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: storyboard_element
    type: AllegroFlare::Elements::Storyboard
    init_with: '{}'
    getter_ref: true
    setter: false

  - name: auto_advance
    type: bool
    init_with: false
    getter: true
    setter: true

  - name: game_event_name_to_emit_after_completing
    type: std::string
    init_with: '"storyboard_finished"'
    constructor_arg: true
    getter: true
    setter: true

  - name: initialized
    type: bool
    init_with: false


functions:


  - name: initialize
    guards: [ (!initialized) ]
    body: |
      storyboard_element.set_font_bin(font_bin);
      initialized = true;
      return;


  - name: on_activate
    virtual: true
    override: true
    guards: [ initialized ] 
    body: |
      storyboard_element.reset();
      return;


  - name: primary_timer_func
    virtual: true
    override: true
    guards: [ initialized ] 
    body: |
      storyboard_element.update();
      if (storyboard_element.get_can_advance_to_next_page() && auto_advance) advance();

      storyboard_element.render();
      return;


  - name: emit_completion_event
    private: true
    type: void
    body: |
      if (!game_event_name_to_emit_after_completing.empty())
      {
         event_emitter->emit_game_event(AllegroFlare::GameEvent(game_event_name_to_emit_after_completing));
      }
      return;


  - name: advance
    private: true
    guards: [ initialized, event_emitter ]
    body: |
      if (storyboard_element.get_finished()) return;

      storyboard_element.advance();

      if (storyboard_element.get_finished())
      {
         emit_completion_event();
      }

      return;


  - name: virtual_control_button_down_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized, event_emitter ]
    body: |
      if (storyboard_element.get_finished()) return;

      // TODO: validate controller type

      if (virtual_controller_button_num == AllegroFlare::VirtualControllers::GenericController::BUTTON_A
        || virtual_controller_button_num == AllegroFlare::VirtualControllers::GenericController::BUTTON_MENU
        || virtual_controller_button_num == AllegroFlare::VirtualControllers::GenericController::BUTTON_RIGHT)
      {
         advance();
      }

      return;
    body_dependency_symbols:
      - AllegroFlare::VirtualControllers::GenericController


dependencies:


  - symbol: AllegroFlare::Elements::Storyboard
    headers: [ AllegroFlare/Elements/Storyboard.hpp ]
  - symbol: AllegroFlare::Color
    headers: [ AllegroFlare/Color.hpp ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: al_draw_multiline_text
    headers: [ allegro5/allegro_font.h ]
  - symbol: AllegroFlare::VirtualController
    headers: [ AllegroFlare/VirtualController.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::Player
    headers: [ AllegroFlare/Player.hpp ]
  - symbol: AllegroFlare::VirtualControllers::Base
    headers: [ AllegroFlare/VirtualControllers/Base.hpp ]
  - symbol: AllegroFlare::VirtualControllers::GenericController
    headers: [ AllegroFlare/VirtualControllers/GenericController.hpp ]


