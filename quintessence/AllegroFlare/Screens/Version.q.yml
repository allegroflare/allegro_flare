parent_classes:


  - class: AllegroFlare::Screens::Base
    scope: public
    init_with: AllegroFlare::Screens::Version::TYPE


properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true

  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: model_bin
    type: AllegroFlare::ModelBin*
    init_with: nullptr
    constructor_arg: true

  - name: surface_width
    type: float
    init_with: 1920
    constructor_arg: true
    getter: true
    setter: true

  - name: surface_height
    type: float
    init_with: 1080
    constructor_arg: true
    getter: true
    setter: true

  - name: cached_calculated_height
    type: float
    init_with: 0.0f
    getter: true

  - name: rolling_credits_component
    type: AllegroFlare::Elements::RollingCredits::RollingCredits
    init_with: '{}'

  - name: on_exit_callback_func
    type: std::function<void(AllegroFlare::Screens::Version*, void*)>
    init_with: ''
    getter: true
    setter: true

  - name: on_exit_callback_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: game_event_name_to_emit_on_exit
    type: std::string
    init_with: DEFAULT_EVENT_NAME_ON_EXIT
    getter: true
    setter: true

  - name: background
    type: AllegroFlare::Elements::Backgrounds::Base*
    init_with: nullptr
    setter: true
    getter: true

  - name: initialized
    type: bool
    init_with: false

  - name: DEFAULT_EVENT_NAME_ON_EXIT
    type: char*
    init_with: '(char*)"exit_achievements_screen"'
    static: true
    constexpr: true

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/Screens/Version"'
    static: true
    constexpr: true


functions:


  - name: set_event_emitter
    guards: [ (!initialized) ]
    parameters:
      - name: event_emitter
        type: AllegroFlare::EventEmitter*
        default_argument: nullptr
    body: |
      this->event_emitter = event_emitter;
      return;


  - name: set_bitmap_bin
    guards: [ (!initialized) ]
    parameters:
      - name: bitmap_bin
        type: AllegroFlare::BitmapBin*
        default_argument: nullptr
    body: |
      this->bitmap_bin = bitmap_bin;
      return;


  - name: set_font_bin
    guards: [ (!initialized) ]
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
    body: |
      this->font_bin = font_bin;
      return;


  - name: set_model_bin
    guards: [ (!initialized) ]
    parameters:
      - name: model_bin
        type: AllegroFlare::ModelBin*
        default_argument: nullptr
    body: |
      this->model_bin = model_bin;
      return;


  - name: initialize
    guards:
      - (!initialized)
      - al_is_system_installed()
      - al_is_primitives_addon_initialized()
      - al_is_font_addon_initialized()
      - event_emitter
      - bitmap_bin
      - font_bin
      - model_bin
    body: |
      rolling_credits_component.set_surface_height(surface_height);
      rolling_credits_component.set_surface_width(surface_width);
      rolling_credits_component.set_font_bin(font_bin);
      rolling_credits_component.initialize();

      AllegroFlare::Elements::RollingCredits::SectionFactory section_factory;

      ReleaseInfo release_info;
      BuildInfo build_info;

      rolling_credits_component.set_sections({
         section_factory.create_header("Version"),
         section_factory.create_column_with_labels({
            // TODO: Fill out these values
            {
               "Version",
               release_info.get_version()
            },
            {
               "Allegro Flare",
               truncate_to_n_characters(release_info.get_allegro_flare_version_git_hash())
            },
            {
               "Blast",
               truncate_to_n_characters(release_info.get_blast_version_git_hash())
            },
            //{ "Allegro Flare", release_info.get_allegro_flare_version_git_hash() },
            //{ "Allegro", "5.2.8.0" },
            //{ "Allegro", "5.2.8.0" },
            //{ "AllegroFlare", "0.8.11-wip" },
         }),
         section_factory.create_header("Build"),
         section_factory.create_column_with_labels({
            // TODO: Fill out these values
            {
               "Time of Build",
               build_info.get_time_of_build()
            },
            {
               "Allegro 5",
               truncate_to_n_characters(build_info.get_allegro_version_git_hash())
            },
         }),
      });
      cached_calculated_height = rolling_credits_component.calculate_height();
      initialized = true;
      //AllegroFlare::Elements::RollingCredits::SectionFactory section_factory;
      return;
    body_dependency_symbols:
      - al_is_primitives_addon_initialized
      - AllegroFlare::Elements::RollingCredits::SectionFactory
      - ReleaseInfo
      - BuildInfo


  - name: on_activate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      if (background) background->activate();
      //emit_event_to_update_input_hints_bar();
      //emit_show_and_size_input_hints_bar_event();
      return;


  - name: on_deactivate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      if (background) background->deactivate();
      //emit_hide_and_restore_size_input_hints_bar_event();
      return;


  - name: update
    body: |
      return;


  - name: render
    body: |
      rolling_credits_component.set_y_offset(surface_height/2 - cached_calculated_height/2);
      rolling_credits_component.render();
      return;


  - name: primary_timer_func
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      if (background) background->update();
      update();
      if (background) background->render();
      render();
      return;


  - name: virtual_control_button_down_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    body: |
      // NOTE: Some examples:
      //if (virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_UP)
         //move_scrollbar_position_up();
      //if (virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_DOWN)
         //move_scrollbar_position_down();

      event_emitter->emit_game_event(game_event_name_to_emit_on_exit);

      // TODO: Test this
      if (on_exit_callback_func) on_exit_callback_func(this, on_exit_callback_func_user_data);

    body_dependency_symbols:
      - AllegroFlare::VirtualControllers::GenericController


  - name: truncate_to_n_characters
    type: std::string
    static: true
    parameters:
      - name: str
        type: std::string
        default_argument: '""'
      - name: num_characters
        type: std::size_t
        default_argument: 8
    guards: [ (num_characters >= 1) ]
    body: |
      if (str.length() <= num_characters) return str;
      return str.substr(0, num_characters);


dependencies:


  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::VirtualControllers::GenericController
    headers: [ AllegroFlare/VirtualControllers/GenericController.hpp ]
  - symbol: AllegroFlare::VirtualControllers::Base
    headers: [ AllegroFlare/VirtualControllers/Base.hpp ]
  - symbol: AllegroFlare::Player
    headers: [ AllegroFlare/Player.hpp ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Elements::RollingCredits::RollingCredits
    headers: [ AllegroFlare/Elements/RollingCredits/RollingCredits.hpp ]
  - symbol: AllegroFlare::Elements::RollingCredits::SectionFactory
    headers: [ AllegroFlare/Elements/RollingCredits/SectionFactory.hpp ]
  - symbol: ReleaseInfo
    headers: [ ReleaseInfo.hpp ]
  - symbol: BuildInfo
    headers: [ BuildInfo.hpp ]
  - symbol: AllegroFlare::Screens::Version
    headers: [ AllegroFlare/Screens/Version.hpp ]
  - symbol: AllegroFlare::Elements::Backgrounds::Base
    headers: [ AllegroFlare/Elements/Backgrounds/Base.hpp ]


