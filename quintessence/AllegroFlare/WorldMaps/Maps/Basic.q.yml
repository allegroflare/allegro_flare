parent_classes:


  - class: AllegroFlare::WorldMaps::Maps::Base
    scope: public
    init_with: AllegroFlare::WorldMaps::Maps::Basic::TYPE


properties:


  - name: background_image_identifier
    type: std::string
    init_with: '"[unset-background_image_identifier]"'
    constructor_arg: true
    getter: true
    setter: true

  - name: locations
    type: std::map<std::string, AllegroFlare::WorldMaps::Locations::Base*>
    init_with: '{}'
    constructor_arg: true
    setter: true
    getter: true

  - name: width
    type: float
    init_with: 0.0f
    constructor_arg: true
    setter: true
    getter: true

  - name: height
    type: float
    init_with: 0.0f
    constructor_arg: true
    setter: true
    getter: true

  - name: primary_point_of_interest_identifier
    type: std::string
    init_with: DEFAULT_PRIMARY_POINT_OF_INTEREST_IDENTIFIER
    constructor_arg: true
    setter: true
    getter: true

  - name: DEFAULT_PRIMARY_POINT_OF_INTEREST_IDENTIFIER
    type: char*
    init_with: '"[unset-primary_point_of_interest_identifier]"'
    static: true
    constexpr: true

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/WorldMaps/Maps/Basic"'
    static: true
    constexpr: true


methods:


  - name: infer_primary_point_of_interest_coordinates
    type: std::pair<float, float>
    virtual: true
    override: true
    body: |
      if (primary_point_of_interest_is_set() && primary_point_of_interest_is_on_map())
      {
         AllegroFlare::WorldMaps::Locations::Base* location = locations[primary_point_of_interest_identifier];
         if (location->is_type(AllegroFlare::WorldMaps::Locations::Basic::TYPE))
         {
            AllegroFlare::WorldMaps::Locations::Basic *as =
               static_cast<AllegroFlare::WorldMaps::Locations::Basic*>(location);
            return { as->get_x(), as->get_y() };
         }
         else
         {
            // TODO: Warn once that this type is not supported
            AllegroFlare::Logger::warn_from_once(
               "AllegroFlare::WorldMaps::Maps::Basic",
               "Na bro"
            );
         }
      }
      return { 0.0f, 0.0f };
    body_dependency_symbols:
      - AllegroFlare::WorldMaps::Locations::Basic
      - AllegroFlare::Logger


  - name: primary_point_of_interest_is_set
    type: bool
    body: |
      return (primary_point_of_interest_identifier == DEFAULT_PRIMARY_POINT_OF_INTEREST_IDENTIFIER);


  - name: primary_point_of_interest_is_on_map
    type: bool
    body: |
      return (locations.find(primary_point_of_interest_identifier) != locations.end());


  - name: location_exists
    type: bool
    parameters:
      - name: location_id
        type: std::string
        default_argument: '"[unset-location_id]"'
    body: |
      // TODO: Test these
      return (locations.count(location_id) != 0);


  - name: find_location_by_id
    type: AllegroFlare::WorldMaps::Locations::Base*
    parameters:
      - name: location_id
        type: std::string
        default_argument: '"[unset-location_id]"'
    body: |
      // TODO: Test these
      if (locations.count(location_id) == 0) return nullptr;
      return locations[location_id];


  - name: location_id_at
    type: std::string
    virtual: true
    override: true
    parameters:
      - name: x
        type: float
        default_argument: 0
      - name: y
        type: float
        default_argument: 0
    body: |
      for (auto &location : locations) if (location.second->collides(x, y)) return location.first;
      return "";


dependencies:


  - symbol: AllegroFlare::WorldMaps::Maps::Base
    headers: [ AllegroFlare/WorldMaps/Maps/Base.hpp ]
  - symbol: AllegroFlare::WorldMaps::Locations::Base
    headers: [ AllegroFlare/WorldMaps/Locations/Base.hpp ]
  - symbol: AllegroFlare::WorldMaps::Locations::Basic
    headers: [ AllegroFlare/WorldMaps/Locations/Basic.hpp ]
  - symbol: AllegroFlare::WorldMaps::Maps::Basic
    headers: [ AllegroFlare/WorldMaps/Maps/Basic.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]


