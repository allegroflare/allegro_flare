properties:


  - name: absolute_now
    type: double
    init_with: 0.0
    getter: true
    setter: explicit

  - name: playhead
    type: double
    init_with: 0.0
    getter: true

  - name: rate
    type: double
    init_with: 1.0
    getter: true

  - name: paused
    type: bool
    init_with: false
    getter: true
    setter: false

  - name: last_rate_changed_at
    type: double
    init_with: 0.0


methods:


  - name: universal_absolute_now
    static: true
    type: double
    guards: [ al_is_system_installed() ]
    body: |
      return al_get_time();
    body_dependency_symbols:
      - al_is_system_installed


  - name: set_absolute_now
    parameters:
      - name: absolute_now
        type: double
        default_argument: 'AllegroFlare::Time::universal_absolute_now()'
    guards: [ (absolute_now >= this->absolute_now) ]
    body: |
      // NOTE: Time can not flow in reverse in this model. An absolute_now can only be assigned if it is equal or past
      // the current absolute now.
      double previous_absolute_now = this->absolute_now;
      this->absolute_now = absolute_now;

      if (!paused)
      {
         double rate_window_age = absolute_now - previous_absolute_now;
         playhead += rate_window_age * rate;
      }

      return;
    body_dependency_symbols:
      - al_is_system_installed


  - name: pause
    body: |
      if (paused) return;
      paused = true;
      return;


  - name: unpause
    body: |
      if (!paused) return;
      paused = false;
      return;


  - name: now
    type: double
    body: |
      //update_now();
      return playhead;
    body_dependency_symbols:
      - al_is_system_installed


  - name: jump_ahead_sec
    parameters:
      - name: distance
        type: double
        default_argument: 0.0f
    guards: [ distance >= 0.0 ]
    body: |
      // TODO: Consider and account for possible overflows
      playhead += distance;


  - name: set_rate
    parameters:
      - name: rate
        type: double
        default_argument: 1.0f
    guards: [ rate >= 0.0001 ]
    body: |
      //last_rate_changed_at = absolute_now;
      this->rate = rate;
      return;


  - name: calculate_age
    static: true
    type: double
    parameters:
      - name: time_now
        type: double
        default_argument: 0.0f
      - name: time_begin
        type: double
        default_argument: 0.0f
    body: |
      return time_now - time_begin;


dependencies:


  - symbol: al_is_system_installed
    headers: [ allegro5/allegro.h ]


