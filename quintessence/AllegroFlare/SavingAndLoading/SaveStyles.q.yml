properties:


  - name: start_style
    type: AllegroFlare::SavingAndLoading::SaveStyles::StartStyle
    init_with: AllegroFlare::SavingAndLoading::SaveStyles::StartStyle::GAME_START_STYLE_UNDEF
    constructor_arg: true
    getter: true
    setter: before_initialized

  - name: save_style
    type: AllegroFlare::SavingAndLoading::SaveStyles::SaveStyle
    init_with: AllegroFlare::SavingAndLoading::SaveStyles::SaveStyle::GAME_SAVE_STYLE_UNDEF
    constructor_arg: true
    getter: true
    setter: before_initialized

  - name: load_style
    type: AllegroFlare::SavingAndLoading::SaveStyles::LoadStyle
    init_with: AllegroFlare::SavingAndLoading::SaveStyles::LoadStyle::GAME_LOAD_STYLE_UNDEF
    constructor_arg: true
    getter: true
    setter: before_initialized

  - name: initialized
    type: bool
    init_with: false
    getter: true


enums:


  - class: StartStyle
    scope: public
    enumerators:
      - GAME_START_STYLE_UNDEF
      - GAME_START_STYLE_A
      - GAME_START_STYLE_B
      - GAME_START_STYLE_C
      - GAME_START_STYLE_D
      - GAME_START_STYLE_E
      - GAME_START_STYLE_F
      - GAME_START_STYLE_G


  - class: SaveStyle
    scope: public
    enumerators:
      - GAME_SAVE_STYLE_UNDEF
      - GAME_SAVE_STYLE_1
      - GAME_SAVE_STYLE_2
      - GAME_SAVE_STYLE_3
      - GAME_SAVE_STYLE_4
      - GAME_SAVE_STYLE_5
      - GAME_SAVE_STYLE_6
      - GAME_SAVE_STYLE_7
      - GAME_SAVE_STYLE_8
      - GAME_SAVE_STYLE_9


  - class: LoadStyle
    scope: public
    enumerators:
      - GAME_LOAD_STYLE_UNDEF
      - GAME_LOAD_STYLE_0
      - GAME_LOAD_STYLE_1
      - GAME_LOAD_STYLE_2
      - GAME_LOAD_STYLE_3
      - GAME_LOAD_STYLE_4
      - GAME_LOAD_STYLE_5
      - GAME_LOAD_STYLE_6
      - GAME_LOAD_STYLE_7
      - GAME_LOAD_STYLE_8


methods:


  - name: initialize
    guards:
      - (start_style != StartStyle::GAME_START_STYLE_UNDEF)
      - (save_style != SaveStyle::GAME_SAVE_STYLE_UNDEF)
      - (load_style != LoadStyle::GAME_LOAD_STYLE_UNDEF)
    body: |
      // TODO: Ensure valid combinations of styles
      initialized = true;
      return;


  - name: obtain_context_sensitive_menu_items_for_starting_or_loading_the_game
    type: std::vector<std::pair<std::string, std::string>>
    guards: [ initialized ]
    body: |
      // TODO: Review the correctness of the action names (should be constants, too) for each menu item.
      switch (start_style)
      {
         case StartStyle::GAME_START_STYLE_A: {
            return {
               { "Play", "goto_load_a_saved_game_screen" },
            };
         } break;

         case StartStyle::GAME_START_STYLE_B: { // 1 profile, 1 save. Save slot is never interacted with
            if (!infer_existing_save_data_exists())
            {
               return {
                  { "Start new game", "start_new_game" },
               };
            }
            else
            {
               return {
                  { "Continue",       "continue_from_last_save" },
                  { "Start new game", "prompt_to_clear_existing_data_then_start_new_game" }, // TODO: Fulfill this
               };
            }
         } break;

         case StartStyle::GAME_START_STYLE_C: { // 1 profile, multiple saves. Saves are listed by time desc
            if (!infer_existing_save_data_exists())
            {
               return {
                  { "Start new game", "start_new_game" }
               };
            }
            else
            {
               return {
                  { "Continue",       "goto_load_a_saved_game_screen" },
                  { "Start new game", "prompt_to_clear_existing_data_then_start_new_game" }, // TODO: Fulfill this
               };
            }
         } break;

         case StartStyle::GAME_START_STYLE_D: { // Tunic style
            if (!infer_existing_save_data_exists())
            {
               return {
                  { "Start new game", "start_new_game" },
               };
            }
            else
            {
               return {
                  { "Continue",  "load_most_recent_save_file_and_start_game" }, // TODO: Fulfill this
                  { "New game",  "[unset-action_name_for_new_game]" }, // NOTE: TODO: This option is contingent on there
                                                                       // being an available save slot. Review if this
                                                                       // is true
                                                                       // TODO: Fulfill this
                  { "Load game", "[unset-action_name_for_load_game]" }, // TODO: Fulfill this
               };
            }
         } break;

         case StartStyle::GAME_START_STYLE_E: {
            if (!infer_existing_save_data_exists())
            {
               return {
                  { "Start new game", "start_new_game" },
               };
            }
            else
            {
               return {
                  { "Continue",  "load_most_recent_save_file_and_start_game" }, // TODO: Fulfill this
                  { "New game",  "[unset-action_name_for_new_game]" }, // TODO: Fulfill this
                  { "Load game", "[unset-action_name_for_load_game]" }, // TODO: Fulfill this
               };
            }
         } break;

         case StartStyle::GAME_START_STYLE_F: { // No real profies or save slots
            return {
               { "Start game", "start_new_game" },
               { "Enter passcode", "goto_enter_passcode_screen" },
            };
         } break;

         case StartStyle::GAME_START_STYLE_G: {
            return {
               { "Start game", "start_new_game" },
               { "Change profile", "goto_change_save_profile_screen" }, // TODO: Fulfill this
            };
         } break;

         default: {
            AllegroFlare::Logger::throw_error(THIS_CLASS_AND_METHOD_NAME,
               "Unexpected logic path to here (1). Please review."
            );
         } break;
      }

      AllegroFlare::Logger::throw_error(THIS_CLASS_AND_METHOD_NAME,
         "Unexpected logic path to here (2). Please review."
      );

      return {};

      //std::vector<std::pair<std::string, std::string>> game_start_options = {



         // Start style A (Metroid Prime):
         //{ "Play",              "goto_load_a_saved_game_screen" },



         // Start style B (Fade to White) (with no saves)
         //{ "Start new game",    "..." },

         // Start style B (Fade to White) (with existing saves)
         //{ "Continue",          "..." }, // Loads the most recent save, Will advance to wherever the game wants
         //{ "Start new game",    "..." }, // Will prompt to erase all save data



         // Start style C (Zelda:BOTW) (with no saves)
         //{ "Start new game",    "..." },

         // Start style C (Zelda:BOTW) (with existing saves)
         //{ "Continue",          "..." }, // Will advance to the load_a_saved_game_screen (with list of recent saves)
         //{ "Start new game",    "..." }, // Will prompt to erase all save data



         // Start style D (Tunic) (with no saves) (This is the same as Start Style A, but with convenience),
                                                  // Tunic has up to 10 save slots
         //{ "Start new game",    "..." },

         // Start style D (Tunic) (with existing saves)
         //{ "Continue",          "..." }, // Will load the most recent save, from the most recent profile
         //{ "New game",          "..." },
         //{ "Load game",         "..." },



         // Start style E (Final Fantasy), same as Start Style D, but there are many save slots



         // Start style F (Mega Man)
         //{ "Start game",        "..." },
         //{ "Enter passcode",    "..." },



         // Start style G (Signalis, Wolfenstein II: The New Colossus)
         //{ "Start game",        "..." }, // Will continue from last most recent save on this profile
         //{ "Change profile",    "..." },



      //};
      //return game_start_options;
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: infer_existing_save_data_exists
    type: bool
    body: |
      return false; // TODO: Sort out this logic


dependencies:


  - symbol: AllegroFlare::SavingAndLoading::SaveStyles::StartStyle
    headers: []
  - symbol: AllegroFlare::SavingAndLoading::SaveStyles::LoadStyle
    headers: []
  - symbol: AllegroFlare::SavingAndLoading::SaveStyles::SaveStyle
    headers: []
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]


