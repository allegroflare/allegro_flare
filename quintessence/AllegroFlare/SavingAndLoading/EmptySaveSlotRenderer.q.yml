properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: text_label
    type: std::string
    init_with: '"Empty"'
    constructor_arg: true
    getter: true
    setter: true

  - name: width
    type: float
    init_with: DEFAULT_WIDTH
    getter: true
    setter: true

  - name: height
    type: float
    init_with: DEFAULT_HEIGHT
    getter: true
    setter: true

  - name: DEFAULT_WIDTH
    type: int
    init_with: 640
    static: true
    constexpr: true

  - name: DEFAULT_HEIGHT
    type: int
    init_with: 155
    static: true
    constexpr: true


methods:


  - name: render
    type: void
    guards:
      - al_is_system_installed()
      - al_is_primitives_addon_initialized()
      - al_is_font_addon_initialized()
      - bitmap_bin
      - font_bin
    body: |
      // TODO: Clean this up
      float x = 0; // TODO: Factor out x
      float y = 0; // TODO: Factor out y
      float screenshot_width = 1920/9;
      float screenshot_x_padding = 20;
      float screenshot_height = 1080/9;
      //float x = 1920/2;
      //float y = 1080/3;
      ALLEGRO_FONT *location_name_font = obtain_location_name_font();
      float location_name_font_line_height = al_get_font_line_height(location_name_font);
      ALLEGRO_FONT *details_font = obtain_details_font();
      float details_font_line_height = al_get_font_line_height(details_font);
      //float h_location_name_font_line_height = al_get_font_line_height(location_name_font)/2;
      //float text_width = al_get_text_width(font, quote.c_str());
      //float text_height = al_get_font_line_height(font);
      float h_text_width = width/2;
      float h_text_height = height/2;
      AllegroFlare::Vec2D padding = {0, 0};
      float cumulative_line_spacing = 0;

      float text_x = x + screenshot_width + screenshot_x_padding*2;
      float text_y = y + 12;
      ALLEGRO_COLOR fill_color = al_color_html("1e2325"); // ALLEGRO_COLOR{0.13, 0.13, 0.13, 1.0};
      ALLEGRO_COLOR text_color = ALLEGRO_COLOR{0.35, 0.35, 0.35, 1.0};
      ALLEGRO_COLOR border_color = al_color_html("292e32"); // ALLEGRO_COLOR{0.13*2, 0.13*2, 0.13*2, 1.0};

      { // fill and border
         // Draw the fill
         al_draw_filled_rounded_rectangle(
            x - padding.x,
            y - padding.y,
            x + width + padding.x,
            y + height + padding.y,
            8.0f,
            8.0f,
            fill_color
         );

         // Draw the border
         al_draw_rounded_rectangle(
            x - padding.x,
            y - padding.y,
            x + width + padding.x,
            y + height + padding.y,
            8.0f,
            8.0f,
            border_color,
            3.0f
         );
      }

      cumulative_line_spacing = 0;
      { // save data text
         // The location of the save
         al_draw_text(
            details_font,
            text_color,
            width/2,
            height/2-details_font_line_height / 2,
            ALLEGRO_ALIGN_CENTER,
            text_label.c_str()
         );
      }

      return;
    body_dependency_symbols:
      - AllegroFlare::Vec2D
      - al_draw_rounded_rectangle
      - al_draw_text
      - al_color_html


  - name: obtain_location_name_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Oswald-Medium.ttf -54");


  - name: obtain_details_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("RobotoCondensed-Regular.ttf -32");


dependencies:


  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_draw_text
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_draw_rounded_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Vec2D
    headers: [ AllegroFlare/Vec2D.hpp ]
  - symbol: al_color_html
    headers: [ allegro5/allegro_color.h ]


