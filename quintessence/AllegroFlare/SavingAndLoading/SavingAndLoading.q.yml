properties:


  - name: data_folder_path
    type: std::string
    init_with: DEFAULT_DATA_FOLDER_PATH
    constructor_arg: true
    setter: before_initialized
    getter: true

  - name: num_profiles
    type: int
    init_with: 0
    setter: before_initialized
    getter: true
    
  - name: num_manual_save_slots
    type: int
    init_with: 0
    setter: before_initialized
    getter: true

  - name: num_autosave_save_slots
    type: int
    init_with: 0
    setter: before_initialized
    getter: true

  - name: num_quicksave_save_slots
    type: int
    init_with: 0
    setter: before_initialized
    getter: true

  - name: save_slots
    type: std::vector<AllegroFlare::SavingAndLoading::SaveSlot>
    init_with: '{}'
    getter_ref: true

  - name: initialized
    type: bool
    init_with: false
    getter: true

  - name: DEFAULT_DATA_FOLDER_PATH
    type: char*
    init_with: '(char*)"[unset-data_folder_path]"'
    static: true
    constexpr: true


methods:


  - name: num_save_slots
    type: int
    guards: [ initialized ]
    body: |
      return save_slots.size();


  - name: get_manual_save_slots
    type: std::vector<AllegroFlare::SavingAndLoading::SaveSlot*>
    guards: [ initialized ]
    parameters:
      - name: profile_id
        type: int
        default_argument: 1
    guards: [ (profile_id >= 1), (profile_id <= num_profiles) ]
    body: |
      std::vector<AllegroFlare::SavingAndLoading::SaveSlot*> result;
      result.reserve(num_manual_save_slots);
      for (auto &save_slot : save_slots)
      {
         if (save_slot.is_manual_save() && save_slot.is_profile_id(profile_id)) result.push_back(&save_slot);
      }
      if (result.size() != num_manual_save_slots)
      {
         AllegroFlare::Logger::throw_error(THIS_CLASS_AND_METHOD_NAME,
            "When querying for save slots, the number of retrieved manual slots (" + std::to_string(result.size())
               + ") did not match the number of manual slots configured on the class (" +
               std::to_string(num_manual_save_slots) + ")."
         );
      }
      return result;


  - name: get_autosave_save_slots
    type: std::vector<AllegroFlare::SavingAndLoading::SaveSlot*>
    guards: [ initialized ]
    parameters:
      - name: profile_id
        type: int
        default_argument: 1
    guards: [ (profile_id >= 1), (profile_id <= num_profiles) ]
    body: |
      std::vector<AllegroFlare::SavingAndLoading::SaveSlot*> result;
      result.reserve(num_autosave_save_slots);
      for (auto &save_slot : save_slots)
      {
         if (save_slot.is_autosave_save() && save_slot.is_profile_id(profile_id)) result.push_back(&save_slot);
      }
      if (result.size() != num_autosave_save_slots)
      {
         AllegroFlare::Logger::throw_error(THIS_CLASS_AND_METHOD_NAME,
            "When querying for save slots, the number of retrieved autosave slots (" + std::to_string(result.size())
               + ") did not match the number of autosave slots configured on the class (" +
               std::to_string(num_autosave_save_slots) + ")."
         );
      }
      return result;


  - name: initialize
    guards:
      - (!initialized)
      - (data_folder_path != DEFAULT_DATA_FOLDER_PATH)
      - (num_profiles > 0)
      - (num_profiles <= 6)
      - (num_manual_save_slots >= 0)
      - (num_manual_save_slots <= 99)
      - (num_autosave_save_slots >= 0)
      - (num_autosave_save_slots <= 90)
      - (num_quicksave_save_slots >= 0)
      - (num_quicksave_save_slots <= 10)
    body: |
      // TODO: Test guards
      save_slots.clear();

      int total_save_slots = num_profiles * (num_manual_save_slots + num_autosave_save_slots + num_quicksave_save_slots);
      save_slots.reserve(total_save_slots);

      for (int profile_i=0; profile_i<num_profiles; profile_i++)
      {
         for (int manual_save_i=0; manual_save_i<num_manual_save_slots; manual_save_i++)
         {
            save_slots.emplace_back(AllegroFlare::SavingAndLoading::SaveSlot::construct(
               data_folder_path,
               profile_i + 1,
               manual_save_i + 1,
               AllegroFlare::SavingAndLoading::SaveSlot::SaveSlotType::SAVE_SLOT_TYPE_MANUAL_SAVE
            ));
         }

         for (int autosave_save_i=0; autosave_save_i<num_autosave_save_slots; autosave_save_i++)
         {
            save_slots.emplace_back(AllegroFlare::SavingAndLoading::SaveSlot::construct(
               data_folder_path,
               profile_i + 1,
               autosave_save_i + 1,
               AllegroFlare::SavingAndLoading::SaveSlot::SaveSlotType::SAVE_SLOT_TYPE_AUTO_SAVE
            ));
         }

         for (int quicksave_save_i=0; quicksave_save_i<num_quicksave_save_slots; quicksave_save_i++)
         {
            save_slots.emplace_back(AllegroFlare::SavingAndLoading::SaveSlot::construct(
               data_folder_path,
               profile_i + 1,
               quicksave_save_i + 1,
               AllegroFlare::SavingAndLoading::SaveSlot::SaveSlotType::SAVE_SLOT_TYPE_QUICK_SAVE
            ));
         }
      }

      initialized = true;

      return;


  - name: scan_for_existing_save_files_and_load_header_data
    guards: [ initialized ]
    body: |
      AllegroFlare::Logger::info_from(THIS_CLASS_AND_METHOD_NAME,
         "Starting scan for save files..."
      );
      int num_files_found = 0;
      for (auto &save_slot : save_slots)
      {
         save_slot.load_header_from_file_if_exists_or_clear();
         if (save_slot.header_data_exists()) num_files_found++;
      }
      bool plural_slots = (num_files_found != 1);
      AllegroFlare::Logger::info_from(THIS_CLASS_AND_METHOD_NAME,
         "...Scan for save files finished. "
         + std::to_string(num_files_found)
         + " save slot"
         + (plural_slots ? "s were" : " was") + " found."
      );
      return;


  - name: save_to_manual_save_slot
    parameters:
      - name: profile_id
        type: int
        default_argument: 0
      - name: save_slot_position
        type: int
        default_argument: 0
      - name: content
        type: std::string
        default_argument: '"[unset-content]"'
    guards:
      - initialized
      - (profile_id >= 0)
      - (profile_id <= num_profiles)
      - (save_slot_position >= 0)
      - (save_slot_position <= num_manual_save_slots)
    body: |
      // TODO: Find a way to not pass along copy of string data (for performance?)
      save_to_save_slot(
         profile_id,
         save_slot_position,
         AllegroFlare::SavingAndLoading::SaveSlot::SAVE_SLOT_TYPE_MANUAL_SAVE,
         content
      );
      return;


  - name: save_to_save_slot
    private: true
    parameters:
      - name: profile_id
        type: int
        default_argument: 0
      - name: save_slot_position
        type: int
        default_argument: 0
      - name: save_slot_type
        type: uint32_t
        default_argument: AllegroFlare::SavingAndLoading::SaveSlot::SAVE_SLOT_TYPE_UNDEF
      - name: content
        type: std::string
        default_argument: '"[unset-content]"'
    guards:
      - initialized
      - (profile_id >= 0)
      - (profile_id <= num_profiles)
      - (save_slot_position >= 0)
    body: |
      // TODO: Consider guarding save_slot_position based on type

      AllegroFlare::SavingAndLoading::SaveSlot* save_slot = find_save_slot(
         profile_id,
         save_slot_position,
         save_slot_type
      );

      if (!save_slot)
      {
         AllegroFlare::Logger::throw_error(THIS_CLASS_AND_METHOD_NAME,
            "Could not find save slot for profile_id \"" + std::to_string(profile_id) + "\" at save_slot_position \""
               "\"" + std::to_string(save_slot_position) + "\".  Either this exceeds the number of configured slots \""
               "for this type, exceeds the number of profiles, or there was an error with internal setup when "
               "creating the save slots. There could also be a problem with the query."
         );
      }

      // TODO: Consider if info messages should be added here and after
      save_slot->save_to_slot(&content);
      return;


# TODO: Consider renaming this method to something less literal
  - name: load_content_from_manual_save_content_file
    type: std::string
    parameters:
      - name: profile_id
        type: int
        default_argument: 0
      - name: save_slot_position
        type: int
        default_argument: 0
    body: |
      AllegroFlare::SavingAndLoading::SaveSlot* save_slot = find_save_slot(
         profile_id,
         save_slot_position,
         AllegroFlare::SavingAndLoading::SaveSlot::SAVE_SLOT_TYPE_MANUAL_SAVE
      );

      if (!save_slot)
      {
         AllegroFlare::Logger::throw_error(THIS_CLASS_AND_METHOD_NAME,
            "Could not find save slot for profile_id \"" + std::to_string(profile_id) + "\" at save_slot_position \""
               "\"" + std::to_string(save_slot_position) + "\".  Either this exceeds the number of configured slots \""
               "for this type, exceeds the number of profiles, or there was an error with internal setup when "
               "creating the save slots. There could also be a problem with the query."
         );
      }

      return save_slot->load_data_from_content_file();


  - name: find_save_slot
    type: AllegroFlare::SavingAndLoading::SaveSlot*
    parameters:
      - name: profile_id
        type: int
        default_argument: 0
      - name: save_slot_position
        type: int
        default_argument: 0
      - name: save_slot_type
        type: uint32_t
        default_argument: AllegroFlare::SavingAndLoading::SaveSlot::SAVE_SLOT_TYPE_UNDEF
    guards:
      - initialized
      - (profile_id >= 0)
      - (profile_id <= num_profiles)
      - (save_slot_position >= 0)
      - (save_slot_position <= num_manual_save_slots)
    body: |
      for (auto &save_slot : save_slots)
      {
         if (save_slot.get_profile_id() != profile_id) continue;
         if (save_slot.get_save_slot_position() != save_slot_position) continue;
         if (save_slot.get_save_slot_type() != save_slot_type) continue;
         return &save_slot;
      }
      return nullptr;


  - name: create_save_file_directories_if_they_do_not_exist
    guards: [ initialized ]
    body: |
      // TODO: Test this with a temporary directory
      std::string standard_saves_path = AllegroFlare::SavingAndLoading::StandardSavesPath::build_standard_path(
         data_folder_path
      );
      // Extract the directory part from the file path
      std::filesystem::path dir_path = std::filesystem::path(standard_saves_path).parent_path();

      // Create directories if they do not exist
      if (!dir_path.empty() && !std::filesystem::exists(dir_path))
      {
         if (std::filesystem::create_directories(dir_path))
         {
            AllegroFlare::Logger::info_from(THIS_CLASS_AND_METHOD_NAME,
               "The expected directories to the save file were not initially present, but were created successfully."
            );
         }
         else
         {
            AllegroFlare::Logger::throw_error(THIS_CLASS_AND_METHOD_NAME,
               "Failed to load the save file."
            );
            //std::cerr << "Failed to create directories!" << std::endl;
            return;  // Exit if directory creation fails
         }
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::Logger
      - AllegroFlare::SavingAndLoading::StandardSavesPath
      - std::filesystem::path
      - std::filesystem::exists
      - std::filesystem::create_directories


dependencies:


  - symbol: AllegroFlare::SavingAndLoading::SaveSlot
    headers: [ AllegroFlare/SavingAndLoading/SaveSlot.hpp ]
  - symbol: std::filesystem::path
    headers: [ filesystem ]
  - symbol: std::filesystem::exists
    headers: [ filesystem ]
  - symbol: std::filesystem::create_directories
    headers: [ filesystem ]
  - symbol: AllegroFlare::SavingAndLoading::StandardSavesPath
    headers: [ AllegroFlare/SavingAndLoading/StandardSavesPath.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]


