properties:


  - name: data_folder_path
    type: std::string
    init_with: DEFAULT_DATA_FOLDER_PATH
    constructor_arg: true
    setter: before_initialized
    getter: true

  - name: start_style
    type: AllegroFlare::SavingAndLoading::SavingAndLoading::StartStyle
    init_with: AllegroFlare::SavingAndLoading::SavingAndLoading::StartStyle::GAME_START_STYLE_UNDEF
    constructor_arg: true
    getter: true
    setter: before_initialized

  - name: save_style
    type: AllegroFlare::SavingAndLoading::SavingAndLoading::SaveStyle
    init_with: AllegroFlare::SavingAndLoading::SavingAndLoading::SaveStyle::GAME_SAVE_STYLE_UNDEF
    constructor_arg: true
    getter: true
    setter: before_initialized

  - name: load_style
    type: AllegroFlare::SavingAndLoading::SavingAndLoading::LoadStyle
    init_with: AllegroFlare::SavingAndLoading::SavingAndLoading::LoadStyle::GAME_LOAD_STYLE_UNDEF
    constructor_arg: true
    getter: true
    setter: before_initialized

  - name: num_profiles
    type: int
    init_with: 0
    setter: before_initialized
    getter: true
    
  - name: num_manual_save_slots
    type: int
    init_with: 0
    setter: before_initialized
    getter: true

  - name: num_autosave_save_slots
    type: int
    init_with: 0
    setter: before_initialized
    getter: true

  - name: num_quicksave_save_slots
    type: int
    init_with: 0
    setter: before_initialized
    getter: true

  - name: save_slots
    type: std::vector<AllegroFlare::SavingAndLoading::SaveSlot>
    init_with: '{}'
    getter_ref: true

  - name: initialized
    type: bool
    init_with: false
    getter: true

  - name: DEFAULT_DATA_FOLDER_PATH
    type: char*
    init_with: '(char*)"[unset-data_folder_path]"'
    static: true
    constexpr: true


enums:


  - class: StartStyle
    scope: public
    enumerators:
      - GAME_START_STYLE_UNDEF
      - GAME_START_STYLE_A
      - GAME_START_STYLE_B
      - GAME_START_STYLE_C
      - GAME_START_STYLE_D
      - GAME_START_STYLE_E
      - GAME_START_STYLE_F
      - GAME_START_STYLE_G


  - class: SaveStyle
    scope: public
    enumerators:
      - GAME_SAVE_STYLE_UNDEF
      - GAME_SAVE_STYLE_1
      - GAME_SAVE_STYLE_2
      - GAME_SAVE_STYLE_3
      - GAME_SAVE_STYLE_4
      - GAME_SAVE_STYLE_5
      - GAME_SAVE_STYLE_6
      - GAME_SAVE_STYLE_7
      - GAME_SAVE_STYLE_8
      - GAME_SAVE_STYLE_9


  - class: LoadStyle
    scope: public
    enumerators:
      - GAME_LOAD_STYLE_UNDEF
      - GAME_LOAD_STYLE_0
      - GAME_LOAD_STYLE_1
      - GAME_LOAD_STYLE_2
      - GAME_LOAD_STYLE_3
      - GAME_LOAD_STYLE_4
      - GAME_LOAD_STYLE_5
      - GAME_LOAD_STYLE_6
      - GAME_LOAD_STYLE_7
      - GAME_LOAD_STYLE_8


methods:


  - name: num_save_slots
    type: int
    guards: [ initialized ]
    body: |
      return save_slots.size();


  - name: get_manual_save_slots
    type: std::vector<AllegroFlare::SavingAndLoading::SaveSlot*>
    guards: [ initialized ]
    parameters:
      - name: profile_id
        type: int
        default_argument: 1
    guards: [ (profile_id >= 1), (profile_id <= num_profiles) ]
    body: |
      std::vector<AllegroFlare::SavingAndLoading::SaveSlot*> result;
      result.reserve(num_manual_save_slots);
      for (auto &save_slot : save_slots)
      {
         if (save_slot.is_manual_save() && save_slot.is_profile_id(profile_id)) result.push_back(&save_slot);
      }
      if (result.size() != num_manual_save_slots)
      {
         AllegroFlare::Logger::throw_error(THIS_CLASS_AND_METHOD_NAME,
            "When querying for save slots, the number of retrieved manual slots (" + std::to_string(result.size())
               + ") did not match the number of manual slots configured on the class (" +
               std::to_string(num_manual_save_slots) + ")."
         );
      }
      return result;


  - name: get_autosave_save_slots
    type: std::vector<AllegroFlare::SavingAndLoading::SaveSlot*>
    parameters:
      - name: profile_id
        type: int
        default_argument: 1
    guards: [ initialized, (profile_id >= 1), (profile_id <= num_profiles) ]
    body: |
      // TODO: Test this
      std::vector<AllegroFlare::SavingAndLoading::SaveSlot*> result;
      result.reserve(num_autosave_save_slots);
      for (auto &save_slot : save_slots)
      {
         if (save_slot.is_autosave_save() && save_slot.is_profile_id(profile_id)) result.push_back(&save_slot);
      }
      if (result.size() != num_autosave_save_slots)
      {
         AllegroFlare::Logger::throw_error(THIS_CLASS_AND_METHOD_NAME,
            "When querying for save slots, the number of retrieved autosave slots (" + std::to_string(result.size())
               + ") did not match the number of autosave slots configured on the class (" +
               std::to_string(num_autosave_save_slots) + ")."
         );
      }
      return result;


  - name: get_quicksave_save_slots
    type: std::vector<AllegroFlare::SavingAndLoading::SaveSlot*>
    parameters:
      - name: profile_id
        type: int
        default_argument: 1
    guards: [ initialized, (profile_id >= 1), (profile_id <= num_profiles) ]
    body: |
      // TODO: Test this
      std::vector<AllegroFlare::SavingAndLoading::SaveSlot*> result;
      result.reserve(num_quicksave_save_slots);
      for (auto &save_slot : save_slots)
      {
         if (save_slot.is_quicksave_save() && save_slot.is_profile_id(profile_id)) result.push_back(&save_slot);
      }
      if (result.size() != num_quicksave_save_slots)
      {
         AllegroFlare::Logger::throw_error(THIS_CLASS_AND_METHOD_NAME,
            "When querying for save slots, the number of retrieved quicksave slots (" + std::to_string(result.size())
               + ") did not match the number of quicksave slots configured on the class (" +
               std::to_string(num_quicksave_save_slots) + ")."
         );
      }
      return result;


  - name: sort_by_empty_then_oldest
    static: true
    parameters:
      - name: unsorted_save_slots
        type: std::vector<AllegroFlare::SavingAndLoading::SaveSlot*>*
        default_argument: nullptr
    guards: [ unsorted_save_slots ]
    body: |
      // TODO: Test this result
      //std::vector<AllegroFlare::SavingAndLoading::SaveSlot*> sorted_result;
      std::sort(unsorted_save_slots->begin(), unsorted_save_slots->end(),
         [](AllegroFlare::SavingAndLoading::SaveSlot* a, // TODO: Use const... I suppose.
            AllegroFlare::SavingAndLoading::SaveSlot* b)
         {
            bool a_is_empty = a->is_empty(); //(a->header_data == nullptr);
            bool b_is_empty = b->is_empty(); //(b->header_data == nullptr);

            if (a_is_empty != b_is_empty)
            {
               return a_is_empty; // Empty slots come first
            }
            if (!a_is_empty && !b_is_empty)
            {
               return a->get_header_data()->save_time__seconds_since_epoch <
                      b->get_header_data()->save_time__seconds_since_epoch; // Sort by oldest save time
            }
            return false;
         });
      //return sorted_result;
      return;
    body_dependency_symbols:
      - std::sort


  - name: initialize
    guards:
      - (!initialized)
      - (data_folder_path != DEFAULT_DATA_FOLDER_PATH)
      - (start_style != StartStyle::GAME_START_STYLE_UNDEF)
      - (save_style != SaveStyle::GAME_SAVE_STYLE_UNDEF)
      - (load_style != LoadStyle::GAME_LOAD_STYLE_UNDEF)
      - (num_profiles > 0)
      - (num_profiles <= 6)
      - (num_manual_save_slots >= 0)
      - (num_manual_save_slots <= 99)
      - (num_autosave_save_slots >= 0)
      - (num_autosave_save_slots <= 90)
      - (num_quicksave_save_slots >= 0)
      - (num_quicksave_save_slots <= 10)
    body: |
      // TODO: Test guards
      save_slots.clear();

      int total_save_slots = num_profiles * (num_manual_save_slots + num_autosave_save_slots + num_quicksave_save_slots);
      save_slots.reserve(total_save_slots);

      for (int profile_i=0; profile_i<num_profiles; profile_i++)
      {
         for (int manual_save_i=0; manual_save_i<num_manual_save_slots; manual_save_i++)
         {
            save_slots.emplace_back(AllegroFlare::SavingAndLoading::SaveSlot::construct(
               data_folder_path,
               profile_i + 1,
               manual_save_i + 1,
               AllegroFlare::SavingAndLoading::SaveSlot::SaveSlotType::SAVE_SLOT_TYPE_MANUAL_SAVE
            ));
         }

         for (int autosave_save_i=0; autosave_save_i<num_autosave_save_slots; autosave_save_i++)
         {
            save_slots.emplace_back(AllegroFlare::SavingAndLoading::SaveSlot::construct(
               data_folder_path,
               profile_i + 1,
               autosave_save_i + 1,
               AllegroFlare::SavingAndLoading::SaveSlot::SaveSlotType::SAVE_SLOT_TYPE_AUTO_SAVE
            ));
         }

         for (int quicksave_save_i=0; quicksave_save_i<num_quicksave_save_slots; quicksave_save_i++)
         {
            save_slots.emplace_back(AllegroFlare::SavingAndLoading::SaveSlot::construct(
               data_folder_path,
               profile_i + 1,
               quicksave_save_i + 1,
               AllegroFlare::SavingAndLoading::SaveSlot::SaveSlotType::SAVE_SLOT_TYPE_QUICK_SAVE
            ));
         }
      }

      initialized = true;

      return;


  - name: scan_for_existing_save_files_and_load_header_data
    guards: [ initialized ]
    body: |
      AllegroFlare::Logger::info_from(THIS_CLASS_AND_METHOD_NAME,
         "Starting scan for save files..."
      );
      int num_files_found = 0;
      for (auto &save_slot : save_slots)
      {
         save_slot.load_header_from_file_if_exists_or_clear();
         if (save_slot.header_data_exists()) num_files_found++;
      }
      bool plural_slots = (num_files_found != 1);
      AllegroFlare::Logger::info_from(THIS_CLASS_AND_METHOD_NAME,
         "...Scan for save files finished. "
         + std::to_string(num_files_found)
         + " save slot"
         + (plural_slots ? "s were" : " was") + " found."
      );
      return;


  - name: save_to_manual_save_slot
    parameters:
      - name: profile_id
        type: int
        default_argument: 0
      - name: save_slot_position
        type: int
        default_argument: 0
      - name: content
        type: std::string
        default_argument: '"[unset-content]"'
    guards:
      - initialized
      - (profile_id >= 0)
      - (profile_id <= num_profiles)
      - (save_slot_position >= 0)
      - (save_slot_position <= num_manual_save_slots)
    body: |
      // TODO: Find a way to not pass along copy of string data (for performance?)
      save_to_save_slot(
         profile_id,
         save_slot_position,
         AllegroFlare::SavingAndLoading::SaveSlot::SAVE_SLOT_TYPE_MANUAL_SAVE,
         content
      );
      return;


  - name: save_to_autosave
    parameters:
      - name: profile_id
        type: int
        default_argument: 0
      - name: content
        type: std::string
        default_argument: '"[unset-content]"'
    guards:
      - initialized
      - (profile_id >= 0)
      - (profile_id <= num_profiles)
    body: |
      // TODO: Test this
      // TODO: Find a way to not pass along copy of string data (for performance?)

      // Ensure there are actually save slots in this configuration
      if (num_autosave_save_slots == 0)
      {
         // No autosave slots are available in this current configuration
         AllegroFlare::Logger::throw_error(THIS_CLASS_AND_METHOD_NAME,
            "There are no autosave slots in this current configuration. To add autosave slots, be sure to call "
            "\"set_num_autosave_slots(int num_of_slots)\" before calling \"initialize()\" on this class."
         );
      }

      // Obtain autosave slots on this profile and sort them by order for use
      std::vector<AllegroFlare::SavingAndLoading::SaveSlot*> save_slots = get_autosave_save_slots(profile_id);
      sort_by_empty_then_oldest(&save_slots);

      // Confirm the number of save_slots returned is not empty
      if (save_slots.empty())
      {
         // No autosave slots are available in this current configuration
         AllegroFlare::Logger::throw_error(THIS_CLASS_AND_METHOD_NAME,
            "The number of save_slots returned was 0. This is unexpected at this point in the logic flow."
         );
      }

      AllegroFlare::SavingAndLoading::SaveSlot* save_slot_to_use = save_slots[0];
      save_slot_to_use->save_to_slot(&content);

      return;


  - name: save_to_quicksave
    parameters:
      - name: profile_id
        type: int
        default_argument: 0
      - name: content
        type: std::string
        default_argument: '"[unset-content]"'
    guards:
      - initialized
      - (profile_id >= 0)
      - (profile_id <= num_profiles)
    body: |
      // TODO: Test this
      // TODO: Find a way to not pass along copy of string data (for performance?)

      // Ensure there are actually save slots in this configuration
      if (num_quicksave_save_slots == 0)
      {
         // No quicksave slots are available in this current configuration
         AllegroFlare::Logger::throw_error(THIS_CLASS_AND_METHOD_NAME,
            "There are no quicksave slots in this current configuration. To add quicksave slots, be sure to call "
            "\"set_num_quicksave_slots(int num_of_slots)\" before calling \"initialize()\" on this class."
         );
      }

      // Obtain quicksave slots on this profile and sort them by order for use
      std::vector<AllegroFlare::SavingAndLoading::SaveSlot*> save_slots = get_quicksave_save_slots(profile_id);
      sort_by_empty_then_oldest(&save_slots);

      // Confirm the number of save_slots returned is not empty
      if (save_slots.empty())
      {
         // No quicksave slots are available in this current configuration
         AllegroFlare::Logger::throw_error(THIS_CLASS_AND_METHOD_NAME,
            "The number of save_slots returned was 0. This is unexpected at this point in the logic flow."
         );
      }

      AllegroFlare::SavingAndLoading::SaveSlot* save_slot_to_use = save_slots[0];
      save_slot_to_use->save_to_slot(&content);

      return;


  - name: save_to_save_slot
    private: true
    parameters:
      - name: profile_id
        type: int
        default_argument: 0
      - name: save_slot_position
        type: int
        default_argument: 0
      - name: save_slot_type
        type: uint32_t
        default_argument: AllegroFlare::SavingAndLoading::SaveSlot::SAVE_SLOT_TYPE_UNDEF
      - name: content
        type: std::string
        default_argument: '"[unset-content]"'
    guards:
      - initialized
      - (profile_id >= 0)
      - (profile_id <= num_profiles)
      - (save_slot_position >= 0)
    body: |
      // TODO: Consider guarding save_slot_position based on type

      AllegroFlare::SavingAndLoading::SaveSlot* save_slot = find_save_slot(
         profile_id,
         save_slot_position,
         save_slot_type
      );

      if (!save_slot)
      {
         AllegroFlare::Logger::throw_error(THIS_CLASS_AND_METHOD_NAME,
            "Could not find save slot for profile_id \"" + std::to_string(profile_id) + "\" at save_slot_position \""
               "\"" + std::to_string(save_slot_position) + "\".  Either this exceeds the number of configured slots \""
               "for this type, exceeds the number of profiles, or there was an error with internal setup when "
               "creating the save slots. There could also be a problem with the query."
         );
      }

      // TODO: Consider if info messages should be added here and after
      save_slot->save_to_slot(&content);
      return;


  - name: __delete_header_and_content_files_and_clear_save_slot__DEPRECATED
    private: true
    parameters:
      - name: profile_id
        type: int
        default_argument: 0
      - name: save_slot_position
        type: int
        default_argument: 0
      - name: save_slot_type
        type: uint32_t
        default_argument: AllegroFlare::SavingAndLoading::SaveSlot::SAVE_SLOT_TYPE_UNDEF
    guards:
      - initialized
      - (profile_id >= 0)
      - (profile_id <= num_profiles)
      - (save_slot_position >= 0)
    body: |
      // TODO: Test this
      // TODO: Consider guarding for save slot count based on type

      AllegroFlare::SavingAndLoading::SaveSlot* save_slot = find_save_slot(
         profile_id,
         save_slot_position,
         save_slot_type
      );

      if (!save_slot)
      {
         AllegroFlare::Logger::throw_error(THIS_CLASS_AND_METHOD_NAME,
            "Could not find save slot for profile_id \"" + std::to_string(profile_id) + "\" of type \"[type-is-not-"
               "populated-in-this-error-message]\" at save_slot_position \""
               "\"" + std::to_string(save_slot_position) + "\".  Either this exceeds the number of configured slots \""
               "for this type, exceeds the number of profiles, or there was an error with internal setup when "
               "creating the save slots. There could also be a problem with the query."
         );
      }

      // Delete everything on this save slot
      save_slot->delete_header_and_content_files_and_clear();
      return;


  - name: delete_all_save_data
    guards: [ initialized ]
    body: |
      // TODO: Test this

      AllegroFlare::Logger::info_from(THIS_CLASS_AND_METHOD_NAME,
         "Preparing to delete all existing save data..."
      );

      // Delete everything on all the save slots
      for (auto &save_slot : save_slots)
      {
         save_slot.delete_header_and_content_files_and_clear();
      }

      AllegroFlare::Logger::info_from(THIS_CLASS_AND_METHOD_NAME,
         "...All existing save data has been cleared."
      );
      return;


# TODO: Consider renaming this method to something less literal
  - name: load_content_from_manual_save_content_file
    type: std::string
    parameters:
      - name: profile_id
        type: int
        default_argument: 0
      - name: save_slot_position
        type: int
        default_argument: 0
    body: |
      AllegroFlare::SavingAndLoading::SaveSlot* save_slot = find_save_slot(
         profile_id,
         save_slot_position,
         AllegroFlare::SavingAndLoading::SaveSlot::SAVE_SLOT_TYPE_MANUAL_SAVE
      );

      if (!save_slot)
      {
         AllegroFlare::Logger::throw_error(THIS_CLASS_AND_METHOD_NAME,
            "Could not find save slot for profile_id \"" + std::to_string(profile_id) + "\" at save_slot_position \""
               "\"" + std::to_string(save_slot_position) + "\".  Either this exceeds the number of configured slots \""
               "for this type, exceeds the number of profiles, or there was an error with internal setup when "
               "creating the save slots. There could also be a problem with the query."
         );
      }

      return save_slot->load_data_from_content_file();


  - name: find_save_slot
    type: AllegroFlare::SavingAndLoading::SaveSlot*
    parameters:
      - name: profile_id
        type: int
        default_argument: 0
      - name: save_slot_position
        type: int
        default_argument: 0
      - name: save_slot_type
        type: uint32_t
        default_argument: AllegroFlare::SavingAndLoading::SaveSlot::SAVE_SLOT_TYPE_UNDEF
    guards:
      - initialized
      - (profile_id >= 0)
      - (profile_id <= num_profiles)
      - (save_slot_position >= 0)
      - (save_slot_position <= num_manual_save_slots)
    body: |
      for (auto &save_slot : save_slots)
      {
         if (save_slot.get_profile_id() != profile_id) continue;
         if (save_slot.get_save_slot_position() != save_slot_position) continue;
         if (save_slot.get_save_slot_type() != save_slot_type) continue;
         return &save_slot;
      }
      return nullptr;


  - name: has_quicksave_save_slots
    type: bool
    guards: [ initialized ]
    body: |
      // TODO: Test this
      return num_quicksave_save_slots > 0;


  - name: has_autosave_save_slots
    type: bool
    guards: [ initialized ]
    body: |
      // TODO: Test this
      return num_autosave_save_slots > 0;


  - name: create_save_file_directories_if_they_do_not_exist
    guards: [ initialized ]
    body: |
      // TODO: Test this with a temporary directory
      std::string standard_saves_path = AllegroFlare::SavingAndLoading::StandardSavesPath::build_standard_path(
         data_folder_path
      );
      // Extract the directory part from the file path
      std::filesystem::path dir_path = std::filesystem::path(standard_saves_path).parent_path();

      // Create directories if they do not exist
      if (!dir_path.empty() && !std::filesystem::exists(dir_path))
      {
         if (std::filesystem::create_directories(dir_path))
         {
            AllegroFlare::Logger::info_from(THIS_CLASS_AND_METHOD_NAME,
               "The expected directories to the save file were not initially present, but were created successfully."
            );
         }
         else
         {
            AllegroFlare::Logger::throw_error(THIS_CLASS_AND_METHOD_NAME,
               "Failed to load the save file."
            );
            //std::cerr << "Failed to create directories!" << std::endl;
            return;  // Exit if directory creation fails
         }
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::Logger
      - AllegroFlare::SavingAndLoading::StandardSavesPath
      - std::filesystem::path
      - std::filesystem::exists
      - std::filesystem::create_directories


  - name: obtain_context_sensitive_menu_items_for_starting_or_loading_the_game
    type: std::vector<std::pair<std::string, std::string>>
    guards: [ initialized ]
    body: |
      // TODO: Review the correctness of the action names (should be constants, too) for each menu item.
      switch (start_style)
      {
         case StartStyle::GAME_START_STYLE_A: {
            return {
               { "Play", "goto_load_a_saved_game_screen" },
            };
         } break;

         case StartStyle::GAME_START_STYLE_B: { // 1 profile, 1 save. Save slot is never interacted with
            if (!infer_existing_save_data_exists())
            {
               return {
                  { "Start new game", "start_new_game" },
               };
            }
            else
            {
               return {
                  { "Continue",       "continue_from_last_save" },
                  { "Start new game", "prompt_to_clear_existing_data_then_start_new_game" }, // TODO: Fulfill this
               };
            }
         } break;

         case StartStyle::GAME_START_STYLE_C: { // 1 profile, multiple saves. Saves are listed by time desc
            if (!infer_existing_save_data_exists())
            {
               return {
                  { "Start new game", "start_new_game" }
               };
            }
            else
            {
               return {
                  { "Continue",       "goto_load_a_saved_game_screen" },
                  { "Start new game", "prompt_to_clear_existing_data_then_start_new_game" }, // TODO: Fulfill this
               };
            }
         } break;

         case StartStyle::GAME_START_STYLE_D: { // Tunic style
            if (!infer_existing_save_data_exists())
            {
               return {
                  { "Start new game", "start_new_game" },
               };
            }
            else
            {
               return {
                  { "Continue",  "load_most_recent_save_file_and_start_game" }, // TODO: Fulfill this
                  { "New game",  "[unset-action_name_for_new_game]" }, // NOTE: TODO: This option is contingent on there
                                                                       // being an available save slot. Review if this
                                                                       // is true
                                                                       // TODO: Fulfill this
                  { "Load game", "[unset-action_name_for_load_game]" }, // TODO: Fulfill this
               };
            }
         } break;

         case StartStyle::GAME_START_STYLE_E: {
            if (!infer_existing_save_data_exists())
            {
               return {
                  { "Start new game", "start_new_game" },
               };
            }
            else
            {
               return {
                  { "Continue",  "load_most_recent_save_file_and_start_game" }, // TODO: Fulfill this
                  { "New game",  "[unset-action_name_for_new_game]" }, // TODO: Fulfill this
                  { "Load game", "[unset-action_name_for_load_game]" }, // TODO: Fulfill this
               };
            }
         } break;

         case StartStyle::GAME_START_STYLE_F: { // No real profies or save slots
            return {
               { "Start game", "start_new_game" },
               { "Enter passcode", "goto_enter_passcode_screen" },
            };
         } break;

         case StartStyle::GAME_START_STYLE_G: {
            return {
               { "Start game", "start_new_game" },
               { "Change profile", "goto_change_save_profile_screen" }, // TODO: Fulfill this
            };
         } break;

         default: {
            AllegroFlare::Logger::throw_error(THIS_CLASS_AND_METHOD_NAME,
               "Unexpected logic path to here (1). Please review."
            );
         } break;
      }

      AllegroFlare::Logger::throw_error(THIS_CLASS_AND_METHOD_NAME,
         "Unexpected logic path to here (2). Please review."
      );

      return {};

      //std::vector<std::pair<std::string, std::string>> game_start_options = {



         // Start style A (Metroid Prime):
         //{ "Play",              "goto_load_a_saved_game_screen" },



         // Start style B (Fade to White) (with no saves)
         //{ "Start new game",    "..." },

         // Start style B (Fade to White) (with existing saves)
         //{ "Continue",          "..." }, // Loads the most recent save, Will advance to wherever the game wants
         //{ "Start new game",    "..." }, // Will prompt to erase all save data



         // Start style C (Zelda:BOTW) (with no saves)
         //{ "Start new game",    "..." },

         // Start style C (Zelda:BOTW) (with existing saves)
         //{ "Continue",          "..." }, // Will advance to the load_a_saved_game_screen (with list of recent saves)
         //{ "Start new game",    "..." }, // Will prompt to erase all save data



         // Start style D (Tunic) (with no saves) (This is the same as Start Style A, but with convenience),
                                                  // Tunic has up to 10 save slots
         //{ "Start new game",    "..." },

         // Start style D (Tunic) (with existing saves)
         //{ "Continue",          "..." }, // Will load the most recent save, from the most recent profile
         //{ "New game",          "..." },
         //{ "Load game",         "..." },



         // Start style E (Final Fantasy), same as Start Style D, but there are many save slots



         // Start style F (Mega Man)
         //{ "Start game",        "..." },
         //{ "Enter passcode",    "..." },



         // Start style G (Signalis, Wolfenstein II: The New Colossus)
         //{ "Start game",        "..." }, // Will continue from last most recent save on this profile
         //{ "Change profile",    "..." },



      //};
      //return game_start_options;
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: infer_existing_save_data_exists
    type: bool
    body: |
      // TODO: Save slots need to be scanned first; should this be enforced with a warning or guard?
      // TODO: Test this
      for (auto &save_slot : save_slots) if (save_slot.header_data_exists()) return true;
      return false;


dependencies:


  - symbol: AllegroFlare::SavingAndLoading::SaveSlot
    headers: [ AllegroFlare/SavingAndLoading/SaveSlot.hpp ]
  - symbol: std::filesystem::path
    headers: [ filesystem ]
  - symbol: std::filesystem::exists
    headers: [ filesystem ]
  - symbol: std::filesystem::create_directories
    headers: [ filesystem ]
  - symbol: AllegroFlare::SavingAndLoading::StandardSavesPath
    headers: [ AllegroFlare/SavingAndLoading/StandardSavesPath.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::SavingAndLoading::SavingAndLoading::StartStyle
    headers: []
  - symbol: AllegroFlare::SavingAndLoading::SavingAndLoading::LoadStyle
    headers: []
  - symbol: AllegroFlare::SavingAndLoading::SavingAndLoading::SaveStyle
    headers: []
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: std::sort
    headers: [ algorithm ]



