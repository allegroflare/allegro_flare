properties:


  - name: data_folder_path
    type: std::string
    init_with: DEFAULT_DATA_FOLDER_PATH
    constructor_arg: true
    setter: before_initialized
    getter: true

  - name: num_profiles
    type: int
    init_with: 0
    setter: before_initialized
    getter: true
    
  - name: num_manual_save_slots
    type: int
    init_with: 0
    setter: before_initialized
    getter: true

  - name: num_autosave_save_slots
    type: int
    init_with: 0
    setter: before_initialized
    getter: true

  - name: num_quicksave_save_slots
    type: int
    init_with: 0
    setter: before_initialized
    getter: true

  - name: save_slots
    type: std::vector<AllegroFlare::SavingAndLoading::SaveSlot>
    init_with: '{}'
    getter_ref: true

  - name: initialized
    type: bool
    init_with: false
    getter: true

  - name: DEFAULT_DATA_FOLDER_PATH
    type: char*
    init_with: '(char*)"[unset-data_folder_path]"'
    static: true
    constexpr: true


methods:


  - name: num_save_slots
    type: int
    body: |
      return save_slots.size();


  - name: initialize
    guards:
      - (!initialized)
      - (data_folder_path != DEFAULT_DATA_FOLDER_PATH)
      - (num_profiles > 0)
      - (num_profiles <= 6)
      - (num_manual_save_slots >= 0)
      - (num_manual_save_slots <= 99)
      - (num_autosave_save_slots >= 0)
      - (num_autosave_save_slots <= 90)
      - (num_quicksave_save_slots >= 0)
      - (num_quicksave_save_slots <= 10)
    body: |
      // TODO: Test guards
      save_slots.clear();

      int total_save_slots = num_profiles * (num_manual_save_slots + num_autosave_save_slots + num_quicksave_save_slots);
      save_slots.reserve(total_save_slots);

      for (int profile_i=0; profile_i<num_profiles; profile_i++)
      {
         for (int manual_save_i=0; manual_save_i<num_manual_save_slots; manual_save_i++)
         {
            save_slots.emplace_back(AllegroFlare::SavingAndLoading::SaveSlot::construct(
               data_folder_path,
               profile_i + 1,
               manual_save_i + 1,
               AllegroFlare::SavingAndLoading::SaveSlot::SaveSlotType::SAVE_SLOT_TYPE_MANUAL_SAVE
            ));
         }

         for (int autosave_save_i=0; autosave_save_i<num_autosave_save_slots; autosave_save_i++)
         {
            save_slots.emplace_back(AllegroFlare::SavingAndLoading::SaveSlot::construct(
               data_folder_path,
               profile_i + 1,
               autosave_save_i + 1,
               AllegroFlare::SavingAndLoading::SaveSlot::SaveSlotType::SAVE_SLOT_TYPE_AUTO_SAVE
            ));
         }

         for (int quicksave_save_i=0; quicksave_save_i<num_quicksave_save_slots; quicksave_save_i++)
         {
            save_slots.emplace_back(AllegroFlare::SavingAndLoading::SaveSlot::construct(
               data_folder_path,
               profile_i + 1,
               quicksave_save_i + 1,
               AllegroFlare::SavingAndLoading::SaveSlot::SaveSlotType::SAVE_SLOT_TYPE_QUICK_SAVE
            ));
         }
      }

      initialized = true;

      return;


  - name: scan_for_existing_save_files_and_load_header_files
    body: |
      for (auto &save_slot : save_slots)
      {
         bool header_file_exists = save_slot.header_file_exists();
         bool content_file_exists = save_slot.content_file_exists();
         if (header_file_exists && content_file_exists)
         {
            // TODO: Implement this loading/parsing
            //std::string file_content = save_slot.obtain_header_file_data();
            //nlohmann::json parsed_json = nlohmann::json::parse(file_content);
            //parsed_json.get_to(save_slot); // TODO: Good enough?
         }
      }
      return;
    body_dependency_symbols:
      - nlohmann::json
      #TODO: - AllegroFlare::JSONLoaders::AllegroFlare::SavingAndLoading::SaveSlot


  - name: create_save_file_directories_if_they_do_not_exist
    guards: [ initialized ]
    body: |
      // TODO: Test this with a temporary directory
      std::string standard_saves_path = AllegroFlare::SavingAndLoading::StandardSavesPath::build_standard_path(
         data_folder_path
      );
      // Extract the directory part from the file path
      std::filesystem::path dir_path = std::filesystem::path(standard_saves_path).parent_path();

      // Create directories if they do not exist
      if (!dir_path.empty() && !std::filesystem::exists(dir_path))
      {
         if (std::filesystem::create_directories(dir_path))
         {
            AllegroFlare::Logger::info_from(
               "AllegroFlare::GameProgressAndStateInfos::Base::create_directories_to_save_file_if_they_do_not_exist",
               "The expected directories to the save file were not initially present, but were created successfully."
            );
         }
         else
         {
            AllegroFlare::Logger::throw_error(
               "AllegroFlare::GameProgressAndStateInfos::Base::create_directories_to_save_file_if_they_do_not_exist",
               "Failed to load the save file."
            );
            //std::cerr << "Failed to create directories!" << std::endl;
            return;  // Exit if directory creation fails
         }
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::Logger
      - AllegroFlare::SavingAndLoading::StandardSavesPath
      - std::filesystem::path
      - std::filesystem::exists
      - std::filesystem::create_directories


dependencies:


  - symbol: AllegroFlare::SavingAndLoading::SaveSlot
    headers: [ AllegroFlare/SavingAndLoading/SaveSlot.hpp ]
  - symbol: std::filesystem::path
    headers: [ filesystem ]
  - symbol: std::filesystem::exists
    headers: [ filesystem ]
  - symbol: std::filesystem::create_directories
    headers: [ filesystem ]
  - symbol: AllegroFlare::SavingAndLoading::StandardSavesPath
    headers: [ AllegroFlare/SavingAndLoading/StandardSavesPath.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::JSONLoaders::AllegroFlare::LoadASavedGame::SaveSlots::Common
    headers: [ AllegroFlare/JSONLoaders/AllegroFlare/LoadASavedGame/SaveSlots/Common.hpp ]
  - symbol: nlohmann::json
    headers: [ lib/nlohmann/json.hpp ]


