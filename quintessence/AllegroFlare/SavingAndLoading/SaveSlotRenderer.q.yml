properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: screenshot_of_gameplay_at_save_identifier
    type: std::string
    init_with: '"[unset-screenshot_of_gameplay_at_save_identifier]"'
    constructor_arg: true
    getter: true
    setter: true

  - name: location_of_save
    type: std::string
    init_with: '"Location of Save"'
    constructor_arg: true
    getter: true
    setter: true

  - name: date_and_time_of_save
    type: std::string
    init_with: '"12/14/2024 3:20PM"'
    constructor_arg: true
    getter: true
    setter: true

  - name: time_since_text
    type: std::string
    init_with: '"12 minutes ago"'
    constructor_arg: true
    getter: true
    setter: true

  - name: save_slot_type
    type: uint32_t
    init_with: AllegroFlare::SavingAndLoading::SaveSlot::SAVE_SLOT_TYPE_UNDEF
    constructor_arg: true
    getter: true
    setter: true

  - name: width
    type: float
    init_with: DEFAULT_WIDTH
    getter: true
    setter: true

  - name: height
    type: float
    init_with: DEFAULT_HEIGHT
    getter: true
    setter: true

  - name: DEFAULT_WIDTH
    type: int
    init_with: 640
    static: true
    constexpr: true

  - name: DEFAULT_HEIGHT
    type: int
    init_with: 155
    static: true
    constexpr: true


methods:


  - name: __dependency_trigger
    parameters:
      - name: dep1
        type: uint32_t
        default_argument: AllegroFlare::SavingAndLoading::SaveSlot::SAVE_SLOT_TYPE_UNDEF
        default_argument_dependency_symbols: [ 'AllegroFlare::SavingAndLoading::SaveSlot' ]
    body: |
      return;


  - name: render
    type: void
    guards:
      - al_is_system_installed()
      - al_is_primitives_addon_initialized()
      - al_is_font_addon_initialized()
      - bitmap_bin
      - font_bin
    body: |
      float x = 0; // TODO: Factor out x
      float y = 0; // TODO: Factor out y
      float screenshot_width = 1920/9;
      float screenshot_x_padding = 20;
      float screenshot_height = 1080/9;
      //float x = 1920/2;
      //float y = 1080/3;
      ALLEGRO_FONT *location_name_font = obtain_location_name_font();
      float location_name_font_line_height = al_get_font_line_height(location_name_font);
      ALLEGRO_FONT *details_font = obtain_details_font();
      float details_font_line_height = al_get_font_line_height(details_font);
      //float h_location_name_font_line_height = al_get_font_line_height(location_name_font)/2;
      //float text_width = al_get_text_width(font, quote.c_str());
      //float text_height = al_get_font_line_height(font);
      float h_text_width = width/2;
      float h_text_height = height/2;
      AllegroFlare::Vec2D padding = {0, 0};
      float cumulative_line_spacing = 0;

      float text_x = x + screenshot_width + screenshot_x_padding*2;
      float text_y = y + 12;
      ALLEGRO_COLOR fill_color = ALLEGRO_COLOR{0.13, 0.13, 0.13, 1.0};
      ALLEGRO_COLOR border_color = ALLEGRO_COLOR{1.0, 1.0, 1.0, 1.0};

      { // fill and border
         // Draw the fill
         al_draw_filled_rounded_rectangle(
            x - padding.x,
            y - padding.y,
            x + width + padding.x,
            y + height + padding.y,
            8.0f,
            8.0f,
            fill_color
         );

         // Draw the border
         al_draw_rounded_rectangle(
            x - padding.x,
            y - padding.y,
            x + width + padding.x,
            y + height + padding.y,
            8.0f,
            8.0f,
            border_color,
            3.0f
         );
      }

      { // screenshot
         // Draw the screenshot frame
         float screenshot_x = x+screenshot_x_padding;
         float screenshot_y = y+height/2 - (int)(screenshot_height/2);
         //float screenshot_w = 350/2;
         //float screenshot_h = 220/2;
         al_draw_rectangle(
            screenshot_x,
            screenshot_y,
            screenshot_x + screenshot_width,
            screenshot_y + screenshot_height,
            border_color,
            2.0f
         );

         // Draw the image
         // NOTE: Any image will be stretched to fit the screenshot space
         // NOTE: Screenshots are 16:9
         ALLEGRO_BITMAP* screenshot = bitmap_bin->auto_get(screenshot_of_gameplay_at_save_identifier);
         if (!screenshot)
         {
            AllegroFlare::Logger::throw_error(THIS_CLASS_AND_METHOD_NAME,
               "screenshot is required in this component (for now)."
            );
         }

         al_draw_scaled_bitmap(
            screenshot,
            0,
            0,
            al_get_bitmap_width(screenshot),
            al_get_bitmap_height(screenshot),
            screenshot_x,
            screenshot_y,
            screenshot_width,
            screenshot_height,
            0
         );

         if (!save_slot_type_is_manual_save())
         { // Save slot type (presented as text over the screenshot)
            float type_label_x = (int)(screenshot_x + screenshot_width * 0.5);
            float type_label_y = (int)(screenshot_y + screenshot_height - (details_font_line_height * 1.125));

            ALLEGRO_COLOR fill_color = ALLEGRO_COLOR{0.0, 0.0, 0.0, 0.6};
            ALLEGRO_COLOR text_color = ALLEGRO_COLOR{0.7, 0.7, 0.7, 0.7};

            al_draw_filled_rectangle(
               screenshot_x,
               screenshot_y + screenshot_height - details_font_line_height * 1.25,
               screenshot_x + screenshot_width,
               screenshot_y + screenshot_height,
               fill_color
            );

            al_draw_text(
               details_font,
               text_color,
               type_label_x,
               type_label_y,
               ALLEGRO_ALIGN_CENTER,
               obtain_save_slot_type_string_for_presentation(save_slot_type).c_str()
            );
         }
      }

      cumulative_line_spacing = 0;
      { // save data text
         // The location of the save
         al_draw_text(
            location_name_font,
            ALLEGRO_COLOR{1, 1, 1, 1},
            text_x,
            text_y+cumulative_line_spacing,
            ALLEGRO_ALIGN_LEFT,
            location_of_save.c_str()
         );
         cumulative_line_spacing += location_name_font_line_height + 1;

         // The date_and_time_of_save
         al_draw_text(
            details_font,
            ALLEGRO_COLOR{1, 1, 1, 1},
            text_x,
            text_y+cumulative_line_spacing,
            ALLEGRO_ALIGN_LEFT,
            date_and_time_of_save.c_str()
         );
         cumulative_line_spacing += details_font_line_height + 2;
      }

      { // time since text
         // The time_since text
         ALLEGRO_FONT *time_since_font = details_font;
         ALLEGRO_COLOR time_since_color = ALLEGRO_COLOR{0.5, 1.0, 0.83, 1.0}; // a minty green

         int time_since_font_line_height = al_get_font_line_height(time_since_font);

         al_draw_text(
            time_since_font,
            time_since_color,
            text_x,
            text_y+cumulative_line_spacing,
            //x + width - padding.x-screenshot_x_padding,
            //y + height - padding.y - time_since_font_line_height - 5,
            ALLEGRO_ALIGN_LEFT,
            time_since_text.c_str()
         );
      }

      return;
    body_dependency_symbols:
      - AllegroFlare::Vec2D
      - al_draw_rounded_rectangle
      - al_draw_text


  - name: save_slot_type_is_manual_save
    type: bool
    body: |
      return save_slot_type == AllegroFlare::SavingAndLoading::SaveSlot::SAVE_SLOT_TYPE_MANUAL_SAVE;


  - name: obtain_save_slot_type_string_for_presentation
    type: std::string
    static: true
    parameters:
      - name: save_slot_type
        type: uint32_t
        default_argument: AllegroFlare::SavingAndLoading::SaveSlot::SAVE_SLOT_TYPE_UNDEF
    body: |
      static const std::unordered_map<uint32_t, std::string> event_names {
         { AllegroFlare::SavingAndLoading::SaveSlot::SAVE_SLOT_TYPE_MANUAL_SAVE, "Manual Save" },
         { AllegroFlare::SavingAndLoading::SaveSlot::SAVE_SLOT_TYPE_AUTO_SAVE, "Autosave" },
         { AllegroFlare::SavingAndLoading::SaveSlot::SAVE_SLOT_TYPE_QUICK_SAVE, "Quicksave" },
      };

      auto it = event_names.find(save_slot_type);

      if (it == event_names.end())
      {
         return "SAVE_SLOT_TYPE_UNKNOWN";
      }
      else
      {
         return it->second;
      }
    body_dependency_symbols:
      - std::unordered_map


  - name: obtain_location_name_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Oswald-Medium.ttf -54");


  - name: obtain_details_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("RobotoCondensed-Regular.ttf -32");


dependencies:


  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_draw_text
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_draw_rounded_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Vec2D
    headers: [ AllegroFlare/Vec2D.hpp ]
  - symbol: AllegroFlare::SavingAndLoading::SaveSlot
    headers: [ AllegroFlare/SavingAndLoading/SaveSlot.hpp ]


