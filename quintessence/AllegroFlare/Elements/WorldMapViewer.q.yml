properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: false

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: false

  - name: place
    type: AllegroFlare::Placement2D
    init_with: ''
    getter: true
    setter: true

  - name: map
    type: AllegroFlare::WorldMaps::Maps::Basic*
    init_with: nullptr
    getter: true
    setter: false

  - name: map_placement
    type: AllegroFlare::Placement2D
    init_with: ''
    getter: true
    setter: false

  - name: current_page_index_num
    type: int
    init_with: 0

  - name: document_camera
    type: AllegroFlare::Camera2D
    init_with: ''

  - name: cursor
    type: AllegroFlare::Vec2D
    init_with: '{}'
    getter: true
    setter: true

  - name: cursor_velocity_magnitude_axis_x
    type: float
    init_with: 0
    getter: true
    setter: true

  - name: cursor_velocity_magnitude_axis_y
    type: float
    init_with: 0
    getter: true
    setter: true

  - name: cursor_max_velocity
    type: float
    init_with: 6.5
    getter: true
    setter: true

  - name: document_camera_target_zoom
    type: float
    init_with: 0

  - name: document_camera_zoom_levels
    type: std::vector<float>
    init_with: '{ 0.5f }'

  - name: document_camera_zoom_level_cursor
    type: int
    init_with: 0

  - name: wrap_zoom
    type: bool
    init_with: false
    getter: true
    setter: true

  - name: camera_velocity_magnitude_axis_x
    type: float
    init_with: 0
    getter: true
    setter: true

  - name: camera_velocity_magnitude_axis_y
    type: float
    init_with: 0
    getter: true
    setter: true

  - name: camera_range_x1
    type: float
    init_with: DEFAULT_CAMERA_RANGE_X1
    getter: true
    setter: true

  - name: camera_range_y1
    type: float
    init_with: DEFAULT_CAMERA_RANGE_Y1
    getter: true
    setter: true

  - name: camera_range_x2
    type: float
    init_with: DEFAULT_CAMERA_RANGE_X2
    getter: true
    setter: true

  - name: camera_range_y2
    type: float
    init_with: DEFAULT_CAMERA_RANGE_Y2
    getter: true
    setter: true

  - name: camera_max_velocity
    type: float
    init_with: 6.5
    getter: true
    setter: true

  - name: initialized
    type: bool
    init_with: false

  - name: DEFAULT_CAMERA_RANGE_X1
    type: float
    init_with: -1920/2
    static: true
    constexpr: true

  - name: DEFAULT_CAMERA_RANGE_X2
    type: float
    init_with: 1920/2
    static: true
    constexpr: true

  - name: DEFAULT_CAMERA_RANGE_Y1
    type: float
    init_with: -1080/2
    static: true
    constexpr: true

  - name: DEFAULT_CAMERA_RANGE_Y2
    type: float
    init_with: 1080/2
    static: true
    constexpr: true

  - name: TYPE
    type: char*
    init_with: '"Panes/CrimeSummary"'
    static: true
    constexpr: true


methods:


  - name: set_bitmap_bin
    guards: [ (!initialized) ]
    parameters:
      - name: bitmap_bin
        type: AllegroFlare::BitmapBin*
        default_argument: nullptr
    body: |
      this->bitmap_bin = bitmap_bin;
      return;


  - name: set_font_bin
    guards: [ (!initialized) ]
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
    body: |
      this->font_bin = font_bin;
      return;


  - name: initialize
    guards:
      - (!initialized)
      - al_is_system_installed()
      - al_is_primitives_addon_initialized()
      - al_is_font_addon_initialized()
      - al_is_ttf_addon_initialized()
      - bitmap_bin
      - font_bin
    body: |
      // set the "name" property (as expected by the Panes::Base class)
      // HERE: Base::set_name("Crime Summary");

      int margin_x = 100;
      int margin_y = 142;
      place = AllegroFlare::Placement2D(1920/2, 1080/2, 1920-margin_x*2, 1080-margin_y*2);

      fit_and_position_map();
      reset_document_camera();

      initialized = true;
      return;
    body_dependency_symbols:
      - al_is_system_installed
      - al_is_primitives_addon_initialized
      - al_is_font_addon_initialized
      - al_is_ttf_addon_initialized


  - name: fit_and_position_map
    private: true
    guards: [ bitmap_bin ]
    body: |
      if (!map) return;

      ALLEGRO_BITMAP *map_image = bitmap_bin->auto_get(map->get_background_image_identifier());
      map_placement.size = { 0.0f, 0.0f };
 
      if (map_image)
      {
         map_placement.size = { (float)al_get_bitmap_width(map_image), (float)al_get_bitmap_height(map_image) };
      }

      map_placement.position.x = place.size.x * 0.5;
      map_placement.position.y = place.size.y * 0.5;
      map_placement.align.x = 0.5;
      map_placement.align.y = 0.5;
      //map_placement.rotation = 0;

      return;
    body_dependency_symbols:
      - AllegroFlare::Random


  - name: fit_camera_range_to_map_dimensions
    guards: [ initialized ]
    body: |
      ///* TODO
      if (map == nullptr) reset_document_camera_range_to_defaults();

      //CatDetective::Chronicle::Panes::CrimeSummaryPage &first_page = pages[0];
      AllegroFlare::Placement2D &first_page_placement = map_placement; //first_page.get_place_ref();

      float h_width = first_page_placement.size.x * 0.5;
      float h_height = first_page_placement.size.y * 0.5;
      camera_range_x1 = -h_width;
      camera_range_y1 = -h_height;
      camera_range_x2 = h_width;
      camera_range_y2 = h_height;
      //*/
      
      return;


  - name: reset
    body: |
      reset_document_camera();
      fit_camera_range_to_map_dimensions();
      go_to_origin_or_primary_point_of_interest();
      return;


  - name: reset_document_camera
    body: |
      document_camera_zoom_levels = { 0.5, 0.75, 1.0, 1.25, 1.5, 1.75 };
      document_camera_zoom_level_cursor = 0;
      camera_velocity_magnitude_axis_x = 0;
      camera_velocity_magnitude_axis_y = 0;

      document_camera.size = { place.size.x, place.size.y };
      document_camera.position = { place.size.x * 0.5f, place.size.y * 0.5f };
      document_camera_target_zoom = document_camera_zoom_levels[document_camera_zoom_level_cursor];
      document_camera.set_zoom({document_camera_target_zoom, document_camera_target_zoom});
      return;


  - name: reset_document_camera_range_to_defaults
    body: |
      camera_range_x1 = -200;
      camera_range_y1 = -100;
      camera_range_x2 = 200;
      camera_range_y2 = 100;
      return;


  - name: on_switch_out
    xvirtual: true
    xoverride: true
    body: |
      unset_camera_moving();
      unset_cursor_moving();
      return;


  - name: step_zoom_in
    body: |
      if (document_camera_zoom_levels.empty()) return;
      document_camera_zoom_level_cursor++;
      if (wrap_zoom)
      {
         document_camera_zoom_level_cursor = document_camera_zoom_level_cursor % document_camera_zoom_levels.size();
      }
      else
      {
         if (document_camera_zoom_level_cursor >= document_camera_zoom_levels.size())
            document_camera_zoom_level_cursor = document_camera_zoom_levels.size()-1;
      }
      document_camera_target_zoom = document_camera_zoom_levels[document_camera_zoom_level_cursor];
      return;


  - name: step_zoom_out
    body: |
      if (document_camera_zoom_levels.empty()) return;
      document_camera_zoom_level_cursor--;
      if (wrap_zoom)
      {
         document_camera_zoom_level_cursor += document_camera_zoom_levels.size();
         document_camera_zoom_level_cursor = document_camera_zoom_level_cursor % document_camera_zoom_levels.size();
      }
      else
      {
         if (document_camera_zoom_level_cursor < 0) document_camera_zoom_level_cursor = 0;
      }
      document_camera_target_zoom = document_camera_zoom_levels[document_camera_zoom_level_cursor];
      return;


  - name: set_camera_moving_up
    body: |
      camera_velocity_magnitude_axis_y = -camera_max_velocity;
      return;


  - name: set_camera_moving_down
    body: |
      camera_velocity_magnitude_axis_y = camera_max_velocity;
      return;


  - name: unset_camera_moving_vertical
    body: |
      camera_velocity_magnitude_axis_y = 0.0f;
      return;


  - name: set_camera_moving_left
    body: |
      camera_velocity_magnitude_axis_x = -camera_max_velocity;
      return;


  - name: set_camera_moving_right
    body: |
      camera_velocity_magnitude_axis_x = camera_max_velocity;
      return;


  - name: unset_camera_moving_horizontal
    body: |
      camera_velocity_magnitude_axis_x = 0.0f;
      return;


  - name: unset_camera_moving
    body: |
      unset_camera_moving_vertical();
      unset_camera_moving_horizontal();


  - name: set_cursor_moving_up
    body: |
      cursor_velocity_magnitude_axis_y = -cursor_max_velocity;
      return;


  - name: set_cursor_moving_down
    body: |
      cursor_velocity_magnitude_axis_y = cursor_max_velocity;
      return;


  - name: unset_cursor_moving_vertical
    body: |
      cursor_velocity_magnitude_axis_y = 0.0f;
      return;


  - name: set_cursor_moving_left
    body: |
      cursor_velocity_magnitude_axis_x = -cursor_max_velocity;
      return;


  - name: set_cursor_moving_right
    body: |
      cursor_velocity_magnitude_axis_x = cursor_max_velocity;
      return;


  - name: unset_cursor_moving_horizontal
    body: |
      cursor_velocity_magnitude_axis_x = 0.0f;
      return;


  - name: unset_cursor_moving
    body: |
      unset_cursor_moving_vertical();
      unset_cursor_moving_horizontal();


  - name: set_map
    parameters:
      - name: map
        type: AllegroFlare::WorldMaps::Maps::Basic*
        default_argument: nullptr
    body: |
      this->map = map;
      fit_and_position_map();
      reset_document_camera();
      return;


  - name: go_to_origin_or_primary_point_of_interest
    body: |
      if (map)
      {
         // TODO: Test this case
         // TODO: Consider that map may need to be moved slowly to this position
         std::tie(document_camera.position.x, document_camera.position.y) =
            map->infer_primary_point_of_interest_coordinates();
      }
      else
      {
         // TODO: Test this case
         // TODO: Consider that map may need to be moved slowly to this position
         document_camera.position = { place.size.x * 0.5f, place.size.y * 0.5f };
      }
      return;


  - name: render_map
    private: true
    guards: [ al_get_current_display(), bitmap_bin, font_bin ]
    body: |
      if (infer_no_pages_are_present())
      {
         // draw some placeholder text when there are no pages
         draw_empty_state(font_bin, "No Crime Summary Report");
         return;
      }

      // TODO: add extra scroll offset so clipping travels along with external camera movement
      int clip_x, clip_y, clip_w, clip_h;
      clip_x = (place.position.x - place.size.x * place.align.x);
      clip_y = (place.position.y - place.size.y * place.align.y);
      clip_w = place.size.x;
      clip_h = place.size.y;

      // Scale the clipping points to match the actual resolution of the display, rather than the 
      // surface virtual resolution which is 1920x1080.
      // NOTE: The technique for retrieving physical surface dimentions here feels a bit sloppy because it's
      // requesting hardware state/data (which is not the purview of this component) from deep within this
      // omponent which feels out of scope, but, it's probably fine tbh because I think this information is
      // already actively stored in the allegro state.

      ALLEGRO_DISPLAY *current_display = al_get_current_display();
      int physical_surface_width = al_get_display_width(current_display);
      int physical_surface_height = al_get_display_height(current_display);
      int virtual_surface_width = 1920;
      int virtual_surface_height = 1080;

      if (virtual_surface_width == physical_surface_width && virtual_surface_height == physical_surface_height)
      {
         // do no scaling, the physical and virtual dimensions are identical
      }
      else
      {
         float x_scale_change = physical_surface_width / (float)virtual_surface_width;
         float y_scale_change = physical_surface_height / (float)virtual_surface_height;
         clip_x *= x_scale_change;
         clip_y *= y_scale_change;
         clip_w *= x_scale_change;
         clip_h *= y_scale_change;
      }

      al_set_clipping_rectangle(clip_x, clip_y, clip_w, clip_h);
      document_camera.start_reverse_transform();

      // render pages in reverse order from back to front
      /* // HERE
      for (int i=(pages.size()-1); i>=0; i--)
      {
         HERE: pages[i].render(bitmap_bin);
      }
      */

      // NEW:
      AllegroFlare::WorldMapRenderers::Basic renderer(bitmap_bin, font_bin, map);
      renderer.render();

      // Draw the cursor
      // TODO: Project this into the map
      al_draw_circle(cursor.x, cursor.y, 13, ALLEGRO_COLOR{0, 0, 1, 1}, 2.0f); // debuggin

      document_camera.restore_transform();

      AllegroFlare::Vec2D transformed_cursor = cursor;
      document_camera.transform_coordinates(&transformed_cursor.x, &transformed_cursor.y);
      draw_cursor(transformed_cursor.x, transformed_cursor.y);
      

      al_reset_clipping_rectangle(); // TODO: revert to previous clipping instead


      return;
    body_dependency_symbols:
      - AllegroFlare::WorldMapRenderers::Basic


  - name: draw_cursor
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
    body: |
      float size = 40;
      float hsize = size * 0.5f;
      float thickness = 6.0;
      // Draw shadow
      al_draw_rectangle(x-hsize, y-hsize, x+hsize, y+hsize, ALLEGRO_COLOR{0.0, 0.0, 0.0, 0.4}, 6.0 + 6.0);
      // Draw shape
      al_draw_rectangle(x-hsize, y-hsize, x+hsize, y+hsize, ALLEGRO_COLOR{0.95, 0.74, 0.5, 1.0}, 6.0);
      return;


  - name: infer_no_pages_are_present
    type: bool
    body: |
      return map == nullptr;
      //return pages.empty();


  - name: update
    guards: [ initialized ]
    body: |
      // update cursor position by the velocity
      cursor.x += cursor_velocity_magnitude_axis_x;
      cursor.y += cursor_velocity_magnitude_axis_y;

      // ensure the cursor does not extand beyond the constraints
      // TODO: Avoid using the "camera_range_x1"/"camera_range_x2" and find a better way to manage cursor ranges instead
      cursor.x -= place.size.x * 0.5;
      cursor.x =
         AllegroFlare::clamp<float>(camera_range_x1, camera_range_x2, cursor.x)
         + place.size.x * 0.5;
      cursor.y -= place.size.y * 0.5;
      cursor.y =
         AllegroFlare::clamp<float>(camera_range_y1, camera_range_y2, cursor.y)
         + place.size.y * 0.5;

      // update camera position by the velocity
      document_camera.position.x += camera_velocity_magnitude_axis_x;
      document_camera.position.y += camera_velocity_magnitude_axis_y;

      bool camera_follows_cursor = true;
      if (camera_follows_cursor)
      {
         document_camera.position.x = cursor.x;
         document_camera.position.y = cursor.y;
      }
      else
      {
         // ensure the camera does not extand beyond the constraints
         document_camera.position.x -= place.size.x * 0.5;
         document_camera.position.x =
            AllegroFlare::clamp<float>(camera_range_x1, camera_range_x2, document_camera.position.x)
            + place.size.x * 0.5;
         document_camera.position.y -= place.size.y * 0.5;
         document_camera.position.y =
            AllegroFlare::clamp<float>(camera_range_y1, camera_range_y2, document_camera.position.y)
            + place.size.y * 0.5;
      }

      // update camera zoom
      float f_zoom = document_camera.get_zoom().x;
      float next_zoom = (document_camera_target_zoom - f_zoom) * 0.175 + f_zoom;
      document_camera.set_zoom({next_zoom, next_zoom});
      return;
    body_dependency_symbols:
      - AllegroFlare::clamp


  - name: render
    guards: [ initialized ]
    body: |
      if (infer_no_pages_are_present())
      {
         //draw_empty_state(font_bin, "No Crime Summary Report");
         draw_empty_state(font_bin, "No Map");
      }
      else
      {
         place.start_transform();

         // draw an arbitrary frame
         al_draw_rectangle(0, 0, place.size.x, place.size.y, ALLEGRO_COLOR{0.2, 0.2, 0.2, 0.2}, 2.0f);
         // render the elements
         render_map();
         render_page_numbers();
         render_zoom_scale();
 
         place.restore_transform();
      }
      
      return;
    body_dependency_symbols:
      - AllegroFlare::WorldMapRenderers::Basic


  - name: infer_focused_location_label
    type: std::string
    parameters:
      - name: fallback
        type: std::string
        default_argument: '"- no location -"'
    guards: [ map ]
    body: |
      std::string id = map->location_id_at(cursor.x, cursor.y);
      if (id.empty()) return fallback;
      return id;
      //return map->location_identifer_at(cursor.x, cursor.y);


  - name: render_page_numbers
    type: void
    private: true
    guards: [ initialized ]
    body: |
      std::string focused_location_label = infer_focused_location_label(); //"-"; //[unset-]";
      /*
         = "page "
         + (std::to_string(pages.empty() ? 0 : current_page_index_num + 1))
         + " of "
         + std::to_string(pages.size());
      */

      float x = place.size.x * 0.5;
      float y = place.size.y;

      ALLEGRO_FONT *font = obtain_font();
      float text_width = al_get_text_width(font, focused_location_label.c_str());
      float text_height = al_get_font_line_height(font);
      float h_text_width = text_width/2;
      float h_text_height = text_height/2;
      AllegroFlare::Vec2D padding = {30, 20};

      al_draw_filled_rounded_rectangle(
         x-h_text_width - padding.x,
         y-h_text_height - padding.y,
         x+h_text_width + padding.x,
         y+h_text_height + padding.y,
         8.0f,
         8.0f,
         ALLEGRO_COLOR{0, 0, 0, 0.5}
      );
      al_draw_text(font, ALLEGRO_COLOR{1, 1, 1, 1}, x, y-h_text_height, ALLEGRO_ALIGN_CENTER, focused_location_label.c_str());
      return;


  - name: render_zoom_scale
    body: |
      float height = 380;
      float x_pos = place.size.x;
      float y_pos = place.size.y * 0.5 - height / 2;
      float zoom_cursor_pos = 1.0 - calc_zoom_position_relative_min_max();
      float padding_x = 32;
      float padding_y = 48;
      float roundness = padding_x;

      // draw background rectangle, same as "render_page_numbers"
      al_draw_filled_rounded_rectangle(
         x_pos - padding_x,
         y_pos - padding_y,
         x_pos + padding_x,
         y_pos + padding_y + height,
         roundness,
         roundness,
         ALLEGRO_COLOR{0, 0, 0, 0.5}
      );

      // draw the meter
      al_draw_line(x_pos, y_pos, x_pos, y_pos+height, ALLEGRO_COLOR{1,1,1,1}, 4.0);

      // draw the head on the bar
      al_draw_filled_circle(x_pos, y_pos + height * zoom_cursor_pos, 12, ALLEGRO_COLOR{1, 1, 1, 1});

      // draw the "zoom" label
      // TODO
      return;


  - name: draw_empty_state
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
      - name: placeholder_text
        type: std::string
        default_argument: '"Empty"'
    guards: [ font_bin, al_is_primitives_addon_initialized() ]
    body: |
      static constexpr float frame_width = 1920;
      static constexpr float frame_height = 1080;
      static constexpr float width = frame_width - 100 * 2;
      static constexpr float height = frame_height - 142 * 2;
      static constexpr float cx = frame_width / 2;
      static constexpr float cy = frame_height / 2;

      static constexpr float x1 = cx - width * 0.5;;
      static constexpr float y1 = cy - height * 0.5;
      static constexpr float x2 = cx + width * 0.5;
      static constexpr float y2 = cy + height * 0.5;

      al_draw_rectangle(x1, y1, x2, y2, ALLEGRO_COLOR{0.2, 0.2, 0.2, 0.2}, 2.0f);

      // draw the text
      static const std::string FONT_IDENTIFIER = "Inter-Medium.ttf -36";
      ALLEGRO_FONT* font = font_bin->operator[](FONT_IDENTIFIER);

      al_draw_text(
            font,
            ALLEGRO_COLOR{0.2, 0.2, 0.2, 0.2},
            1920 * 0.5,
            1080 * 0.5,
            ALLEGRO_ALIGN_CENTER,
            placeholder_text.c_str()
         );

      return;
    body_dependency_symbols:
      - al_draw_rectangle


  - name: calc_zoom_position_relative_min_max
    type: float
    body: |
      if (document_camera_zoom_levels.empty()) return 0.0f;
      auto [min, max] = std::minmax_element(begin(document_camera_zoom_levels), end(document_camera_zoom_levels));
      float range = *max - *min;
      return (document_camera.get_zoom().x - *min) / (range);


  - name: obtain_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ al_is_font_addon_initialized(), al_is_ttf_addon_initialized(), font_bin ]
    body: |
      static const std::string FONT_IDENTIFIER = "Inter-Medium.ttf -36";
      ALLEGRO_FONT* result_font = font_bin->operator[](FONT_IDENTIFIER);
      return result_font;


dependencies:


  - symbol: CatDetective::Chronicle::Panes::Base
    headers: [ CatDetective/Chronicle/Panes/Base.hpp ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_is_system_installed
    headers: [ allegro5/allegro.h ]
  - symbol: al_is_font_addon_initialized
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_is_ttf_addon_initialized
    headers: [ allegro5/allegro_ttf.h ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]
  - symbol: AllegroFlare::Vec2D
    headers: [ AllegroFlare/Vec2D.hpp ]
  - symbol: CatDetective::Chronicle::Panes::CrimeSummaryPage
    headers: [ CatDetective/Chronicle/Panes/CrimeSummaryPage.hpp ]
  - symbol: AllegroFlare::Camera2D
    headers: [ AllegroFlare/Camera2D.hpp ]
  - symbol: AllegroFlare::Random
    headers: [ AllegroFlare/Random.hpp ]
  - symbol: std::minmax_element
    headers: [ algorithm ]
  - symbol: AllegroFlare::clamp
    headers: [ AllegroFlare/Useful.hpp ]
  - symbol: al_draw_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::WorldMaps::Maps::Basic
    headers: [ AllegroFlare/WorldMaps/Maps/Basic.hpp ]
  - symbol: AllegroFlare::WorldMapRenderers::Basic
    headers: [ AllegroFlare/WorldMapRenderers/Basic.hpp ]


