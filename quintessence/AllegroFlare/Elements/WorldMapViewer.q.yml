properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: false

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: false

  - name: map_view_place
    type: AllegroFlare::Placement2D
    init_with: ''
    getter: true
    setter: true

  - name: map
    type: AllegroFlare::WorldMaps::Maps::Basic*
    init_with: nullptr
    getter: true
    setter: false

  - name: map_placement
    type: AllegroFlare::Placement2D
    init_with: ''
    getter: true
    setter: false

  - name: current_page_index_num
    type: int
    init_with: 0

  - name: document_camera
    type: AllegroFlare::Camera2D
    init_with: ''

  - name: cursor
    type: AllegroFlare::Vec2D
    init_with: '{}'
    getter: true
    setter: true

  - name: target_cursor
    type: AllegroFlare::Vec2D
    init_with: '{}'
    getter: true
    setter: true

  - name: cursor_size
    type: float
    init_with: 40.0f
    getter: true
    setter: true

  - name: cursor_edge_padding
    type: float
    init_with: 10.0f
    getter: true
    setter: true

  - name: cursor_velocity_magnitude_axis_x
    type: float
    init_with: 0
    getter: true
    setter: true

  - name: cursor_velocity_magnitude_axis_y
    type: float
    init_with: 0
    getter: true
    setter: true

  - name: cursor_max_velocity
    type: float
    init_with: 6.5
    getter: true
    setter: true

  - name: document_camera_target_zoom
    type: float
    init_with: 0

  - name: document_camera_zoom_levels
    type: std::vector<float>
    init_with: '{ 0.5f }'

  - name: document_camera_zoom_level_cursor
    type: int
    init_with: 0

  - name: wrap_zoom
    type: bool
    init_with: false
    getter: true
    setter: true

  - name: camera_velocity_magnitude_axis_x
    type: float
    init_with: 0
    getter: true
    setter: true

  - name: camera_velocity_magnitude_axis_y
    type: float
    init_with: 0
    getter: true
    setter: true

  - name: camera_range_x1
    type: float
    init_with: DEFAULT_CAMERA_RANGE_X1
    getter: true
    setter: true

  - name: camera_range_y1
    type: float
    init_with: DEFAULT_CAMERA_RANGE_Y1
    getter: true
    setter: true

  - name: camera_range_x2
    type: float
    init_with: DEFAULT_CAMERA_RANGE_X2
    getter: true
    setter: true

  - name: camera_range_y2
    type: float
    init_with: DEFAULT_CAMERA_RANGE_Y2
    getter: true
    setter: true

  - name: camera_max_velocity
    type: float
    init_with: 6.5
    getter: true
    setter: true

  - name: state
    type: uint32_t
    init_with: STATE_UNDEF
    getter: true
    setter: explicit

  - name: state_is_busy
    type: bool
    init_with: false

  - name: state_changed_at
    type: float
    init_with: 0.0f

  - name: initialized
    type: bool
    init_with: false

  - name: DEFAULT_CAMERA_RANGE_X1
    type: float
    init_with: -1920/2
    static: true
    constexpr: true

  - name: DEFAULT_CAMERA_RANGE_X2
    type: float
    init_with: 1920/2
    static: true
    constexpr: true

  - name: DEFAULT_CAMERA_RANGE_Y1
    type: float
    init_with: -1080/2
    static: true
    constexpr: true

  - name: DEFAULT_CAMERA_RANGE_Y2
    type: float
    init_with: 1080/2
    static: true
    constexpr: true


enums:


  - name: State
    enumerators:
      - STATE_UNDEF
      - STATE_PLAYER_CONTROLLING
      - STATE_REPOSITIONING_CURSOR


documentation:


  - This component is useful for things like: 
     - Overworld Map e.g. Mario World
     - World Map a-la Zelda tears of kingdom
     - World Map a-la LA Noir
     - Level Map a-la Super Metroid
     - Possibly the World Map in MegaMan
  - The component does come with a correlated Screen, but can also be inserted into other screens such as a quest
    log or similar. Any screen that has a map view could theoretically use this component.
  - todos:
     - Consider mid-state changes like pausing/unpausing while the cursor is repositioning, should it snap to the
       destination? etc?


methods:


  - name: set_bitmap_bin
    guards: [ (!initialized) ]
    parameters:
      - name: bitmap_bin
        type: AllegroFlare::BitmapBin*
        default_argument: nullptr
    body: |
      this->bitmap_bin = bitmap_bin;
      return;


  - name: set_font_bin
    guards: [ (!initialized) ]
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
    body: |
      this->font_bin = font_bin;
      return;


  - name: initialize
    guards:
      - (!initialized)
      - al_is_system_installed()
      - al_is_primitives_addon_initialized()
      - al_is_font_addon_initialized()
      - al_is_ttf_addon_initialized()
      - bitmap_bin
      - font_bin
    body: |
      // set the "name" property (as expected by the Panes::Base class)
      // HERE: Base::set_name("Crime Summary");

      //int margin_x = 0;
      //int margin_y = 0;

      int margin_x = 100;
      int margin_y = 142;
      map_view_place = AllegroFlare::Placement2D(1920/2, 1080/2, 1920-margin_x*2, 1080-margin_y*2);

      //fit_and_position_map();
      //reset_document_camera();
      reset();

      initialized = true;
      return;
    body_dependency_symbols:
      - al_is_system_installed
      - al_is_primitives_addon_initialized
      - al_is_font_addon_initialized
      - al_is_ttf_addon_initialized


  - name: fit_and_position_map
    private: true
    guards: [ bitmap_bin ]
    body: |
      if (!map) return;

      ALLEGRO_BITMAP *map_image = bitmap_bin->auto_get(map->get_background_image_identifier());
      map_placement.size = { 0.0f, 0.0f };
 
      if (map_image)
      {
         map_placement.size = { (float)al_get_bitmap_width(map_image), (float)al_get_bitmap_height(map_image) };
      }

      map_placement.position.x = 0; //map_view_place.size.x * 0.5;
      map_placement.position.y = 0; //map_view_place.size.y * 0.5;
      map_placement.align.x = 0.5;
      map_placement.align.y = 0.5;
      //map_placement.rotation = 0;

      return;
    body_dependency_symbols:
      - AllegroFlare::Random


  - name: fit_camera_range_to_map_dimensions
    body: |
      if (!map)
      {
         reset_document_camera_range_to_defaults();
      }
      else
      {
         //CatDetective::Chronicle::Panes::CrimeSummaryPage &first_page = pages[0];
         AllegroFlare::Placement2D &first_page_placement = map_placement; //first_page.get_place_ref();

         float h_width = first_page_placement.size.x * 0.5;
         float h_height = first_page_placement.size.y * 0.5;
         camera_range_x1 = -h_width;
         camera_range_y1 = -h_height;
         camera_range_x2 = h_width;
         camera_range_y2 = h_height;
      }
      
      return;


  - name: reset
    body: |
      // TODO: Confirm these are in the correct order
      fit_and_position_map();
      reset_document_camera();
      unset_cursor_moving(); // TODO: Check if this is redundant
      fit_camera_range_to_map_dimensions();
      snap_cursor_to_origin_or_primary_point_of_interest();
      set_state(STATE_PLAYER_CONTROLLING);
      return;


  - name: reset_document_camera
    body: |
      // TODO: Enable setting these values, ensure they are sorted, and level_cursor is good
      document_camera_zoom_levels = { 1.5, 1.75, 2.1, 2.5 };
      document_camera_zoom_level_cursor = 2; // TODO: Prevent this from being a value outside zoom levels
      camera_velocity_magnitude_axis_x = 0;
      camera_velocity_magnitude_axis_y = 0;

      document_camera.size = { map_view_place.size.x, map_view_place.size.y };
      document_camera.position = { map_view_place.size.x * 0.5f, map_view_place.size.y * 0.5f };
      document_camera_target_zoom = document_camera_zoom_levels[document_camera_zoom_level_cursor];
      document_camera.set_zoom({document_camera_target_zoom, document_camera_target_zoom});
      return;


  - name: reset_document_camera_range_to_defaults
    body: |
      camera_range_x1 = DEFAULT_CAMERA_RANGE_X1;
      camera_range_y1 = DEFAULT_CAMERA_RANGE_Y1;
      camera_range_x2 = DEFAULT_CAMERA_RANGE_X2;
      camera_range_y2 = DEFAULT_CAMERA_RANGE_Y2;
      return;


  - name: on_switch_in
    body: |
      reset(); // TODO: Consider if this is a good approach, if it should hold the last position, last zoom, always
               // return to primary point of interest, etc.
      return;


  - name: on_switch_out
    body: |
      unset_camera_moving();
      unset_cursor_moving();
      return;


  - name: cursor_control_is_user
    type: bool
    body: |
      return is_state(STATE_PLAYER_CONTROLLING);


  - name: step_zoom_in
    body: |
      if (!cursor_control_is_user()) return;
      if (document_camera_zoom_levels.empty()) return;
      document_camera_zoom_level_cursor++;
      if (wrap_zoom)
      {
         document_camera_zoom_level_cursor = document_camera_zoom_level_cursor % document_camera_zoom_levels.size();
      }
      else
      {
         if (document_camera_zoom_level_cursor >= document_camera_zoom_levels.size())
            document_camera_zoom_level_cursor = document_camera_zoom_levels.size()-1;
      }
      document_camera_target_zoom = document_camera_zoom_levels[document_camera_zoom_level_cursor];
      return;


  - name: step_zoom_out
    body: |
      if (!cursor_control_is_user()) return;
      if (document_camera_zoom_levels.empty()) return;
      document_camera_zoom_level_cursor--;
      if (wrap_zoom)
      {
         document_camera_zoom_level_cursor += document_camera_zoom_levels.size();
         document_camera_zoom_level_cursor = document_camera_zoom_level_cursor % document_camera_zoom_levels.size();
      }
      else
      {
         if (document_camera_zoom_level_cursor < 0) document_camera_zoom_level_cursor = 0;
      }
      document_camera_target_zoom = document_camera_zoom_levels[document_camera_zoom_level_cursor];
      return;


  - name: set_camera_moving_up
    body: |
      if (!cursor_control_is_user()) return;
      camera_velocity_magnitude_axis_y = -camera_max_velocity;
      return;


  - name: set_camera_moving_down
    body: |
      if (!cursor_control_is_user()) return;
      camera_velocity_magnitude_axis_y = camera_max_velocity;
      return;


  - name: unset_camera_moving_vertical
    body: |
      if (!cursor_control_is_user()) return;
      camera_velocity_magnitude_axis_y = 0.0f;
      return;


  - name: set_camera_moving_left
    body: |
      if (!cursor_control_is_user()) return;
      camera_velocity_magnitude_axis_x = -camera_max_velocity;
      return;


  - name: set_camera_moving_right
    body: |
      if (!cursor_control_is_user()) return;
      camera_velocity_magnitude_axis_x = camera_max_velocity;
      return;


  - name: unset_camera_moving_horizontal
    body: |
      if (!cursor_control_is_user()) return;
      camera_velocity_magnitude_axis_x = 0.0f;
      return;


  - name: unset_camera_moving
    private: true
    body: |
      unset_camera_moving_vertical();
      unset_camera_moving_horizontal();


  - name: set_cursor_moving_up
    body: |
      if (!cursor_control_is_user()) return;
      cursor_velocity_magnitude_axis_y = -cursor_max_velocity;
      return;


  - name: set_cursor_moving_down
    body: |
      if (!cursor_control_is_user()) return;
      cursor_velocity_magnitude_axis_y = cursor_max_velocity;
      return;


  - name: unset_cursor_moving_vertical
    body: |
      if (!cursor_control_is_user()) return;
      cursor_velocity_magnitude_axis_y = 0.0f;
      return;


  - name: set_cursor_moving_left
    body: |
      if (!cursor_control_is_user()) return;
      cursor_velocity_magnitude_axis_x = -cursor_max_velocity;
      return;


  - name: set_cursor_moving_right
    body: |
      if (!cursor_control_is_user()) return;
      cursor_velocity_magnitude_axis_x = cursor_max_velocity;
      return;


  - name: unset_cursor_moving_horizontal
    body: |
      if (!cursor_control_is_user()) return;
      cursor_velocity_magnitude_axis_x = 0.0f;
      return;


  - name: unset_cursor_moving
    private: true
    body: |
      unset_cursor_moving_vertical();
      unset_cursor_moving_horizontal();


  - name: set_map
    parameters:
      - name: map
        type: AllegroFlare::WorldMaps::Maps::Basic*
        default_argument: nullptr
    body: |
      this->map = map;
      reset();
      //fit_and_position_map();
      //reset_document_camera();
      return;


  - name: snap_cursor_to_origin_or_primary_point_of_interest
    body: |
      if (map)
      {
         // TODO: Test this case
         std::tie(cursor.x, cursor.y) = map->infer_primary_point_of_interest_coordinates();
      }
      else
      {
         // TODO: Test this case
         cursor.x = map_view_place.size.x * 0.5f;
         cursor.y = map_view_place.size.y * 0.5f;
      }
      return;


  - name: move_cursor_to_location
    parameters:
      - name: location_id
        type: std::string
        default_argument: '"[unset-location_id]"'
    body: |
      if (map)
      {
         // TODO: Test this case
         if (!map->location_exists(location_id))
         {
            AllegroFlare::Logger::throw_error(
               "AllegroFlare::Elements::WorldMapViewer::move_cursor_to_location",
               "Could not find the location with identifier \"" + location_id + "\""
            );
         }
         else
         {
            bool found;
            std::pair<float, float> coordinates;
            std::tie(found, coordinates) = map->infer_location_coordinates(location_id);

            if (!found)
            {
               AllegroFlare::Logger::throw_error(
                  "AllegroFlare::Elements::WorldMapViewer::move_cursor_to_location",
                  "Location with identifier \"" + location_id + "\" exists, but coordinates could not be retrieved."
               );
            }
            else
            {
               target_cursor.x = coordinates.first;
               target_cursor.y = coordinates.second;
               set_state(STATE_REPOSITIONING_CURSOR);
            }
         }
      }
      else
      {
         // TODO: Test this case
         // TODO: Output warning
      }
      return;


  - name: render_map
    private: true
    guards: [ al_get_current_display(), bitmap_bin, font_bin ]
    body: |
      if (infer_no_pages_are_present())
      {
         // draw some placeholder text when there are no pages
         draw_empty_state(font_bin, "No Crime Summary Report");
         return;
      }

      // TODO: add extra scroll offset so clipping travels along with external camera movement
      int clip_x, clip_y, clip_w, clip_h;
      clip_x = (map_view_place.position.x - map_view_place.size.x * map_view_place.align.x);
      clip_y = (map_view_place.position.y - map_view_place.size.y * map_view_place.align.y);
      clip_w = map_view_place.size.x;
      clip_h = map_view_place.size.y;

      // Scale the clipping points to match the actual resolution of the display, rather than the 
      // surface virtual resolution which is 1920x1080.
      // NOTE: The technique for retrieving physical surface dimentions here feels a bit sloppy because it's
      // requesting hardware state/data (which is not the purview of this component) from deep within this
      // omponent which feels out of scope, but, it's probably fine tbh because I think this information is
      // already actively stored in the allegro state.

      ALLEGRO_DISPLAY *current_display = al_get_current_display();
      int physical_surface_width = al_get_display_width(current_display);
      int physical_surface_height = al_get_display_height(current_display);
      int virtual_surface_width = 1920;
      int virtual_surface_height = 1080;

      if (virtual_surface_width == physical_surface_width && virtual_surface_height == physical_surface_height)
      {
         // do no scaling, the physical and virtual dimensions are identical
      }
      else
      {
         float x_scale_change = physical_surface_width / (float)virtual_surface_width;
         float y_scale_change = physical_surface_height / (float)virtual_surface_height;
         clip_x *= x_scale_change;
         clip_y *= y_scale_change;
         clip_w *= x_scale_change;
         clip_h *= y_scale_change;
      }

      al_set_clipping_rectangle(clip_x, clip_y, clip_w, clip_h);
      document_camera.start_reverse_transform();

      // render pages in reverse order from back to front
      /* // HERE
      for (int i=(pages.size()-1); i>=0; i--)
      {
         HERE: pages[i].render(bitmap_bin);
      }
      */

      // NEW:
      AllegroFlare::WorldMapRenderers::Basic renderer(bitmap_bin, font_bin, map);
      renderer.render();

      // Draw the cursor
      // TODO: Project this into the map
      //al_draw_circle(cursor.x, cursor.y, 13, ALLEGRO_COLOR{0, 0, 1, 1}, 2.0f); // debuggin

      document_camera.restore_transform();

      AllegroFlare::Vec2D transformed_cursor = cursor;
      document_camera.transform_coordinates(&transformed_cursor.x, &transformed_cursor.y);
      draw_cursor(transformed_cursor.x, transformed_cursor.y);
      

      al_reset_clipping_rectangle(); // TODO: revert to previous clipping instead


      return;
    body_dependency_symbols:
      - AllegroFlare::WorldMapRenderers::Basic


  - name: draw_cursor
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
    body: |
      //float size = cursor_size;
      float hsize = cursor_size * 0.5f;
      float thickness = 6.0;
      // Draw shadow
      al_draw_rectangle(x-hsize, y-hsize, x+hsize, y+hsize, ALLEGRO_COLOR{0.0, 0.0, 0.0, 0.4}, 6.0 + 6.0);
      // Draw shape
      al_draw_rectangle(x-hsize, y-hsize, x+hsize, y+hsize, ALLEGRO_COLOR{0.95, 0.74, 0.5, 1.0}, 6.0);
      return;


  - name: infer_no_pages_are_present
    type: bool
    body: |
      return map == nullptr;
      //return pages.empty();


  - name: update
    guards: [ initialized ]
    body: |
      update_state();
      // NOTE: Order of transformations is important, for example, velocity is relative to zoom

      // Update camera zoom
      float f_zoom = document_camera.get_zoom().x;
      float next_zoom = (document_camera_target_zoom - f_zoom) * 0.175 + f_zoom;
      document_camera.set_zoom({next_zoom, next_zoom});

      // update cursor position by the velocity
      AllegroFlare::Vec2D document_camera_zoom = document_camera.get_zoom();
      cursor.x += (cursor_velocity_magnitude_axis_x / document_camera_zoom.x);
      cursor.y += (cursor_velocity_magnitude_axis_y / document_camera_zoom.y);

      // ensure the cursor does not extend beyond the constraints
      // TODO: Avoid using the "camera_range_x1"/"camera_range_x2" and find a better way to manage cursor ranges instead
      //cursor.x -= map_view_place.size.x * 0.5;
      //cursor.x =
         //AllegroFlare::clamp<float>(camera_range_x1, camera_range_x2, cursor.x)
         //+ map_view_place.size.x * 0.5;

      //cursor.y -= map_view_place.size.y * 0.5;
      //cursor.y =
         //AllegroFlare::clamp<float>(camera_range_y1, camera_range_y2, cursor.y)
         //+ map_view_place.size.y * 0.5;
      float padding = cursor_size * 0.5 + cursor_edge_padding; // 30;
      cursor.x = AllegroFlare::clamp<float>(0 + padding, 1920 - padding, cursor.x);
      cursor.y = AllegroFlare::clamp<float>(0 + padding, 1080 - padding, cursor.y);

      // Update camera position by the velocity
      document_camera.position.x += camera_velocity_magnitude_axis_x;
      document_camera.position.y += camera_velocity_magnitude_axis_y;

      // Have the camera follow the cursor, and/or block its range
      bool camera_follows_cursor = true;
      if (camera_follows_cursor)
      {
         document_camera.position.x = cursor.x;
         document_camera.position.y = cursor.y;

         float top, right, bottom, left;
         std::tie(top, right, bottom, left) = document_camera.get_outermost_coordinates_trbl();

         if (left < 0) { float dist = -left; document_camera.position.x += dist; }
         if (top < 0) { float dist = -top; document_camera.position.y += dist; }
         if (bottom > 1080) { float dist = bottom - 1080; document_camera.position.y -= dist; }
         if (right > 1920) { float dist = right - 1920; document_camera.position.x -= dist; }
         //if (outermost_coor
      }
      else
      {
         // ensure the camera does not extand beyond the constraints
         document_camera.position.x -= map_view_place.size.x * 0.5;
         document_camera.position.x =
            AllegroFlare::clamp<float>(camera_range_x1, camera_range_x2, document_camera.position.x)
            + map_view_place.size.x * 0.5;
         document_camera.position.y -= map_view_place.size.y * 0.5;
         document_camera.position.y =
            AllegroFlare::clamp<float>(camera_range_y1, camera_range_y2, document_camera.position.y)
            + map_view_place.size.y * 0.5;
      }

      return;
    body_dependency_symbols:
      - AllegroFlare::clamp


  - name: render
    guards: [ initialized ]
    body: |
      if (infer_no_pages_are_present())
      {
         //draw_empty_state(font_bin, "No Crime Summary Report");
         draw_empty_state(font_bin, "No Map");
      }
      else
      {
         map_view_place.start_transform();

         // draw an arbitrary frame
         al_draw_rectangle(0, 0, map_view_place.size.x, map_view_place.size.y, ALLEGRO_COLOR{0.2, 0.2, 0.2, 0.2}, 2.0f);
         // render the elements
         render_map();
         render_page_numbers();
         render_zoom_scale();
         render_coordinates();
 
         map_view_place.restore_transform();
      }
      
      return;
    body_dependency_symbols:
      - AllegroFlare::WorldMapRenderers::Basic


  - name: infer_focused_location_label
    type: std::pair<bool, std::string>
    guards: [ map ]
    body: |
      std::string location_id = map->location_id_at(cursor.x, cursor.y);
      if (location_id.empty()) return { false, "" };

      AllegroFlare::WorldMaps::Locations::Base *found_location = map->find_location_by_id(location_id);

      std::string result;
      if (!found_location)
      {
         AllegroFlare::Logger::warn_from_once(
            "AllegroFlare::Elements::WorldMapViewer",
            "Could not find a location for the location_id \"" + location_id + "\""
         );
         //result = location_id;
         return { false, location_id };
      }
      else
      {
         if (found_location->is_type(AllegroFlare::WorldMaps::Locations::Basic::TYPE))
         {
            AllegroFlare::WorldMaps::Locations::Basic *as =
               static_cast<AllegroFlare::WorldMaps::Locations::Basic*>(found_location);
            result = as->get_label();
         }
         else if (found_location->is_type(AllegroFlare::WorldMaps::Locations::Player::TYPE))
         {
            return { true, "current location" };
         }
         else
         {
            AllegroFlare::Logger::warn_from_once(
               "AllegroFlare::Elements::WorldMapViewer",
               "Could not infer a label for the location of type \"" + found_location->get_type() + "\""
            );
            //result = location_id;
            return { false, location_id };
         }
      }
      return { true, result };
    body_dependency_symbols:
      - AllegroFlare::WorldMaps::Locations::Basic
      - AllegroFlare::WorldMaps::Locations::Player


  - name: render_page_numbers
    type: void
    private: true
    guards: [ initialized ]
    body: |
      bool currently_over_location;
      std::string focused_location_label;
      std::tie(currently_over_location, focused_location_label) = infer_focused_location_label();

      if (!currently_over_location) focused_location_label = " - no location - ";
        //default_argument: '"- no location -"'

      if (!currently_over_location) return;


      float x = map_view_place.size.x * 0.5;
      float y = map_view_place.size.y;

      ALLEGRO_FONT *font = obtain_font();
      float text_width = al_get_text_width(font, focused_location_label.c_str());
      float text_height = al_get_font_line_height(font);
      float h_text_width = text_width/2;
      float h_text_height = text_height/2;
      AllegroFlare::Vec2D padding = {30, 20};
      float o = 0.8;
      ALLEGRO_COLOR text_color = currently_over_location
                               ? ALLEGRO_COLOR{1.0, 1.0, 1.0, 1.0}
                               : ALLEGRO_COLOR{0.28f*o, 0.32f*o, 0.41f*o, 1.0f*o}
                               ;

      al_draw_filled_rounded_rectangle(
         x-h_text_width - padding.x,
         y-h_text_height - padding.y,
         x+h_text_width + padding.x,
         y+h_text_height + padding.y,
         8.0f,
         8.0f,
         ALLEGRO_COLOR{0, 0, 0, 0.5}
      );
      al_draw_text(
         font,
         text_color,
         x,
         y-h_text_height,
         ALLEGRO_ALIGN_CENTER,
         focused_location_label.c_str()
      );
      return;


  - name: render_coordinates
    type: void
    private: true
    guards: [ initialized ]
    body: |
      //bool currently_over_location;
      std::stringstream coordinates;
      bool render_coordinates_as_int = true;
      if (render_coordinates_as_int) coordinates << (int)cursor.x << ", " << (int)cursor.y;
      else coordinates << cursor.x << ", " << cursor.y;
      std::string text_to_render = coordinates.str();
      //std::tie(currently_over_location, focused_location_label) = infer_focused_location_label();

      //if (!currently_over_location) focused_location_label = " - no location - ";
        //default_argument: '"- no location -"'


      float x = map_view_place.size.x - 100;
      float y = map_view_place.size.y - 60;

      ALLEGRO_FONT *font = obtain_small_ui_font();
      float text_width = al_get_text_width(font, text_to_render.c_str());
      float text_height = al_get_font_line_height(font);
      float h_text_width = text_width/2;
      float h_text_height = text_height/2;
      AllegroFlare::Vec2D padding = {30, 20};
      float o = 0.8;
      //ALLEGRO_COLOR text_color = currently_over_location
                               //? ALLEGRO_COLOR{1.0, 1.0, 1.0, 1.0}
                               //: ALLEGRO_COLOR{0.28f*o, 0.32f*o, 0.41f*o, 1.0f*o}
                               //;
      ALLEGRO_COLOR text_color = ALLEGRO_COLOR{1.0, 1.0, 1.0, 1.0};

      //al_draw_filled_rounded_rectangle(
         //x-h_text_width - padding.x,
         //y-h_text_height - padding.y,
         //x+h_text_width + padding.x,
         //y+h_text_height + padding.y,
         //8.0f,
         //8.0f,
         //ALLEGRO_COLOR{0, 0, 0, 0.5}
      //);
      al_draw_text(
         font,
         text_color,
         x,
         y-h_text_height,
         ALLEGRO_ALIGN_RIGHT,
         text_to_render.c_str()
      );
      return;


  - name: render_zoom_scale
    body: |
      float height = 380;
      float x_pos = map_view_place.size.x;
      float y_pos = map_view_place.size.y * 0.5 - height / 2;
      float zoom_cursor_pos = 1.0 - calc_zoom_position_relative_min_max();
      float padding_x = 32;
      float padding_y = 48;
      float roundness = padding_x;

      // draw background rectangle, same as "render_page_numbers"
      al_draw_filled_rounded_rectangle(
         x_pos - padding_x,
         y_pos - padding_y,
         x_pos + padding_x,
         y_pos + padding_y + height,
         roundness,
         roundness,
         ALLEGRO_COLOR{0, 0, 0, 0.5}
      );

      // draw the meter
      al_draw_line(x_pos, y_pos, x_pos, y_pos+height, ALLEGRO_COLOR{1,1,1,1}, 4.0);

      // draw the head on the bar
      al_draw_filled_circle(x_pos, y_pos + height * zoom_cursor_pos, 12, ALLEGRO_COLOR{1, 1, 1, 1});

      // draw the "zoom" label
      // TODO
      return;


  - name: draw_empty_state
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
      - name: placeholder_text
        type: std::string
        default_argument: '"Empty"'
    guards: [ font_bin, al_is_primitives_addon_initialized() ]
    body: |
      static constexpr float frame_width = 1920;
      static constexpr float frame_height = 1080;
      static constexpr float width = frame_width - 100 * 2;
      static constexpr float height = frame_height - 142 * 2;
      static constexpr float cx = frame_width / 2;
      static constexpr float cy = frame_height / 2;

      static constexpr float x1 = cx - width * 0.5;;
      static constexpr float y1 = cy - height * 0.5;
      static constexpr float x2 = cx + width * 0.5;
      static constexpr float y2 = cy + height * 0.5;

      al_draw_rectangle(x1, y1, x2, y2, ALLEGRO_COLOR{0.2, 0.2, 0.2, 0.2}, 2.0f);

      // draw the text
      static const std::string FONT_IDENTIFIER = "Inter-Medium.ttf -36";
      ALLEGRO_FONT* font = font_bin->operator[](FONT_IDENTIFIER);

      al_draw_text(
            font,
            ALLEGRO_COLOR{0.2, 0.2, 0.2, 0.2},
            1920 * 0.5,
            1080 * 0.5,
            ALLEGRO_ALIGN_CENTER,
            placeholder_text.c_str()
         );

      return;
    body_dependency_symbols:
      - al_draw_rectangle


  - name: calc_zoom_position_relative_min_max
    type: float
    body: |
      if (document_camera_zoom_levels.empty()) return 0.0f;
      auto [min, max] = std::minmax_element(begin(document_camera_zoom_levels), end(document_camera_zoom_levels));
      float range = *max - *min;
      return (document_camera.get_zoom().x - *min) / (range);


  - name: set_state
    parameters:
      - name: state
        type: uint32_t
        default_argument: STATE_UNDEF
      - name: override_if_busy
        type: bool
        default_argument: false
    guards: [ is_valid_state(state) ]
    body: |
      if (this->state == state) return;
      if (!override_if_busy && state_is_busy) return;
      uint32_t previous_state = this->state;

      switch (state)
      {
         case STATE_PLAYER_CONTROLLING:
         break;

         case STATE_REPOSITIONING_CURSOR:
         break;

         default:
            throw std::runtime_error("weird error");
         break;
      }

      this->state = state;
      state_changed_at = al_get_time();

      return;


  - name: update_state
    parameters:
      - name: time_now
        type: float
        default_argument: al_get_time()
    guards: [ is_valid_state(state) ]
    body: |
      float age = infer_current_state_age(time_now);

      switch (state)
      {
         case STATE_PLAYER_CONTROLLING:
         break;

         case STATE_REPOSITIONING_CURSOR: {
            float reposition_speed = 0.07f;
            float min_dist_to_end = 1.0f;

            cursor.x = (target_cursor.x - cursor.x) * reposition_speed + cursor.x;
            cursor.y = (target_cursor.y - cursor.y) * reposition_speed + cursor.y;

            float x_dist = std::abs(target_cursor.x - cursor.x); // Maybe to a magnitude/velocity calculation instead?
            float y_dist = std::abs(target_cursor.y - cursor.y);
            if (x_dist <= min_dist_to_end && y_dist <= min_dist_to_end)
            {
               cursor.x = target_cursor.x;
               cursor.y = target_cursor.y;
               set_state(STATE_PLAYER_CONTROLLING);
            }

         } break;

         default:
            throw std::runtime_error("weird error");
         break;
      }

      return;
    body_dependency_symbols:
      - std::abs


  - name: is_valid_state
    type: bool
    static: true
    parameters:
      - name: state
        type: uint32_t
        default_argument: STATE_UNDEF
    body: |
      std::set<uint32_t> valid_states =
      {
         STATE_PLAYER_CONTROLLING,
         STATE_REPOSITIONING_CURSOR,
      };
      return (valid_states.count(state) > 0);
    body_dependency_symbols:
      - std::set


  - name: is_state
    type: bool
    parameters:
      - name: possible_state
        type: uint32_t
        default_argument: STATE_UNDEF
    body: |
     return (state == possible_state);


  - name: infer_current_state_age
    type: float
    parameters:
      - name: time_now
        type: float
        default_argument: al_get_time()
    body: |
      return (time_now - state_changed_at);


  - name: obtain_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ al_is_font_addon_initialized(), al_is_ttf_addon_initialized(), font_bin ]
    body: |
      static const std::string FONT_IDENTIFIER = "Inter-Medium.ttf -36";
      ALLEGRO_FONT* result_font = font_bin->operator[](FONT_IDENTIFIER);
      return result_font;


  - name: obtain_small_ui_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ al_is_font_addon_initialized(), al_is_ttf_addon_initialized(), font_bin ]
    body: |
      static const std::string FONT_IDENTIFIER = "Inter-Regular.ttf -28";
      ALLEGRO_FONT* result_font = font_bin->operator[](FONT_IDENTIFIER);
      return result_font;


dependencies:


  - symbol: CatDetective::Chronicle::Panes::Base
    headers: [ CatDetective/Chronicle/Panes/Base.hpp ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_is_system_installed
    headers: [ allegro5/allegro.h ]
  - symbol: al_is_font_addon_initialized
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_is_ttf_addon_initialized
    headers: [ allegro5/allegro_ttf.h ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]
  - symbol: AllegroFlare::Vec2D
    headers: [ AllegroFlare/Vec2D.hpp ]
  - symbol: CatDetective::Chronicle::Panes::CrimeSummaryPage
    headers: [ CatDetective/Chronicle/Panes/CrimeSummaryPage.hpp ]
  - symbol: AllegroFlare::Camera2D
    headers: [ AllegroFlare/Camera2D.hpp ]
  - symbol: AllegroFlare::Random
    headers: [ AllegroFlare/Random.hpp ]
  - symbol: std::minmax_element
    headers: [ algorithm ]
  - symbol: AllegroFlare::clamp
    headers: [ AllegroFlare/Useful.hpp ]
  - symbol: al_draw_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::WorldMaps::Maps::Basic
    headers: [ AllegroFlare/WorldMaps/Maps/Basic.hpp ]
  - symbol: AllegroFlare::WorldMapRenderers::Basic
    headers: [ AllegroFlare/WorldMapRenderers/Basic.hpp ]
  - symbol: AllegroFlare::WorldMaps::Locations::Basic
    headers: [ AllegroFlare/WorldMaps/Locations/Basic.hpp ]
  - symbol: AllegroFlare::WorldMaps::Locations::Player
    headers: [ AllegroFlare/WorldMaps/Locations/Player.hpp ]
  - symbol: std::abs
    headers: [ cmath ]


