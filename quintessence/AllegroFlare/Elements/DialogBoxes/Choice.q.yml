parent_classes:


  - class: AllegroFlare::Elements::DialogBoxes::Base
    scope: public
    init_with: AllegroFlare::Elements::DialogBoxes::Choice::TYPE


properties:


  - name: prompt
    type: std::string
    init_with: '"[prompt-question-not-set]"'
    constructor_arg: true
    setter: explicit

  - name: options
    type: std::vector<std::pair<std::string, std::string>>
    init_with: '{}'
    constructor_arg: true
    setter: explicit

  - name: advancing_text
    type: AllegroFlare::Elements::AdvancingText
    init_with: ''

  - name: breakout_list_box
    type: AllegroFlare::Elements::ListBox
    init_with: ''
    getter: false

  - name: showing_breakout_list_box
    type: bool
    init_with: false
    setter: false
    getter: true

  - name: showing_cursor
    type: bool
    init_with: false
    setter: false
    getter: true

  - name: initialized
    type: bool
    init_with: false

  - name: TYPE
    type: char*
    init_with: '(char*)"DialogBoxes/Choice"'
    static: true
    constexpr: true


methods:


  - name: start
    virtual: true
    override: true
    body: |
      // TODO: Implement this, considering its relationship to "created_at"
      throw std::runtime_error("DialogBoxes::Choice::start not implemented");
      return;


  - name: update
    virtual: true
    override: true
    body: |
      if (!advancing_text.get_all_characters_are_revealed())
      {
         advancing_text.update();
         if (advancing_text.get_all_characters_are_revealed())
         {
            reveal_breakout_list_box();
            // TODO: Consider playing a tone
         }
      }
      return;


  - name: advance
    virtual: true
    override: true
    body: |
      // TODO: rather than have this "finish" it should advance the animation to the end.  Then, if the dialog
      // has "advance()" called a second time, it will set finished to true.
      // NOTE: this is similar behavior to DialogBoxes/YouGotAnItem, it should be updated accordingly as well
      if (get_finished()) return;
      if (!advancing_text.get_all_characters_are_revealed())
      {
         advancing_text.reveal_all_characters();
         reveal_breakout_list_box();
         // TODO: Consider playing a tone
      }
      set_finished(true);


  - name: initialize
    guards: [ (!initialized) ]
    body: |
      if (options.empty())
      {
         // TODO: Consider what behavior is expected here when there are no options. Maybe throw in the mean time
      }
      else
      {
         // Initialize the advancing_text element
         advancing_text.set_text(prompt);
         advancing_text.start(); // TODO: Consider moving this to "start()", Consider removing al_is_system_installed()

         // Initialize the breakout_list_box element
         breakout_list_box.set_items(options);
         breakout_list_box.set_wrap_at_edges(true);
      }
      initialized = true;
      return;


  - name: set_prompt
    parameters:
      - name: prompt
        type: std::string
        default_argument: '"[unset-prompt]"'
    guards: [ (!initialized) ]
    body: |
      this->prompt = prompt;
      return;


  - name: set_options
    parameters:
      - name: options
        type: std::vector<std::pair<std::string, std::string>>
        default_argument: '{}'
    guards: [ (!initialized) ]
    body: |
      this->options = options;
      return;


  - name: reveal_breakout_list_box
    private: true
    body: |
      if (!showing_breakout_list_box)
      {
         float time_now = al_get_time();
         breakout_list_box.set_created_at(time_now);
         showing_breakout_list_box = true;
         showing_cursor = true; // For now, using this "showing_cursor" mechanism.  Might consider using a different
                                // mechanism that sends info to an injected cursor
      }
      return;


  - name: infer_breakout_list_box_age
    type: float
    body: |
      if (!showing_breakout_list_box) return 0;
      float time_now = al_get_time(); // TODO: Consider injecting a "time_now"
      return breakout_list_box.infer_age(time_now);


  - name: get_prompt_full_text
    type: std::string
    guards: [ initialized ]
    body: return prompt;


  - name: get_prompt_revealed_text
    type: std::string
    guards: [ initialized ]
    body: return advancing_text.generate_revealed_text();


  - name: get_options
    type: std::vector<std::pair<std::string, std::string>>
    guards: [ initialized ]
    body: return options;


  - name: get_options_labels
    type: std::vector<std::string>
    body: |
      std::vector<std::string> result;
      for (auto &item : options)
      {
         result.push_back(item.first);
      }
      return result;


  - name: get_current_selection_text
    type: std::string
    guards: [ initialized ]
    body: |
      if (!has_valid_cursor_position()) return "";
      return breakout_list_box.get_currently_selected_item_label();


  - name: get_current_selection_value
    type: std::string
    guards: [ initialized ]
    body: |
      if (!has_valid_cursor_position()) return "";
      return breakout_list_box.get_currently_selected_item_value();


  - name: move_cursor_position_down
    virtual: true
    override: true
    type: void
    guards: [ initialized ]
    body: |
      breakout_list_box.move_cursor_down();
      return;


  - name: move_cursor_position_up
    virtual: true
    override: true
    type: void
    guards: [ initialized ]
    body: |
      breakout_list_box.move_cursor_up();
      return;


  - name: has_valid_cursor_position
    private: true
    type: bool
    body: |
      return breakout_list_box.has_valid_currently_selected_item();


  - name: get_cursor_position
    type: int
    body: |
      return breakout_list_box.get_cursor_position();


dependencies:


  - symbol: AllegroFlare::Elements::DialogBoxes::Base
    headers: [ AllegroFlare/Elements/DialogBoxes/Base.hpp ]
  - symbol: AllegroFlare::Elements::AdvancingText
    headers: [ AllegroFlare/Elements/AdvancingText.hpp ]
  - symbol: AllegroFlare::Elements::ListBox
    headers: [ AllegroFlare/Elements/ListBox.hpp ]


