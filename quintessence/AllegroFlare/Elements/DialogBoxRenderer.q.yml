properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true

  - name: dialog_box
    type: AllegroFlare::Elements::DialogBoxes::Base*
    init_with: nullptr
    constructor_arg: true

  - name: selection_cursor_box
    type: AllegroFlare::Elements::SelectionCursorBox*
    init_with: nullptr
    constructor_arg: true

  - name: standard_dialog_box_font_name
    type: std::string
    init_with: DEFAULT_STANDARD_DIALOG_BOX_FONT_NAME
    constructor_arg: true
    getter: true
    setter: true

  - name: standard_dialog_box_font_size
    type: int
    init_with: DEFAULT_STANDARD_DIALOG_BOX_FONT_SIZE
    constructor_arg: true
    getter: true
    setter: true

  - name: DEFAULT_STANDARD_DIALOG_BOX_FONT_NAME
    type: char*
    constexpr: true
    const: true
    static: true
    init_with: '(char*)"Inter-Regular.ttf"'

  - name: DEFAULT_STANDARD_DIALOG_BOX_FONT_SIZE
    type: int
    constexpr: true
    const: true
    static: true
    init_with: -36


documentation:


  - todos:
    - |
      Use AllegroFlare::Elements::DialogBoxRenderers::BasicRenderer::DEFAULT_FONT_NAME and *_FONT_SIZE as initial
      values for DEFAULT_STANDARD_DIALOG_BOX_FONT_NAME and DEFAULT_STANDARD_DIALOG_BOX_FONT_SIZE


functions:


  - name: deps
    body: |
      return;
    body_dependency_symbols:
      - AllegroFlare::Elements::DialogBoxRenderers::BasicRenderer


  - name: render
    guards:
      - al_is_system_installed()
      - al_is_primitives_addon_initialized()
      - al_get_current_display()
      - dialog_box
      - al_is_font_addon_initialized()
      - al_is_ttf_addon_initialized()
      - font_bin
    body: |
      float standard_dialog_box_x = 1920/2;
      float standard_dialog_box_y = 1080/8*6;
      float standard_dialog_box_width = 1920/2;
      float standard_dialog_box_height = 1080/5;

      if (dialog_box->is_type(AllegroFlare::Elements::DialogBoxes::Basic::TYPE))
      {
         AllegroFlare::Placement2D place{
            standard_dialog_box_x,
            standard_dialog_box_y,
            standard_dialog_box_width,
            standard_dialog_box_height,
         };

         AllegroFlare::Elements::DialogBoxes::Basic* basic_dialog_box =
            dynamic_cast<AllegroFlare::Elements::DialogBoxes::Basic*>(dialog_box);

         AllegroFlare::Elements::DialogBoxRenderers::BasicRenderer basic_dialog_box_renderer(font_bin);

         if (basic_dialog_box->has_speaking_character())
         {
            // TODO: Do lookup for speaking_chararacter -> speaking_character_name
            basic_dialog_box_renderer.set_speaking_character_name(basic_dialog_box->get_speaking_character());
            basic_dialog_box_renderer.set_showing_speaking_character_name(true);
         }
         basic_dialog_box_renderer.set_current_page_text(basic_dialog_box->get_current_page_text());
         basic_dialog_box_renderer.set_font_name(standard_dialog_box_font_name);
         basic_dialog_box_renderer.set_font_size(standard_dialog_box_font_size);
         basic_dialog_box_renderer.set_num_revealed_characters(basic_dialog_box->get_num_revealed_characters());
         basic_dialog_box_renderer.set_is_finished(basic_dialog_box->get_finished());
         basic_dialog_box_renderer.set_page_is_finished(basic_dialog_box->get_page_finished());
         basic_dialog_box_renderer.set_page_finished_at(basic_dialog_box->get_page_finished_at());
         basic_dialog_box_renderer.set_at_last_page(basic_dialog_box->at_last_page());
         basic_dialog_box_renderer.set_age(basic_dialog_box->infer_age());

         place.start_transform();
         basic_dialog_box_renderer.render();
         place.restore_transform();
      }
      else if (dialog_box->is_type(AllegroFlare::Elements::DialogBoxes::Choice::TYPE))
      {
         AllegroFlare::Placement2D place{
            standard_dialog_box_x,
            standard_dialog_box_y,
            standard_dialog_box_width,
            standard_dialog_box_height,
         };

         AllegroFlare::Elements::DialogBoxes::Choice* choice_dialog_box =
            dynamic_cast<AllegroFlare::Elements::DialogBoxes::Choice*>(dialog_box);

         AllegroFlare::Elements::DialogBoxRenderers::ChoiceRenderer choice_dialog_box_renderer(
            font_bin,
            bitmap_bin
         );
         if (choice_dialog_box->has_speaking_character())
         {
            // TODO: Do lookup for speaking_chararacter -> speaking_character_name
            choice_dialog_box_renderer.set_speaking_character_name(choice_dialog_box->get_speaking_character());
            choice_dialog_box_renderer.set_showing_speaking_character_name(true);
         }
         choice_dialog_box_renderer.set_choice_dialog_box(choice_dialog_box);
         choice_dialog_box_renderer.set_font_name(standard_dialog_box_font_name);
         choice_dialog_box_renderer.set_font_size(standard_dialog_box_font_size);
         choice_dialog_box_renderer.set_width(standard_dialog_box_width);
         choice_dialog_box_renderer.set_height(standard_dialog_box_height);
         choice_dialog_box_renderer.set_age(choice_dialog_box->infer_age());
         choice_dialog_box_renderer.set_selection_cursor_box(selection_cursor_box);

         // TODO: Finish adding params here

         place.start_transform();
         choice_dialog_box_renderer.render();
         place.restore_transform();
      }
      else if (dialog_box->is_type(AllegroFlare::Elements::DialogBoxes::YouGotAnItem::TYPE))
      {
         AllegroFlare::Placement2D place{ 1920/2, 1080/2, 400, 420 };

         AllegroFlare::Elements::DialogBoxes::YouGotAnItem* you_got_an_item_dialog_box =
            dynamic_cast<AllegroFlare::Elements::DialogBoxes::YouGotAnItem*>(dialog_box);

         AllegroFlare::Elements::DialogBoxRenderers::YouGotAnItemRenderer you_got_an_item_dialog_box_renderer(
            font_bin,
            bitmap_bin,
            you_got_an_item_dialog_box->get_item_name(),
            you_got_an_item_dialog_box->get_item_bitmap_identifier(),
            you_got_an_item_dialog_box->infer_age(),
            place.size.x,
            place.size.y
         );

         place.start_transform();
         you_got_an_item_dialog_box_renderer.render();
         place.restore_transform();
      }
      else if (dialog_box->is_type(AllegroFlare::Elements::DialogBoxes::YouGotEvidence::TYPE))
      {
         AllegroFlare::Elements::DialogBoxes::YouGotEvidence* you_got_evidence_dialog_box =
            dynamic_cast<AllegroFlare::Elements::DialogBoxes::YouGotEvidence*>(dialog_box);

         AllegroFlare::Placement2D place{
            1920/2,
            1080/2,
            AllegroFlare::Elements::DialogBoxRenderers::YouGotEvidenceRenderer::DEFAULT_WIDTH,
            AllegroFlare::Elements::DialogBoxRenderers::YouGotEvidenceRenderer::DEFAULT_HEIGHT,
         };

         AllegroFlare::Elements::DialogBoxRenderers::YouGotEvidenceRenderer you_got_evidence_dialog_box_renderer(
            font_bin,
            bitmap_bin,
            you_got_evidence_dialog_box->get_evidence_name(),
            you_got_evidence_dialog_box->get_evidence_bitmap_identifier(),
            you_got_evidence_dialog_box->infer_age(),
            place.size.x,
            place.size.y
         );

         place.start_transform();
         you_got_evidence_dialog_box_renderer.render();
         place.restore_transform();
      }
      else if (dialog_box->is_type(AllegroFlare::Elements::DialogBoxes::Wait::TYPE))
      {
         // No rendering to be done for this type
         // You might consider a debug mode that shows the wait time
      }
      else
      {
         // TODO include this:
         //std::cout << "Unrecognized dialog box type:: " + dialog_box->get_type();
         throw std::runtime_error("Elements/DialogBoxRenderer: Unrecognized dialog box type:: " + dialog_box->get_type());
      }

      return;
    body_dependency_symbols:
      - AllegroFlare::Placement2D
      - al_is_system_installed
      - al_is_primitives_addon_initialized
      - al_draw_filled_rounded_rectangle
      - al_color_html
      - AllegroFlare::Elements::DialogBoxFrame
      - AllegroFlare::Elements::DialogBoxes::Basic*
      - AllegroFlare::Elements::DialogBoxes::Choice*
      - AllegroFlare::Elements::DialogBoxes::YouGotAnItem*
      - AllegroFlare::Elements::DialogBoxes::YouGotEvidence
      - AllegroFlare::Elements::DialogBoxes::Wait
      - AllegroFlare::Elements::DialogBoxRenderers::BasicRenderer
      - AllegroFlare::Elements::DialogBoxRenderers::ChoiceRenderer
      - AllegroFlare::Elements::DialogBoxRenderers::YouGotAnItemRenderer
      - AllegroFlare::Elements::DialogBoxRenderers::YouGotEvidenceRenderer


dependencies:


  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro.h ]
  - symbol: al_is_system_installed
    headers: [ allegro5/allegro.h ]
  - symbol: al_get_current_display
    headers: [ allegro5/allegro.h ]
  - symbol: al_color_html
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_draw_filled_rounded_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::BitmapBin*
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::Base*
    headers: [ AllegroFlare/Elements/DialogBoxes/Base.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::Basic*
    headers: [ AllegroFlare/Elements/DialogBoxes/Basic.hpp ]
  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxFrame
    headers: [ AllegroFlare/Elements/DialogBoxFrame.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::Choice*
    headers: [ AllegroFlare/Elements/DialogBoxes/Choice.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::YouGotAnItem*
    headers: [ AllegroFlare/Elements/DialogBoxes/YouGotAnItem.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::YouGotEvidence
    headers: [ AllegroFlare/Elements/DialogBoxes/YouGotEvidence.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::Wait
    headers: [ AllegroFlare/Elements/DialogBoxes/Wait.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxRenderers::ChoiceRenderer
    headers: [ AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxRenderers::YouGotAnItemRenderer
    headers: [ AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxRenderers::YouGotEvidenceRenderer
    headers: [ AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxRenderers::BasicRenderer
    headers: [ AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer.hpp ]

  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::Base
    headers: [ AllegroFlare/Elements/DialogBoxes/Base.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::Basic
    headers: [ AllegroFlare/Elements/DialogBoxes/Basic.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::Choice
    headers: [ AllegroFlare/Elements/DialogBoxes/Choice.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::YouGotAnItem
    headers: [ AllegroFlare/Elements/DialogBoxes/YouGotAnItem.hpp ]
  - symbol: AllegroFlare::Elements::SelectionCursorBox
    headers: [ AllegroFlare/Elements/SelectionCursorBox.hpp ]


