properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true

  - name: dialog_box
    type: AllegroFlare::Elements::DialogBoxes::Base*
    init_with: nullptr
    constructor_arg: true


functions:


  - name: render
    guards:
      - al_is_system_installed()
      - al_is_primitives_addon_initialized()
      - al_get_current_display()
      - dialog_box
      - al_is_font_addon_initialized()
      - al_is_ttf_addon_initialized()
      - font_bin
    body: |
      if (dialog_box->is_type("Choice"))
      {
         AllegroFlare::Placement2D place{ 1920/2, 1080/5*4, 1920/5*3, 1080/4 };

         AllegroFlare::Elements::DialogBoxes::Choice* choice_dialog_box =
            dynamic_cast<AllegroFlare::Elements::DialogBoxes::Choice*>(dialog_box);

         AllegroFlare::Elements::DialogBoxRenderers::ChoiceRenderer choice_dialog_box_renderer(
            font_bin,
            bitmap_bin,
            choice_dialog_box,
            place.size.x,
            place.size.y
         );

         place.start_transform();
         choice_dialog_box_renderer.render();
         place.restore_transform();
      }
      else if (dialog_box->is_type("YouGotAnItem"))
      {
         AllegroFlare::Placement2D place{ 1920/2, 1080/2, 400, 420 };

         AllegroFlare::Elements::DialogBoxes::YouGotAnItem* you_got_an_item_dialog_box =
            dynamic_cast<AllegroFlare::Elements::DialogBoxes::YouGotAnItem*>(dialog_box);

         AllegroFlare::Elements::DialogBoxRenderers::YouGotAnItemRenderer you_got_an_item_dialog_box_renderer(
            font_bin,
            bitmap_bin,
            you_got_an_item_dialog_box->get_item_name(),
            you_got_an_item_dialog_box->get_item_bitmap_identifier(),
            you_got_an_item_dialog_box->infer_age(),
            place.size.x,
            place.size.y
         );

         place.start_transform();
         you_got_an_item_dialog_box_renderer.render();
         place.restore_transform();
      }
      else if (dialog_box->is_type("Basic"))
      {
         AllegroFlare::Placement2D place{ 1920/2, 1080/5*4, 1920/5*3, 1080/4 };

         AllegroFlare::Elements::DialogBoxes::Basic* basic_dialog_box =
            dynamic_cast<AllegroFlare::Elements::DialogBoxes::Basic*>(dialog_box);

         AllegroFlare::Elements::DialogBoxRenderers::Basic basic_dialog_box_renderer(
            font_bin,
            place.size.x,
            place.size.y,
            basic_dialog_box->get_current_page_text(),
            basic_dialog_box->get_num_revealed_characters(),
            basic_dialog_box->get_finished()
         );
         
         place.start_transform();
         basic_dialog_box_renderer.render();
         place.restore_transform();
      }
      else if (dialog_box->is_type("TitleText"))
      {
         std::cout << "Currently unsuported rendering for dialog box of type:: " + dialog_box->get_type();
         throw std::runtime_error("Currently unsupported rendering for dialog box of type:: " + dialog_box->get_type());
      }
      else
      {
         // TODO include this:
         //std::cout << "Unrecognized dialog box type:: " + dialog_box->get_type();
         //throw std::runtime_error("Unrecognized dialog box type:: " + dialog_box->get_type());
      }

      return;
    body_dependency_symbols:
      - AllegroFlare::Placement2D
      - al_is_system_installed
      - al_is_primitives_addon_initialized
      - al_draw_filled_rounded_rectangle
      - al_color_html
      - AllegroFlare::Elements::DialogBoxFrame
      - AllegroFlare::Elements::DialogBoxes::Basic*
      - AllegroFlare::Elements::DialogBoxes::Choice*
      - AllegroFlare::Elements::DialogBoxes::YouGotAnItem*
      - AllegroFlare::Elements::DialogBoxes::TitleText*
      - AllegroFlare::Elements::DialogBoxRenderers::Basic
      - AllegroFlare::Elements::DialogBoxRenderers::ChoiceRenderer
      - AllegroFlare::Elements::DialogBoxRenderers::YouGotAnItemRenderer


  - name: draw_special_state_empty_text
    parameters:
      - name: width
        type: float
        default_argument: 1
      - name: height
        type: float
        default_argument: 1
    body: |
      ALLEGRO_FONT* text_font = obtain_dialog_font();
      ALLEGRO_COLOR text_color = al_color_html("303030");
      float line_height = al_get_font_line_height(text_font);
      std::string text = "[dialog finished]";
      al_draw_text(
         text_font,
         text_color,
         width * 0.5,
         height * 0.5 - line_height * 0.5,
         ALLEGRO_ALIGN_CENTER,
         text.c_str()
      );
      return;


  - name: draw_action_text
    parameters:
      - name: text
        type: std::string
        default_argument: '"[unset-action-text]"'
      - name: width
        type: float
        default_argument: 1
      - name: height
        type: float
        default_argument: 1
    body: |
      ALLEGRO_FONT* text_font = obtain_dialog_font();
      ALLEGRO_COLOR text_color = al_color_html("66a9bc");
      float line_height = al_get_font_line_height(text_font);
      al_draw_text(
         text_font,
         text_color,
         width-20,
         height-line_height-10,
         ALLEGRO_ALIGN_RIGHT,
         text.c_str()
      );
      return;


  - name: draw_styled_revealed_text
    parameters:
      - name: max_width
        type: float
        default_argument: 1
      - name: text
        type: std::string
        default_argument: '"[unset-text]"'
      - name: num_revealed_characters
        type: int
        default_argument: 999
    body: |
      float text_padding_x = 40.0f;
      float text_padding_y = 30.0f;
      float text_box_max_width = max_width - (text_padding_x * 2);
      ALLEGRO_FONT* text_font = obtain_dialog_font();
      float line_height = al_get_font_line_height(text_font);
      //ALLEGRO_COLOR text_color = al_color_html("66a9bc");
      ALLEGRO_COLOR text_color = al_color_name("skyblue");
      //int num_revealed_characters = obtain_dialog_box_num_revealed_characters();

      al_draw_multiline_text(
         text_font,
         text_color,
         text_padding_x,
         text_padding_y,
         text_box_max_width,
         line_height,
         ALLEGRO_ALIGN_LEFT,
         concat_text(text, num_revealed_characters).c_str()
      );
      return;


  - name: concat_text
    type: std::string
    guards: [ dialog_box ]
    parameters:
      - name: source_text
        type: std::string
        default_argument: '""'
      - name: length
        type: int
        default_argument: 0
    body: |
      return source_text.substr(0, length);


  - name: obtain_dialog_font
    guards: [ al_is_font_addon_initialized(), al_is_ttf_addon_initialized(), font_bin ]
    private: true
    type: ALLEGRO_FONT*
    body: |
      static const std::string FONT_IDENTIFIER = "Inter-Medium.ttf -50";
      ALLEGRO_FONT* result_font = font_bin->operator[](FONT_IDENTIFIER);
      return result_font;


dependencies:


  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro.h ]
  - symbol: al_is_system_installed
    headers: [ allegro5/allegro.h ]
  - symbol: al_get_current_display
    headers: [ allegro5/allegro.h ]
  - symbol: al_color_html
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_draw_filled_rounded_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: Blast::StringJoiner
    headers: [ Blast/StringJoiner.hpp ]
  - symbol: AllegroFlare::BitmapBin*
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::Base*
    headers: [ AllegroFlare/Elements/DialogBoxes/Base.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::Basic*
    headers: [ AllegroFlare/Elements/DialogBoxes/Basic.hpp ]
  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxFrame
    headers: [ AllegroFlare/Elements/DialogBoxFrame.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::Choice*
    headers: [ AllegroFlare/Elements/DialogBoxes/Choice.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::YouGotAnItem*
    headers: [ AllegroFlare/Elements/DialogBoxes/YouGotAnItem.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxRenderers::ChoiceRenderer
    headers: [ AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxRenderers::YouGotAnItemRenderer
    headers: [ AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxRenderers::Basic
    headers: [ AllegroFlare/Elements/DialogBoxRenderers/Basic.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::TitleText*
    headers: [ AllegroFlare/Elements/DialogBoxes/TitleText.hpp ]



