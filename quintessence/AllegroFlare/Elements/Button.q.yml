properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: false

  - name: text
    type: std::string
    init_with: '"START"'
    getter: true
    setter: true

  - name: text_font_name
    type: std::string
    init_with: '"Inter-Medium.ttf"'
    getter: true
    setter: true

  - name: text_font_size
    type: int
    init_with: -28
    getter: true
    setter: true

  - name: core_color
    type: ALLEGRO_COLOR
    init_with: AllegroFlare::Color::PaleGreen
    getter: true
    setter: true

  - name: started_at
    type: float
    init_with: 0.0f
    getter: true
    setter: true

  - name: x
    type: float
    init_with: 0.0f
    getter: true
    setter: true

  - name: y
    type: float
    init_with: 0.0f
    getter: true
    setter: true

  - name: padding_x
    type: float
    init_with: 32.0f
    getter: true
    setter: true

  - name: padding_y
    type: float
    init_with: 12.0f
    getter: true
    setter: true

  - name: alignment_strategy
    type: AllegroFlare::Elements::Button::Alignments
    init_with: AllegroFlare::Elements::Button::Alignments::ALIGNED_AT_TEXT_ORIGIN
    getter: true
    setter: true


enums:


  - class: Alignments
    scope: public
    enumerators:
      - CENTERED
      - ALIGNED_AT_TEXT_ORIGIN


documentation:


  - todos:
      - Consider renaming "core_color" to something, like, less intense


functions:


  - name: set_font_bin
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
    body: |
      // TODO: consider a mechanism that flags width/height as dirty
      this->font_bin = font_bin;
      return;


  - name: infer_box_width
    type: float
    body: |
      ALLEGRO_FONT *button_font = obtain_button_font();
      float text_width = al_get_text_width(button_font, text.c_str());
      return text_width + padding_x * 2;


  - name: infer_box_height
    type: float
    body: |
      ALLEGRO_FONT *button_font = obtain_button_font();
      float text_height = al_get_font_line_height(button_font);
      return text_height + padding_y * 2;


  - name: align_box_at_center
    body: |
      alignment_strategy = AllegroFlare::Elements::Button::Alignments::CENTERED;
      return;


  - name: render
    type: void
    guards: 
      - al_is_system_installed()
      - al_is_font_addon_initialized()
      - al_is_ttf_addon_initialized()
      - al_is_primitives_addon_initialized()
      - font_bin
    body: |
      float age = infer_age();
      ALLEGRO_FONT *button_font = obtain_button_font();
      ALLEGRO_COLOR button_text_color = core_color;
      float button_frame_opacity = ((1.5 - fmod(age, 1.5)) / 1.5) * 0.75 + 0.25;
      ALLEGRO_COLOR button_frame_color = AllegroFlare::color::mix(
            core_color, AllegroFlare::Color::Transparent, 1.0 - button_frame_opacity);
      float thickness = 4.0f;
      float roundness = thickness * 1.5;

      AllegroFlare::Placement2D button_placement = build_button_placement_based_on_alignment_strategy();

      float reveal_duration = 0.6f;
      if (age < reveal_duration)
      {
         // modify params by the reveal animation offsets
         float normalized_time = std::max(0.0f, std::min(1.0f, age / reveal_duration));
         float inv_normalized_time = 1.0 - normalized_time;
         float reveal_y_offset = 30;
         ALLEGRO_COLOR reveal_color = AllegroFlare::Color::Transparent;

         button_text_color = AllegroFlare::color::mix(
               reveal_color, button_text_color, normalized_time);
         button_frame_color = AllegroFlare::color::mix(
               reveal_color, button_frame_color, normalized_time);
         button_placement.position.y += reveal_y_offset * AllegroFlare::interpolator::tripple_fast_out(inv_normalized_time);
      }

      button_placement.start_transform();
      
      // draw the cursor outline
      al_draw_rounded_rectangle(
         0,
         0,
         infer_box_width(),
         infer_box_height(),
         roundness,
         roundness,
         button_frame_color,
         thickness
      );

      // draw the text
      al_draw_text(button_font, button_text_color, padding_x, padding_y, ALLEGRO_ALIGN_LEFT, text.c_str());

      button_placement.restore_transform();

      return;
    body_dependency_symbols:
      - fmod
      - AllegroFlare::Color
      - AllegroFlare::Placement2D
      - al_draw_rounded_rectangle
      - al_is_ttf_addon_initialized
      - AllegroFlare::interpolator
      - std::min, std::max


  - name: build_button_placement_based_on_alignment_strategy
    type: AllegroFlare::Placement2D
    body: |
      AllegroFlare::Placement2D result;
      switch (alignment_strategy)
      {
         case AllegroFlare::Elements::Button::Alignments::ALIGNED_AT_TEXT_ORIGIN:
            result.position.x = x - padding_x;
            result.position.y = y - padding_y;
         break;

         case AllegroFlare::Elements::Button::Alignments::CENTERED:
            result.position.x = x;
            result.position.y = y;
            result.size.x = infer_box_width();
            result.size.y = infer_box_height();
            result.align.x = 0.5;
            result.align.y = 0.5;
         break;

         default:
            // TODO: Replace with AllegroFlare::Logger error
            throw std::runtime_error("Elements/Button::build_button_placement_based_on_alignment_strategy: error: "
                        "Unhandled Alignments type"
                     );
         break;
      }
      return result;
    body_dependency_symbols:
      - AllegroFlare::Placement2D


  - name: infer_age
    type: float
    body: |
      AllegroFlare::Clock clock;
      return clock.real_world_time_since(started_at);
    body_dependency_symbols:
      - AllegroFlare::Clock


  - name: obtain_button_font
    private: true
    type: ALLEGRO_FONT*
    body: |
      std::stringstream composite_font_str;
      composite_font_str << text_font_name << " " << text_font_size;
      return font_bin->auto_get(composite_font_str.str());


dependencies:


  - symbol: fmod
    headers: [ cmath ]
  - symbol: AllegroFlare::Color
    headers: [ AllegroFlare/Color.hpp ]
  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]
  - symbol: al_draw_rounded_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_is_ttf_addon_initialized
    headers: [ allegro5/allegro_ttf.h ]
  - symbol: std::min, std::max
    headers: [ algorithm ]
  - symbol: 'AllegroFlare::interpolator::*'
    headers: [ AllegroFlare/Interpolators.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: AllegroFlare::interpolator
    headers: [ AllegroFlare/Interpolators.hpp ]
  - symbol: std::min
    headers: [ algorithm ]
  - symbol: std::max
    headers: [ algorithm ]
  - symbol: 'AllegroFlare::Interpolators::'
    headers: [ AllegroFlare/Interpolators.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Clock
    headers: [ AllegroFlare/Clock.hpp ]
  - symbol: AllegroFlare::Elements::Button::Alignments
    headers: [ ]


