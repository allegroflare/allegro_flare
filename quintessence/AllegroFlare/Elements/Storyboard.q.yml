parent_classes:


  - class: AllegroFlare::Screens::Base
    scope: public
    init_with: ''


properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: pages
    type: std::vector<std::string>
    init_with: '{}'
    constructor_arg: true
    setter: true

  - name: font_name
    type: std::string
    init_with: '"Inter-Medium.ttf"'
    constructor_arg: true
    getter: true
    setter: true

  - name: font_size
    type: int
    init_with: -60
    constructor_arg: true
    getter: true
    setter: true

  - name: text_color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{1, 1, 1, 1}
    constructor_arg: true
    getter: true
    setter: true

  - name: top_padding
    type: float
    init_with: 400
    constructor_arg: true
    getter: true
    setter: true

  - name: left_padding
    type: float
    init_with: 200
    constructor_arg: true
    getter: true
    setter: true

  - name: right_padding
    type: float
    init_with: 200
    constructor_arg: true
    getter: true
    setter: true

  - name: line_height_multiplier
    type: float
    init_with: 1.75f
    constructor_arg: true
    getter: true
    setter: true

  - name: line_height_padding
    type: float
    init_with: 0.0f
    constructor_arg: true
    getter: true
    setter: true

  - name: current_page_num
    type: intptr_t
    init_with: 0
    constructor_arg: true
    getter: true

  - name: revealed_characters_count
    type: int
    init_with: 0
    getter: true

  - name: can_advance_to_next
    type: bool
    init_with: false
    getter: true

  - name: finished
    type: bool
    init_with: false
    getter: true


functions:


  - name: update
    body: |
      revealed_characters_count++;
      if (revealed_characters_count >= current_page_text().size())
      {
         can_advance_to_next = true;
      }
      return;


  - name: render
    type: void
    guards: [ al_is_system_installed(), al_is_font_addon_initialized() ]
    body: |
      ALLEGRO_FONT *text_font = obtain_font();

      //al_clear_to_color(AllegroFlare::Color::Black);

      std::string text = revealed_page_text();
      if (!text.empty())
      {
         float box_width = 1920 - (left_padding + right_padding);
         al_draw_multiline_text(
               text_font,
               text_color, //AllegroFlare::Color(0xd0f2c5).to_al(),
               left_padding, //x_padding,
               top_padding, //y_padding,
               box_width,
               al_get_font_line_height(text_font)*line_height_multiplier + line_height_padding,
               0,
               text.c_str() //pages[current_page_num].c_str()
            );
      }

      if (can_advance_to_next) render_next_button();

      return;
    body_dependency_symbols:
      - al_draw_multiline_text
      - AllegroFlare::Color


  - name: current_page_text
    type: std::string
    body: |
      if (current_page_num >= pages.size()) return "";
      return pages[current_page_num].c_str();


  - name: revealed_page_text
    type: std::string
    body: |
      return current_page_text().substr(0, revealed_characters_count);


  - name: reveal_all_characters
    body: |
      revealed_characters_count = current_page_text().size();


  - name: render_next_button
    type: void
    private: true
    body: |
      float x = 1920-400;
      float y = 1080-300;
      ALLEGRO_FONT *next_button_font = obtain_next_button_font();
      std::string text = "NEXT >";
      float text_width = al_get_text_width(next_button_font, text.c_str());
      float text_height = al_get_font_line_height(next_button_font);
      ALLEGRO_COLOR button_color = AllegroFlare::Color::PaleGreen;
      float thickness = 4.0f;
      float roundness = thickness * 1.5;
      float padding_x = 32.0f;
      float padding_y = 12.0f;

      AllegroFlare::Placement2D button_place;
      button_place.position.x = x;
      button_place.position.y = y;

      button_place.start_transform();
      
      // draw the cursor outline
      al_draw_rounded_rectangle(
         -padding_x,
         -padding_y,
         text_width+padding_x,
         text_height+padding_y,
         roundness,
         roundness,
         button_color,
         thickness
      );

      // draw the text
      al_draw_text(next_button_font, button_color, text_width/2, 0, ALLEGRO_ALIGN_CENTER, text.c_str());

      button_place.restore_transform();

      return;
    body_dependency_symbols:
      - AllegroFlare::Color
      - AllegroFlare::Placement2D
      - al_draw_rounded_rectangle


  - name: reset
    type: void
    body: |
      current_page_num = 0;
      revealed_characters_count = 0;
      finished = false;
      can_advance_to_next = false;
      return;


  - name: permit_advancing_page
    type: bool
    body: |
      if (finished) return false;
      can_advance_to_next = true;
      return true;


  - name: advance
    type: bool
    body: |
      if (finished) return false;

      if (!can_advance_to_next)
      {
         can_advance_to_next = true;
         reveal_all_characters();
         return true;
      }
      else
      {
         return advance_page();
      }

      return false;

      
  - name: advance_page
    type: bool
    body: |
      if (finished) return false;
      if (!can_advance_to_next) return false;

      current_page_num++;
      revealed_characters_count = 0;
      can_advance_to_next = false;

      if (current_page_num >= pages.size())
      {
         finished = true;
      }
      return !finished;


  - name: all_characters_are_revealed
    type: bool
    body: |
      return revealed_characters_count >= current_page_text().size();


  - name: infer_at_last_page
    type: bool
    body: |
      return (current_page_num == (pages.size()-1));


  - name: infer_at_or_past_last_page
    type: bool
    body: |
      return (current_page_num >= (pages.size()-1));


  - name: obtain_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      std::stringstream composite_font_str;
      composite_font_str << font_name << " " << font_size;
      return font_bin->auto_get(composite_font_str.str());


  - name: obtain_next_button_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      std::stringstream composite_font_str;
      composite_font_str << font_name << " " << font_size+20;
      return font_bin->auto_get(composite_font_str.str());


dependencies:


  - symbol: AllegroFlare::Color
    headers: [ AllegroFlare/Color.hpp ]
  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::EventEmitter*
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: ALLEGRO_EVENT*
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: al_draw_multiline_text
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_draw_rounded_rectangle
    headers: [ allegro5/allegro_primitives.h ]


