parent_classes:


  - class: AllegroFlare::Elements::Backgrounds::Base
    scope: public
    init_with: AllegroFlare::Elements::Backgrounds::Video::TYPE


documentation:


  - todos:
      - Currently there seems to be a bug that the video needs to be "started" before a frame can be obtained.  Even if
        al_is_video_playing(video) returns true, al_get_video_frame(video) will crash if the video has not been started.
        To solve this temporarily, a flag "video_is_playing" is unsed in this class, but should eventually be removed.


properties:


  - name: video_bin
    type: AllegroFlare::VideoBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: false

  - name: video_identifier
    type: std::string
    init_with: '"[unset-video_identifier]"'
    constructor_arg: true
    getter: true
    setter: false

  - name: surface_width
    type: int
    init_with: 1920
    getter: true
    setter: true

  - name: surface_height
    type: int
    init_with: 1080
    getter: true
    setter: true

  - name: video_is_playing
    type: bool
    init_with: false

  - name: initialized
    type: bool
    init_with: false

  - name: VIDEO_FIT_STRATEGY_STRETCH_TO_FIT
    type: char*
    init_with: '(char*)"stretch_to_fit"'
    static: true
    constexpr: true

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/Elements/Backgrounds/Video"'
    static: true
    constexpr: true


functions:


  - name: set_video_bin
    guards: [ (!initialized) ]
    parameters:
      - name: video_bin
        type: AllegroFlare::VideoBin*
        default_argument: nullptr
    body: |
      this->video_bin = video_bin;
      return;


  - name: set_video_identifier
    guards: [ (!initialized) ]
    parameters:
      - name: video_identifier
        type: std::string
        default_argument: '"[unset-video_identifier]"'
    body: |
      this->video_identifier = video_identifier;
      return;


  - name: initialize
    guards: [ (!initialized), video_bin ]
    body: |
      initialized = true;
      return;


  - name: activate
    override: true
    guards: [ initialized ]
    body: |
      ALLEGRO_VIDEO *video = obtain_video();
      if (video)
      {
         al_start_video(video, al_get_default_mixer());
         video_is_playing = true;
         std::cout << "video FPS: " << al_get_video_fps(video) << std::endl;
         std::cout << "video audio rate: " << al_get_video_audio_rate(video) << std::endl;
      }
      return;


  - name: deactivate
    override: true
    guards: [ initialized ]
    body: |
      ALLEGRO_VIDEO *video = obtain_video();
      if (video) al_set_video_playing(video, false);
      return;


  - name: render
    override: true
    guards: [ initialized ]
    body: |
      if (!video_is_playing) return;

      ALLEGRO_VIDEO *video = obtain_video();
      if (!video) return;

      bool video_is_playing = al_is_video_playing(video); // I think there is a bug here. See documentation section.
      if (!video_is_playing) return;
 
      ALLEGRO_BITMAP* frame = al_get_video_frame(video);
      if (!frame) return;

      std::string fit_style = VIDEO_FIT_STRATEGY_STRETCH_TO_FIT;
      if (fit_style == VIDEO_FIT_STRATEGY_STRETCH_TO_FIT)
      {
         float scale_x = surface_width / al_get_video_scaled_width(video);
         float scale_y = surface_height / al_get_video_scaled_height(video);
         float sw = al_get_bitmap_width(frame);
         float sh = al_get_bitmap_height(frame);
         float dw = scale_x * al_get_video_scaled_width(video);
         float dh = scale_y * al_get_video_scaled_height(video);
         al_draw_scaled_bitmap(frame, 0, 0, sw, sh, 0, 0, dw, dh, 0);
      }
      return;


  - name: obtain_video
    type: ALLEGRO_VIDEO*
    private: true
    guards: [ video_bin ]
    body: |
      return video_bin->auto_get(video_identifier);


dependencies:


  - symbol: ALLEGRO_VIDEO
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::VideoBin
    headers: [ AllegroFlare/VideoBin.hpp ]
  - symbol: AllegroFlare::Elements::Backgrounds::Base
    headers: [ AllegroFlare/Elements/Backgrounds/Base.hpp ]
  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]


