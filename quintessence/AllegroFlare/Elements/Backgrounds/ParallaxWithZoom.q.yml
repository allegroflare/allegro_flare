parent_classes:


  - class: AllegroFlare::Elements::Backgrounds::Base
    scope: public
    init_with: AllegroFlare::Elements::Backgrounds::ParallaxWithZoom::TYPE


documentation:


  - todos:
      - Consider if it would be a better design to pass in a bitmap_bin and reference the images by identifier.


properties:


  - name: layers
    type: std::vector<AllegroFlare::Elements::Backgrounds::ParallaxLayer>
    init_with: '{}'
    constructor_arg: true
    getter: true
    setter: true

  - name: camera
    type: AllegroFlare::Camera2D*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/Elements/Backgrounds/ParallaxWithZoom"'
    static: true
    constexpr: true


methods:


  - name: render
    virtual: true
    guards: [ al_is_system_installed(), camera ]
    body: |
      //camera->start_reverse_transform();

      //float camera_frame_top, camera_frame_right, camera_frame_bottom, camera_frame_left;
      //std::tie(camera_frame_top, camera_frame_right, camera_frame_bottom, camera_frame_left) =
            //camera.get_outermost_coordinates_trbl();

      //for (auto &layer : layers)
      //{
         //AllegroFlare::RepeatingBitmapLogic repeating_bitmap_logic(-3, -2, 3, 2);
         //repeating_bitmap_logic.fit_loop_width_to_bitmap_width();
         //repeating_bitmap_logic.fit_loop_height_to_bitmap_height();
      //}

      //AllegroFlare::Camera2D this_layer_camera = *camera;


      for (auto &layer : layers)
      {
         ALLEGRO_BITMAP *layer_bitmap = layer.get_bitmap();
         AllegroFlare::Camera2D this_layer_camera = *camera;
         this_layer_camera.position.x *= layer.get_offset_rate() + layer.get_anchor_x();
         this_layer_camera.position.y *= layer.get_offset_rate() + layer.get_anchor_y();

         this_layer_camera.start_reverse_transform();

         float camera_frame_top, camera_frame_right, camera_frame_bottom, camera_frame_left;
         std::tie(camera_frame_top, camera_frame_right, camera_frame_bottom, camera_frame_left) =
               this_layer_camera.get_outermost_coordinates_trbl();

         AllegroFlare::RepeatingBitmapLogic repeating_bitmap_logic(layer_bitmap, -1, -1, 1, 1);
         repeating_bitmap_logic.fit_loop_width_to_bitmap_width();
         repeating_bitmap_logic.fit_loop_height_to_bitmap_height();
         repeating_bitmap_logic.fit_rows_and_columns_to_frame(
               camera_frame_left,
               camera_frame_top,
               camera_frame_right,
               camera_frame_bottom
            );
         repeating_bitmap_logic.fit_placement_dimensions_to_bitmap_dimensions();
         //repeating_bitmap_logic.get_placement_ref().align = { 0.5, 0.5 };
         repeating_bitmap_logic.get_placement_ref().align = { 0.0, 0.0 }; // TODO: Figure out if/how this alignment
                                                                          // needs to be applied

         //this_layer_camera.start_transform();
         repeating_bitmap_logic.draw_repeating_rows_and_columns();

         // Origin frame
         //al_draw_rectangle(0, 0, repeating_bitmap_logic.placement.x, repeating_bitmap_logic.placement.y);
         draw_crosshair(0, 0, 100); // Origin crosshair

         this_layer_camera.restore_transform();
      }


      return;
    body_dependency_symbols:
      - AllegroFlare::draw_offset_textured_rectangle
      - AllegroFlare::RepeatingBitmapLogic


dependencies:


  - symbol: ALLEGRO_BITMAP*
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Elements::Backgrounds::Base
    headers: [ AllegroFlare/Elements/Backgrounds/Base.hpp ]
  - symbol: AllegroFlare::BitmapBin*
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]
  - symbol: AllegroFlare::draw_offset_textured_rectangle
    headers: [ AllegroFlare/Useful.hpp ]
  - symbol: std::vector<AllegroFlare::Elements::Backgrounds::ParallaxLayer>
    headers: [ vector, AllegroFlare/Elements/Backgrounds/ParallaxLayer.hpp ]
  - symbol: AllegroFlare::Elements::Backgrounds::ParallaxLayer
    headers: [ vector, AllegroFlare/Elements/Backgrounds/ParallaxLayer.hpp ]
  - symbol: AllegroFlare::RepeatingBitmapLogic
    headers: [ AllegroFlare/RepeatingBitmapLogic.hpp ]
  - symbol: AllegroFlare::Camera2D
    headers: [ AllegroFlare/Camera2D.hpp ]


