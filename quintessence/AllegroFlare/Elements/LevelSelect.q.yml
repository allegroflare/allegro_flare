properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    setter: true
    constructor_arg: true

  - name: levels_list
    type: std::vector<std::pair<std::string, std::string>>
    init_with: '{}'
    constructor_arg: true
    getter: true
    setter: true

  - name: locked_list
    type: std::set<std::string>
    init_with: '{}'
    constructor_arg: true
    getter: true
    setter: true

  - name: completed_list
    type: std::set<std::string>
    init_with: '{}'
    constructor_arg: true
    getter: true
    setter: true

  - name: on_menu_choice_callback_func
    type: std::function<void(AllegroFlare::Elements::LevelSelect*, void*)>
    init_with: ''
    getter: true
    setter: true

  - name: on_menu_choice_callback_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: on_draw_level_list_item_box_func
    type: std::function<void(AllegroFlare::Elements::LevelSelect*, void*, AllegroFlare::Elements::LevelSelectItemBoxRenderParams*)>
    init_with: AllegroFlare::Elements::LevelSelect::default_on_draw_level_list_item_box_func
    getter: true
    setter: true

  - name: on_draw_level_list_item_box_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: place
    type: AllegroFlare::Placement2D
    init_with: '{ 1920/2, 1080/2, DEFAULT_FRAME_WIDTH, DEFAULT_FRAME_HEIGHT }'
    getter: true
    getter_ref: true

  - name: cursor_x
    type: int
    init_with: 0
    getter: true

  - name: cursor_y
    type: int
    init_with: 0
    getter: true

  - name: title_text
    type: std::string
    init_with: '"Level Select"'
    getter: true
    setter: true

  - name: title_font_name
    type: std::string
    init_with: '"Oswald-Medium.ttf"'
    getter: true
    setter: true

  - name: title_font_size
    type: int
    init_with: -132
    getter: true
    setter: true

  - name: title_color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{1, 1, 1, 1}
    getter: true
    setter: true

  - name: title_align
    type: float
    init_with: 0.5f
    getter: true
    setter: true

  - name: title_position_x
    type: float
    init_with: 0.0f
    getter: true
    setter: true

  - name: title_position_y
    type: float
    init_with: 80.0f
    getter: true
    setter: true

  - name: title_in_container_alignment_x
    type: float
    init_with: 0.5f
    getter: true
    setter: true

  - name: title_in_container_alignment_y
    type: float
    init_with: 0.0f
    getter: true
    setter: true

  - name: title_text_position_is_relative_to_frame
    type: bool
    init_with: true
    getter: true
    setter: true

  - name: selection_box_width
    type: int
    init_with: 120
    getter: true
    setter: true

  - name: selection_box_height
    type: int
    init_with: 120
    getter: true
    setter: true

  - name: selection_box_spacing_x
    type: int
    init_with: 30
    getter: true
    setter: true

  - name: selection_box_spacing_y
    type: int
    init_with: 30
    getter: true
    setter: true

  - name: num_columns
    type: int
    init_with: 5
    getter: true
    setter: true

  - name: num_rows
    type: int
    init_with: 3
    getter: true
    setter: true

  - name: hide_title_when_locked
    type: bool
    init_with: true
    getter: true
    setter: true

  - name: show_completed_text_on_list_item_box
    type: bool
    init_with: true
    getter: true
    setter: true

  - name: drawing_backfill_and_frame
    type: bool
    init_with: true
    getter: true
    setter: true

  - name: drawing_title_text
    type: bool
    init_with: true
    getter: true
    setter: true

  - name: ignore_on_invalid_selection
    type: bool
    init_with: true
    getter: true
    setter: true

  - name: DEFAULT_FRAME_WIDTH
    type: int
    init_with: 1300
    static: true
    constexpr: true

  - name: DEFAULT_FRAME_HEIGHT
    type: int
    init_with: 800
    static: true
    constexpr: true


documentation:


  - todos:
     - Make dimension setters (set_selection_box_width, set_selection_box_spacing_y, etc) explicit and require
       diminensions > 0
     - Make row, column size setters (set_num_columns, set_num_rows, etc) explicit and require size > 0
     - Output a warning when the number of levels is greater than the number of selection boxes
     - Consider renaming "selection_box_" to something else
     - Add a "menu_option_can_be_selected"
     - Rename "ignore_on_invalid_selection" because it is used as early return if the item cannot be activated


methods:


  - name: add_to_locked_list
    parameters:
      - name: level_identifier
        type: std::string
        default_argument: '"[unset-level_identifier]"'
    body: |
      // TODO: Ensure item exists in list of levels
      locked_list.insert(level_identifier);
      return;


  - name: add_to_completed_list
    parameters:
      - name: level_identifier
        type: std::string
        default_argument: '"[unset-level_identifier]"'
    body: |
      // TODO: Ensure item exists in list of levels
      completed_list.insert(level_identifier);
      return;


  - name: is_locked
    type: bool
    parameters:
      - name: level_identifier
        type: std::string
        default_argument: '"[unset-level_identifier]"'
    body: |
      // TODO: Test
      return locked_list.find(level_identifier) != locked_list.end();


  - name: is_completed
    type: bool
    parameters:
      - name: level_identifier
        type: std::string
        default_argument: '"[unset-level_identifier]"'
    body: |
      // TODO: Test
      return completed_list.find(level_identifier) != completed_list.end();


  - name: unlock
    type: bool
    parameters:
      - name: level_identifier
        type: std::string
        default_argument: '"[unset-level_identifier]"'
    guards: [ is_locked(level_identifier) ]
    body: |
      // TODO: Test this
      return locked_list.erase(level_identifier);


  - name: unlock_all
    body: |
      // TODO: Test this
      return locked_list.clear();


  - name: mark_as_completed
    type: bool
    parameters:
      - name: level_identifier
        type: std::string
        default_argument: '"[unset-level_identifier]"'
    guards: [ is_locked(level_identifier) ]
    body: |
      // TODO: Test this
      return completed_list.erase(level_identifier);


  - name: opaquify
    static: true
    type: ALLEGRO_COLOR
    parameters:
      - name: color
        type: ALLEGRO_COLOR
        default_argument: '{0,0,0,0}'
      - name: opacity
        type: float
        default_argument: 1.0f
    body: |
      color.r *= opacity;
      color.g *= opacity;
      color.b *= opacity;
      color.a *= opacity;
      return color;


  - name: change_a
    type: ALLEGRO_COLOR
    parameters:
      - name: color
        type: ALLEGRO_COLOR
        default_argument: '{0,0,0,0}'
      - name: alpha
        type: float
        default_argument: 1.0f
    body: |
      color.a *= alpha;
      color.r *= color.a;
      color.g *= color.a;
      color.b *= color.a;
      return color;


  - name: disable_drawing_backfill_and_frame
    body: |
      drawing_backfill_and_frame = false;
      return;


  - name: disable_drawing_title_text
    body: |
      drawing_title_text = false;
      return;


  - name: enable_drawing_backfill_and_frame
    body: |
      drawing_backfill_and_frame = true;
      return;


  - name: enable_drawing_title_text
    body: |
      drawing_title_text = true;
      return;


  - name: render
    guards: [ font_bin ]
    body: |
      place.start_transform();

      if (drawing_backfill_and_frame) draw_backfill_and_frame();
      if (drawing_title_text && title_text_position_is_relative_to_frame) draw_level_select_title_text();
      draw_level_select_boxes_and_cursor();

      place.restore_transform();

      if (drawing_title_text && !title_text_position_is_relative_to_frame) draw_level_select_title_text();

      return;
    body_dependency_symbols:
     - X


  - name: draw_backfill_and_frame
    private: true
    body: |
      ALLEGRO_COLOR backfill_color = change_a(al_color_html("909090"), 0.3);
      ALLEGRO_COLOR border_color = change_a(al_color_html("ffffff"), 0.8);
      float roundness = 8.0f;
      float border_thickness = 8.0f;
      float border_padding = border_thickness * 1.75f;

      al_draw_filled_rounded_rectangle(0, 0, place.size.x, place.size.y, roundness, roundness, backfill_color);
      al_draw_rounded_rectangle(
         0 - border_padding,
         0 - border_padding,
         place.size.x + border_padding,
         place.size.y + border_padding,
         roundness,
         roundness,
         border_color,
         border_thickness
      );

      return;


  - name: draw_level_select_title_text
    private: true
    body: |
      ALLEGRO_FONT *title_font = obtain_title_font();
      //ALLEGRO_COLOR color = title_opaquify(ALLEGRO_COLOR{1.0, 1.0, 1.0, 1.0});
      float final_title_position_x = title_position_x;
      float final_title_position_y = title_position_y;

      if (title_text_position_is_relative_to_frame)
      {
         final_title_position_x += place.size.x * title_in_container_alignment_x;
         final_title_position_y += place.size.y * title_in_container_alignment_y;
      }
      else
      {
         final_title_position_x += 1920 * title_in_container_alignment_x;
         final_title_position_y += 1080 * title_in_container_alignment_y;
      }

      // TODO: Consider accounting for text alignment
      int text_width = al_get_text_width(title_font, title_text.c_str());
      final_title_position_x -= text_width * title_align;
      //int text_height = al_get_font_line_height(title_font);
      //final_title_position_x += text_width * text_align;

      al_draw_text(
         title_font,
         title_color,
         final_title_position_x,
         final_title_position_y,
         //place.size.x/2 + ,
         //80,
         ALLEGRO_ALIGN_LEFT, // NOTE: Alignment is managed by the title_align attribute
         title_text.c_str() //"Level Select"
      );
      return;


  - name: draw_level_select_boxes_and_cursor
    private: true
    body: |
      AllegroFlare::Placement2D level_select_boxes_place;
      level_select_boxes_place.position.x = place.size.x * 0.5;
      level_select_boxes_place.position.y = place.size.y * 0.5 + 70;

      // fit the placement to the level select boxes
      int num_column_gutters = std::max(0, (num_columns - 1));
      int num_row_gutters = std::max(0, (num_rows - 1));
      level_select_boxes_place.size.x = num_columns * selection_box_width
                                      + num_column_gutters * selection_box_spacing_x;
      level_select_boxes_place.size.y = num_rows * selection_box_height
                                      + num_row_gutters * selection_box_spacing_y;

      // Start the transform
      level_select_boxes_place.start_transform();

      // Draw the boxes one by one
      for (int column=0; column<num_columns; column++)
      {
         for (int row=0; row<num_rows; row++)
         {
            int list_item_num = row * num_columns + column;

            if (list_item_num >= levels_list.size())
            {
               // Do not render the item if it doesn't exist in the list
               // TODO: Investigate what happens when the list item is empty and how that is rendered?
            }
            else
            {
               if (!on_draw_level_list_item_box_func)
               {
                  AllegroFlare::Logger::throw_error(THIS_CLASS_AND_METHOD_NAME,
                     "There is no provided implementation for on_draw_level_list_item_box_func, which is expected to "
                        "be present."
                  );
               }

               std::string identifier = std::get<1>(levels_list[list_item_num]);

               AllegroFlare::Elements::LevelSelectItemBoxRenderParams render_params;
               render_params.list_item_num_0_indexed = list_item_num;
               render_params.menu_item_identifier = identifier;
               render_params.label = std::get<0>(levels_list[list_item_num]);
               render_params.row = row;
               render_params.column = column;
               render_params.x = column * (selection_box_width + selection_box_spacing_x);
               render_params.y = row * (selection_box_height + selection_box_spacing_y);
               render_params.width = selection_box_width; // This might be redundant, consider removing?
               render_params.height = selection_box_height; // This might be redundant, consider removing?
               render_params.locked = is_locked(identifier);
               render_params.completed = is_completed(identifier);

               on_draw_level_list_item_box_func(
                  this,
                  on_draw_level_list_item_box_func_user_data,
                  &render_params
               );
            }
         }
      }

      // Draw the selection cursor
      {
         // TODO: Migrate to using a Elements/SelectionCursorBox
         ALLEGRO_COLOR color_a = al_color_name("cyan");
         //ALLEGRO_COLOR color_a = al_color_name("bisque");
         ALLEGRO_COLOR color_b = AllegroFlare::color::transparent;
         float speed_multiplier = 0.9;
         float mix_factor = AllegroFlare::interpolator::slow_in(fmod(al_get_time() * speed_multiplier, 1.0));
         ALLEGRO_COLOR color = AllegroFlare::color::mix(color_a, color_b, 0.7 * mix_factor);
         float r = 6;
         float thickness = 8.0;
         float padding = 12.0f;

         float cursor_box_x = cursor_x * (selection_box_width + selection_box_spacing_x);
         float cursor_box_y = cursor_y * (selection_box_height + selection_box_spacing_y);

         al_draw_rounded_rectangle(
            cursor_box_x - padding,
            cursor_box_y - padding,
            cursor_box_x + selection_box_width + padding, //x + cursor_x*spacing + selection_box_width + padding,
            cursor_box_y + selection_box_height + padding, //y + cursor_y*spacing + selection_box_height + padding,
            r,
            r,
            color,
            thickness
         );
      }

      // restore the transform
      level_select_boxes_place.restore_transform();

      return;
    body_dependency_symbols:
      - AllegroFlare::Elements::LevelSelectItemBoxRenderParams


  - name: move_cursor_up
    guards: [ has_valid_size() ]
    body: |
      cursor_y--;
      while(cursor_y < 0) cursor_y += num_rows;
      return;


  - name: move_cursor_down
    guards: [ has_valid_size() ]
    body: |
      cursor_y++;
      cursor_y = cursor_y % num_rows;
      return;


  - name: move_cursor_left
    guards: [ has_valid_size() ]
    body: |
      cursor_x--;
      while(cursor_x < 0) cursor_x += num_columns;
      return;


  - name: move_cursor_right
    guards: [ has_valid_size() ]
    body: |
      cursor_x++;
      cursor_x = cursor_x % num_columns;
      return;


  - name: has_valid_size
    type: bool
    private: true
    body: |
      return !(num_columns == 0 || num_rows == 0);


  - name: list_is_empty
    type: bool
    body: |
      return levels_list.empty();


  - name: draw_selection_cursor
    private: true
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
    body: |
      // position
      x = 80;
      y = 80;
      float spacing = selection_box_width + 20;

       // color
      ALLEGRO_COLOR color_a = al_color_name("cyan");
      ALLEGRO_COLOR color_b = AllegroFlare::color::transparent;
      float speed_multiplier = 0.9;
      float mix_factor = AllegroFlare::interpolator::slow_in(fmod(al_get_time() * speed_multiplier, 1.0));
      ALLEGRO_COLOR color = AllegroFlare::color::mix(color_a, color_b, 0.7 * mix_factor);
      float r = 6;
      float thickness = 8.0;
      float padding = 12.0f;

      al_draw_rounded_rectangle(
         x + cursor_x*spacing - padding,
         y + cursor_y*spacing - padding,
         x + cursor_x*spacing + selection_box_width + padding,
         y + cursor_y*spacing + selection_box_height + padding,
         r,
         r,
         color,
         thickness
      );
      return;
    body_dependency_symbols:
      - fmod
      - AllegroFlare::Color
      - AllegroFlare::interpolator


  - name: default_on_draw_level_list_item_box_func
    static: true
    private: true
    parameters:
      - name: level_select_element
        type: AllegroFlare::Elements::LevelSelect*
        default_argument: nullptr
      - name: user_data
        type: void*
        default_argument: nullptr
      - name: render_params
        type: AllegroFlare::Elements::LevelSelectItemBoxRenderParams*
        default_argument: nullptr
    guards: [ level_select_element, render_params ]
    body: |
      float x = render_params->x;
      float y = render_params->y;
      float w = render_params->width;
      float h = render_params->height;
      std::string label = render_params->label;
      bool locked = render_params->locked;
      bool completed = render_params->completed;


      ALLEGRO_COLOR backfill_color = AllegroFlare::Elements::LevelSelect::opaquify(ALLEGRO_COLOR{0.0, 0.0, 0.0, 0.4});
      ALLEGRO_COLOR text_color = 
         AllegroFlare::Elements::LevelSelect::opaquify(ALLEGRO_COLOR{1.0, 1.0, 1.0, 1.0}, locked ? 0.2f : 1.0f);
      float roundness = 6.0f;
      ALLEGRO_FONT *font = level_select_element->obtain_level_label_font();
      float line_height = al_get_font_line_height(font);

      al_draw_filled_rounded_rectangle(x+0, y+0, x+w, y+h, roundness, roundness, backfill_color);
      if (locked)
      {
         // Draw the text "Locked"
         al_draw_text(font, text_color, x+w/2, y+h/2-line_height/2, ALLEGRO_ALIGN_CENTER, "Locked");

         // Draw lock icon
         ALLEGRO_FONT *icon_font = level_select_element->obtain_lock_icon_font();
         ALLEGRO_COLOR icon_color = text_color; //opaquify(ALLEGRO_COLOR{1.0, 1.0, 1.0, 1.0}, 0.6f);
         float icon_font_line_height = al_get_font_line_height(icon_font);
         uint32_t icon = 0xf023;
         AllegroFlare::Elements::LevelSelect::draw_unicode_character(
            icon_font,
            icon_color,
            icon,
            ALLEGRO_ALIGN_CENTER,
            x+w-22, y+h-36  // Bottom right (use font-size -23)
            //x+w/2, y+h/2-icon_font_line_height/2 // centered (use font-size -52 or so)
         );
      }
      else
      {
         al_draw_text(font, text_color, x+w/2, y+h/2-line_height/2, ALLEGRO_ALIGN_CENTER, label.c_str());

         if (completed)
         {
            // Draw lock icon
            ALLEGRO_FONT *icon_font = level_select_element->obtain_small_lock_icon_font();
            ALLEGRO_FONT *small_label_font = level_select_element->obtain_small_label_font();
            ALLEGRO_COLOR icon_color =
               AllegroFlare::Elements::LevelSelect::opaquify(ALLEGRO_COLOR{0.5, 1.0, 0.83, 1.0}, 1.0f);
            float icon_font_line_height = al_get_font_line_height(icon_font);
            uint32_t icon = 0xf058;
            AllegroFlare::Elements::LevelSelect::draw_unicode_character(
               icon_font,
               icon_color,
               icon,
               ALLEGRO_ALIGN_CENTER,
               x+w-22, y+h-36+6  // Bottom right (use font-size -23)
               //x+w/2, y+h/2-icon_font_line_height/2 // centered (use font-size -52 or so)
            );

            if (level_select_element->show_completed_text_on_list_item_box)
            {
               al_draw_text(small_label_font, icon_color, x+w-22-18, y+h-36, ALLEGRO_ALIGN_RIGHT, "completed");
            }
         }
      }

      return;
    body_dependency_symbols:
      - al_draw_filled_rounded_rectangle


  - name: activate_selected_menu_option
    guards: [ event_emitter ]
    body: |
      if (ignore_on_invalid_selection)
      {
         if (list_is_empty()) return;
         if (!cursor_selection_is_valid()) return;
         std::string current_menu_option_value = infer_current_menu_option_value();
         if (is_locked(current_menu_option_value)) return;
      }

      if (list_is_empty())
      {
         AllegroFlare::Logger::throw_error(THIS_CLASS_AND_METHOD_NAME,
            "Can not select a level, the list of levels is empty."
         );
         return;
      }

      // TODO: Test this condition
      if (!cursor_selection_is_valid() && ignore_on_invalid_selection)
      {
         AllegroFlare::Logger::warn_from(THIS_CLASS_AND_METHOD_NAME,
            "Can not select the currently highlighted option, the cursor is not over a valid selection."
         );
         return;
      }

      std::string current_menu_option_value = infer_current_menu_option_value();

      if (current_menu_option_value.empty())
      {
         AllegroFlare::Logger::warn_from(THIS_CLASS_AND_METHOD_NAME,
            "Can not select the currently highlighted option, it contains an empty value."
         );
         return;
      }
      else if (is_locked(current_menu_option_value))
      {
         AllegroFlare::Logger::warn_from(THIS_CLASS_AND_METHOD_NAME,
            "Can not select the currently highlighted option. It is locked."
         );
         return;
      }
      else
      {
         std::string *string_to_pass = new std::string(current_menu_option_value);
         // TODO: Consider removing this event emission
         event_emitter->emit_event(ALLEGRO_FLARE_EVENT_SELECT_LEVEL, (intptr_t)string_to_pass);

         // TODO: Test this callback
         if (on_menu_choice_callback_func) on_menu_choice_callback_func(this, on_menu_choice_callback_func_user_data);
      }

      return;
    body_dependency_symbols:
      - ALLEGRO_FLARE_EVENT_SELECT_LEVEL
      - AllegroFlare::Logger


  - name: infer_current_menu_option_value
    type: std::string
    body: |
      // TODO: Add test for this function
      if (levels_list.empty()) return "";
      int cursor_position = infer_cursor_position();

      if (!cursor_selection_is_valid())
      {
         throw std::runtime_error("[AllegroFlare/Elements/LevelSelect]: error: the cursor_position is not in "
                                  "a valid position to get the current menu choice's value.");
      }
      std::string current_menu_option_value = std::get<1>(levels_list[cursor_position]);
      return current_menu_option_value;


  - name: infer_cursor_position
    type: int
    body: |
      // TODO: Test this
      return cursor_y * num_columns + cursor_x;


  - name: cursor_selection_is_valid
    type: bool
    body: |
      // TODO: Test this
      int cursor_position = infer_cursor_position();
      return (cursor_position >= 0 && cursor_position < levels_list.size());


  - name: draw_unicode_character
    static: true
    parameters:
      - name: font
        type: ALLEGRO_FONT*
        default_argument: nullptr
      - name: color
        type: ALLEGRO_COLOR
        default_argument: 'ALLEGRO_COLOR{1, 1, 1, 1}'
      - name: icon
        type: int32_t
        default_argument: 61444
      - name: flags
        type: int
        default_argument: 0
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
    body: |
      static ALLEGRO_USTR *ustr = NULL;
      if (!ustr) ustr = al_ustr_new("");
      al_ustr_set_chr(ustr, 0, icon);
      al_draw_ustr(font, color, x, y, flags, ustr);
      return;


  - name: obtain_title_font
    type: ALLEGRO_FONT*
    private: true
    guards: [ font_bin ]
    body: |
      std::stringstream composite_font_str;
      composite_font_str << title_font_name << " " << title_font_size;
      return font_bin->auto_get(composite_font_str.str());


  - name: obtain_level_label_font
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Inter-Regular.ttf -32");


  - name: obtain_lock_icon_font
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      std::stringstream font_identifier_and_size;
      font_identifier_and_size << "fa-solid-900.ttf " << -23; // -64
      return font_bin->auto_get(font_identifier_and_size.str());


  - name: obtain_small_lock_icon_font
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      std::stringstream font_identifier_and_size;
      font_identifier_and_size << "fa-solid-900.ttf " << -18; // -64
      return font_bin->auto_get(font_identifier_and_size.str());


  - name: obtain_small_label_font
    type: ALLEGRO_FONT*
    body: |
      return font_bin->auto_get("Inter-Regular.ttf -28");


dependencies:


  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: X
    headers:
      - allegro5/allegro_primitives.h
      - allegro5/allegro_color.h
  - symbol: AllegroFlare::Color
    headers: [ AllegroFlare/Color.hpp ]
  - symbol: AllegroFlare::interpolator
    headers: [ AllegroFlare/Interpolators.hpp ]
  - symbol: fmod
    headers: [ cmath ]
  - symbol: ALLEGRO_FLARE_EVENT_SELECT_LEVEL
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: AllegroFlare::Elements::LevelSelect
    headers: [ AllegroFlare/Elements/LevelSelect.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::Elements::LevelSelectItemBoxRenderParams
    headers: [ AllegroFlare/Elements/LevelSelectItemBoxRenderParams.hpp ]
  - symbol: al_draw_filled_rounded_rectangle
    headers: [ allegro5/allegro_primitives.h ]


