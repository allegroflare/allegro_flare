properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: input_devices
    type: std::vector<std::tuple<AllegroFlare::PhysicalInputDevices::Base*, uint32_t, std::string, std::string>>
    init_with: '{}'
    constructor_arg: true
    getter: true
    setter: true

  - name: input_devices_box_width
    type: float
    init_with: 1140.0f
    constructor_arg: true
    getter: true
    setter: true

  - name: input_devices_box_height
    type: float
    init_with: 148.0f
    constructor_arg: true
    getter: true
    setter: true

  - name: surface_width
    type: int
    init_with: 1920
    getter: true
    setter: true

  - name: surface_height
    type: int
    init_with: 1080
    getter: true
    setter: true

  - name: scrollbar_position
    type: float
    init_with: 0.0f
    getter: true
    getter_ref: false
    setter: false

  - name: box_gutter_y
    type: float
    init_with: 10.0f
    getter: true
    setter: true



enums:


  - name: connection_status_t
    type: uint32_t
    enumerators:
      - CONNECTION_STATUS_UNDEFINED
      - CONNECTION_STATUS_CONNECTED
      - CONNECTION_STATUS_DISCONNECTED


functions:


  - name: render
    type: void
    guards: [ al_is_system_installed(), al_is_font_addon_initialized() ]
    body: |
      draw_input_devices_list_items_and_scrollbar();
      draw_input_devices_list_title_text_and_completed_title_text();
      return;
    body_dependency_symbols:
      - AllegroFlare::Placement2D


  - name: move_scrollbar_position
    parameters:
      - name: distance_y
        type: float
        default_argument: 0.0f
    body: |
      scrollbar_position += distance_y;
      limit_scrollbar_position();
      return;


  - name: set_scrollbar_position
    parameters:
      - name: scrollbar_position
        type: float
        default_argument: 0.0f
    body: |
      this->scrollbar_position = scrollbar_position;
      limit_scrollbar_position();
      return;


  - name: set_scrollbar_position_to_max
    body: |
      this->scrollbar_position = infer_container_scroll_range();
      return;


  - name: infer_scrollbar_max_position
    type: float
    body: |
      return infer_container_scroll_range();


  - name: scrollbar_is_autohidden_because_list_contents_is_smaller_than_the_container
    type: bool
    body: |
      return infer_container_scroll_range() <= 0;


  - name: build_placeholder_input_devices
    type: std::vector<std::tuple<AllegroFlare::PhysicalInputDevices::Base*, uint32_t, std::string, std::string>>
    static: true
    body: |
      // HAVE:
      //AllegroFlare::PhysicalInputDevices::Base *physical_input_device = std::get<0>(input_devices[i]);
      //std::string status = std::get<1>(input_devices[i]);
      //std::string title = std::get<2>(input_devices[i]);

      // WANT:
      // device_name
      // connected_status
      // connected_since?
      // device_id

      // TODO: Don't use created pointers for these devices here. Find a better location to produce the
      // objects in memory, possibly just a raw AllegroFlare/InputDevicesList;

      AllegroFlare::PhysicalInputDevices::Base* keyboard = new AllegroFlare::PhysicalInputDevices::Keyboard();

      return {
         { new AllegroFlare::PhysicalInputDevices::Keyboard(),
            CONNECTION_STATUS_CONNECTED,
            "Keyboard",
            ""
         },
         //{ new AllegroFlare::PhysicalInputDevices::Keyboard(),
               //CONNECTION_STATUS_CONNECTED, "Keyboard", "" },
         { new AllegroFlare::PhysicalInputDevices::Joysticks::Base(),
            CONNECTION_STATUS_CONNECTED,
            "Joystick 1",
            "159295b"
         },
         { new AllegroFlare::PhysicalInputDevices::Joysticks::Base(),
            CONNECTION_STATUS_DISCONNECTED,
            "Joystick 2",
            "af97a9c"
         },

         //{ nullptr, "locked",   "Save the Cat", "Define the hero and make the audience like them." },
         //{ nullptr, "unlocked", "Break the Fourth Wall", "Make the developer realize they're looking at test data." },
         //{ nullptr, "hidden",   "Top Secrets", "Find the box of secrets in the 2nd act." },
         //{ nullptr, "locked",   "I'm Lovin' It", "Complete the AchievementsList feature." },
         //{ nullptr, "unlocked", "Everyone is Beautiful", "Make multiline text fit into the box with the correct width." },
         //{ nullptr, "hidden",   "Save the Best for Last", "Find out the most important part in the very end." },
      };
    body_dependency_symbols:
      - AllegroFlare::PhysicalInputDevices::Keyboard
      - AllegroFlare::PhysicalInputDevices::Joysticks::Base


  - name: count_num_input_devices_connected
    type: int
    private: true
    body: |
      int count = 0;
      for (int i=0; i<input_devices.size(); i++)
      {
         bool is_connected = (std::get<1>(input_devices[i]) == CONNECTION_STATUS_CONNECTED);
         if (is_connected) count++;
      }
      return count;


  - name: draw_header_title_backfill
    private: true
    body: |
      // draw inputs
      float backfill_opacity = 0.35;
      float bar_height = 160;
      ALLEGRO_COLOR backfill_color = ALLEGRO_COLOR{0, 0, 0, backfill_opacity};
      al_draw_filled_rectangle(0, 0, surface_width, bar_height, backfill_color);
      return;
     

  - name: count_num_input_devices
    type: int
    private: true
    body: |
      return input_devices.size();


  - name: build_input_devices_count_string
    type: std::string
    private: true
    body: |
      std::stringstream result;
      result << count_num_input_devices_connected() << " connected (" << count_num_input_devices()
             << " known)";
      return result.str();


  - name: draw_input_devices_list_title_text_and_completed_title_text
    private: true
    body: |
      ALLEGRO_FONT *font = obtain_title_font();
      ALLEGRO_COLOR color = ALLEGRO_COLOR{1.0, 1.0, 1.0, 1.0};
      float surface_padding_x = 300;

      // draw the backfill
      draw_header_title_backfill();

      // draw the title text
      al_draw_text(
         font,
         color,
         surface_padding_x,
         100,
         ALLEGRO_ALIGN_LEFT,
         "I N P U T   D E V I C E S"
      );

      // draw the number achieved
      al_draw_text(
         font,
         color,
         1920-surface_padding_x,
         100,
         ALLEGRO_ALIGN_RIGHT,
         build_input_devices_count_string().c_str()
      );
      return;


  - name: infer_container_height
    type: float
    private: true
    body: |
      return 800;
      //return (input_devices_box_height + box_gutter_y) * 5.5;


  - name: infer_container_contents_height
    type: float
    private: true
    body: |
      float y_spacing = input_devices_box_height + box_gutter_y;
      return input_devices.size() * y_spacing - box_gutter_y; // <- this should be revised
                                                             // to take into account
                                                             // lists of size 0; E.g.
                                                             // Box gutter y should not
                                                             // be subtracted in that
                                                             // case


  - name: infer_container_scroll_range
    type: float
    private: true
    body: |
      return infer_container_contents_height() - infer_container_height();


  - name: limit_scrollbar_position
    private: true
    body: |
      float y_spacing = input_devices_box_height + box_gutter_y;
      float container_height = infer_container_height();
      float container_contents_height = infer_container_contents_height();
      float container_scroll_range = infer_container_scroll_range();
      scrollbar_position = std::max(0.0f, std::min(container_scroll_range, scrollbar_position));
      return;


  - name: draw_input_devices_list_items_and_scrollbar
    private: true
    body: |
      float input_devices_list_x = surface_width/2;
      float input_devices_list_y = surface_height/2 + 40;
      float input_devices_list_width = input_devices_box_width;
      float scrollbar_x_padding = 70;
      float scrollbar_y_padding = 26;
      ALLEGRO_COLOR input_devices_list_frame_color = ALLEGRO_COLOR{0.2, 0.205, 0.21, 1.0};
      ALLEGRO_COLOR scrollbar_bar_color = ALLEGRO_COLOR{0.2, 0.205, 0.21, 1.0};
      ALLEGRO_COLOR scrollbar_handle_color = ALLEGRO_COLOR{0.5, 0.505, 0.51, 1.0};
      float input_devices_box_list_x = 0;
      float input_devices_box_list_y = 0;
      float y_spacing = input_devices_box_height + box_gutter_y;
      float frame_thickness = 6.0;
      float frame_outset = box_gutter_y + 2;
      float container_height = infer_container_height();
      float container_contents_height = infer_container_contents_height();
      float container_scroll_range = infer_container_scroll_range();
      float normalized_scrollbar_position = scrollbar_position / container_scroll_range;

      AllegroFlare::Placement2D place(
         input_devices_list_x,
         input_devices_list_y,
         input_devices_list_width,
         container_height
      );

      place.start_transform();

      // draw the items in the list
      for (int i=0; i<input_devices.size(); i++)
      {
         AllegroFlare::PhysicalInputDevices::Base *physical_input_device = std::get<0>(input_devices[i]);
         uint32_t connected_status = std::get<1>(input_devices[i]);
         std::string title = std::get<2>(input_devices[i]);
         std::string device_id = std::get<3>(input_devices[i]);

         draw_input_device_box(
            input_devices_box_list_x,
            input_devices_box_list_y + i * y_spacing - scrollbar_position,
            physical_input_device,
            connected_status,
            title,
            device_id
         );
      }

      //// draw the frame
      //al_draw_rounded_rectangle(
      //   0 - frame_outset,
      //   0 - frame_outset,
      //   input_devices_list_width + frame_outset,
      //   input_devices_list_container_height + frame_outset,
      //   5.0,
      //   5.0,
      //   input_devices_list_frame_color,
      //   frame_thickness
      //);

      // draw the scrollbar
      if (!scrollbar_is_autohidden_because_list_contents_is_smaller_than_the_container())
      {
         AllegroFlare::Elements::Scrollbar scrollbar(
            input_devices_list_width + scrollbar_x_padding,
            scrollbar_y_padding,
            container_height - scrollbar_y_padding * 2,
            normalized_scrollbar_position,
            scrollbar_bar_color,
            scrollbar_handle_color
         );
         scrollbar.render();
      }

      place.restore_transform();
      return;
    body_dependency_symbols:
      - AllegroFlare::Elements::Scrollbar
      - std::min, std::max


  - name: draw_input_device_box
    type: void
    private: true
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: physical_input_device
        type: AllegroFlare::PhysicalInputDevices::Base*
        default_argument: nullptr
      - name: connection_status
        type: uint32_t
        default_argument: CONNECTION_STATUS_UNDEFINED
      - name: title
        type: std::string
        default_argument: '"[unset-title]"'
      - name: device_id
        type: std::string
        default_argument: '"[unset-device_id]"'
    body: |
      ALLEGRO_FONT *item_title_font = obtain_item_title_font();
      ALLEGRO_FONT *description_font = obtain_item_description_font();
      ALLEGRO_FONT *icon_font = obtain_icon_font();
      //float input_devices_box_width = 800.0f;
      //float input_devices_box_height = 150.0f;
      float box_padding_x = 20;
      float box_padding_y = 20;
      float title_padding_y = 10;
      ALLEGRO_COLOR title_text_color_normal = ALLEGRO_COLOR{1, 1, 1, 1};
      ALLEGRO_COLOR description_text_color = ALLEGRO_COLOR{0.7, 0.705, 0.71, 1.0};
      ALLEGRO_COLOR box_color = ALLEGRO_COLOR{0.1, 0.105, 0.11, 1.0};
      ALLEGRO_COLOR icon_container_box_color = ALLEGRO_COLOR{0.2, 0.205, 0.21, 1.0};
      ALLEGRO_COLOR icon_locked_color = ALLEGRO_COLOR{0.4, 0.405, 0.41, 1};
      ALLEGRO_COLOR icon_hidden_color = icon_container_box_color;
      ALLEGRO_COLOR icon_achieved_color = ALLEGRO_COLOR{1, 1, 1, 1};
      ALLEGRO_COLOR title_text_color_hidden = icon_locked_color;
      float item_title_font_line_height = al_get_font_line_height(item_title_font);
      float description_font_line_height = al_get_font_line_height(description_font);
      float icon_font_line_height = al_get_font_line_height(icon_font);
      float icon_container_box_size = input_devices_box_height - box_padding_x*2;
      float text_y_offset = 2;
      float icon_container_box_text_x_padding = 30;
      float text_x_offset = icon_container_box_size + icon_container_box_text_x_padding;

      ALLEGRO_COLOR title_text_color = (connection_status == CONNECTION_STATUS_DISCONNECTED) ? title_text_color_hidden : title_text_color_normal;
 
      float icon_box_center_x = x + box_padding_x + icon_container_box_size / 2;
      float icon_box_center_y = y + box_padding_y + icon_container_box_size / 2;
      int32_t icon_character = infer_icon_character_for_physical_input_device(physical_input_device);
      ALLEGRO_COLOR icon_color = infer_icon_color_by_connection_status(
         connection_status,
         icon_locked_color,
         icon_hidden_color,
         icon_achieved_color
      );

      // draw the filled rectangle
      if (connection_status == CONNECTION_STATUS_DISCONNECTED)
      {
         float hidden_box_stroke_thickness = 4.0f;
         float h_thickness = hidden_box_stroke_thickness * 0.5;
         al_draw_rectangle(
            x + h_thickness,
            y + h_thickness,
            x + input_devices_box_width - h_thickness,
            y + input_devices_box_height - h_thickness,
            box_color,
            hidden_box_stroke_thickness
         );
      }
      else
      {
         al_draw_filled_rectangle(x, y, x + input_devices_box_width, y + input_devices_box_height, box_color);
      }

      // draw the icon container box rectangle
      if (connection_status == CONNECTION_STATUS_DISCONNECTED)
      {
         float hidden_icon_box_stroke_thickness = 4.0f;
         float h_thickness = hidden_icon_box_stroke_thickness * 0.5;
         al_draw_rectangle(
            x + box_padding_x + h_thickness,
            y + box_padding_y + h_thickness,
            x + box_padding_x + icon_container_box_size - h_thickness,
            y + box_padding_y + icon_container_box_size - h_thickness,
            icon_container_box_color,
            hidden_icon_box_stroke_thickness
         );
      }
      else
      {
         al_draw_filled_rectangle(
            x + box_padding_x,
            y + box_padding_y,
            x + box_padding_x + icon_container_box_size,
            y + box_padding_y + icon_container_box_size,
            icon_container_box_color
         );
      }

      // draw the icon
      draw_unicode_character(
         icon_font,
         icon_color,
         icon_box_center_x,
         icon_box_center_y - icon_font_line_height / 2,
         icon_character,
         ALLEGRO_ALIGN_CENTER
      );

      // draw the title text
      al_draw_text(
         item_title_font,
         title_text_color,
         x + box_padding_x + text_x_offset,
         y + box_padding_y + text_y_offset,
         ALLEGRO_ALIGN_LEFT,
         filter_item_title_through_connection_status(title, connection_status).c_str()
      );

      // draw the description text
      al_draw_multiline_text(
         description_font,
         description_text_color,
         x + box_padding_x + text_x_offset,
         y + box_padding_y + item_title_font_line_height + title_padding_y + text_y_offset,
         input_devices_box_width - (box_padding_x + icon_container_box_size + icon_container_box_text_x_padding*2),
         description_font_line_height,
         ALLEGRO_ALIGN_LEFT,
         build_item_description(device_id, connection_status).c_str()
      );

      return;
    body_dependency_symbols:
      - al_draw_filled_rectangle
      - al_draw_text


  - name: infer_icon_character_for_physical_input_device
    type: int32_t
    private: true
    parameters:
      - name: physical_input_device
        type: AllegroFlare::PhysicalInputDevices::Base*
        default_argument: nullptr
    body: |
      if (!physical_input_device) return 0xf127; // a "broken link" icon (TODO: consider another icon)

      if (physical_input_device->is_keyboard()) return 0xf11c; // a "keyboard" icon
      if (physical_input_device->is_joystick()) return 0xf11b; // a "gamepad" controller icon

      return 0xf2fd; // a question with a box around it


  - name: infer_icon_color_by_connection_status
    type: ALLEGRO_COLOR
    private: true
    parameters:
      - name: connection_status
        type: uint32_t
        default_argument: CONNECTION_STATUS_UNDEFINED
      - name: icon_locked_color
        type: ALLEGRO_COLOR
        default_argument: ALLEGRO_COLOR{1, 1, 1, 1}
      - name: icon_hidden_color
        type: ALLEGRO_COLOR
        default_argument: ALLEGRO_COLOR{1, 1, 1, 1}
      - name: icon_achieved_color
        type: ALLEGRO_COLOR
        default_argument: ALLEGRO_COLOR{1, 1, 1, 1}
    body: |
      // TODO: finish these status changes
      if (connection_status == CONNECTION_STATUS_CONNECTED) return icon_achieved_color;
      if (connection_status == CONNECTION_STATUS_DISCONNECTED) return icon_locked_color;
      //else if (status == "locked") return icon_locked_color;
      //else if (status == "hidden") return icon_hidden_color;
      return ALLEGRO_COLOR{1, 0, 0, 1};


  - name: filter_item_title_through_connection_status
    type: std::string
    private: true
    parameters:
      - name: title
        type: std::string
        default_argument: '"[unset-title]"'
      - name: connection_status
        type: uint32_t
        default_argument: CONNECTION_STATUS_UNDEFINED
    body: |
      if (connection_status != CONNECTION_STATUS_CONNECTED) return title + " (disconnected)";
      return title;


  - name: build_item_description
    type: std::string
    private: true
    parameters:
      - name: device_id
        type: std::string
        default_argument: '""'
      - name: connection_status
        type: uint32_t
        default_argument: CONNECTION_STATUS_UNDEFINED
    body: |
      if (device_id.empty()) return "";
      return "Device ID: " + device_id;


  - name: obtain_title_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Inter-Bold.ttf -40");


  - name: obtain_item_title_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Inter-Bold.ttf -45");


  - name: obtain_item_description_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Inter-Medium.ttf -26");


  - name: obtain_icon_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Font_Awesome_6_Free-Solid-900.otf -50");


  - name: draw_unicode_character
    private: true
    parameters:
      - name: font
        type: ALLEGRO_FONT*
        default_argument: nullptr
      - name: color
        type: ALLEGRO_COLOR
        default_argument: 'ALLEGRO_COLOR{1, 1, 1, 1}'
      - name: x
        type: int
        default_argument: 0
      - name: y
        type: int
        default_argument: 0
      - name: icon
        type: uint32_t
        default_argument: 61444
      - name: flags
        type: int
        default_argument: 0
    body: |
      static ALLEGRO_USTR *ustr = NULL;
      if (!ustr) ustr = al_ustr_new("");
      al_ustr_set_chr(ustr, 0, icon);
      al_draw_ustr(font, color, x, y, flags, ustr);
      return;


dependencies:


  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: al_draw_filled_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_draw_text
    headers: [ allegro5/allegro_font.h ]
  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]
  - symbol: AllegroFlare::Elements::Scrollbar
    headers: [ AllegroFlare/Elements/Scrollbar.hpp ]
  - symbol: std::min, std::max
    headers: [ algorithm ]

  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: std::min
    headers: [ algorithm ]
  - symbol: std::max
    headers: [ algorithm ]
  - symbol: AllegroFlare::PhysicalInputDevices::Base
    headers: [ AllegroFlare/PhysicalInputDevices/Base.hpp ]
  - symbol: AllegroFlare::PhysicalInputDevices::Keyboard
    headers: [ AllegroFlare/PhysicalInputDevices/Keyboard.hpp ]
  - symbol: AllegroFlare::PhysicalInputDevices::Joysticks::Base
    headers: [ AllegroFlare/PhysicalInputDevices/Joysticks/Base.hpp ]
  - symbol: connection_status_t
    headers: [ ]


