properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: joystick_configuration_mapping
    type: std::vector<std::tuple<std::string, uint32_t>>
    init_with: '{}'
    constructor_arg: true
    getter: true
    setter: false

  - name: list_item_box_width
    type: float
    init_with: 740.0f
    constructor_arg: true
    getter: true
    setter: true

  - name: list_item_box_height
    type: float
    init_with: 80.0f
    constructor_arg: true
    getter: true
    setter: true

  - name: surface_width
    type: int
    init_with: 1920
    getter: true
    setter: true

  - name: surface_height
    type: int
    init_with: 1080
    getter: true
    setter: true

  - name: cursor_pos
    type: int
    init_with: 0
    getter: true

  - name: selection_cursor_box
    type: AllegroFlare::Elements::SelectionCursorBox
    init_with: '{}'

  - name: scrollbar_position
    type: float
    init_with: 0.0f
    getter: true
    getter_ref: false
    setter: false

  - name: box_gutter_y
    type: float
    init_with: 10.0f
    getter: true
    setter: true

  - name: state
    type: uint32_t
    init_with: STATE_UNDEF

  - name: state_is_busy
    type: bool
    init_with: false

  - name: state_changed_at
    type: float
    init_with: 0.0f

  - name: initialized
    type: bool
    init_with: false

  - name: STATE_UNDEF
    type: uint32_t
    init_with: 0
    const: true
    static: true
    constexpr: true

  - name: STATE_MOVING_CURSOR
    type: uint32_t
    init_with: 1
    const: true
    static: true
    constexpr: true

  - name: STATE_AWAITING_USER_INPUT_ON_OPTION
    type: uint32_t
    init_with: 2
    const: true
    static: true
    constexpr: true


documentation:


  - todos:
      - Consider adding a "start configuration" step-by-step process
      - Add a "reset to default" option
      - Add cursor movement up and down to select current option to modify
      - Modify a current selected button


functions:


  - name: initialize
    guards: [ (!initialized), al_is_system_installed(), al_is_font_addon_initialized() ]
    body: |
      selection_cursor_box.set_position(0, 0);
      selection_cursor_box.set_size(list_item_box_width, list_item_box_height);
      selection_cursor_box.set_padding(6.0f, 6.0f);
      initialized = true;
      return;


  - name: update
    guards: [ initialized ]
    body: |
      selection_cursor_box.update();
      return;


  - name: render
    type: void
    guards: [ initialized ]
    body: |
      draw_joystick_configuration_mapping_list_items_and_scrollbar();
      draw_joystick_configuration_mapping_list_title_text();
      return;
    body_dependency_symbols:
      - AllegroFlare::Placement2D


  - name: set_joystick_configuration_mapping
    parameters:
      - name: joystick_configuration_mapping
        type: std::vector<std::tuple<std::string, uint32_t>>
        default_argument: '{}'
    body: |
      this->joystick_configuration_mapping = joystick_configuration_mapping;
      cursor_pos = 0;
      return;


  - name: move_cursor_up
    type: bool
    body: |
      if (joystick_configuration_mapping.empty()) return false;
      // TODO: this function
      // TODO: add option to "wrap"
      return true;


  - name: move_cursor_down
    type: bool
    body: |
      if (joystick_configuration_mapping.empty()) return false;

      int previous_cursor_pos = cursor_pos;
      cursor_pos++;
      // TODO: add optional "wrap"
      while (cursor_pos >= joystick_configuration_mapping.size())
      {
         cursor_pos -= joystick_configuration_mapping.size();
      }

      bool cursor_moved = (previous_cursor_pos != cursor_pos);
      if (cursor_moved) move_selection_cursor_box_to_cursor_location();

      return cursor_moved;


  - name: move_selection_cursor_box_to_cursor_location
    body: |
      // TODO: this function
      AllegroFlare::Vec2D new_position = build_selection_cursor_box_position_given_cursor_pos(cursor_pos);
      selection_cursor_box.reposition_to(new_position.x, new_position.y);
      return;


  - name: build_selection_cursor_box_position_given_cursor_pos
    type: AllegroFlare::Vec2D
    parameters:
      - name: cursor_pos
        type: int
        default_argument: 0
    body: |
      // TODO: this function
      return {};


  - name: set_current_cursor_selection_option
    type: bool
    parameters:
      - name: value
        type: uint32_t
        default_argument: 0
    body: |
      // TODO: this function
      return true;


  - name: move_scrollbar_position
    parameters:
      - name: distance_y
        type: float
        default_argument: 0.0f
    body: |
      scrollbar_position += distance_y;
      limit_scrollbar_position();
      return;


  - name: set_scrollbar_position
    parameters:
      - name: scrollbar_position
        type: float
        default_argument: 0.0f
    body: |
      this->scrollbar_position = scrollbar_position;
      limit_scrollbar_position();
      return;


  - name: set_scrollbar_position_to_max
    body: |
      this->scrollbar_position = infer_container_scroll_range();
      return;


  - name: infer_scrollbar_max_position
    type: float
    body: |
      return infer_container_scroll_range();



  - name: scrollbar_is_autohidden_because_list_contents_is_smaller_than_the_container
    type: bool
    body: |
      return infer_container_scroll_range() <= 0;


  - name: build_placeholder_joystick_configuration_mapping
    type: std::vector<std::tuple<std::string, uint32_t>>
    static: true
    body: |
      return {
         { "Primary Action", 1 },
         { "Secondary Action", 2 },
         { "Back", 3 },
         { "Start / Menu", 4 },
         { "Right Bumper", 5 },
         { "Left Bumper", 6 },
         { "Up", 7 },
         { "Down", 8 },
         { "Left", 9 },
         { "Right", 10 },
         //{ "unlocked", "Fade In", "Start out in the world." },
         //{ "locked",   "Call to Adventure", "Leave what you know in order to take on a challenge you must face." },
         //{ "locked",   "Save the Cat", "Define the hero and make the audience like them." },
         //{ "unlocked", "Break the Fourth Wall", "Make the developer realize they're looking at test data." },
         //{ "hidden",   "Top Secrets", "Find the box of secrets in the 2nd act." },
         //{ "locked",   "I'm Lovin' It", "Complete the AchievementsList feature." },
         //{ "unlocked", "Everyone is Beautiful", "Make multiline text fit into the box with the correct width." },
         //{ "hidden",   "Save the Best for Last", "Find out the most important part in the very end." },
      };


  - name: draw_header_title_backfill
    private: true
    body: |
      // draw inputs
      float backfill_opacity = 0.35;
      float bar_height = 160;
      ALLEGRO_COLOR backfill_color = ALLEGRO_COLOR{0, 0, 0, backfill_opacity};
      al_draw_filled_rectangle(0, 0, surface_width, bar_height, backfill_color);
      return;
    body_dependency_symbols:
      - al_draw_filled_rectangle
     

  - name: count_num_joystick_configuration_mapping
    type: int
    private: true
    body: |
      return joystick_configuration_mapping.size();


  - name: draw_joystick_configuration_mapping_list_title_text
    private: true
    body: |
      ALLEGRO_FONT *font = obtain_title_font();
      ALLEGRO_COLOR color = ALLEGRO_COLOR{1.0, 1.0, 1.0, 1.0};
      float surface_padding_x = 300;

      // draw the backfill
      draw_header_title_backfill();

      // draw the title text
      al_draw_text(
         font,
         color,
         surface_padding_x,
         100,
         ALLEGRO_ALIGN_LEFT,
         "Joystick Configuration (Generic)"
         //"J O Y S T I C K   C O N F I G U R A T I O N"
      );

      //// draw the number achieved
      //al_draw_text(
         //font,
         //color,
         //1920-surface_padding_x,
         //100,
         //ALLEGRO_ALIGN_RIGHT,
         //build_joystick_configuration_mapping_count_string().c_str()
      //);

      return;


  - name: infer_container_height
    type: float
    private: true
    body: |
      return 800;
      //return (list_item_box_height + box_gutter_y) * 5.5;


  - name: infer_container_contents_height
    type: float
    private: true
    body: |
      if (joystick_configuration_mapping.empty()) return 0;
      float y_spacing = list_item_box_height + box_gutter_y;
      return joystick_configuration_mapping.size() * y_spacing - box_gutter_y;


  - name: infer_list_item_height
    type: float
    private: true
    body: |
      return list_item_box_height;


  - name: infer_container_scroll_range
    type: float
    private: true
    body: |
      return infer_container_contents_height() - infer_container_height();


  - name: limit_scrollbar_position
    private: true
    body: |
      float y_spacing = list_item_box_height + box_gutter_y;
      float container_height = infer_container_height();
      float container_contents_height = infer_container_contents_height();
      float container_scroll_range = infer_container_scroll_range();
      scrollbar_position = std::max(0.0f, std::min(container_scroll_range, scrollbar_position));
      return;


  - name: draw_joystick_configuration_mapping_list_items_and_scrollbar
    private: true
    body: |
      float joystick_configuration_mapping_list_x = surface_width/2;
      float joystick_configuration_mapping_list_y = surface_height/2 + 40;
      float joystick_configuration_mapping_list_width = list_item_box_width;
      float scrollbar_x_padding = 70;
      float scrollbar_y_padding = 26;
      ALLEGRO_COLOR joystick_configuration_mapping_list_frame_color = ALLEGRO_COLOR{0.2, 0.205, 0.21, 1.0};
      ALLEGRO_COLOR scrollbar_bar_color = ALLEGRO_COLOR{0.2, 0.205, 0.21, 1.0};
      ALLEGRO_COLOR scrollbar_handle_color = ALLEGRO_COLOR{0.5, 0.505, 0.51, 1.0};
      float joystick_configuration_mapping_box_list_x = 0;
      float joystick_configuration_mapping_box_list_y = 0;
      float y_spacing = list_item_box_height + box_gutter_y;
      float frame_thickness = 6.0;
      float frame_outset = box_gutter_y + 2;
      float joystick_configuration_mapping_list_height = infer_container_height();
      float container_contents_height = infer_container_contents_height();
      float container_scroll_range = infer_container_scroll_range();
      float normalized_scrollbar_position = scrollbar_position / container_scroll_range;

      AllegroFlare::Placement2D place(
         joystick_configuration_mapping_list_x,
         joystick_configuration_mapping_list_y,
         joystick_configuration_mapping_list_width,
         joystick_configuration_mapping_list_height
      );

      place.start_transform();

      // draw the empty state (if there is no configuration)
      if (joystick_configuration_mapping.empty())
      {
         std::string empty_state_text_string = "There are no items to configure";
         ALLEGRO_FONT *empty_state_text_font = obtain_empty_state_text_font();
         // TODO: Consider if this empty_state_text_color value might correlate with the empty state text color
         // in the framework (for example, the "No screens are currently showing" message).
         ALLEGRO_COLOR empty_state_text_color = ALLEGRO_COLOR{0.4, 0.4, 0.4, 0.4};
         float empty_state_text_x = joystick_configuration_mapping_list_width / 2;
         float empty_state_text_y = joystick_configuration_mapping_list_height / 2
                                  - al_get_font_line_height(empty_state_text_font);
         al_draw_text(
            empty_state_text_font,
            empty_state_text_color,
            empty_state_text_x,
            empty_state_text_y,
            ALLEGRO_ALIGN_CENTER,
            empty_state_text_string.c_str()
         );
      }

      // draw the items in the list
      for (int i=0; i<joystick_configuration_mapping.size(); i++)
      {
         std::string action_label = std::get<0>(joystick_configuration_mapping[i]);
         uint32_t mapped_button_num = std::get<1>(joystick_configuration_mapping[i]);
         //std::string description = std::get<2>(joystick_configuration_mapping[i]);
         // TODO:
         // HERE: render
         draw_joystick_configuration_item_box(
            joystick_configuration_mapping_box_list_x,
            joystick_configuration_mapping_box_list_y + i * y_spacing - scrollbar_position,
            action_label,
            "Button " + std::to_string(mapped_button_num)
         );

         //draw_achievement_box(
            //joystick_configuration_mapping_box_list_x,
            //joystick_configuration_mapping_box_list_y + i * y_spacing - scrollbar_position,
            //status,
            //title,
            //description
         //);
      }

      //// draw the frame
      //al_draw_rounded_rectangle(
      //   0 - frame_outset,
      //   0 - frame_outset,
      //   joystick_configuration_mapping_list_width + frame_outset,
      //   joystick_configuration_mapping_list_container_height + frame_outset,
      //   5.0,
      //   5.0,
      //   joystick_configuration_mapping_list_frame_color,
      //   frame_thickness
      //);

      // draw the scrollbar
      if (!scrollbar_is_autohidden_because_list_contents_is_smaller_than_the_container())
      {
         AllegroFlare::Elements::Scrollbar scrollbar(
            joystick_configuration_mapping_list_width + scrollbar_x_padding,
            scrollbar_y_padding,
            joystick_configuration_mapping_list_height - scrollbar_y_padding * 2,
            normalized_scrollbar_position,
            scrollbar_bar_color,
            scrollbar_handle_color
         );
         scrollbar.render();
      }

      selection_cursor_box.render();

      place.restore_transform();
      return;
    body_dependency_symbols:
      - AllegroFlare::Elements::Scrollbar
      - std::min, std::max


  - name: draw_joystick_configuration_item_box
    type: void
    private: true
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: action_name
        type: std::string
        default_argument: '"[unset-title]"'
      - name: mapped_button_name
        type: std::string
        default_argument: '"[unset-description]"'
    body: |
      ALLEGRO_COLOR box_color = ALLEGRO_COLOR{0.1, 0.105, 0.11, 1.0};
      ALLEGRO_FONT *item_title_font = obtain_item_title_font();
      float box_padding_x = 26;
      float box_padding_y = 10;
      int text_y = (list_item_box_height / 2) - (al_get_font_line_height(item_title_font) / 2);

      // draw the backfill box
      al_draw_filled_rectangle(x, y, x + list_item_box_width, y + list_item_box_height, box_color);

      // draw the action_name
      al_draw_text(
         item_title_font,
         ALLEGRO_COLOR{1, 1, 1, 1},
         x + box_padding_x,
         y + text_y, // update this to be vertical-centered
         ALLEGRO_ALIGN_LEFT,
         action_name.c_str()
      );

      // draw the mapped_button_name
      // draw the mapped_button_name background box
      float column_2_x = 550;
      float mapped_button_background_box_width = 160;
      float mapped_button_background_box_height = list_item_box_height - box_padding_y*2;
      float mapped_button_name_x = x + list_item_box_width - mapped_button_background_box_width - box_padding_x;
      float mapped_button_name_y = text_y;

      al_draw_filled_rectangle(
         mapped_button_name_x - mapped_button_background_box_width,
         y + box_padding_y,
         mapped_button_name_x + mapped_button_background_box_width,
         y + box_padding_y + mapped_button_background_box_height,
         ALLEGRO_COLOR{0.2, 0.2, 0.2, 0.2}
      );

      // draw the mapped_button_name text
      al_draw_text(
         item_title_font,
         ALLEGRO_COLOR{1, 1, 1, 1},
         mapped_button_name_x,
         y + mapped_button_name_y,
         ALLEGRO_ALIGN_CENTER,
         mapped_button_name.c_str()
      );
      return;
    body_dependency_symbols:
      - al_draw_filled_rectangle


  - name: infer_icon_character_by_status
    type: int32_t
    private: true
    parameters:
      - name: status
        type: std::string
        default_argument: '"[unset-status]"'
    body: |
      if (status == "unlocked") return 0xf091;
      else if (status == "locked") return 0xf023;
      else if (status == "hidden") return 0x3f;
      return 0xe1fe;


  - name: infer_icon_color_by_status
    type: ALLEGRO_COLOR
    private: true
    parameters:
      - name: status
        type: std::string
        default_argument: '"[unset-status]"'
      - name: icon_locked_color
        type: ALLEGRO_COLOR
        default_argument: ALLEGRO_COLOR{1, 1, 1, 1}
      - name: icon_hidden_color
        type: ALLEGRO_COLOR
        default_argument: ALLEGRO_COLOR{1, 1, 1, 1}
      - name: icon_achieved_color
        type: ALLEGRO_COLOR
        default_argument: ALLEGRO_COLOR{1, 1, 1, 1}
    body: |
      if (status == "unlocked") return icon_achieved_color;
      else if (status == "locked") return icon_locked_color;
      else if (status == "hidden") return icon_hidden_color;
      return ALLEGRO_COLOR{1, 0, 0, 1};


  - name: filter_item_title_through_status
    type: std::string
    private: true
    parameters:
      - name: title
        type: std::string
        default_argument: '"[unset-title]"'
      - name: status
        type: std::string
        default_argument: '"[unset-status]"'
    body: |
      if (status == "hidden") return "Hidden Achievement";
      return title;


  - name: filter_item_description_through_status
    type: std::string
    private: true
    parameters:
      - name: description
        type: std::string
        default_argument: '"[unset-title]"'
      - name: status
        type: std::string
        default_argument: '"[unset-status]"'
    body: |
      if (status == "hidden") return "";
      return description;


  - name: set_state
    private: true
    parameters:
      - name: state
        type: uint32_t
        default_argument: STATE_UNDEF
      - name: override_if_busy
        type: bool
        default_argument: false
    guards: [ is_valid_state(state) ]
    body: |
      if (this->state == state) return;
      if (!override_if_busy && state_is_busy) return;
      uint32_t previous_state = this->state;

      switch (state)
      {
         case STATE_MOVING_CURSOR:
         break;

         case STATE_AWAITING_USER_INPUT_ON_OPTION:
         break;

         default:
            throw std::runtime_error("JoystickConfigurationList: weird error");
         break;
      }

      this->state = state;
      state_changed_at = al_get_time();

      return;


  - name: is_valid_state
    type: bool
    static: true
    parameters:
      - name: state
        type: uint32_t
        default_argument: STATE_UNDEF
    body: |
      std::set<uint32_t> valid_states =
      {
         //STATE_REVEALING, <-- TODO: add this eventually
         STATE_MOVING_CURSOR,
         STATE_AWAITING_USER_INPUT_ON_OPTION,
         //STATE_CLOSING_DOWN, <-- TODO: add this eventually
      };
      return (valid_states.count(state) > 0);
    body_dependency_symbols:
      - std::set


  - name: is_state
    type: bool
    parameters:
      - name: possible_state
        type: uint32_t
        default_argument: STATE_UNDEF
    body: |
     return (state == possible_state);


  - name: infer_current_state_age
    type: float
    parameters:
      - name: time_now
        type: float
        default_argument: al_get_time()
    body: |
      return (time_now - state_changed_at);


  - name: obtain_title_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Inter-Bold.ttf -40");


  - name: obtain_item_title_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Inter-Bold.ttf -34");


  - name: obtain_empty_state_text_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Inter-Medium.ttf -34");


  - name: obtain_item_description_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Inter-Medium.ttf -26");


  - name: obtain_icon_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("fa-solid-900.ttf -50");


  - name: draw_unicode_character
    private: true
    parameters:
      - name: font
        type: ALLEGRO_FONT*
        default_argument: nullptr
      - name: color
        type: ALLEGRO_COLOR
        default_argument: 'ALLEGRO_COLOR{1, 1, 1, 1}'
      - name: x
        type: int
        default_argument: 0
      - name: y
        type: int
        default_argument: 0
      - name: icon
        type: uint32_t
        default_argument: 61444
      - name: flags
        type: int
        default_argument: 0
    body: |
      static ALLEGRO_USTR *ustr = NULL;
      if (!ustr) ustr = al_ustr_new("");
      al_ustr_set_chr(ustr, 0, icon);
      al_draw_ustr(font, color, x, y, flags, ustr);
      return;


dependencies:


  - symbol: AllegroFlare::Elements::SelectionCursorBox
    headers: [ AllegroFlare/Elements/SelectionCursorBox.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::Vec2D
    headers: [ AllegroFlare/Vec2D.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_draw_filled_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_draw_text
    headers: [ allegro5/allegro_font.h ]
  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]
  - symbol: AllegroFlare::Elements::Scrollbar
    headers: [ AllegroFlare/Elements/Scrollbar.hpp ]
  - symbol: std::min, std::max
    headers: [ algorithm ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: std::min
    headers: [ algorithm ]
  - symbol: std::max
    headers: [ algorithm ]


