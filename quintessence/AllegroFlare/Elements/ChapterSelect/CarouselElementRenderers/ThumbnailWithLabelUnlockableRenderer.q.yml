parent_classes:


  - class: AllegroFlare::Elements::ChapterSelect::CarouselElementRenderers::Base
    scope: public
    init_with: AllegroFlare::Elements::ChapterSelect::CarouselElementRenderers::ThumbnailWithLabelUnlockableRenderer::TYPE


properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: thumbnail_image_identifier
    type: std::string
    init_with: '"[unset-thumbnail_image_identifier]"'
    getter: true
    setter: true

  - name: label_text
    type: std::string
    init_with: '"[unset-label_text]"'
    getter: true
    setter: true

  - name: locked_thumbnail_image_identifier
    type: std::string
    init_with: '""'
    getter: true
    setter: true

  - name: locked_label_text
    type: std::string
    init_with: '"[unset-label_text]"'
    getter: true
    setter: true

  - name: is_unlocked
    type: bool
    init_with: true
    getter: true
    setter: true

  - name: font_identifier
    type: std::string
    init_with: DEFAULT_FONT_IDENTIFIER
    constructor_arg: true
    getter: true
    setter: true

  - name: font_size
    type: int
    init_with: DEFAULT_FONT_SIZE
    constructor_arg: true
    getter: true
    setter: true

  - name: padding_x
    type: float
    init_with: 20
    getter: true
    setter: true

  - name: padding_y
    type: float
    init_with: 20
    getter: true
    setter: true

  - name: label_y_gutter
    type: float
    init_with: 30
    getter: true
    setter: true

  - name: DEFAULT_FONT_IDENTIFIER
    type: char*
    constexpr: true
    const: true
    static: true
    init_with: '(char*)"Inter-Regular.ttf"'

  - name: DEFAULT_FONT_SIZE
    type: int
    constexpr: true
    const: true
    static: true
    init_with: -46

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/ThumbnailWithLabelUnlockableRenderer"'
    static: true
    constexpr: true


methods:


  - name: render
    guards:
      - al_is_primitives_addon_initialized()
      - font_bin
      - bitmap_bin
    body: |
      ALLEGRO_BITMAP *image = obtain_thumbnail_image();
      ALLEGRO_FONT *label_font = obtain_label_font();
      float thumbnail_width = al_get_bitmap_width(image);
      float thumbnail_height = al_get_bitmap_height(image);

      // Text configuration
      float label_y_offset = thumbnail_height + label_y_gutter;
      float label_text_max_width = thumbnail_width;
      float label_text_line_height = calculate_label_text_line_height();
      ALLEGRO_COLOR locked_text_color = ALLEGRO_COLOR{0.3, 0.3, 0.3, 0.3};
      ALLEGRO_COLOR unlocked_text_color = ALLEGRO_COLOR{1, 1, 1, 1};
      ALLEGRO_COLOR text_color = !is_unlocked ? locked_text_color : unlocked_text_color;

      // Frame configuration
      ALLEGRO_COLOR locked_frame_color = ALLEGRO_COLOR{0.3, 0.3, 0.3, 0.3};
      ALLEGRO_COLOR unlocked_frame_color = ALLEGRO_COLOR{1, 1, 1, 1};
      ALLEGRO_COLOR frame_color = !is_unlocked ? locked_frame_color : unlocked_frame_color;
      float frame_thickness = 2.0f;

      // Render the image
      if (is_unlocked) al_draw_bitmap(image, padding_x, padding_y, 0);

      // Render a frame around the text
      al_draw_rectangle(
            padding_x,
            padding_y,
            padding_x + thumbnail_width,
            padding_y + thumbnail_height,
            frame_color,
            frame_thickness
         );

      // Render the text
      al_draw_multiline_text(
            label_font,
            text_color,
            padding_x,
            padding_y + label_y_offset,
            label_text_max_width,
            label_text_line_height,
            ALLEGRO_ALIGN_LEFT,
            !is_unlocked ? locked_label_text.c_str() : label_text.c_str()
         );
      return;
    body_dependency_symbols:
      - al_is_primitives_addon_initialized


  - name: calculate_width
    type: float
    body: |
      return al_get_bitmap_width(obtain_thumbnail_image()) + padding_x * 2;


  - name: calculate_height
    type: float
    body: |
      // (Assume a single line of text. Excess elements would dangle off)
      return al_get_bitmap_height(obtain_thumbnail_image())
            + label_y_gutter
            + calculate_label_text_line_height()
            + padding_y * 2;


  - name: calculate_label_text_line_height
    type: float
    body: |
      return al_get_font_line_height(obtain_label_font());


  - name: obtain_thumbnail_image
    type: ALLEGRO_BITMAP*
    private: true
    body: |
      std::string identifier = !is_unlocked && !locked_thumbnail_image_identifier.empty()
                             ? locked_thumbnail_image_identifier
                             : thumbnail_image_identifier;
      return bitmap_bin->auto_get(identifier);


  - name: obtain_label_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      std::stringstream result_font_identifier;
      result_font_identifier << font_identifier << " " << font_size;
      return font_bin->auto_get(result_font_identifier.str());


dependencies:


  - symbol: AllegroFlare::Elements::ChapterSelect::CarouselElementRenderers::Base
    headers: [ AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/Base.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_BITMAP
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]


