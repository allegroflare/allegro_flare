properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: explicit

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: explicit

  - name: carousel
    type: AllegroFlare::Elements::ChapterSelect::Carousel
    constructor_arg: true
    init_with: '{}'
    getter: true
    setter: true

  - name: pagination_bar
    type: AllegroFlare::Elements::ChapterSelect::PaginationBar
    constructor_arg: true
    init_with: '{}'
    getter: true
    setter: true

  - name: initialized
    type: bool
    init_with: false


methods:


  - name: set_bitmap_bin
    guards: [ (!initialized) ]
    parameters:
      - name: bitmap_bin
        type: AllegroFlare::BitmapBin*
        default_argument: nullptr
    guards: [ (!initialized) ]
    body: |
      this->bitmap_bin = bitmap_bin;
      return;


  - name: set_font_bin
    guards: [ (!initialized) ]
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
    guards: [ (!initialized) ]
    body: |
      this->font_bin = font_bin;
      return;


  - name: initialize
    guards: [ (!initialized) ]
    body: |
      carousel.set_bitmap_bin(bitmap_bin);
      carousel.set_font_bin(font_bin);
      initialized = true;
      return;


  - name: update
    guards: [ initialized ]
    body: |
      carousel.update();
      pagination_bar.update();
      return;


  - name: set_carousel_elements
    parameters:
      - name: carousel_elements
        type: std::vector<AllegroFlare::Elements::ChapterSelect::CarouselElements::Base*>
        default_argument: '{}'
    guards: [ initialized ]
    body: |
      carousel.set_elements(carousel_elements);
      carousel.refresh_element_dimensions();
      refresh_pagination_bar_elements();
      refresh_cursor_position_on_pagination_bar();
      return;


  - name: render
    guards: [ initialized ]
    body: |
      carousel.render();
      pagination_bar.render();
      draw_title_text();
      return;


  - name: rotate_carousel_right
    guards: [ initialized ]
    body: |
      carousel.rotate_carousel_right();
      refresh_cursor_position_on_pagination_bar();
      return;


  - name: rotate_carousel_left
    guards: [ initialized ]
    body: |
      carousel.rotate_carousel_left();
      refresh_cursor_position_on_pagination_bar();
      return;


  - name: draw_title_text
    guards: [ initialized ]
    body: |
      ALLEGRO_FONT *title_font = obtain_title_font();
      al_draw_text(title_font, ALLEGRO_COLOR{1, 1, 1, 1}, 200, 100, ALLEGRO_ALIGN_LEFT, "CHAPTER SELECT");
      return;
    body_dependency_symbols:
      - al_draw_text


  - name: refresh_pagination_bar_elements
    body: |
      // TODO: Find a mechanism to store and obtain the "status" of a Chapter as hidden or unhidden, etc
      std::vector<bool> pagination_bar_elements(carousel.get_num_elements(), true);
      return;


  - name: refresh_cursor_position_on_pagination_bar
    body: |
      int focused_element_position = carousel.get_focused_element_position();
      pagination_bar.set_cursor_position(focused_element_position);
      return;


  - name: obtain_title_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Inter-Regular.ttf -46");


dependencies:


  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::Elements::ChapterSelect::Carousel
    headers: [ AllegroFlare/Elements/ChapterSelect/Carousel.hpp ]
  - symbol: AllegroFlare::Elements::ChapterSelect::PaginationBar
    headers: [ AllegroFlare/Elements/ChapterSelect/PaginationBar.hpp ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_draw_text
    headers: [ allegro5/allegro_font.h ]
  - symbol: AllegroFlare::Elements::ChapterSelect::CarouselElements::Base
    headers: [ AllegroFlare/Elements/ChapterSelect/CarouselElements/Base.hpp ]


