parent_classes:


  - class: AllegroFlare::Elements::Base
    scope: public
    init_with: ''


properties:


  - name: elements
    type: std::vector<bool>
    init_with: '{}'
    constructor_arg: true
    getter: true
    setter: true
  
  - name: cursor_position
    type: int
    init_with: -1
    constructor_arg: true
    getter: true
    setter: true

  - name: fill_color_reached
    type: ALLEGRO_COLOR
    init_with: '(ALLEGRO_COLOR{1, 1, 1, 1} /*white*/)'
    constructor_arg: true
    getter: true
    setter: true

  - name: fill_color_unreached
    type: ALLEGRO_COLOR
    init_with: '(ALLEGRO_COLOR{0.3, 0.3, 0.3, 0.3} /*gray*/)'
    constructor_arg: true
    getter: true
    setter: true

  - name: cursor_stroke_line_color
    type: ALLEGRO_COLOR
    init_with: '(ALLEGRO_COLOR{1, 1, 1, 1} /*white*/)'
    constructor_arg: true
    getter: true
    setter: true

  - name: cursor_stroke_line_thickness
    type: float
    init_with: 2.0
    constructor_arg: true
    getter: true
    setter: true

  - name: bar_width
    type: float
    init_with: 35
    constructor_arg: true
    getter: true
    setter: true

  - name: bar_spacing
    type: float
    init_with: 60
    constructor_arg: true
    getter: true
    setter: true

  - name: bar_height
    type: float
    init_with: 6
    constructor_arg: true
    getter: true
    setter: true

  - name: bar_stroke_thickness
    type: float
    init_with: 3.0f
    constructor_arg: true
    getter: true
    setter: true


methods:


  - name: render
    type: void
    virtual: true
    override: true
    guards: [ al_is_system_installed(), al_is_primitives_addon_initialized() ]
    body: |
      float h_thickness = bar_stroke_thickness * 0.5;

      get_placement_ref().start_transform();

      // TODO: This could be optimized to a single set of vertexes and a single draw call
      int i = 0;
      for (auto element : elements)
      {
         bool reached = false;
         if (element == true) reached = true;

         al_draw_filled_rectangle(
            i*bar_spacing,
            0,
            i*bar_spacing+bar_width,
            bar_height,
            reached ? fill_color_reached : fill_color_unreached
         );

         if (i == cursor_position)
         {
            float cursor_padding_x = 8;
            float cursor_padding_y = 8;

            al_draw_rectangle(
               i*bar_spacing - cursor_padding_x,
               0 - cursor_padding_y,
               i*bar_spacing+bar_width + cursor_padding_x,
               bar_height + cursor_padding_y,
               cursor_stroke_line_color,
               cursor_stroke_line_thickness
            );
         }

         i++;
      }
      get_placement_ref().restore_transform();
      return;
    body_dependency_symbols:
      - al_is_primitives_addon_initialized


  - name: fit_placement_width_and_height
    body: |
      get_placement_ref().size = { calculate_width(), bar_height };
      return;


  - name: calculate_width
    type: float
    body: |
      if (get_num_elements() <= 0) return 0;
      // TODO: modify this so that it is coupled with render
      // TODO: add "fit_width" and "fit_height" functions to set the width and height of this Elements::Base dimensions
      return (get_num_elements() - 1)*bar_spacing+bar_width;


  - name: get_num_elements
    type: int
    body: |
      return elements.size();


dependencies:


  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Elements::Base
    headers: [ AllegroFlare/Elements/Base.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]


