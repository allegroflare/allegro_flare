properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true


methods:


  - name: render
    parameters:
      - name: element
        type: AllegroFlare::Elements::ChapterSelect::CarouselElements::Base*
        default_argument: nullptr
    guards: [ element ]
    body: |
      render_or_calculate_dimensions(element, false);
      return;


  - name: calculate_dimensions
    type: std::pair<float, float>
    parameters:
      - name: element
        type: AllegroFlare::Elements::ChapterSelect::CarouselElements::Base*
        default_argument: nullptr
    guards: [ element ]
    body: |
      return render_or_calculate_dimensions(element, true);


  - name: render_or_calculate_dimensions
    type: std::pair<float, float>
    parameters:
      - name: element
        type: AllegroFlare::Elements::ChapterSelect::CarouselElements::Base*
        default_argument: nullptr
      - name: only_calculate_dimensions
        type: bool
        default_argument: false
    guards: [ element ]
    body: |
      std::pair<float, float> result_dimensions{0, 0}; 

      // TODO: See how to make this items_map static and not created at call-time for "render"
      std::map<std::string, std::function<void()>> items_map = {
         { AllegroFlare::Elements::ChapterSelect::CarouselElements::ThumbnailWithLabel::TYPE, [
                  this,
                  element,
                  only_calculate_dimensions,
                  &result_dimensions
               ]() {
            AllegroFlare::Elements::ChapterSelect::CarouselElements::ThumbnailWithLabel *as =
               static_cast<AllegroFlare::Elements::ChapterSelect::CarouselElements::ThumbnailWithLabel*>(element);
            result_dimensions = render_or_calculate_dimensions_for__ThumbnailWithLabel(as, only_calculate_dimensions);
         }},
         //{ "development_level", [this](){
            //create_development_level();
         //}},
      };

      // locate and call the function to handle the item
      if (items_map.count(element->get_type()) == 0)
      {
         bool item_handled = false;
         //if (unrecognized_key_callback_func)
         //{
            //item_handled = unrecognized_key_callback_func();
         //}

         if (!item_handled)
         {
            // item not found
            AllegroFlare::Logger::throw_unhandled_case(
                  "AllegroFlare::Elements::ChapterSelect::CarouselElementRenderer",
                  element->get_type()
            );
         }
      }
      else
      {
         // call the item
         items_map[element->get_type()]();
      }

      return result_dimensions;
    body_dependency_symbols:
      - std::map
      - AllegroFlare::Elements::ChapterSelect::CarouselElements::ThumbnailWithLabel
      - AllegroFlare::Logger


  - name: render_or_calculate_dimensions_for__ThumbnailWithLabel
    type: std::pair<float, float>
    parameters:
      - name: element
        type: AllegroFlare::Elements::ChapterSelect::CarouselElements::ThumbnailWithLabel*
        default_argument: nullptr
      - name: only_calculate_dimensions
        type: bool
        default_argument: false
    guards: [ element ]
    body: |
      AllegroFlare::Elements::ChapterSelect::CarouselElementRenderers::ThumbnailWithLabelRenderer renderer;
      renderer.set_bitmap_bin(bitmap_bin);
      renderer.set_font_bin(font_bin);
      renderer.set_thumbnail_image_identifier(element->get_bitmap_filename());
      renderer.set_label_text(element->get_label_text());

      if (!only_calculate_dimensions) renderer.render();

      std::pair<float, float> result{0, 0}; 

      if (only_calculate_dimensions)
      {
         result = { renderer.calculate_width(), renderer.calculate_height() };
      }

      return result;
    body_dependency_symbols:
      - AllegroFlare::Elements::ChapterSelect::CarouselElementRenderers::ThumbnailWithLabelRenderer


dependencies:


  - symbol: AllegroFlare::Elements::ChapterSelect::CarouselElements::Base
    headers: [ AllegroFlare/Elements/ChapterSelect/CarouselElements/Base.hpp ]
  - symbol: AllegroFlare::Elements::ChapterSelect::CarouselElements::ThumbnailWithLabel
    headers: [ AllegroFlare/Elements/ChapterSelect/CarouselElements/ThumbnailWithLabel.hpp ]
  - symbol: AllegroFlare::Elements::ChapterSelect::CarouselElementRenderers::ThumbnailWithLabelRenderer
    headers: [ AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/ThumbnailWithLabelRenderer.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]


