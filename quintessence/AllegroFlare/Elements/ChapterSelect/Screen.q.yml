parent_classes:


  - class: AllegroFlare::Screens::Base
    scope: public
    init_with: AllegroFlare::Elements::ChapterSelect::Screen::TYPE


properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true

  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: chapter_select_element
    type: AllegroFlare::Elements::ChapterSelect::ChapterSelect
    init_with: '{}'

  - name: background
    type: AllegroFlare::Elements::Backgrounds::Base*
    init_with: nullptr
    setter: true
    getter: true

  - name: on_menu_choice_callback_func
    type: std::function<void(AllegroFlare::Elements::ChapterSelect::Screen*, void*)>
    init_with: ''
    getter: true
    setter: true

  - name: on_menu_choice_callback_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: on_exit_screen_callback_func
    type: std::function<void(AllegroFlare::Elements::ChapterSelect::Screen*, void*)>
    init_with: ''
    getter: true
    setter: true

  - name: on_exit_screen_callback_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: select_menu_sound_effect_identifier
    type: std::string
    init_with: DEFAULT_SELECT_MENU_SOUND_EFFECT_IDENTIFIER
    getter: true
    setter: true

  - name: initialized
    type: bool
    init_with: false

  - name: DEFAULT_ROTATE_CAROUSEL_SOUND_EFFECT_IDENTIFIER
    type: char*
    init_with: '(char*)"ChapterSelect::Screen::rotate_carousel"'
    static: true
    constexpr: true

  - name: DEFAULT_SELECT_MENU_SOUND_EFFECT_IDENTIFIER
    type: char*
    init_with: '(char*)"ChapterSelect::Screen::select_menu_option"'
    static: true
    constexpr: true

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/Elements/ChapterSelect/Screen"'
    static: true
    constexpr: true


methods:


  - name: set_event_emitter
    guards: [ (!initialized) ]
    parameters:
      - name: event_emitter
        type: AllegroFlare::EventEmitter*
        default_argument: nullptr
    body: |
      this->event_emitter = event_emitter;
      return;


  - name: set_bitmap_bin
    guards: [ (!initialized) ]
    parameters:
      - name: bitmap_bin
        type: AllegroFlare::BitmapBin*
        default_argument: nullptr
    body: |
      this->bitmap_bin = bitmap_bin;
      return;


  - name: set_font_bin
    guards: [ (!initialized) ]
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
    body: |
      this->font_bin = font_bin;
      return;


  - name: set_title_font_identifier
    parameters:
      - name: title_font_identifier
        type: std::string
        default_argument: AllegroFlare::Elements::ChapterSelect::ChapterSelect::DEFAULT_TITLE_FONT_IDENTIFIER
    body: |
      chapter_select_element.set_title_font_identifier(title_font_identifier);
      return;


  - name: set_title_font_size
    parameters:
      - name: title_font_size
        type: int
        default_argument: AllegroFlare::Elements::ChapterSelect::ChapterSelect::DEFAULT_TITLE_FONT_SIZE
    body: |
      chapter_select_element.set_title_font_size(title_font_size);
      return;


  - name: set_carousel_element_font_identifier
    parameters:
      - name: carousel_element_font_identifier
        type: std::string
        default_argument: AllegroFlare::Elements::ChapterSelect::ChapterSelect::DEFAULT_CAROUSEL_ELEMENT_FONT_IDENTIFIER
    body: |
      chapter_select_element.set_carousel_element_font_identifier(carousel_element_font_identifier);
      return;


  - name: set_carousel_element_font_size
    parameters:
      - name: carousel_element_font_size
        type: int
        default_argument: AllegroFlare::Elements::ChapterSelect::ChapterSelect::DEFAULT_CAROUSEL_ELEMENT_FONT_SIZE
    body: |
      chapter_select_element.set_carousel_element_font_size(carousel_element_font_size);
      return;


  - name: set_rotate_carousel_sound_effect_identifier
    parameters:
      - name: rotate_carousel_sound_effect_identifier
        type: std::string
        default_argument: DEFAULT_ROTATE_CAROUSEL_SOUND_EFFECT_IDENTIFIER
    body: |
      chapter_select_element.set_rotate_carousel_sound_effect_identifier(rotate_carousel_sound_effect_identifier);
      return;


  - name: initialize
    guards:
      - (!initialized)
      - al_is_system_installed()
      - al_is_primitives_addon_initialized()
      - al_is_font_addon_initialized()
      - event_emitter
      - bitmap_bin
      - font_bin
    body: |
      chapter_select_element.set_event_emitter(event_emitter);
      chapter_select_element.set_bitmap_bin(bitmap_bin);
      chapter_select_element.set_font_bin(font_bin);
      chapter_select_element.initialize();
      initialized = true;
      return;
    body_dependency_symbols:
      - al_is_primitives_addon_initialized


  - name: set_elements
    parameters:
      - name: elements
        type: std::vector<AllegroFlare::Elements::ChapterSelect::CarouselElements::Base*>
        default_argument: '{}'
    guards: [ initialized ]
    body: |
      // TODO: Introduce a mechanism where each chapter and its status is stored
      chapter_select_element.set_carousel_elements(elements);
      return;


  - name: set_pagination_bar_elements
    parameters:
      - name: elements
        type: std::vector<bool>
        default_argument: '{}'
    body: |
      // TODO: Introduce a mechanism where each chapter and its status is stored
      chapter_select_element.set_pagination_bar_elements(elements);
      return;


  - name: on_activate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      // TODO: Introduce a "show" mechanism
      //emit_event_to_update_input_hints_bar();
      //emit_show_and_size_input_hints_bar_event();
      return;


  - name: on_deactivate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      // TODO: Introduce a "hide" mechanism
      //emit_hide_and_restore_size_input_hints_bar_event();
      return;


  - name: update
    body: |
      chapter_select_element.update();
      return;


  - name: render
    body: |
      chapter_select_element.render();
      return;


  - name: get_focused_carousel_element
    type: AllegroFlare::Elements::ChapterSelect::CarouselElements::Base*
    guards: [ chapter_select_element.has_elements() ]
    body: |
      // TODO: Test this method
      return chapter_select_element.get_focused_carousel_element();


  - name: activate_menu_option
    body: |
      if (on_menu_choice_callback_func)
      {
         on_menu_choice_callback_func(this, on_menu_choice_callback_func_user_data);
      }
      else
      {
         AllegroFlare::Logger::throw_error(
               "AllegroFlare::Elements::ChapterSelect::Screen::activate_menu_option",
               "No callback has been assigned to \"on_menu_choice_callback_func\" so an activation of a menu "
                     "choice is not handled."
            );
      }

      return;
    body_dependency_symbols:
      - AllegroFlare::Logger
    

  - name: select_menu_option
    private: true
    body: |
      if (!is_processing_user_input()) return;

      if (chapter_select_element.has_no_elements())
      {
         std::cout <<
            "[AllegroFlare::Elements::ChapterSelect::Screen::select_menu_option()] error: can not select a menu item, "
            "the menu is empty."
            << std::endl;
         return;
      }

      emit_select_menu_sound_effect();

      // TODO: Introduce a state so that this activate_menu_option() activation can be delayed
      activate_menu_option();

      return;


  - name: exit_screen
    guards: [ on_exit_screen_callback_func ]
    body: |
      on_exit_screen_callback_func(this, on_exit_screen_callback_func_user_data);
      return;


  - name: primary_timer_func
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      if (background) background->update();
      update();
      if (background) background->render();
      render();
      return;


  - name: virtual_control_button_up_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      // TODO: this function
      return;


  - name: virtual_control_button_down_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      // TODO: Consider validating the controller is GenericController
      if (!is_processing_user_input()) return;

      if (virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_RIGHT)
      {
         chapter_select_element.rotate_carousel_right();
      }
      if (virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_LEFT)
      {
         chapter_select_element.rotate_carousel_left();
      }
      if (virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_A
         || virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_MENU
         )
      {
         select_menu_option();
      }
      if (virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_X)
      {
         exit_screen();
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::VirtualControllers::GenericController


  - name: emit_select_menu_sound_effect
    private: true
    guards: [ event_emitter ]
    body: |
      // TODO: test this event emission
      event_emitter->emit_play_sound_effect_event(select_menu_sound_effect_identifier);
      return;


  - name: virtual_control_axis_change_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      // TODO: this function
      return;


  - name: is_processing_user_input
    type: bool
    body: |
      // TODO: Update this to only return TRUE when the player is permitted to move the cursor
      return true;


dependencies:


  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Player
    headers: [ AllegroFlare/Player.hpp ]
  - symbol: AllegroFlare::VirtualControllers::Base
    headers: [ AllegroFlare/VirtualControllers/Base.hpp ]
  - symbol: AllegroFlare::Elements::ChapterSelect::ChapterSelect
    headers: [ AllegroFlare/Elements/ChapterSelect/ChapterSelect.hpp ]
  - symbol: AllegroFlare::Elements::ChapterSelect::CarouselElements::Base
    headers: [ AllegroFlare/Elements/ChapterSelect/CarouselElements/Base.hpp ]
  - symbol: AllegroFlare::VirtualControllers::GenericController
    headers: [ AllegroFlare/VirtualControllers/GenericController.hpp ]
  - symbol: AllegroFlare::Elements::Backgrounds::Base
    headers: [ AllegroFlare/Elements/Backgrounds/Base.hpp ]
  - symbol: AllegroFlare::Elements::ChapterSelect::Screen
    headers: [ AllegroFlare/Elements/ChapterSelect/Screen.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]


