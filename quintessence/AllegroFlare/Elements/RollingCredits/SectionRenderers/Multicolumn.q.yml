parent_classes:


  - class: AllegroFlare::Elements::RollingCredits::SectionRenderers::Base
    scope: public
    init_with: AllegroFlare::Elements::RollingCredits::SectionRenderers::Multicolumn::TYPE


properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: elements
    type: std::vector<std::vector<std::string>>
    init_with: '{}'
    getter: true
    setter: true
    constructor_arg: true

  - name: x
    type: float
    init_with: 0.0f
    getter: true
    setter: true
    constructor_arg: true

  - name: y
    type: float
    init_with: 0.0f
    getter: true
    setter: true
    constructor_arg: true

  - name: width
    type: float
    init_with: 1920.0f
    getter: true
    setter: true
    constructor_arg: true

  - name: element_alignment
    type: std::string
    init_with: '"left"'
    getter: true
    setter: explicit

  - name: font_name
    type: std::string
    init_with: '"Inter-Regular.ttf"'
    getter: true
    setter: true

  - name: font_size
    type: int
    init_with: -32
    getter: true
    setter: true

  - name: text_color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{1, 1, 1, 1}
    getter: true
    setter: true

  - name: gutter_width
    type: float
    init_with: 40.0f
    getter: true
    setter: true
    constructor_arg: true

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/Elements/RollingCredits/SectionRenderers/Multicolumn"'
    static: true
    constexpr: true


methods:


  - name: set_element_alignment
    parameters:
      - name: element_alignment
        type: std::string
        default_argument: '"[unset-element_alignment]"'
    guards: [ valid_element_alignment(element_alignment) ]
    body: |
      this->element_alignment = element_alignment;
      return;


  - name: valid_element_alignment
    static: true
    type: bool
    parameters:
      - name: element_alignment
        type: std::string
        default_argument: '"[unset-element_alignment]"'
    body: |
      std::set<std::string> valid_element_alignments = {
         "left",
         "centered",
         "right"
      };
      return (valid_element_alignments.count(element_alignment) != 0);
    body_dependency_symbols:
      - std::set


  - name: infer_al_text_alignment
    static: true
    type: int
    parameters:
      - name: element_alignment
        type: std::string
        default_argument: '"[unset-element_alignment]"'
    guards: [ valid_element_alignment(element_alignment) ]
    body: |
      std::map<std::string, int> al_element_alignments = {
         { "left",     ALLEGRO_ALIGN_LEFT },
         { "centered", ALLEGRO_ALIGN_CENTER },
         { "right",    ALLEGRO_ALIGN_RIGHT },
      };
      if (al_element_alignments.count(element_alignment) == 0) throw std::runtime_error("asdfasfasdf");
      return al_element_alignments[element_alignment];
    body_dependency_symbols:
      - std::map


  - name: infer_text_alignment_x_offset
    static: true
    type: float
    parameters:
      - name: element_alignment
        type: std::string
        default_argument: '"[unset-element_alignment]"'
    guards: [ valid_element_alignment(element_alignment) ]
    body: |
      std::map<std::string, float> element_alignment_offsets = {
         { "left",     0.0f },
         { "centered", 0.5f },
         { "right",    1.0f },
      };
      if (element_alignment_offsets.count(element_alignment) == 0) throw std::runtime_error("asxxxdfasfasdf");
      return element_alignment_offsets[element_alignment];
    body_dependency_symbols:
      - std::map


  - name: render
    type: float
    virtual: true
    override: true
    parameters:
      - name: only_calculate_height_dont_render
        type: bool
        default_argument: false
    guards: [ al_is_system_installed(), al_is_font_addon_initialized(), al_is_primitives_addon_initialized() ]
    body: |
      bool is_rendering = (!only_calculate_height_dont_render);
      bool draw_debugging_guides = true;
      ALLEGRO_FONT *font = obtain_font();
      float cursor_x = 0;
      float cursor_y = 0;
      float h_gutter_width = gutter_width * 0.5;
      float y_spacing = al_get_font_line_height(font) + 4;
      // float line_height = al_get_font_line_height(font); // for multiline-text
      float column_width = (width - (gutter_width * (elements.size() - 1))) / (float)elements.size();
      float xx = (x - width / 2);
      std::vector<float> column_heights;
      int alignment = infer_al_text_alignment(element_alignment);
      float text_alignment_x_offset = infer_text_alignment_x_offset(element_alignment);
      for (auto &column : elements)
      {
         for (auto &column_element : column)
         {
            if (is_rendering)
            {
               al_draw_text(
                  font,
                  text_color,
                  xx + cursor_x + (column_width * text_alignment_x_offset),
                  y + cursor_y,
                  alignment,
                  column_element.c_str()
               );
            }
            cursor_y += y_spacing;
         }

         // Store the column heights
         float column_height = cursor_y;
         column_heights.push_back(column_height);

         // Render debug rectangle container for this column
         if (is_rendering && draw_debugging_guides)
         {
            al_draw_rectangle(
               xx + cursor_x,
               y,
               xx + cursor_x + column_width,
               y+column_height,
               ALLEGRO_COLOR{0.65, 0.69, 0.9, 1.0},
               2.0f
            );
         }

         // Advance to the next column
         cursor_y = 0;
         cursor_x += (column_width + gutter_width);
      }

      // Render more debugging
      if (is_rendering && draw_debugging_guides)
      {
         AllegroFlare::draw_crosshair(x, y, ALLEGRO_COLOR{0.9, 0.3, 0.25, 1.0}, 50);
      }

      if (column_heights.empty()) return 0; // TODO: Test this
      return *std::max_element(column_heights.begin(), column_heights.end()); // TODO: Test this
    body_dependency_symbols:
      - al_is_primitives_addon_initialized
      - std::max_element
      - AllegroFlare::Useful


  - name: obtain_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      std::stringstream font_identifier;
      font_identifier << font_name << " " << font_size;
      return font_bin->auto_get(font_identifier.str());


dependencies:


  - symbol: AllegroFlare::Elements::RollingCredits::SectionRenderers::Base
    headers: [ AllegroFlare/Elements/RollingCredits/SectionRenderers/Base.hpp ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_draw_line
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: std::max_element
    headers: [ algorithm ]
  - symbol: AllegroFlare::Useful
    headers: [ AllegroFlare/Useful.hpp ]


