parent_classes:


  - class: AllegroFlare::Elements::RollingCredits::Sections::Base
    scope: public
    init_with: AllegroFlare::Elements::RollingCredits::Sections::Multicolumn::TYPE


properties:


  - name: elements
    type: std::vector<std::vector<std::string>>
    init_with: '{}'
    constructor_arg: true
    setter: true
    getter: true

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/Elements/RollingCredits/Sections/Multicolumn"'
    static: true
    constexpr: true


methods:


  - name: split_into_columns
    static: true
    type: std::vector<std::vector<std::string>>
    parameters:
      - name: names
        type: std::vector<std::string>
        default_argument: '{}'
      - name: num_columns
        type: int
        default_argument: 3
    guards: [ (num_columns >= 1) ]
    body: |
      std::vector<std::vector<std::string>> result;

      std::string default_fill = "";
      int min_items_per_column = (int)names.size() / num_columns;
      int remaining_items_to_distribute = (int)names.size() % num_columns;

      // Distribute the known minimum number of elements among the containers
      for (int i=0; i<num_columns; i++) result.push_back(std::vector<std::string>(min_items_per_column, default_fill));

      // Distribute the remainders starting from the left (In the future consider filling center columns first)
      for (int i=0; i<remaining_items_to_distribute; i++) result[i].push_back(default_fill);

      // Fill the containers with the items
      int row_num = 0;
      int column_num = 0;
      for (int i=0; i<names.size(); i++)
      {
         result[column_num][row_num] = names[i];

         row_num++;
         if (row_num >= result[column_num].size())
         {
            column_num++;
            row_num = 0;
         }
      }

      return result;


dependencies:


  - symbol: AllegroFlare::Elements::RollingCredits::Sections::Base
    headers: [ AllegroFlare/Elements/RollingCredits/Sections/Base.hpp ]


