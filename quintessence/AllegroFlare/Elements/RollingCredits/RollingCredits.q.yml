properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: sections
    type: std::vector<AllegroFlare::Elements::RollingCredits::Sections::Base*>
    init_with: '{}'
    constructor_arg: true
    getter: true
    setter: false

  - name: y_offset
    type: float
    init_with: 0.0f
    constructor_arg: true

  - name: surface_width
    type: float
    init_with: 1920
    constructor_arg: true
    getter: true
    setter: true

  - name: surface_height
    type: float
    init_with: 1080
    constructor_arg: true
    getter: true
    setter: true


functions:


  - name: set_sections
    parameters:
      - name: sections
        type: std::vector<AllegroFlare::Elements::RollingCredits::Sections::Base*>
        default_argument: '{}'
    body: |
      this->sections = sections;
      y_offset = 0;
      return;


  - name: render
    type: float
    guards: [ al_is_system_installed(), al_is_font_addon_initialized() ]
    body: |
      using namespace AllegroFlare::Elements::RollingCredits;

      float cursor_y = 0;
      float this_section_height = 0;
      float section_separator_margin = 30;
      int section_count = 0;
      int num_sections = sections.size();
      float surface_center = surface_width/2;
      for (auto &section : sections)
      {
         // render the section(s)
         if (section->is_type("Header"))
         {
            Sections::Header *typed_section = static_cast<Sections::Header*>(section);
            SectionRenderers::Header renderer(
                  font_bin,
                  typed_section->get_text()
               );
            renderer.set_x(surface_center);
            renderer.set_y(cursor_y);
            this_section_height = renderer.render();
         }
         else if (section->is_type("ColumnWithLabels"))
         {
            Sections::ColumnWithLabels *typed_section = static_cast<Sections::ColumnWithLabels *>(section);
            SectionRenderers::ColumnWithLabels renderer(
                  font_bin,
                  typed_section->get_elements()
               );
            renderer.set_x(surface_center);
            renderer.set_y(cursor_y);
            this_section_height = renderer.render();
         }
         else
         {
            std::stringstream error_message;
            error_message << "AllegroFlare::Elements::RollingCredits::RollingCredits::render error: "
                          << "Cannot render section of the unknown type \"" << section->get_type() << "\".";
            throw std::runtime_error(error_message.str());
         }

         // increment the y_cursor
         cursor_y += this_section_height;

         section_count++;
         bool at_last_section = (section_count == num_sections);
         if (!at_last_section) cursor_y += section_separator_margin;
      }

      //al_draw_line(surface_center - 200, cursor_y, surface_center + 200, cursor_y, ALLEGRO_COLOR{1, 1, 0, 1}, 1.0);
      return cursor_y;
    body_dependency_symbols:
      - AllegroFlare::Elements::RollingCredits::Sections::Header
      - AllegroFlare::Elements::RollingCredits::SectionRenderers::Header
      - AllegroFlare::Elements::RollingCredits::Sections::ColumnWithLabels
      - AllegroFlare::Elements::RollingCredits::SectionRenderers::ColumnWithLabels


  - name: obtain_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Inter-Medium.ftf -32");


dependencies:


  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: std::vector<AllegroFlare::Elements::RollingCredits::Sections::Base*>
    headers: [ vector, AllegroFlare/Elements/RollingCredits/Sections/Base.hpp ]
  - symbol: AllegroFlare::Elements::RollingCredits::Sections::Header
    headers: [ AllegroFlare/Elements/RollingCredits/Sections/Header.hpp ]
  - symbol: AllegroFlare::Elements::RollingCredits::SectionRenderers::Header
    headers: [ AllegroFlare/Elements/RollingCredits/SectionRenderers/Header.hpp ]
  - symbol: AllegroFlare::Elements::RollingCredits::Sections::ColumnWithLabels
    headers: [ AllegroFlare/Elements/RollingCredits/Sections/ColumnWithLabels.hpp ]
  - symbol: AllegroFlare::Elements::RollingCredits::SectionRenderers::ColumnWithLabels
    headers: [ AllegroFlare/Elements/RollingCredits/SectionRenderers/ColumnWithLabels.hpp ]


