properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: sections
    type: std::vector<AllegroFlare::Elements::RollingCredits::Sections::Base*>
    init_with: '{}'
    constructor_arg: true
    getter: true
    setter: false

  - name: surface_width
    type: float
    init_with: 1920
    constructor_arg: true
    getter: true
    setter: true

  - name: surface_height
    type: float
    init_with: 1080
    constructor_arg: true
    getter: true
    setter: true

  - name: y_offset
    type: float
    init_with: 0.0f
    getter: true
    setter: true

  - name: section_separator_margin
    type: float
    init_with: 36.0f
    getter: true
    setter: true

  - name: height_calculated
    type: float
    init_with: 0
    getter: true

  - name: initialized
    type: bool
    init_with: false


functions:


  - name: initialize
    guards: [ font_bin ]
    body: |
      height_calculated = calculate_height();
      initialized = true;
      return;


  - name: set_sections
    parameters:
      - name: sections
        type: std::vector<AllegroFlare::Elements::RollingCredits::Sections::Base*>
        default_argument: '{}'
    body: |
      this->sections = sections;
      y_offset = 0;
      if (initialized) height_calculated = calculate_height(); // only refresh the height calculation if the
                                                               // component has already been initialized
      return;


  - name: calculate_height
    guards: [ al_is_system_installed(), al_is_font_addon_initialized() ]
    type: float
    body: |
      return render_or_calculate_height(true);


  - name: render
    guards: [ al_is_system_installed(), al_is_font_addon_initialized() ]
    body: |
      render_or_calculate_height(false);
      return;


  - name: render_or_calculate_height
    type: float
    parameters:
      - name: only_calculate_height_dont_render
        type: bool
        default_argument: false
    body: |
      using namespace AllegroFlare::Elements::RollingCredits;

      float cursor_y = y_offset;
      float this_section_height = 0;
      //float section_separator_margin = 30;
      int section_count = 0;
      int num_sections = sections.size();
      float surface_center = surface_width/2;
      for (auto &section : sections)
      {
         // render the section(s)
         if (section->is_type("Header"))
         {
            Sections::Header *typed_section = static_cast<Sections::Header*>(section);
            SectionRenderers::Header renderer(
                  font_bin,
                  typed_section->get_text()
               );
            renderer.set_x(surface_center);
            renderer.set_y(cursor_y);
            this_section_height = renderer.render(only_calculate_height_dont_render);
         }
         else if (section->is_type("ColumnWithLabels"))
         {
            Sections::ColumnWithLabels *typed_section = static_cast<Sections::ColumnWithLabels *>(section);
            SectionRenderers::ColumnWithLabels renderer(
                  font_bin,
                  typed_section->get_elements()
               );
            renderer.set_x(surface_center);
            renderer.set_y(cursor_y);
            this_section_height = renderer.render(only_calculate_height_dont_render);
         }
         else if (section->is_type(AllegroFlare::Elements::RollingCredits::Sections::Text::TYPE))
         {
            Sections::Text *typed_section = static_cast<Sections::Text *>(section);
            SectionRenderers::Text renderer(
                  font_bin,
                  typed_section->get_text(),
                  typed_section->get_alignment()
               );
            renderer.set_x(surface_center);
            renderer.set_y(cursor_y);
            this_section_height = renderer.render(only_calculate_height_dont_render);
         }
         else
         {
            std::stringstream error_message;
            error_message << "AllegroFlare::Elements::RollingCredits::RollingCredits::render error: "
                          << "Cannot render section of the unknown type \"" << section->get_type() << "\".";
            throw std::runtime_error(error_message.str());
         }

         // increment the y_cursor
         cursor_y += this_section_height;

         section_count++;
         bool at_last_section = (section_count == num_sections);
         if (!at_last_section) cursor_y += section_separator_margin;
      }

      return cursor_y;
    body_dependency_symbols:
      - AllegroFlare::Elements::RollingCredits::Sections::Header
      - AllegroFlare::Elements::RollingCredits::SectionRenderers::Header
      - AllegroFlare::Elements::RollingCredits::Sections::ColumnWithLabels
      - AllegroFlare::Elements::RollingCredits::SectionRenderers::ColumnWithLabels
      - AllegroFlare::Elements::RollingCredits::Sections::Text
      - AllegroFlare::Elements::RollingCredits::SectionRenderers::Text


  - name: obtain_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Inter-Regular.ftf -32");


dependencies:


  - symbol: AllegroFlare::Elements::RollingCredits::Sections::Base
    headers: [ AllegroFlare/Elements/RollingCredits/Sections/Base.hpp ]
  - symbol: AllegroFlare::Elements::RollingCredits::Sections::Header
    headers: [ AllegroFlare/Elements/RollingCredits/Sections/Header.hpp ]
  - symbol: AllegroFlare::Elements::RollingCredits::SectionRenderers::Header
    headers: [ AllegroFlare/Elements/RollingCredits/SectionRenderers/Header.hpp ]
  - symbol: AllegroFlare::Elements::RollingCredits::Sections::ColumnWithLabels
    headers: [ AllegroFlare/Elements/RollingCredits/Sections/ColumnWithLabels.hpp ]
  - symbol: AllegroFlare::Elements::RollingCredits::SectionRenderers::ColumnWithLabels
    headers: [ AllegroFlare/Elements/RollingCredits/SectionRenderers/ColumnWithLabels.hpp ]
  - symbol: AllegroFlare::Elements::RollingCredits::Sections::Text
    headers: [ AllegroFlare/Elements/RollingCredits/Sections/Text.hpp ]
  - symbol: AllegroFlare::Elements::RollingCredits::SectionRenderers::Text
    headers: [ AllegroFlare/Elements/RollingCredits/SectionRenderers/Text.hpp ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]


