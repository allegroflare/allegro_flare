properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: x
    type: float
    init_with: 0.0f
    constructor_arg: true
    getter: true
    setter: true

  - name: y
    type: float
    init_with: 0.0f
    constructor_arg: true
    getter: true
    setter: true

  - name: width
    type: float
    init_with: 560.0f
    constructor_arg: true
    getter: true
    setter: true

  - name: height
    type: float
    init_with: 130.0f
    constructor_arg: true
    getter: true
    setter: true

  - name: name
    type: std::string
    init_with: '"[unset-name]"'
    constructor_arg: true
    getter: true
    setter: true


functions:


  - name: render
    type: void
    guards: [ al_is_system_installed(), al_is_font_addon_initialized() ]
    body: |
      draw_achievement_box("Achievement Unlocked", name);
      return;


  - name: draw_achievement_box
    type: void
    private: true
    parameters:
      - name: title
        type: std::string
        default_argument: '"[unset-title]"'
      - name: description
        type: std::string
        default_argument: '"[unset-description]"'
    body: |
      std::string status = "unlocked";
      ALLEGRO_FONT *item_title_font = obtain_item_title_font();
      ALLEGRO_FONT *description_font = obtain_item_description_font();
      ALLEGRO_FONT *icon_font = obtain_icon_font();
      float achievements_box_width = width; //560.0f;
      float achievements_box_height = height; //130.0f;
      float box_padding_x = 20;
      float box_padding_y = 20;
      float title_padding_y = 10;
      ALLEGRO_COLOR title_text_color_normal = ALLEGRO_COLOR{1, 1, 1, 1};
      ALLEGRO_COLOR description_text_color = ALLEGRO_COLOR{0.7, 0.705, 0.71, 1.0};
      ALLEGRO_COLOR box_color = ALLEGRO_COLOR{0.1, 0.105, 0.11, 1.0};
      ALLEGRO_COLOR icon_container_box_color = ALLEGRO_COLOR{0.2, 0.205, 0.21, 1.0};
      ALLEGRO_COLOR icon_locked_color = ALLEGRO_COLOR{0.4, 0.405, 0.41, 1};
      ALLEGRO_COLOR icon_hidden_color = icon_container_box_color;
      ALLEGRO_COLOR icon_achieved_color = ALLEGRO_COLOR{1, 1, 1, 1};
      ALLEGRO_COLOR title_text_color_hidden = icon_locked_color;
      float item_title_font_line_height = al_get_font_line_height(item_title_font);
      float description_font_line_height = al_get_font_line_height(description_font);
      float icon_font_line_height = al_get_font_line_height(icon_font);
      float icon_container_box_size = achievements_box_height - box_padding_x*2;
      float text_y_offset = 2;
      float icon_container_box_text_x_padding = 30;
      float text_x_offset = icon_container_box_size + icon_container_box_text_x_padding;

      ALLEGRO_COLOR title_text_color = (status == "hidden") ? title_text_color_hidden : title_text_color_normal;
 
      float icon_box_center_x = x + box_padding_x + icon_container_box_size / 2;
      float icon_box_center_y = y + box_padding_y + icon_container_box_size / 2;
      int32_t icon_character = infer_icon_character_by_status(status);
      ALLEGRO_COLOR icon_color = infer_icon_color_by_status(
         status,
         icon_locked_color,
         icon_hidden_color,
         icon_achieved_color
      );

      // draw the filled rectangle
      if (status == "hidden")
      {
         float hidden_box_stroke_thickness = 4.0f;
         float h_thickness = hidden_box_stroke_thickness * 0.5;
         al_draw_rectangle(
            x + h_thickness,
            y + h_thickness,
            x + achievements_box_width - h_thickness,
            y + achievements_box_height - h_thickness,
            box_color,
            hidden_box_stroke_thickness
         );
      }
      else
      {
         al_draw_filled_rectangle(x, y, x + achievements_box_width, y + achievements_box_height, box_color);
      }

      // draw the icon container box rectangle
      if (status == "hidden")
      {
         float hidden_icon_box_stroke_thickness = 4.0f;
         float h_thickness = hidden_icon_box_stroke_thickness * 0.5;
         al_draw_rectangle(
            x + box_padding_x + h_thickness,
            y + box_padding_y + h_thickness,
            x + box_padding_x + icon_container_box_size - h_thickness,
            y + box_padding_y + icon_container_box_size - h_thickness,
            icon_container_box_color,
            hidden_icon_box_stroke_thickness
         );
      }
      else
      {
         al_draw_filled_rectangle(
            x + box_padding_x,
            y + box_padding_y,
            x + box_padding_x + icon_container_box_size,
            y + box_padding_y + icon_container_box_size,
            icon_container_box_color
         );
      }

      // draw the icon
      draw_unicode_character(
         icon_font,
         icon_color,
         icon_box_center_x,
         icon_box_center_y - icon_font_line_height / 2,
         icon_character,
         ALLEGRO_ALIGN_CENTER
      );

      // draw the title text
      al_draw_text(
         item_title_font,
         title_text_color,
         x + box_padding_x + text_x_offset,
         y + box_padding_y + text_y_offset,
         ALLEGRO_ALIGN_LEFT,
         filter_item_title_through_status(title, status).c_str()
      );

      // draw the description text
      al_draw_multiline_text(
         description_font,
         description_text_color,
         x + box_padding_x + text_x_offset,
         y + box_padding_y + item_title_font_line_height + title_padding_y + text_y_offset,
         achievements_box_width - (box_padding_x + icon_container_box_size + icon_container_box_text_x_padding*2),
         description_font_line_height,
         ALLEGRO_ALIGN_LEFT,
         filter_item_description_through_status(description, status).c_str()
      );

      return;
    body_dependency_symbols:
      - al_draw_filled_rectangle
      - al_draw_text


  - name: infer_icon_character_by_status
    type: int32_t
    private: true
    parameters:
      - name: status
        type: std::string
        default_argument: '"[unset-status]"'
    body: |
      if (status == "unlocked") return 0xf091;
      else if (status == "locked") return 0xf023;
      else if (status == "hidden") return 0x3f;
      return 0xe1fe;


  - name: infer_icon_color_by_status
    type: ALLEGRO_COLOR
    private: true
    parameters:
      - name: status
        type: std::string
        default_argument: '"[unset-status]"'
      - name: icon_locked_color
        type: ALLEGRO_COLOR
        default_argument: ALLEGRO_COLOR{1, 1, 1, 1}
      - name: icon_hidden_color
        type: ALLEGRO_COLOR
        default_argument: ALLEGRO_COLOR{1, 1, 1, 1}
      - name: icon_achieved_color
        type: ALLEGRO_COLOR
        default_argument: ALLEGRO_COLOR{1, 1, 1, 1}
    body: |
      if (status == "unlocked") return icon_achieved_color;
      else if (status == "locked") return icon_locked_color;
      else if (status == "hidden") return icon_hidden_color;
      return ALLEGRO_COLOR{1, 0, 0, 1};


  - name: filter_item_title_through_status
    type: std::string
    private: true
    parameters:
      - name: title
        type: std::string
        default_argument: '"[unset-title]"'
      - name: status
        type: std::string
        default_argument: '"[unset-status]"'
    body: |
      if (status == "hidden") return "Hidden Achievement";
      return title;


  - name: filter_item_description_through_status
    type: std::string
    private: true
    parameters:
      - name: description
        type: std::string
        default_argument: '"[unset-title]"'
      - name: status
        type: std::string
        default_argument: '"[unset-status]"'
    body: |
      if (status == "hidden") return "";
      return description;


  - name: obtain_item_title_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Purista Medium.otf -32");


  - name: obtain_item_description_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Inter-Medium.ttf -26");


  - name: obtain_icon_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("fa-solid-900.ttf -50");


  - name: draw_unicode_character
    private: true
    parameters:
      - name: font
        type: ALLEGRO_FONT*
        default_argument: nullptr
      - name: color
        type: ALLEGRO_COLOR
        default_argument: 'ALLEGRO_COLOR{1, 1, 1, 1}'
      - name: x
        type: int
        default_argument: 0
      - name: y
        type: int
        default_argument: 0
      - name: icon
        type: uint32_t
        default_argument: 61444
      - name: flags
        type: int
        default_argument: 0
    body: |
      static ALLEGRO_USTR *ustr = NULL;
      if (!ustr) ustr = al_ustr_new("");
      al_ustr_set_chr(ustr, 0, icon);
      al_draw_ustr(font, color, x, y, flags, ustr);
      return;


dependencies:


  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: al_draw_filled_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_draw_text
    headers: [ allegro5/allegro_font.h ]


