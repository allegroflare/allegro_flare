parent_classes:


  - class: AllegroFlare::Elements::Base
    scope: public
    init_with: ''


properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: max
    type: int
    init_with: 10
    constructor_arg: true
    getter: true
    setter: true
  
  - name: value
    type: int
    init_with: 10
    constructor_arg: true
    getter: true
    setter: true

  - name: fill_color
    type: ALLEGRO_COLOR
    init_with: '(ALLEGRO_COLOR{0.86, 0.08, 0.24, 1} /*crimson*/)'
    constructor_arg: true
    getter: true
    setter: true

  - name: empty_color
    type: ALLEGRO_COLOR
    init_with: '(ALLEGRO_COLOR{0.25, 0.1, 0.25, 1})'
    constructor_arg: true
    getter: true
    setter: true

  - name: outline_color
    type: ALLEGRO_COLOR
    init_with: '(ALLEGRO_COLOR{0.08, 0.12, 0.2, 1})'
    constructor_arg: true
    getter: true
    setter: true

  - name: heart_size
    type: int
    init_with: 26
    constructor_arg: true
    getter: true
    setter: true

  - name: heart_spacing
    type: float
    init_with: 32
    constructor_arg: true
    getter: true
    setter: true

  - name: drawing_outline
    type: bool
    init_with: true
    constructor_arg: true
    getter: true
    setter: true

  - name: font_awesome_solid_font_name
    type: std::string
    init_with: '"fa-solid-900.ttf"'

  - name: font_awesome_outline_font_name
    type: std::string
    init_with: '"fa-regular-400.ttf"'


functions:


  - name: render
    type: void
    guards: [ al_is_system_installed(), al_is_font_addon_initialized(), al_is_ttf_addon_initialized() ]
    body: |
      ALLEGRO_FONT *font_awesome_solid_font = obtain_font_awesome_solid_font();
      ALLEGRO_FONT *font_awesome_outline_font = obtain_font_awesome_outline_font();
      const uint32_t heart_glyph = AllegroFlare::FontAwesome::heart;
      const uint32_t heart_empty_glyph = AllegroFlare::FontAwesome::heart;
      const uint32_t outline_heart_glyph = 0xf004;

      get_placement_ref().start_transform();

      for (int i=0; i<max; i++)
      {
         if (i <= (value - 1))
         {
            // draw filled heart
            draw_unicode_character(
               font_awesome_solid_font,
               fill_color,
               heart_glyph,
               ALLEGRO_ALIGN_CENTRE,
               i*heart_spacing
            );
         }
         else
         {
            // draw empty heart
            draw_unicode_character(
               font_awesome_solid_font,
               empty_color,
               heart_glyph,
               ALLEGRO_ALIGN_CENTRE,
               i*heart_spacing
            );
         }
      }

      if (drawing_outline)
      {
         for (int i=0; i<max; i++)
         {
            // draw outline stroke heart
            draw_unicode_character(
               font_awesome_outline_font,
               outline_color,
               outline_heart_glyph,
               ALLEGRO_ALIGN_CENTRE,
               i*heart_spacing,
               -1
            );
         }
      }

      get_placement_ref().restore_transform();
      return;
    body_dependency_symbols:
      - al_is_primitives_addon_initialized
      - AllegroFlare::FontAwesome


  - name: draw_unicode_character
    parameters:
      - name: font
        type: ALLEGRO_FONT*
        default_argument: nullptr
      - name: color
        type: ALLEGRO_COLOR
        default_argument: 'ALLEGRO_COLOR{1, 1, 1, 1}'
      - name: icon
        type: int32_t
        default_argument: 61444
      - name: flags
        type: int
        default_argument: 0
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
    body: |
      static ALLEGRO_USTR *ustr = NULL;
      if (!ustr) ustr = al_ustr_new("");
      al_ustr_set_chr(ustr, 0, icon);
      al_draw_ustr(font, color, x, y, flags, ustr);
      return;


  - name: obtain_font_awesome_solid_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      std::stringstream font_identifier_and_size;
      font_identifier_and_size << font_awesome_solid_font_name << " " << heart_size;
      return font_bin->auto_get(font_identifier_and_size.str());


  - name: obtain_font_awesome_outline_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      std::stringstream font_identifier_and_size;
      font_identifier_and_size << font_awesome_outline_font_name << " " << (heart_size+2);
      return font_bin->auto_get(font_identifier_and_size.str());


dependencies:


  - symbol: AllegroFlare::FontAwesome
    headers: [ AllegroFlare/FontAwesome.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Elements::Base
    headers: [ AllegroFlare/Elements/Base.hpp ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: int32_t
    headers: [ cstdint ]

  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]


