parent_classes:


  - class: AllegroFlare::Elements::StoryboardPages::Base
    scope: public
    init_with: '"AdvancingText"'


properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: text
    type: std::string
    init_with: '"[text-not-set]"'
    constructor_arg: true
    getter: true
    setter: true

  - name: font_name
    type: std::string
    init_with: '"Inter-Medium.ttf"'
    constructor_arg: true
    getter: true
    setter: true

  - name: font_size
    type: int
    init_with: -60
    constructor_arg: true
    getter: true
    setter: true

  - name: text_color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{1, 1, 1, 1}
    constructor_arg: true
    getter: true
    setter: true

  - name: top_padding
    type: float
    init_with: 400
    constructor_arg: true
    getter: true
    setter: true

  - name: left_padding
    type: float
    init_with: 200
    constructor_arg: true
    getter: true
    setter: true

  - name: right_padding
    type: float
    init_with: 200
    constructor_arg: true
    getter: true
    setter: true

  - name: line_height_multiplier
    type: float
    init_with: 1.75f
    constructor_arg: true
    getter: true
    setter: true

  - name: line_height_padding
    type: float
    init_with: 0.0f
    constructor_arg: true
    getter: true
    setter: true

  - name: revealed_characters_count
    type: int
    init_with: 0
    getter: true


functions:


  - name: start
    virtual: true
    override: true
    body: |
      revealed_characters_count = 0;
      set_finished(false);
      return;


  - name: update
    virtual: true
    override: true
    body: |
      revealed_characters_count++;
      if (revealed_characters_count >= text.size()) set_finished(true);
      return;


  - name: render
    virtual: true
    override: true
    guards: [ al_is_system_installed(), al_is_font_addon_initialized() ]
    body: |
      ALLEGRO_FONT *text_font = obtain_font();

      std::string revealed_text = generate_revealed_text();
      if (!revealed_text.empty())
      {
         float box_width = 1920 - (left_padding + right_padding);
         al_draw_multiline_text(
               text_font,
               text_color,
               left_padding,
               top_padding,
               box_width,
               al_get_font_line_height(text_font)*line_height_multiplier + line_height_padding,
               0,
               revealed_text.c_str()
            );
      }

      return;
    body_dependency_symbols:
      - al_draw_multiline_text
      - AllegroFlare::Color


  - name: advance
    virtual: true
    override: true
    body: |
      if (get_finished()) return;
      if (!all_characters_are_revealed()) reveal_all_characters();
      else
      {
         set_finished(true);
      }

      // TODO - should this also finished = true?
      return;


  - name: generate_revealed_text
    type: std::string
    body: |
      return text.substr(0, revealed_characters_count);


  - name: reveal_all_characters
    body: |
      revealed_characters_count = text.size();


  - name: all_characters_are_revealed
    type: bool
    body: |
      return revealed_characters_count >= text.size();


  - name: obtain_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      std::stringstream composite_font_str;
      composite_font_str << font_name << " " << font_size;
      return font_bin->auto_get(composite_font_str.str());


  - name: obtain_next_button_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      std::stringstream composite_font_str;
      composite_font_str << font_name << " " << font_size+20;
      return font_bin->auto_get(composite_font_str.str());


dependencies:


  - symbol: AllegroFlare::Elements::StoryboardPages::Base
    headers: [ AllegroFlare/Elements/StoryboardPages/Base.hpp ]
  - symbol: AllegroFlare::Color
    headers: [ AllegroFlare/Color.hpp ]
  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::EventEmitter*
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: ALLEGRO_EVENT*
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: al_draw_multiline_text
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_draw_rounded_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::interpolator::*
    headers: [ AllegroFlare/Interpolators.hpp ]
  - symbol: fmod
    headers: [ cmath ]
  - symbol: std::min, std::max
    headers: [ algorithm ]

  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]


