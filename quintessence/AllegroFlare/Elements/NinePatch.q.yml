properties:


  - name: source_texture
    type: ALLEGRO_BITMAP*
    init_with: nullptr
    getter: true
    setter: true

  - name: left_column_width
    type: float
    init_with: 128.0f
    getter: true
    setter: true

  - name: center_column_width
    type: float
    init_with: 256.0f
    getter: true
    setter: true

  - name: right_column_width
    type: float
    init_with: 128.0f
    getter: true
    setter: true

  - name: top_row_height
    type: float
    init_with: 128.0f
    getter: true
    setter: true

  - name: middle_row_height
    type: float
    init_with: 256.0f
    getter: true
    setter: true

  - name: bottom_row_height
    type: float
    init_with: 128.0f
    getter: true
    setter: true

  - name: a_uv
    type: std::tuple<float, float, float, float>
    init_with: '{ 0, 0, 32, 32 }'
    getter: true
    setter: true

  - name: b_uv
    type: std::tuple<float, float, float, float>
    init_with: '{ 32, 0, 268, 32 }'
    getter: true
    setter: true

  - name: c_uv
    type: std::tuple<float, float, float, float>
    init_with: '{ 268, 0, 300, 32 }'
    getter: true
    setter: true

  - name: d_uv
    type: std::tuple<float, float, float, float>
    init_with: '{ 0, 32, 32, 64 }'
    getter: true
    setter: true

  - name: e_uv
    type: std::tuple<float, float, float, float>
    init_with: '{ 32, 32, 268, 64 }'
    getter: true
    setter: true

  - name: f_uv
    type: std::tuple<float, float, float, float>
    init_with: '{ 268, 32, 300, 64 }'
    getter: true
    setter: true

  - name: g_uv
    type: std::tuple<float, float, float, float>
    init_with: '{ 0, 268, 32, 300 }'
    getter: true
    setter: true

  - name: h_uv
    type: std::tuple<float, float, float, float>
    init_with: '{ 32, 268, 268, 300 }'
    getter: true
    setter: true

  - name: i_uv
    type: std::tuple<float, float, float, float>
    init_with: '{ 268, 268, 300, 300 }'
    getter: true
    setter: true

  - name: mesh
    type: std::vector<ALLEGRO_VERTEX>
    init_with: ''
    getter: explicit

  - name: initialized
    type: bool
    init_with: false


methods:


  - name: get_mesh
    type: std::vector<ALLEGRO_VERTEX>
    guards: [ initialized ]
    body: |
      return mesh;


  - name: initialize
    guards: [ al_is_system_installed(), al_is_primitives_addon_initialized(), source_texture, (!initialized) ]
    body: |
      build_mesh();
      initialized = true;
      return;


  - name: render
    type: void
    guards: [ initialized ]
    body: |
      al_draw_prim(&mesh[0], NULL, source_texture, 0, mesh.size(), ALLEGRO_PRIM_TRIANGLE_LIST);
      return;
    body_dependency_symbols:
      - al_is_system_installed
      - al_is_primitives_addon_initialized


  - name: build_mesh
    private: true
    body: |
      mesh.clear();


      // Build the TOP ROW

      // Top left
      std::vector<ALLEGRO_VERTEX> top_left_patch =
            build_vertices_for_rect2(
            0, 0, left_column_width, top_row_height,
            a_uv
         );
      mesh.insert(mesh.end(), top_left_patch.begin(), top_left_patch.end());

      // Top center
      std::vector<ALLEGRO_VERTEX> top_center_patch =
            build_vertices_for_rect2(
            left_column_width, 0, center_column_width, top_row_height,
            b_uv
         );
      mesh.insert(mesh.end(), top_center_patch.begin(), top_center_patch.end());

      // Top right
      std::vector<ALLEGRO_VERTEX> top_right_patch =
            build_vertices_for_rect2(
            left_column_width + center_column_width, 0, right_column_width, top_row_height,
            c_uv
         );
      mesh.insert(mesh.end(), top_right_patch.begin(), top_right_patch.end());


      // Build the MIDDLE ROW

      // Top left
      std::vector<ALLEGRO_VERTEX> middle_left_patch =
            build_vertices_for_rect2(
            0, top_row_height, left_column_width, middle_row_height,
            d_uv
         );
      mesh.insert(mesh.end(), middle_left_patch.begin(), middle_left_patch.end());

      // Top center
      std::vector<ALLEGRO_VERTEX> middle_center_patch =
            build_vertices_for_rect2(
            left_column_width, top_row_height, center_column_width, middle_row_height,
            e_uv
         );
      mesh.insert(mesh.end(), middle_center_patch.begin(), middle_center_patch.end());

      // Top right
      std::vector<ALLEGRO_VERTEX> middle_right_patch =
            build_vertices_for_rect2(
            left_column_width + center_column_width, top_row_height, right_column_width, middle_row_height,
            f_uv
         );
      mesh.insert(mesh.end(), middle_right_patch.begin(), middle_right_patch.end());


      // Build the BOTTOM ROW

      // Top left
      std::vector<ALLEGRO_VERTEX> bottom_left_patch =
            build_vertices_for_rect2(
            0, top_row_height+middle_row_height, left_column_width, bottom_row_height,
            g_uv
         );
      mesh.insert(mesh.end(), bottom_left_patch.begin(), bottom_left_patch.end());

      // Top center
      std::vector<ALLEGRO_VERTEX> bottom_center_patch =
            build_vertices_for_rect2(
            left_column_width, top_row_height+middle_row_height, center_column_width, bottom_row_height,
            h_uv
         );
      mesh.insert(mesh.end(), bottom_center_patch.begin(), bottom_center_patch.end());

      // Top right
      std::vector<ALLEGRO_VERTEX> bottom_right_patch =
            build_vertices_for_rect2(
            left_column_width + center_column_width, top_row_height+middle_row_height, right_column_width, bottom_row_height,
            i_uv
         );
      mesh.insert(mesh.end(), bottom_right_patch.begin(), bottom_right_patch.end());

      // TODO: Continue to add remaining patches
      return;


  - name: build_vertices_for_rect
    type: std::vector<ALLEGRO_VERTEX>
    private: true
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: w
        type: float
        default_argument: 0.0f
      - name: h
        type: float
        default_argument: 0.0f
      - name: u1
        type: float
        default_argument: 0.0f
      - name: v1
        type: float
        default_argument: 0.0f
      - name: u2
        type: float
        default_argument: 1.0f
      - name: v2
        type: float
        default_argument: 1.0f
    body: |
      std::vector<ALLEGRO_VERTEX> result = {
         ALLEGRO_VERTEX{x+0, y+0, 0, u1, v1, ALLEGRO_COLOR{1, 1, 1, 1}},
         ALLEGRO_VERTEX{x+w, y+0, 0, u2, v1, ALLEGRO_COLOR{1, 1, 1, 1}},
         ALLEGRO_VERTEX{x+0, y+h, 0, u1, v2, ALLEGRO_COLOR{1, 1, 1, 1}},
         ALLEGRO_VERTEX{x+w, y+0, 0, u2, v1, ALLEGRO_COLOR{1, 1, 1, 1}},
         ALLEGRO_VERTEX{x+0, y+h, 0, u1, v2, ALLEGRO_COLOR{1, 1, 1, 1}},
         ALLEGRO_VERTEX{x+w, y+h, 0, u2, v2, ALLEGRO_COLOR{1, 1, 1, 1}},
      };
      return result;


  - name: build_vertices_for_rect2
    type: std::vector<ALLEGRO_VERTEX>
    private: true
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: w
        type: float
        default_argument: 0.0f
      - name: h
        type: float
        default_argument: 0.0f
      - name: uv
        type: std::tuple<float, float, float, float>
        default_argument: '{ 0, 0, 0, 0 }'
    body: |
      auto &u1 = std::get<0>(uv);
      auto &v1 = std::get<1>(uv);
      auto &u2 = std::get<2>(uv);
      auto &v2 = std::get<3>(uv);
      std::vector<ALLEGRO_VERTEX> result = {
         ALLEGRO_VERTEX{x+0, y+0, 0, u1, v1, ALLEGRO_COLOR{1, 1, 1, 1}},
         ALLEGRO_VERTEX{x+w, y+0, 0, u2, v1, ALLEGRO_COLOR{1, 1, 1, 1}},
         ALLEGRO_VERTEX{x+0, y+h, 0, u1, v2, ALLEGRO_COLOR{1, 1, 1, 1}},
         ALLEGRO_VERTEX{x+w, y+0, 0, u2, v1, ALLEGRO_COLOR{1, 1, 1, 1}},
         ALLEGRO_VERTEX{x+0, y+h, 0, u1, v2, ALLEGRO_COLOR{1, 1, 1, 1}},
         ALLEGRO_VERTEX{x+w, y+h, 0, u2, v2, ALLEGRO_COLOR{1, 1, 1, 1}},
      };
      return result;


dependencies:


  - symbol: ALLEGRO_BITMAP
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_VERTEX
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_is_system_installed
    headers: [ allegro5/allegro.h ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]


