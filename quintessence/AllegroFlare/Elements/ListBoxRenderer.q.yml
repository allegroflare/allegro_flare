properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true

  - name: list_items
    type: std::vector<std::string>
    init_with: '{}'
    constructor_arg: true
    getter: true
    setter: true

  - name: cursor_position
    type: int
    init_with: 0
    getter: true
    setter: true

  - name: age
    type: float
    init_with: 999.0f
    getter: true
    setter: true

  - name: width
    type: float
    init_with: (1920/3.0f)
    getter: true
    setter: true

  - name: height
    type: float
    init_with: (1080/5.0f)
    getter: true
    setter: true

  - name: font_name
    type: std::string
    init_with: DEFAULT_FONT_NAME
    getter: true
    setter: true

  - name: font_size
    type: int
    init_with: DEFAULT_FONT_SIZE
    getter: true
    setter: true

  - name: text_padding_x
    type: float
    init_with: 52.0f
    getter: true
    setter: true

  - name: text_padding_y
    type: float
    init_with: 40.0f
    getter: true
    setter: true

  - name: text_color_selected
    type: ALLEGRO_COLOR
    init_with: DEFAULT_SELECTION_COLOR
    getter: true
    setter: true

  - name: text_color_not_selected
    type: ALLEGRO_COLOR
    init_with: DEFAULT_TEXT_NOT_SELECTED_COLOR
    getter: true
    setter: true

  - name: frame_backfill_color
    type: ALLEGRO_COLOR
    init_with: calculate_DEFAULT_BACKFILL_COLOR()
    getter: true
    setter: true

  - name: frame_border_color
    type: ALLEGRO_COLOR
    init_with: calculate_DEFAULT_BORDER_COLOR()
    getter: true
    setter: true

  - name: selection_frame_color
    type: ALLEGRO_COLOR
    init_with: DEFAULT_SELECTION_COLOR
    getter: true
    setter: true

  - name: DEFAULT_FONT_NAME
    type: char*
    constexpr: true
    static: true
    const: true
    init_with: '(char*)"Inter-Regular.ttf"'

  - name: DEFAULT_FONT_SIZE
    type: int
    constexpr: true
    static: true
    const: true
    init_with: -36

  - name: DEFAULT_SELECTION_COLOR
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{0.5f, 1.0f, 0.83f, 1.0f}
    constexpr: true
    static: true
    const: true

  - name: DEFAULT_TEXT_NOT_SELECTED_COLOR
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{1.0f, 1.0f, 1.0f, 1.0f}
    constexpr: true
    static: true
    const: true


methods:


  - name: calculate_y_displacement_from_time
    type: float
    parameters:
      - name: time
        type: float
        default_argument: 0.0f
      - name: max_displacement
        type: float
        default_argument: 10.0f
    body: |
      float curved_time = calculate_curved_time(time);
      float inv_curved_time = 1.0 - calculate_curved_time();
      return max_displacement * inv_curved_time;
    body_dependency_symbols:
      - 'AllegroFlare::Interpolators::'
      - std::min
      - std::max


  - name: calculate_curved_time
    type: float
    parameters:
      - name: time
        type: float
        default_argument: 0.0f
    body: |
      float normalized_age = std::max(std::min(1.0f, time), 0.0f);
      return AllegroFlare::interpolator::double_fast_in(normalized_age);
    body_dependency_symbols:
      - 'AllegroFlare::Interpolators::'
      - std::min
      - std::max


  - name: draw_frame
    private: true
    body: |
      //float normalized_age = std::max(std::min(1.0f, age), 0.0f);
      //float curved_time = AllegroFlare::interpolator::double_fast_in(normalized_age);
      //float inv_curved_time = 1.0 - curved_time;

      AllegroFlare::Placement2D frame_place = { width/2, height/2, width, height, };
      frame_place.position.y += calculate_y_displacement_from_time(age);
      frame_place.start_transform();
      AllegroFlare::Elements::DialogBoxFrame dialog_box_frame(width, height);
      dialog_box_frame.set_backfill_color(frame_backfill_color);
      dialog_box_frame.set_border_color(frame_border_color);
      dialog_box_frame.set_opacity(calculate_curved_time(age));
      dialog_box_frame.render();
      frame_place.restore_transform();
      return;
    body_dependency_symbols:
      - AllegroFlare::Placement2D


  - name: render
    guards: [ al_is_system_installed(), al_is_primitives_addon_initialized() ]
    body: |
      draw_frame();
      draw_choices_with_cursor_and_current_selection();
      return;
    body_dependency_symbols:
      - AllegroFlare::Elements::DialogBoxFrame
      - AllegroFlare::ColorKit


  - name: calculate_list_item_max_width
    type: float
    body: |
      return (width - (text_padding_x * 2));


  - name: calculate_line_height
    type: float
    body: |
      ALLEGRO_FONT* text_font = obtain_text_font();
      return al_get_font_line_height(text_font);


  - name: calculate_item_spacing_padding
    type: float
    body: |
      float line_height = calculate_line_height();
      return line_height * 0.75;


  - name: calculate_content_width
    type: float
    guards: [ al_is_system_installed(), al_is_primitives_addon_initialized() ]
    body: |
      // TODO: Add more tests for this function
      ALLEGRO_FONT* text_font = obtain_text_font();

      // Calculate the item heights
      float max_theoretical_width = 999999; // TODO: Consider using an std::max or something
      float max_content_width = 0;
      for (auto &list_item : list_items)
      {
         std::vector<float> line_widths = calculate_line_widths(text_font, max_theoretical_width, list_item);
         if (line_widths.empty()) continue;
         auto max_element = std::max_element(line_widths.begin(), line_widths.end());

         // Set the max width
         max_content_width = std::max(max_content_width, *max_element);
      }
      return max_content_width;


  - name: calculate_content_height
    type: float
    guards: [ al_is_system_installed(), al_is_primitives_addon_initialized() ]
    body: |
      int num_items = list_items.size();
      if (num_items == 0) return 0;

      ALLEGRO_FONT* text_font = obtain_text_font();
      float item_max_width = calculate_list_item_max_width();
      float line_height = calculate_line_height();

      // Calculate the item heights
      std::vector<float> item_heights;
      for (auto &list_item : list_items)
      {
         std::vector<float> line_widths = calculate_line_widths(text_font, item_max_width, list_item);
         int this_item_num_lines = line_widths.size();
         float this_item_height = this_item_num_lines * line_height;
         item_heights.push_back(this_item_height);
      }

      // Sum the item heights
      float summated_items_height = 0;
      for (auto &item_height : item_heights)
      {
         summated_items_height += item_height;
      }

      // Calculate the padding between items
      float summated_item_spacing_padding = calculate_item_spacing_padding() * (num_items - 1);

      // Return the height and padding
      return summated_items_height + summated_item_spacing_padding;


  - name: set_height_to_fit_content
    body: |
      height = calculate_content_height() + text_padding_y * 2;
      return;


  - name: set_width_to_fit_content_or_max
    parameters:
      - name: max
        type: float
        default_argument: 800
    body: |
      // TODO: Test this method
      width = (std::min(calculate_content_width(), max)) + text_padding_x * 2;
      return;


  - name: draw_frame_raw
    private: true
    body: |
      AllegroFlare::Elements::DialogBoxFrame frame(width, height);
      frame.set_backfill_color(frame_backfill_color);
      frame.set_border_color(frame_border_color);
      frame.render();
      return;


  - name: draw_choices_with_cursor_and_current_selection
    private: true
    body: |
      ALLEGRO_FONT* text_font = obtain_text_font();

      int current_selection_num = cursor_position; // TODO: Figure out what to do with an out-of-bounds cursor position
      float item_max_width = calculate_list_item_max_width();
      float line_height = calculate_line_height();
      float item_spacing_padding_y = calculate_item_spacing_padding();
      float x = text_padding_x;
      float render_cursor_y = text_padding_y;

      // Calculate item heights
      std::vector<float> item_heights;
      for (auto &list_item : list_items)
      {
         std::vector<float> line_widths = calculate_line_widths(text_font, item_max_width, list_item);
         int this_item_num_lines = line_widths.size();
         float this_item_height = this_item_num_lines * line_height;
         item_heights.push_back(this_item_height);
      }

      // Render the items
      int list_item_num = 0;
      for (auto &list_item : list_items)
      {
         bool this_list_item_is_currently_selected = (list_item_num == current_selection_num);

         al_draw_multiline_text(
            text_font,
            this_list_item_is_currently_selected ? text_color_selected : text_color_not_selected,
            x,
            render_cursor_y,
            item_max_width,
            line_height,
            ALLEGRO_ALIGN_LEFT,
            list_item.c_str()
         );

         render_cursor_y += item_heights[list_item_num] + item_spacing_padding_y;
         list_item_num++;
      }

      return;
    body_dependency_symbols:
      - al_color_html
      - al_draw_rectangle
      - al_draw_filled_rectangle
      - AllegroFlare::Elements::SelectionCursorBox


  - name: calculate_dimensions_for_list_item_at_position
    type: std::tuple<float, float, float, float>
    parameters:
      - name: list_item_position
        type: int
        default_argument: 0
    guards: [ (!list_items.empty()), (list_item_position >= 0), (list_item_position < list_items.size()) ]
    body: |
      ALLEGRO_FONT* text_font = obtain_text_font();
      float item_max_width = calculate_list_item_max_width();
      float line_height = calculate_line_height();
      float item_spacing_padding_y = calculate_item_spacing_padding();

      // Calculate item heights
      std::vector<float> item_heights;
      for (auto &list_item : list_items)
      {
         std::vector<float> line_widths = calculate_line_widths(text_font, item_max_width, list_item);
         int this_item_num_lines = line_widths.size();
         float this_item_height = this_item_num_lines * line_height;
         item_heights.push_back(this_item_height);
      }

      // Calculate height up to this item position
      float summated_items_height_to_this_item = 0;
      for (int i=0; i<list_item_position; i++)
      {
         summated_items_height_to_this_item += (item_heights[i] + item_spacing_padding_y);
      }

      float this_item_height = item_heights[list_item_position];
      float manual_y_offset_due_to_line_height_being_visually_misaligned_on_this_font = 0;
      float this_item_x = text_padding_x * 0.5;
      float this_item_center_y = text_padding_y
                              + summated_items_height_to_this_item
                              + (this_item_height * 0.5)
                              + manual_y_offset_due_to_line_height_being_visually_misaligned_on_this_font;
      float selection_box_width = item_max_width + (text_padding_x * 2) * 0.5f;
      float selection_box_height = this_item_height + (item_spacing_padding_y * 2) * 0.5f;

                   // { x    , y    , width, height }
      return std::tuple<float, float, float, float>{
         this_item_x,
         this_item_center_y - (selection_box_height * 0.5),
         selection_box_width,
         selection_box_height,
      };


  - name: multiline_text_draw_callback
    type: bool
    private: true
    static: true
    parameters:
      - name: line_number
        type: int
        default_argument: 0
      - name: line
        type: const char*
        default_argument: nullptr
      - name: size
        type: int
        default_argument: 0
      - name: extra
        type: void*
        default_argument: nullptr
    body: |
      // TODO: Improve tests on this
      std::pair<ALLEGRO_FONT*, std::vector<float>> &multiline_text_line_number =
         *((std::pair<ALLEGRO_FONT*, std::vector<float>>*)extra);

      // Guard that the font is valid
      ALLEGRO_FONT *font = multiline_text_line_number.first;
      if (!font)
      {
         AllegroFlare::Logger::throw_error("Elements::ListBoxRenderer::multiline_text_draw_callback",
                                           "font cannot be a nullptr");
      }

      // Confirm the line is null-terminated
      char* buffer = new char[size + 1];
      strncpy(buffer, line, size); // Copy the first 'size' characters from 'input' to 'buffer'
      buffer[size] = '\0'; // Null-terminate the 'buffer' explicitly

      // Calculate the width of this line of text
      float this_line_width = al_get_text_width(font, buffer);

      delete[] buffer; // Free the allocated memory when done

      multiline_text_line_number.second.push_back(this_line_width);
      return true;
    body_dependency_symbols:
      - AllegroFlare::Logger
      - AllegroFlare::Elements::DialogBoxFrame


  - name: calculate_line_widths
    type: std::vector<float>
    parameters:
      - name: font
        type: ALLEGRO_FONT*
        default_argument: nullptr
      - name: max_width
        type: float
        default_argument: 0.0f
      - name: text
        type: std::string
        default_argument: '"[unset-text]"'
    body: |
      if (text.empty()) return {};

      std::pair<ALLEGRO_FONT*, std::vector<float>> multiline_text_line_number;
      multiline_text_line_number.first = obtain_text_font();

      al_do_multiline_text(
         font,
         max_width,
         text.c_str(),
         multiline_text_draw_callback,
         (void*)(&multiline_text_line_number)
      );

      // multiline_text_line_number is now modified, and should now be set to the number of lines drawn
      return multiline_text_line_number.second;


  - name: calculate_DEFAULT_BACKFILL_COLOR
    type: ALLEGRO_COLOR
    static: true
    body: |
      return AllegroFlare::Elements::DialogBoxFrame::DEFAULT_BACKFILL_COLOR;


  - name: calculate_DEFAULT_BORDER_COLOR
    type: ALLEGRO_COLOR
    static: true
    body: |
      return AllegroFlare::Elements::DialogBoxFrame::DEFAULT_BORDER_COLOR;


  - name: obtain_text_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ al_is_font_addon_initialized(), al_is_ttf_addon_initialized(), font_bin ]
    body: |
      std::stringstream font_identifier;
      font_identifier << font_name << " " << font_size;
      ALLEGRO_FONT* result_font = font_bin->operator[](font_identifier.str());
      return result_font;


  - name: concat_text
    type: std::string
    private: true
    parameters:
      - name: source_text
        type: std::string
        default_argument: '""'
      - name: length
        type: int
        default_argument: 0
    body: |
      return source_text.substr(0, length);


dependencies:


  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: al_is_system_installed
    headers: [ allegro5/allegro.h ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_draw_filled_rounded_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_color_html
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_draw_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_draw_filled_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: std::vector<std::pair<std::string, std::string>>
    headers: [ vector, utility, string ]
  - symbol: AllegroFlare::Elements::DialogBoxFrame
    headers: [ AllegroFlare/Elements/DialogBoxFrame.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::Elements::SelectionCursorBox
    headers: [ AllegroFlare/Elements/SelectionCursorBox.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::ColorKit
    headers: [ AllegroFlare/ColorKit.hpp ]
  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]
  - symbol: 'AllegroFlare::Interpolators::'
    headers: [ AllegroFlare/Interpolators.hpp ]


