properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true

  - name: list_box
    type: AllegroFlare::Elements::ListBox*
    init_with: nullptr
    constructor_arg: true

  - name: width
    type: float
    init_with: (1920/3.0f)
    constructor_arg: true
    getter: true
    setter: true

  - name: height
    type: float
    init_with: (1080/5.0f)
    constructor_arg: true
    getter: true
    setter: true

  - name: font_name
    type: std::string
    init_with: DEFAULT_FONT_NAME
    constructor_arg: true
    getter: true
    setter: true

  - name: font_size
    type: int
    init_with: DEFAULT_FONT_SIZE
    constructor_arg: true
    getter: true
    setter: true

  - name: text_padding_x
    type: float
    init_with: 52.0f
    constructor_arg: true
    getter: true
    setter: true

  - name: text_padding_y
    type: float
    init_with: 40.0f
    constructor_arg: true
    getter: true
    setter: true

  - name: selection_cursor_box
    type: AllegroFlare::Elements::SelectionCursorBox
    init_with: '{}'
    constructor_arg: false

  - name: DEFAULT_FONT_NAME
    type: char*
    constexpr: true
    static: true
    const: true
    init_with: '(char*)"Inter-Regular.ttf"'

  - name: DEFAULT_FONT_SIZE
    type: int
    constexpr: true
    static: true
    const: true
    init_with: -36


methods:


  - name: render
    guards: [ al_is_system_installed(), al_is_primitives_addon_initialized(), list_box ]
    body: |
      AllegroFlare::Elements::DialogBoxFrame(width, height).render();
      draw_choices_with_cursor_and_current_selection();
      return;
    body_dependency_symbols:
      - AllegroFlare::Elements::DialogBoxFrame


  - name: calculate_list_item_max_width
    type: float
    body: |
      return (width - (text_padding_x * 2));


  - name: calculate_line_height
    type: float
    body: |
      ALLEGRO_FONT* text_font = obtain_text_font();
      return al_get_font_line_height(text_font);


  - name: calculate_item_spacing_padding
    type: float
    body: |
      float line_height = calculate_line_height();
      return line_height * 0.5;


  - name: calculate_content_height
    type: float
    guards: [ al_is_system_installed(), al_is_primitives_addon_initialized(), list_box ]
    body: |
      if (list_box->num_items() == 0) return 0;

      ALLEGRO_FONT* text_font = obtain_text_font();
      float item_max_width = calculate_list_item_max_width();
      float line_height = calculate_line_height();

      // Calculate the item heights
      std::vector<float> item_heights;
      for (auto &option : list_box->get_items())
      {
         int this_item_num_lines = count_num_lines_will_render(text_font, item_max_width, option.first);
         float this_item_height = this_item_num_lines * line_height;
         item_heights.push_back(this_item_height);
      }

      // Sum the item heights
      float summated_items_height = 0;
      for (auto &item_height : item_heights)
      {
         summated_items_height += item_height;
      }

      // Calculate the padding between items
      float summated_item_spacing_padding = calculate_item_spacing_padding() * (list_box->num_items() - 1);

      // Return the height and padding
      return summated_items_height + summated_item_spacing_padding;


  - name: draw_choices_with_cursor_and_current_selection
    private: true
    body: |
       ALLEGRO_FONT* text_font = obtain_text_font();
       //std::vector<std::pair<std::string, std::string>> list_items = obtain_list_box_items();

       int current_selection_num = obtain_list_box_cursor_position();
       ALLEGRO_COLOR text_color_selected = al_color_name("aquamarine");
       ALLEGRO_COLOR text_color_not_selected = al_color_html("ffffff");
       float item_max_width = calculate_list_item_max_width();
       float line_height = calculate_line_height();
       //float item_height = line_height * 1.4f; // TODO: Use a dynamic line-height
       float item_spacing_padding_y = calculate_item_spacing_padding();
       float x = text_padding_x;
       float cursor_y = text_padding_y;

       // Calculate item heights
       std::vector<float> item_heights;
       for (auto &option : list_box->get_items())
       {
          int this_item_num_lines = count_num_lines_will_render(text_font, item_max_width, option.first);
          float this_item_height = this_item_num_lines * line_height;
          item_heights.push_back(this_item_height);
       }

       // Render the items
       int option_num = 0;
       for (auto &option : list_box->get_items())
       {
          bool this_option_is_currently_selected = (option_num == current_selection_num);
          //std::string option_text = option.first;
          //if (this_option_is_currently_selected)
          //{
             //float text_width = al_get_text_width(text_font, option_text.c_str());
             //al_draw_filled_rectangle(
                //x - selection_box_x_padding,
                //start_y - selection_box_y_padding + option_num * line_height,
                //x+text_width + selection_box_x_padding,
                //start_y+line_height + selection_box_y_padding + option_num * line_height,
                //selection_hilight_color
             //);
          //}
          al_draw_multiline_text(
             text_font,
             this_option_is_currently_selected ? text_color_selected : text_color_not_selected,
             x,
             cursor_y,
             item_max_width,
             line_height,
             ALLEGRO_ALIGN_LEFT,
             option.first.c_str()
          );

          cursor_y += item_heights[option_num] + item_spacing_padding_y;
          option_num++;
       }


       /*
       float line_height = al_get_font_line_height(text_font);
       ALLEGRO_COLOR text_color_not_selected = al_color_html("dfdfdf");
       ALLEGRO_COLOR text_color_selected = al_color_html("000000");
       //ALLEGRO_COLOR text_color = al_color_html("66a9bc");
       ALLEGRO_COLOR selection_hilight_color = ALLEGRO_COLOR{1.0, 1.0, 1.0, 1.0};
       float selection_box_x_padding = 24;
       float selection_box_y_padding = 0;
       float x = 200;

       int option_num = 0;
       for (auto &option : list_items)
       {
          bool this_option_is_currently_selected = (option_num == current_selection_num);
          std::string option_text = option.first;
          if (this_option_is_currently_selected)
          {
             float text_width = al_get_text_width(text_font, option_text.c_str());
             al_draw_filled_rectangle(
                x - selection_box_x_padding,
                start_y - selection_box_y_padding + option_num * line_height,
                x+text_width + selection_box_x_padding,
                start_y+line_height + selection_box_y_padding + option_num * line_height,
                selection_hilight_color
             );
          }
          al_draw_text(
             text_font,
             this_option_is_currently_selected ? text_color_selected : text_color_not_selected,
             x,
             start_y + line_height*option_num,
             ALLEGRO_ALIGN_LEFT,
             option_text.c_str()
          );
          option_num++;
       }
       */
       return;
    body_dependency_symbols:
      - al_color_html
      - al_draw_rectangle
      - al_draw_filled_rectangle


  - name: multiline_text_draw_callback
    type: bool
    static: true
    parameters:
      - name: line_number
        type: int
        default_argument: 0
      - name: line
        type: const char*
        default_argument: nullptr
      - name: size
        type: int
        default_argument: 0
      - name: extra
        type: void*
        default_argument: nullptr
    body: |
      int &multiline_text_line_number = *((int*)extra);
      multiline_text_line_number = line_number;
      return true;


  - name: count_num_lines_will_render
    type: int
    parameters:
      - name: font
        type: ALLEGRO_FONT*
        default_argument: nullptr
      - name: max_width
        type: float
        default_argument: 0.0f
      - name: text
        type: std::string
        default_argument: '"[unset-text]"'
    body: |
      if (text.empty()) return 0;

      int multiline_text_line_number = 0;
      al_do_multiline_text(
         font,
         max_width,
         text.c_str(),
         multiline_text_draw_callback,
         (void*)(&multiline_text_line_number)
      );

      // multiline_text_line_number is now modified, and should now be set to the number of lines drawn
      return multiline_text_line_number + 1;


  - name: obtain_text_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ al_is_font_addon_initialized(), al_is_ttf_addon_initialized(), font_bin ]
    body: |
      std::stringstream font_identifier;
      font_identifier << font_name << " " << font_size;
      ALLEGRO_FONT* result_font = font_bin->operator[](font_identifier.str());
      return result_font;


  - name: obtain_list_box_items
    type: std::vector<std::pair<std::string, std::string>>
    private: true
    body: |
      return list_box->get_items();


  - name: obtain_list_box_cursor_position
    type: int
    private: true
    body: |
      return list_box->get_cursor_position();


  - name: concat_text
    type: std::string
    private: true
    parameters:
      - name: source_text
        type: std::string
        default_argument: '""'
      - name: length
        type: int
        default_argument: 0
    body: |
      return source_text.substr(0, length);


dependencies:


  - symbol: al_is_system_installed
    headers: [ allegro5/allegro.h ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_draw_filled_rounded_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_color_html
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_draw_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_draw_filled_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: std::vector<std::pair<std::string, std::string>>
    headers: [ vector, utility, string ]
  - symbol: AllegroFlare::Elements::DialogBoxFrame
    headers: [ AllegroFlare/Elements/DialogBoxFrame.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: AllegroFlare::Elements::ListBox
    headers: [ AllegroFlare/Elements/ListBox.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::Elements::SelectionCursorBox
    headers: [ AllegroFlare/Elements/SelectionCursorBox.hpp ]


