properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: text
    type: std::string
    init_with: '"[text-not-set]"'
    constructor_arg: true
    getter: true
    setter: true

  - name: font_name
    type: std::string
    init_with: '"Inter-Regular.ttf"'
    constructor_arg: true
    getter: true
    setter: true

  - name: font_size
    type: int
    init_with: -60
    constructor_arg: true
    getter: true
    setter: true

  - name: text_color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{1, 1, 1, 1}
    constructor_arg: true
    getter: true
    setter: true

  - name: width
    type: float
    init_with: 900.0f
    constructor_arg: true
    getter: true
    setter: true

  - name: line_height_multiplier
    type: float
    init_with: 1.25f
    constructor_arg: true
    getter: true
    setter: true

  - name: line_height_padding
    type: float
    init_with: 0.0f
    constructor_arg: true
    getter: true
    setter: true

  - name: revealed_characters_count
    type: int
    init_with: 0
    getter: true

  - name: reveal_started_at
    type: float
    init_with: 0.0f
    getter: true

  - name: reveal_ended_at
    type: float
    init_with: 0.0f
    getter: true

  - name: reveal_rate_characters_per_second
    type: float
    init_with: DEFAULT_REVEAL_RATE_CHARACTERS_PER_SECOND
    getter: true
    setter: explicit

  - name: all_characters_are_revealed
    type: bool
    init_with: false
    getter: true
    setter: false

  - name: DEFAULT_REVEAL_RATE_CHARACTERS_PER_SECOND
    type: float
    init_with: 60.0f
    static: true
    constexpr: true

  - name: MIN_REVEAL_RATE_CHARACTERS_PER_SECOND
    type: float
    init_with: 0.0001f
    static: true
    constexpr: true


methods:


  - name: start
    guards: [ al_is_system_installed() ]
    body: |
      reveal_started_at = al_get_time(); // TODO: Replace with injected "time_now"
      reveal_ended_at = 0;
      revealed_characters_count = 0;
      all_characters_are_revealed = false;
      return;


  - name: set_reveal_rate_characters_per_second
    parameters:
      - name: reveal_rate_characters_per_second
        type: float
        default_argument: DEFAULT_REVEAL_RATE_CHARACTERS_PER_SECOND
    guards: [ (reveal_rate_characters_per_second >= MIN_REVEAL_RATE_CHARACTERS_PER_SECOND) ]
    body: |
      this->reveal_rate_characters_per_second = reveal_rate_characters_per_second;
      return;


  - name: update
    guards: [ al_is_system_installed() ]
    body: |
      if (all_characters_are_revealed) return;

      float time_now = al_get_time(); // TODO: Replace with injected "time_now"
      float age = (time_now - reveal_started_at);
      int theoretical_revealed_characters_count = (int)(age * reveal_rate_characters_per_second);
      revealed_characters_count = std::min(theoretical_revealed_characters_count, (int)text.size());
      if (revealed_characters_count >= text.size())
      {
         all_characters_are_revealed = true;
         reveal_ended_at = time_now;
      }

      return;
    body_dependency_symbols:
      - std::min


  - name: render
    guards: [ al_is_system_installed(), al_is_font_addon_initialized() ]
    body: |
      ALLEGRO_FONT *text_font = obtain_font();

      std::string revealed_text = generate_revealed_text();
      if (!revealed_text.empty())
      {
         al_draw_multiline_text(
               text_font,
               text_color,
               0,
               0,
               width,
               al_get_font_line_height(text_font)*line_height_multiplier + line_height_padding,
               0,
               revealed_text.c_str()
            );
      }

      return;
    body_dependency_symbols:
      - al_draw_multiline_text
      - AllegroFlare::Color


  - name: reveal_all_characters
    guards: [ al_is_system_installed() ]
    body: |
      revealed_characters_count = text.size();
      all_characters_are_revealed = true;
      reveal_ended_at = al_get_time(); // TODO: Consider passing a "time_now"


  - name: generate_revealed_text
    private: true
    type: std::string
    body: |
      return text.substr(0, revealed_characters_count);


  - name: obtain_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      std::stringstream composite_font_str;
      composite_font_str << font_name << " " << font_size;
      return font_bin->auto_get(composite_font_str.str());


dependencies:


  - symbol: AllegroFlare::Color
    headers: [ AllegroFlare/Color.hpp ]
  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::EventEmitter*
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: al_draw_multiline_text
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_draw_rounded_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::interpolator::*
    headers: [ AllegroFlare/Interpolators.hpp ]
  - symbol: fmod
    headers: [ cmath ]
  - symbol: std::min, std::max
    headers: [ algorithm ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]


