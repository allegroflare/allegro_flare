properties:


  - name: text
    type: std::string
    init_with: '"[text-not-set]"'
    constructor_arg: true
    getter: true
    setter: true

  - name: revealed_characters_count
    type: int
    init_with: 0
    getter: true
    getter_ref: false
    setter: false

  - name: reveal_started_at
    type: float
    init_with: 0.0f
    getter: true

  - name: reveal_ended_at
    type: float
    init_with: 0.0f
    getter: true

  - name: reveal_rate_characters_per_second
    type: float
    init_with: DEFAULT_REVEAL_RATE_CHARACTERS_PER_SECOND
    getter: true
    setter: explicit

  - name: all_characters_are_revealed
    type: bool
    init_with: false
    getter: true
    setter: false

  - name: DEFAULT_REVEAL_RATE_CHARACTERS_PER_SECOND
    type: float
    init_with: 60.0f
    static: true
    constexpr: true

  - name: MIN_REVEAL_RATE_CHARACTERS_PER_SECOND
    type: float
    init_with: 0.0001f
    static: true
    constexpr: true


documentation:


  - todos:
      - consider if al_is_system_installed() could be removed and/or a "current_time" or "age" could be passed in


methods:


  - name: start
    guards: [ al_is_system_installed() ]
    body: |
      reveal_started_at = al_get_time(); // TODO: Replace with injected "time_now"
      reveal_ended_at = 0;
      revealed_characters_count = 0;
      all_characters_are_revealed = false;
      return;
    body_dependency_symbols:
      - al_is_system_installed


  - name: set_reveal_rate_characters_per_second
    parameters:
      - name: reveal_rate_characters_per_second
        type: float
        default_argument: DEFAULT_REVEAL_RATE_CHARACTERS_PER_SECOND
    guards: [ (reveal_rate_characters_per_second >= MIN_REVEAL_RATE_CHARACTERS_PER_SECOND) ]
    body: |
      this->reveal_rate_characters_per_second = reveal_rate_characters_per_second;
      return;


  - name: update
    guards: [ al_is_system_installed() ]
    body: |
      if (all_characters_are_revealed) return;

      float time_now = al_get_time(); // TODO: Replace with injected "time_now"
      float age = (time_now - reveal_started_at);
      int theoretical_revealed_characters_count = (int)(age * reveal_rate_characters_per_second);
      revealed_characters_count = std::min(theoretical_revealed_characters_count, (int)text.size());
      if (revealed_characters_count >= text.size())
      {
         all_characters_are_revealed = true;
         reveal_ended_at = time_now;
      }

      return;
    body_dependency_symbols:
      - std::min
      - al_is_system_installed


  - name: reveal_all_characters
    guards: [ al_is_system_installed() ]
    body: |
      revealed_characters_count = text.size();
      all_characters_are_revealed = true;
      reveal_ended_at = al_get_time(); // TODO: Consider passing a "time_now"
    body_dependency_symbols:
      - al_is_system_installed


  - name: generate_revealed_text
    private: true
    type: std::string
    body: |
      return text.substr(0, revealed_characters_count);


dependencies:


  - symbol: al_is_system_installed
    headers: [ allegro5/allegro.h ]
  - symbol: std::min, std::max
    headers: [ algorithm ]


