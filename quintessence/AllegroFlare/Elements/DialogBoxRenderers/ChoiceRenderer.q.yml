properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: choice_dialog_box
    type: AllegroFlare::Elements::DialogBoxes::Choice*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: selection_cursor_box
    type: AllegroFlare::Elements::SelectionCursorBox*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: width
    type: float
    init_with: (1920/2.0f)
    constructor_arg: true
    getter: true
    setter: true

  - name: height
    type: float
    init_with: (1080/5.0f)
    constructor_arg: true
    getter: true
    setter: true

  - name: font_name
    type: std::string
    init_with: DEFAULT_FONT_NAME
    constructor_arg: true
    getter: true
    setter: true

  - name: font_size
    type: int
    init_with: DEFAULT_FONT_SIZE
    constructor_arg: true
    getter: true
    setter: true

  - name: text_padding_x
    type: float
    init_with: 52.0f
    constructor_arg: true
    getter: true
    setter: true

  - name: text_padding_y
    type: float
    init_with: 40.0f
    constructor_arg: true
    getter: true
    setter: true

  - name: num_revealed_characters
    type: int
    init_with: 999
    constructor_arg: true
    getter: true
    setter: true

  - name: is_finished
    type: bool
    init_with: false
    constructor_arg: true
    getter: true
    setter: true

  - name: page_is_finished
    type: bool
    init_with: false
    constructor_arg: true
    getter: true
    setter: true

  - name: page_finished_at
    type: float
    init_with: 0.0f
    constructor_arg: true
    getter: true
    setter: true

  - name: at_last_page
    type: bool
    init_with: false
    constructor_arg: true
    getter: true
    setter: true

  - name: age
    type: float
    init_with: 999.0f
    constructor_arg: true
    getter: true
    setter: true

  - name: DEFAULT_FONT_NAME
    type: char*
    constexpr: true
    static: true
    const: true
    init_with: '(char*)"Inter-Regular.ttf"'

  - name: DEFAULT_FONT_SIZE
    type: int
    constexpr: true
    static: true
    const: true
    init_with: -36


methods:


  - name: render_frame
    private: true
    body: |
      float normalized_age = std::max(std::min(1.0f, age), 0.0f);
      float curved_time = AllegroFlare::interpolator::double_fast_in(normalized_age);
      float inv_curved_time = 1.0 - curved_time;

      AllegroFlare::Placement2D frame_place = { width/2, height/2, width, height, };
      frame_place.position.y += 10 * inv_curved_time;
      frame_place.start_transform();
      AllegroFlare::Elements::DialogBoxFrame dialog_box_frame(width, height);
      dialog_box_frame.set_opacity(curved_time);
      dialog_box_frame.render();
      frame_place.restore_transform();
      return;
    body_dependency_symbols:
      - AllegroFlare::Placement2D


  - name: render_text
    private: true
    body: |
      draw_styled_revealed_text(width, obtain_choice_dialog_box_prompt(), num_revealed_characters);
      return;


  - name: render
    guards:
      - al_is_system_installed()
      - choice_dialog_box
    body: |
      render_frame();

      if (is_finished)
      {
         draw_special_state_empty_text(width, height);
      }
      else
      {
         render_text();
         draw_choices_with_cursor_and_current_selection();
      }
      return;
    body_dependency_symbols:
      - al_color_html
      - AllegroFlare::Elements::DialogBoxFrame
      - AllegroFlare::Elements::DialogButton
      - AllegroFlare::Interpolators::*


  - name: calculate_dimensions_of_current_selection
    type: std::tuple<float, float, float, float>
    body: |
      //std::tuple<float, float, float, float> result;
      AllegroFlare::Elements::ListBoxRenderer list_box_renderer_for_calculating_dimensions = build_list_box_renderer();
      return list_box_renderer_for_calculating_dimensions.calculate_dimensions_for_list_item_at_position(
            obtain_choice_dialog_box_cursor_position()
         );


  - name: helper__reposition_selection_cursor_box_dimensions_to
    static: true
    parameters:
      - name: selection_cursor_box
        type: AllegroFlare::Elements::SelectionCursorBox*
        default_argument: nullptr
      - name: dimensions
        type: std::tuple<float, float, float, float>
        default_argument: '{}'
    guards: [ selection_cursor_box ]
    body: |
      float &x = std::get<0>(dimensions);
      float &y = std::get<1>(dimensions);
      float &width = std::get<2>(dimensions);
      float &height = std::get<3>(dimensions);
      selection_cursor_box->reposition_to(x, y);
      selection_cursor_box->resize_to(width, height);
      return;


  - name: helper__set_selection_cursor_box_dimensions_to
    static: true
    parameters:
      - name: selection_cursor_box
        type: AllegroFlare::Elements::SelectionCursorBox*
        default_argument: nullptr
      - name: dimensions
        type: std::tuple<float, float, float, float>
        default_argument: '{}'
    guards: [ selection_cursor_box ]
    body: |
      float &x = std::get<0>(dimensions);
      float &y = std::get<1>(dimensions);
      float &width = std::get<2>(dimensions);
      float &height = std::get<3>(dimensions);
      selection_cursor_box->set_position(x, y);
      selection_cursor_box->set_size(width, height);
      return;


  - name: get_left_indent
    type: float
    body: return 80;


  - name: build_list_box_renderer
    type: AllegroFlare::Elements::ListBoxRenderer
    guards: [ (choice_dialog_box) && (choice_dialog_box->get_breakout_list_box_active()) ]
    body: |
      // Design some custom colors for the breakout box
      ALLEGRO_COLOR selection_frame_color = AllegroFlare::Elements::ListBoxRenderer::DEFAULT_SELECTION_COLOR;
      ALLEGRO_COLOR frame_backfill_color = AllegroFlare::ColorKit::mix(
            AllegroFlare::Elements::DialogBoxFrame::DEFAULT_BACKFILL_COLOR,
            selection_frame_color,
            0.03
         );
      ALLEGRO_COLOR frame_border_color = AllegroFlare::ColorKit::mix(
            AllegroFlare::Elements::DialogBoxFrame::DEFAULT_BORDER_COLOR,
            selection_frame_color,
            0.4
         );
      ALLEGRO_COLOR text_color_not_selected = AllegroFlare::ColorKit::mix(
            ALLEGRO_COLOR{1.0f, 1.0f, 1.0f, 1.0f},
            selection_frame_color,
            0.3
         );

      float breakout_list_box_age = choice_dialog_box->infer_breakout_list_box_age();

      float left_indent = get_left_indent();
      AllegroFlare::Elements::ListBoxRenderer list_box_renderer(
         font_bin,
         nullptr, // bitmap_bin,
         obtain_choice_dialog_box_option_labels()
      );
      // TODO: Interesting visual bug, when "set_width_to_fit..." is called after "set_height_to_fit..." then
      // there could be a miss-alignment of the content and its presentation. Investigate this case and see if you can
      // restore it
      list_box_renderer.set_width_to_fit_content_or_max_and_min(width - left_indent*2);
      list_box_renderer.set_height_to_fit_content();
      list_box_renderer.set_text_color_not_selected(text_color_not_selected);
      list_box_renderer.set_frame_backfill_color(frame_backfill_color);
      list_box_renderer.set_frame_border_color(frame_border_color);
      list_box_renderer.set_age(breakout_list_box_age);

      // Set the cursor position
      list_box_renderer.set_cursor_position(
         obtain_choice_dialog_box_cursor_position()
      );

      return list_box_renderer;


  - name: draw_choices_with_cursor_and_current_selection
    body: |
      if (!choice_dialog_box->get_breakout_list_box_active()) return;

      // Build up our list_box_renderer
      AllegroFlare::Elements::ListBoxRenderer list_box_renderer = build_list_box_renderer();
      float left_indent = get_left_indent();

      // Build up our selection cursor
      bool showing_cursor = choice_dialog_box->get_cursor_active();
      AllegroFlare::Elements::SelectionCursorBox local_selection_cursor_box;
      AllegroFlare::Elements::SelectionCursorBox *selection_cursor_box_to_use = selection_cursor_box
                                                                              ? selection_cursor_box
                                                                              : &local_selection_cursor_box
                                                                              ;
      if (selection_cursor_box_to_use == &local_selection_cursor_box)
      {
         // In this case, we're using our local selection_cursor_box. We need to position it manually
         // Init the cursor position to the current selection
         std::tuple<float, float, float, float> current_selection_dimensions =
            list_box_renderer.calculate_dimensions_for_list_item_at_position(
               obtain_choice_dialog_box_cursor_position()
            );
         float current_selection_x = std::get<0>(current_selection_dimensions);
         float current_selection_y = std::get<1>(current_selection_dimensions);
         float current_selection_width = std::get<2>(current_selection_dimensions);
         float current_selection_height = std::get<3>(current_selection_dimensions);
         selection_cursor_box_to_use->set_position(current_selection_x, current_selection_y);
         selection_cursor_box_to_use->set_size(current_selection_width, current_selection_height);
      }

      // Build a placement for the breakout box
      // TODO: Consider adding options for this position
      AllegroFlare::Placement2D choice_box_place{
         width - left_indent,
         20,
         list_box_renderer.get_width(),
         list_box_renderer.get_height()
      };
      choice_box_place.align = { 1.0, 1.0 };

      choice_box_place.start_transform();
      list_box_renderer.render();
      if (showing_cursor) selection_cursor_box_to_use->render();
      choice_box_place.restore_transform();
      return;
    body_dependency_symbols:
      - AllegroFlare::Elements::SelectionCursorBox
      - AllegroFlare::Elements::ListBoxRenderer
      - AllegroFlare::Placement2D
      - AllegroFlare::ColorKit


  - name: draw_special_state_empty_text
    private: true
    parameters:
      - name: width
        type: float
        default_argument: 1
      - name: height
        type: float
        default_argument: 1
    body: |
      ALLEGRO_FONT* text_font = obtain_dialog_font();
      ALLEGRO_COLOR text_color = al_color_html("303030");
      float line_height = al_get_font_line_height(text_font);
      std::string text = "[dialog finished]";
      al_draw_text(
         text_font,
         text_color,
         width * 0.5,
         height * 0.5 - line_height * 0.5,
         ALLEGRO_ALIGN_CENTER,
         text.c_str()
      );
      return;


  - name: draw_styled_revealed_text
    parameters:
      - name: max_width
        type: float
        default_argument: 1
      - name: text
        type: std::string
        default_argument: '"[unset-text]"'
      - name: num_revealed_characters
        type: int
        default_argument: 999
    body: |
      //float text_padding_x = 40.0f;
      //float text_padding_y = 30.0f;
      float text_box_max_width = max_width - (text_padding_x * 2);
      ALLEGRO_FONT* text_font = obtain_dialog_font();
      float line_height = al_get_font_line_height(text_font);
      //ALLEGRO_COLOR text_color = al_color_html("66a9bc");
      ALLEGRO_COLOR text_color = ALLEGRO_COLOR{1, 1, 1, 1}; //al_color_name("skyblue");
      //int num_revealed_characters = obtain_dialog_box_num_revealed_characters();

      al_draw_multiline_text(
         text_font,
         text_color,
         text_padding_x,
         text_padding_y,
         text_box_max_width,
         line_height,
         ALLEGRO_ALIGN_LEFT,
         concat_text(text, num_revealed_characters).c_str()
      );
      return;


  - name: concat_text
    private: true
    type: std::string
    parameters:
      - name: source_text
        type: std::string
        default_argument: '""'
      - name: length
        type: int
        default_argument: 0
    body: |
      return source_text.substr(0, length);


  - name: obtain_choice_dialog_box_prompt
    type: std::string
    private: true
    guards: [ choice_dialog_box ]
    body: |
      return choice_dialog_box->get_prompt_revealed_text();


  - name: obtain_choice_dialog_box_options
    type: std::vector<std::pair<std::string, std::string>>
    private: true
    guards: [ choice_dialog_box ]
    body: |
      return choice_dialog_box->get_options();


  - name: obtain_choice_dialog_box_option_labels
    type: std::vector<std::string>
    private: true
    guards: [ choice_dialog_box ]
    body: |
      return choice_dialog_box->get_options_labels();


  - name: obtain_choice_dialog_box_cursor_position
    type: int
    private: true
    guards: [ choice_dialog_box ]
    body: |
      return choice_dialog_box->get_cursor_position();


  - name: obtain_dialog_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ al_is_font_addon_initialized(), al_is_ttf_addon_initialized(), font_bin ]
    body: |
      std::stringstream font_identifier;
      font_identifier << font_name << " " << font_size;
      ALLEGRO_FONT* result_font = font_bin->operator[](font_identifier.str());
      return result_font;


dependencies:


  - symbol: al_is_system_installed
    headers: [ allegro5/allegro.h ]
  - symbol: al_get_current_display
    headers: [ allegro5/allegro.h ]
  - symbol: al_color_html
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxFrame
    headers: [ AllegroFlare/Elements/DialogBoxFrame.hpp ]
  - symbol: AllegroFlare::Elements::DialogButton
    headers: [ AllegroFlare/Elements/DialogButton.hpp ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: 'AllegroFlare::Interpolators::'
    headers: [ AllegroFlare/Interpolators.hpp ]
  - symbol: AllegroFlare::Elements::SelectionCursorBox
    headers: [ AllegroFlare/Elements/SelectionCursorBox.hpp ]
  - symbol: AllegroFlare::Elements::ListBoxRenderer
    headers: [ AllegroFlare/Elements/ListBoxRenderer.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::Choice
    headers: [ AllegroFlare/Elements/DialogBoxes/Choice.hpp ]
  - symbol: AllegroFlare::ColorKit
    headers: [ AllegroFlare/ColorKit.hpp ]


