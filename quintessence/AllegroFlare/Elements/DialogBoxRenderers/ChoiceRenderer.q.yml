properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true

  - name: choice_dialog_box
    type: Krampus21::DialogBoxes::Choice*
    init_with: nullptr
    constructor_arg: true

  - name: width
    type: float
    init_with: 1
    constructor_arg: true

  - name: height
    type: float
    init_with: 1
    constructor_arg: true


functions:


  - name: render
    guards: [ al_is_system_installed(), choice_dialog_box ]
    body: |
      Krampus21::Elements::DialogBoxFrame(width, height).render();
      draw_prompt_text();
      draw_choices_with_cursor_and_current_selection(85);
      return;
    body_dependency_symbols:
      - Krampus21::Elements::DialogBoxFrame


  - name: draw_prompt_text
    body: |
      int dialog_box_num_revealed_characters = 999;
      std::string text = obtain_choice_dialog_box_prompt();
      float text_padding_x = 40.0f;
      float text_padding_y = 30.0f;
      float text_box_max_width = width - (text_padding_x * 2);
      ALLEGRO_FONT* text_font = obtain_dialog_font();
      float line_height = al_get_font_line_height(text_font);
      ALLEGRO_COLOR text_color = al_color_html("66a9bc");

      al_draw_multiline_text(
         text_font,
         text_color,
         text_padding_x,
         text_padding_y,
         text_box_max_width,
         line_height,
         ALLEGRO_ALIGN_LEFT,
         concat_text(text, dialog_box_num_revealed_characters).c_str()
      );
      return;
    body_dependency_symbols:
      - al_color_name


  - name: draw_choices_with_cursor_and_current_selection
    parameters:
      - name: start_y
        type: float
        default_argument: 0
    body: |
       ALLEGRO_FONT* text_font = obtain_dialog_font();
       std::vector<std::pair<std::string, std::string>> options = obtain_choice_dialog_box_options();
       int current_selection_num = obtain_choice_dialog_box_cursor_position();
       float line_height = al_get_font_line_height(text_font);
       ALLEGRO_COLOR text_color = al_color_html("66a9bc");
       ALLEGRO_COLOR selection_hilight_color = ALLEGRO_COLOR{0.1, 0.1, 0.1, 0.1};
       float selection_box_x_padding = 18;
       float selection_box_y_padding = 0;
       float x = 200;

       int option_num = 0;
       for (auto &option : options)
       {
          bool this_option_is_currently_selected = (option_num == current_selection_num);
          std::string option_text = option.first;
          if (this_option_is_currently_selected)
          {
             float text_width = al_get_text_width(text_font, option_text.c_str());
             al_draw_filled_rectangle(
                x - selection_box_x_padding,
                start_y - selection_box_y_padding + option_num * line_height,
                x+text_width + selection_box_x_padding,
                start_y+line_height + selection_box_y_padding + option_num * line_height,
                selection_hilight_color
             );
          }
          al_draw_text(
             text_font,
             text_color,
             x,
             start_y + line_height*option_num,
             ALLEGRO_ALIGN_LEFT,
             option_text.c_str()
          );
          option_num++;
       }
       return;
    body_dependency_symbols:
      - al_draw_rectangle
      - al_draw_filled_rectangle


  - name: obtain_dialog_font
    guards: [ al_is_font_addon_initialized(), al_is_ttf_addon_initialized(), font_bin ]
    private: true
    type: ALLEGRO_FONT*
    body: |
      static const std::string FONT_IDENTIFIER = "Purista Medium.ttf -50";
      ALLEGRO_FONT* result_font = font_bin->operator[](FONT_IDENTIFIER);
      return result_font;


  - name: obtain_choice_dialog_box_prompt
    type: std::string
    private: true
    guards: [ choice_dialog_box ]
    body: |
      return choice_dialog_box->get_prompt();


  - name: obtain_choice_dialog_box_options
    type: std::vector<std::pair<std::string, std::string>>
    private: true
    guards: [ choice_dialog_box ]
    body: |
      return choice_dialog_box->get_options();


  - name: obtain_choice_dialog_box_cursor_position
    type: int
    private: true
    guards: [ choice_dialog_box ]
    body: |
      return choice_dialog_box->get_cursor_position();


  - name: concat_text
    type: std::string
    private: true
    guards: [ choice_dialog_box ]
    parameters:
      - name: source_text
        type: std::string
        default_argument: '""'
      - name: length
        type: int
        default_argument: 0
    body: |
      return source_text.substr(0, length);


dependencies:


  - symbol: AllegroFlare::BitmapBin*
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: Krampus21::DialogBoxes::Choice*
    headers: [ Krampus21/DialogBoxes/Choice.hpp ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro.h ]
  - symbol: al_is_system_installed
    headers: [ allegro5/allegro.h ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_draw_filled_rounded_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_color_html
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_draw_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_draw_filled_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: std::vector<std::pair<std::string, std::string>>
    headers: [ vector, utility, string ]
  - symbol: Krampus21::Elements::DialogBoxFrame
    headers: [ Krampus21/Elements/DialogBoxFrame.hpp ]


