properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: text
    type: std::string
    init_with: '"[text-not-set]"'
    constructor_arg: true
    getter: true
    setter: true

  - name: revealed_characters_count
    type: int
    init_with: 0
    constructor_arg: true
    getter: true
    setter: true

  - name: surface_width
    type: float
    init_with: 1920
    getter: true
    setter: true

  - name: surface_height
    type: float
    init_with: 1080
    getter: true
    setter: true

  - name: top_padding
    type: float
    init_with: 400
    getter: true
    setter: true

  - name: left_padding
    type: float
    init_with: 360
    getter: true
    setter: true

  - name: right_padding
    type: float
    init_with: 360
    getter: true
    setter: true

  - name: bottom_padding
    type: float
    init_with: 400
    getter: true
    setter: true

  - name: line_height_multiplier
    type: float
    init_with: 1.75f
    getter: true
    setter: true

  - name: line_height_padding
    type: float
    init_with: 0.0f
    getter: true
    setter: true

  - name: font_name
    type: std::string
    init_with: DEFAULT_FONT_NAME
    getter: true
    setter: true

  - name: font_size
    type: int
    init_with: DEFAULT_FONT_SIZE
    getter: true
    setter: true

  - name: text_color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{1, 1, 1, 1}
    getter: true
    setter: true

  - name: DEFAULT_FONT_NAME
    type: char*
    constexpr: true
    static: true
    const: true
    init_with: '(char*)"Inter-Regular.ttf"'

  - name: DEFAULT_FONT_SIZE
    type: int
    constexpr: true
    static: true
    const: true
    init_with: -36


methods:


  - name: render
    guards: [ al_is_system_installed(), al_is_font_addon_initialized(), al_is_primitives_addon_initialized() ]
    body: |
      ALLEGRO_COLOR transparent_color = ALLEGRO_COLOR{0, 0, 0, 0};
      ALLEGRO_COLOR backfill_color = ALLEGRO_COLOR{0, 0, 0, 0.7};
      float gradient_depth = 140;
      float gradient_h_depth = gradient_depth * 0.5;
      ALLEGRO_FONT *text_font = obtain_font();

      // Draw top gradient prim
      draw_gradient_prim(
         top_padding/2 - gradient_h_depth,
         top_padding/2 + gradient_h_depth,
         transparent_color,
         backfill_color
      );
      
      al_draw_filled_rectangle(
         0,
         top_padding/2 + gradient_h_depth,
         surface_width,
         surface_height - bottom_padding/2 - gradient_h_depth,
         ALLEGRO_COLOR{0.0, 0.0, 0.0, 0.7}
      );

      // Draw bottom gradient prim
      draw_gradient_prim(
         surface_height - bottom_padding/2 - gradient_h_depth,
         surface_height - bottom_padding/2 + gradient_h_depth,
         backfill_color,
         transparent_color
      );

      // Draw the text
      std::string revealed_text = generate_revealed_text();
      if (!revealed_text.empty())
      {
         float box_width = surface_width - (left_padding + right_padding);
         al_draw_multiline_text(
            text_font,
            text_color,
            left_padding,
            top_padding,
            box_width,
            al_get_font_line_height(text_font)*line_height_multiplier + line_height_padding,
            0,
            revealed_text.c_str()
         );
      }

      return;
    body_dependency_symbols:
      - al_draw_filled_rectangle
      - al_draw_multiline_text
      - AllegroFlare::Color


  - name: generate_revealed_text
    type: std::string
    body: |
      return text.substr(0, revealed_characters_count);


  - name: draw_gradient_prim
    parameters:
      - name: y1
        type: float
        default_argument: 0
      - name: y2
        type: float
        default_argument: 0
      - name: top_color
        type: ALLEGRO_COLOR
        default_argument: ALLEGRO_COLOR{0, 0, 0, 0}
      - name: bottom_color
        type: ALLEGRO_COLOR
        default_argument: ALLEGRO_COLOR{0, 0, 0, 0.7}
    guards: [ al_is_primitives_addon_initialized(), (y2 > y1) ]
    body: |
      ALLEGRO_VERTEX v[4];
      float padding = 0;
      float w = surface_width;
      float h = y2-y1;
      
      v[0] = AllegroFlare::build_vertex(0+padding, y1+0+padding, 0, top_color, 0, 0);
      v[1] = AllegroFlare::build_vertex(w-padding, y1+0+padding, 0, top_color, 0, 0);
      v[2] = AllegroFlare::build_vertex(w-padding, y1+h-padding, 0, bottom_color, 0, 0);
      v[3] = AllegroFlare::build_vertex(0+padding, y1+h-padding, 0, bottom_color, 0, 0);

      // draw it to the surface
      al_draw_prim(v, NULL, NULL, 0, 4, ALLEGRO_PRIM_TRIANGLE_FAN);
      return;
    body_dependency_symbols:
      - AllegroFlare::build_vertex


  - name: all_characters_are_revealed
    type: bool
    body: |
      return revealed_characters_count >= text.size();


  - name: obtain_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      std::stringstream composite_font_str;
      composite_font_str << font_name << " " << font_size;
      return font_bin->auto_get(composite_font_str.str());


  - name: obtain_next_button_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      std::stringstream composite_font_str;
      composite_font_str << font_name << " " << font_size+20;
      return font_bin->auto_get(composite_font_str.str());


dependencies:


  - symbol: AllegroFlare::Elements::StoryboardPages::Base
    headers: [ AllegroFlare/Elements/StoryboardPages/Base.hpp ]
  - symbol: AllegroFlare::Color
    headers: [ AllegroFlare/Color.hpp ]
  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::EventEmitter*
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: al_draw_multiline_text
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_draw_rounded_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_draw_filled_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::interpolator::*
    headers: [ AllegroFlare/Interpolators.hpp ]
  - symbol: fmod
    headers: [ cmath ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: ALLEGRO_VERTEX[4]
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::build_vertex
    headers: [ AllegroFlare/Useful.hpp ]


