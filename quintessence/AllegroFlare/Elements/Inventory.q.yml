properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    setter: true
    constructor_arg: true

  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: af_inventory
    type: AllegroFlare::Inventory*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: inventory_index
    type: AllegroFlare::InventoryIndex*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: inventory_dictionary
    type: AllegroFlare::InventoryDictionary*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: place
    type: AllegroFlare::Placement2D
    init_with: '{ 1920/2, 1080/2, 1300, 700 }'
    getter: true
    getter_ref: true
    setter: true

  - name: cursor_x
    type: int
    init_with: 0
    getter: true

  - name: cursor_y
    type: int
    init_with: 0
    getter: true

  - name: num_columns
    type: int
    init_with: 4
    getter: true
    setter: false

  - name: num_rows
    type: int
    init_with: 3
    getter: true
    setter: false

  - name: active
    type: bool
    init_with: false
    getter: true

  - name: details_reveal_counter
    type: float
    init_with: 0.0f
    getter: true

  - name: details_num_revealed_characters
    type: int
    init_with: 999
    getter: true

  - name: reveal_counter
    type: float
    init_with: 0
    getter: true

  - name: item_in_details_pane
    type: int
    init_with: 0
    getter: true

  - name: item_in_details_pane_set_at
    type: float
    init_with: -999
    getter: true

  - name: inventory_items_left_padding
    type: float
    init_with: 80.0f
    getter: true
    setter: true

  - name: inventory_items_top_padding
    type: float
    init_with: 80.0f
    getter: true
    setter: true

  - name: inventory_items_box_size_x
    type: float
    init_with: 150.0
    getter: true
    setter: true

  - name: inventory_items_box_size_y
    type: float
    init_with: 150.0
    getter: true
    setter: true

  - name: inventory_items_box_gutter_x
    type: float
    init_with: 20.0f
    getter: true
    setter: true

  - name: inventory_items_box_gutter_y
    type: float
    init_with: 20.0f
    getter: true
    setter: true

  - name: cursor_move_sound_identifier
    type: std::string
    init_with: '"menu-click-01.ogg"'
    getter: true
    setter: true

  - name: show_background
    type: bool
    init_with: false
    getter: true
    setter: true

  - name: show_backframe
    type: bool
    init_with: true
    getter: true
    setter: true

  - name: show_title_text
    type: bool
    init_with: true
    getter: true
    setter: true

  - name: draw_details_pane_func
    type: std::function<void(AllegroFlare::Elements::Inventory*, void*)>
    init_with: ''
    getter: true
    setter: true

  - name: draw_details_pane_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: draw_inventory_item_func
    type: std::function<void(AllegroFlare::Elements::Inventory*, float, float, int, int, int, void*)>
    init_with: ''
    getter: true
    setter: true

  - name: draw_inventory_item_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: render_selectable_items_before_details_pane
    type: bool
    init_with: true
    getter: true
    setter: true

  - name: inventory_show_sound_identifier
    type: std::string
    init_with: '""'
    getter: true
    setter: true

  - name: inventory_hide_sound_identifier
    type: std::string
    init_with: '""'
    getter: true
    setter: true

  - name: sound_is_disabled
    type: bool
    init_with: false
    getter: true


methods:


  - name: update
    guards: [ font_bin, bitmap_bin, af_inventory ]
    body: |
      float reveal_speed = (1.0f/60.0f) * 4;  // 60 fps
      if (active) reveal_counter += reveal_speed;
      else reveal_counter -= reveal_speed;
      if (reveal_counter < 0.0) reveal_counter = 0.0;
      if (reveal_counter >= 1.0) reveal_counter = 1.0;

      float details_reveal_speed = (1.0f/60.0f) * 4;  // 60 fps
      details_reveal_counter += details_reveal_speed;
      if (details_reveal_counter >= 1.0) details_reveal_counter = 1.0;

      details_num_revealed_characters += 2;
      if (details_num_revealed_characters > 999) details_num_revealed_characters = 999;
      return;


  - name: activate
    body: |
      active = true;
      reveal_counter = 1.0;
      details_num_revealed_characters = 999;
      details_reveal_counter = 1.0;
      set_details_pane();
      return;


  - name: deactivate
    body: |
      active = false;
      reveal_counter = 0.0;
      details_num_revealed_characters = 0;
      details_reveal_counter = 0.0;
      return;


  - name: refresh
    body: |
      set_details_pane();
      return;


  - name: show
    type: bool
    body: |
      if (active) return false;
      active = true;
      details_reveal_counter = 0.0f;
      details_num_revealed_characters = 0;
      set_details_pane();
      play_hide_inventory_sound();
      return active;


  - name: hide
    type: bool
    body: |
      if (!active) return false;
      active = false;
      play_hide_inventory_sound();
      return active;


  - name: toggle_show_hide
    body: |
      if (!active) show();
      else hide();
      return;


  - name: move_cursor_up
    guards: [ has_valid_size() ]
    body: |
      if (!active) return;
      cursor_y--;
      while(cursor_y < 0) cursor_y += num_rows;
      details_reveal_counter = 0.0f;
      details_num_revealed_characters = 0;
      set_details_pane();
      play_move_cursor_sound();
      return;


  - name: move_cursor_down
    guards: [ has_valid_size() ]
    body: |
      if (!active) return;
      cursor_y++;
      cursor_y = cursor_y % num_rows;
      details_reveal_counter = 0.0f;
      details_num_revealed_characters = 0;
      set_details_pane();
      play_move_cursor_sound();
      return;


  - name: move_cursor_left
    guards: [ has_valid_size() ]
    body: |
      if (!active) return;
      cursor_x--;
      while(cursor_x < 0) cursor_x += num_columns;
      details_reveal_counter = 0.0f;
      details_num_revealed_characters = 0;
      set_details_pane();
      play_move_cursor_sound();
      return;


  - name: move_cursor_right
    guards: [ has_valid_size() ]
    body: |
      if (!active) return;
      cursor_x++;
      cursor_x = cursor_x % num_columns;
      details_reveal_counter = 0.0f;
      details_num_revealed_characters = 0;
      set_details_pane();
      play_move_cursor_sound();
      return;


  - name: calc_details_header_reveal_x_offset
    type: float
    body: |
      return 60 * (1.0 - AllegroFlare::interpolator::fast_in(details_reveal_counter));


  - name: calc_details_header_reveal_color
    type: ALLEGRO_COLOR
    body: |
      return opaquify(ALLEGRO_COLOR{
         details_reveal_counter,
         details_reveal_counter,
         details_reveal_counter,
         details_reveal_counter});


  - name: disable_sound
    body: |
      sound_is_disabled = true;
      return;


  - name: enable_sound
    body: |
      sound_is_disabled = false;
      return;


  - name: is_sound_disabled
    type: bool
    body: |
      return sound_is_disabled;


  - name: is_sound_enabled
    type: bool
    body: |
      return !sound_is_disabled;


  - name: set_num_columns
    parameters:
      - name: num_columns
        type: int
        default_argument: 1
    guards: [ num_columns > 0 ]
    body: |
      this->num_columns = num_columns;
      cursor_x = 0;
      cursor_y = 0;
      set_details_pane();
      return;


  - name: set_num_rows
    parameters:
      - name: num_rows
        type: int
        default_argument: 1
    guards: [ num_rows > 0 ]
    body: |
      this->num_rows = num_rows;
      cursor_x = 0;
      cursor_y = 0;
      set_details_pane();
      return;


  - name: set_details_pane
    private: true
    body: |
      if (!af_inventory) return;
      int cursor_position_abs = cursor_y * num_columns + cursor_x;
      int item_at_cursor_position = infer_item_id_at_position(cursor_position_abs);
      if (af_inventory->has_item(item_at_cursor_position)) item_in_details_pane = item_at_cursor_position;
      else item_in_details_pane = 0;
      item_in_details_pane_set_at = al_get_time();
      return;


  - name: opaquify
    type: ALLEGRO_COLOR
    private: true
    parameters:
      - name: color
        type: ALLEGRO_COLOR
        default_argument: '{0,0,0,0}'
    body: |
      float alpha = reveal_counter;
         color.a *= alpha;
         color.r *= color.a;
         color.g *= color.a;
         color.b *= color.a;
      return color;


  - name: change_a
    type: ALLEGRO_COLOR
    private: true
    parameters:
      - name: color
        type: ALLEGRO_COLOR
        default_argument: '{0,0,0,0}'
      - name: alpha
        type: float
        default_argument: 1.0f
    body: |
      color.a *= alpha;
      color.r *= color.a;
      color.g *= color.a;
      color.b *= color.a;
      return color;


  - name: inv_reveal_counter
    private: true
    type: float
    body: |
      return 1.0 - reveal_counter;


  - name: render
    guards: [ font_bin, bitmap_bin, af_inventory ]
    body: |
      if (reveal_counter <= 0.001) return;

      AllegroFlare::Placement2D time_based_place = place;
      time_based_place.position.y = place.position.y +
         80 * (1.0 - AllegroFlare::interpolator::fast_in(reveal_counter));

      time_based_place.start_transform();

      if (show_background) draw_background();
      if (show_backframe) draw_backframe();
      if (show_title_text) draw_title_text();
      if (render_selectable_items_before_details_pane) draw_selectable_items();
      draw_details_pane_func ? draw_details_pane_func(this, draw_details_pane_func_user_data) : draw_details_pane();
      if (!render_selectable_items_before_details_pane) draw_selectable_items();

      time_based_place.restore_transform();

      return;
    body_dependency_symbols:
      - X


  - name: draw_selectable_items
    body: |
      draw_inventory_boxes();
      draw_inventory_items();
      draw_item_selection_cursor();
      return;


  - name: draw_background
    body: |
      al_clear_to_color(al_color_name("dodgerblue"));
      return;


  - name: draw_backframe
    private: true
    body: |
      float o = 0.95f;
      ALLEGRO_COLOR right_backfill_color = opaquify(change_a(al_color_html("11111d"), o));
      ALLEGRO_COLOR left_overbackfill_color = opaquify(change_a(al_color_html("16151c"), o));
      ALLEGRO_COLOR top_and_bottom_pin_line_color = opaquify(change_a(ALLEGRO_COLOR{0.6, 0.6, 0.6, 1.0}, o));

      // backfill
      al_draw_filled_rectangle(800, 0, place.size.x, place.size.y, right_backfill_color);

      // left "overbackfill"
      al_draw_filled_rectangle(0, 0, 800, place.size.y, left_overbackfill_color);

      // top and bottom pin lines
      al_draw_line(0, 0, place.size.x, 0, top_and_bottom_pin_line_color, 2.0);
      al_draw_line(0, place.size.y, place.size.x, place.size.y, top_and_bottom_pin_line_color, 2.0);
      return;


  - name: draw_title_text
    private: true
    body: |
      ALLEGRO_FONT *font = obtain_title_font();
      ALLEGRO_COLOR color = opaquify(ALLEGRO_COLOR{1.0, 1.0, 1.0, 1.0});
      al_draw_text(font, color, 0, -50, ALLEGRO_ALIGN_LEFT, "I N V E N T O R Y");
      return;


  - name: sort_inventory_items
    type: std::vector<int>
    parameters:
      - name: items_in_inventory
        type: std::vector<int>
        default_argument: '{}'
    static: true
    body: |
      std::sort(items_in_inventory.begin(), items_in_inventory.end());
      return items_in_inventory;
    body_dependency_symbols:
      - std::sort


  - name: make_sorted_list_unique
    type: std::vector<int>
    parameters:
      - name: items_in_inventory
        type: std::vector<int>
        default_argument: '{}'
    static: true
    body: |
      auto new_end = std::unique(items_in_inventory.begin(), items_in_inventory.end());
      items_in_inventory.erase(new_end, items_in_inventory.end());
      return items_in_inventory;
    body_dependency_symbols:
      - std::unique


  - name: infer_item_id_at_position
    type: int
    parameters:
      - name: inventory_position
        type: int
        default_argument: 0
    body: |
      bool draw_items_in_fixed_inventory_box_slot = true; // TODO: Move this to a configuration option
      if (draw_items_in_fixed_inventory_box_slot)
      {
         // Assume that inventory item "0" does not exist or is a null item
         int possible_item_in_this_inventory_slot = (inventory_position + 1);
         if (inventory_index->exists(possible_item_in_this_inventory_slot)) return possible_item_in_this_inventory_slot;
         return 0;
      }

      std::vector<int> items_in_inventory = af_inventory->get_items_ref();
      bool items_are_sorted = true; // TODO: Move this to a configuation option
      if (items_are_sorted)
      {
         items_in_inventory = sort_inventory_items(items_in_inventory);
         bool remove_duplicates = true; // TODO: Move this to a configuation option
         if (remove_duplicates) items_in_inventory = make_sorted_list_unique(items_in_inventory);
      }

      int item_to_draw = 0;

      if (inventory_position >= items_in_inventory.size()) {}
      else { item_to_draw = items_in_inventory[inventory_position]; }
      // TODO: This method
      // This method will take into account the sorting and organizing style of this inventory and return the
      // appropriate item number given a position.
      // For style "stack_more_than_one" - items are only shown once when there is more than one
      // For style "show_count" - items are only shown once when there is more than one
      // For style "show_inventory_number" - items are only shown once when there is more than one
      // For sorting "alphabetical_by_name"
      // For sorting "alphabetical_by_identifier"
      // For sorting "item_number"
      // For sorting "collected_at"
      return item_to_draw;


  - name: draw_inventory_items
    private: true
    body: |
      std::vector<int> items_in_inventory = af_inventory->get_items_ref();

      float x = inventory_items_left_padding;
      float y = inventory_items_top_padding;
      float spacing_x = inventory_items_box_gutter_x + inventory_items_box_size_x;
      float spacing_y = inventory_items_box_gutter_y + inventory_items_box_size_y;

      int inventory_position = 0;
      for (unsigned row=0; row<num_rows; row++)
      {
         for (unsigned column=0; column<num_columns; column++)
         {
            int item_to_draw = infer_item_id_at_position(inventory_position);

            if (draw_inventory_item_func)
            {
               draw_inventory_item_func(
                  this,
                  x + column * spacing_x,
                  y + row * spacing_y,
                  column,
                  row,
                  item_to_draw,
                  draw_inventory_item_func_user_data
               );
            }
            else
            {
               draw_inventory_item(x + column * spacing_x, y + row * spacing_y, item_to_draw);
            }
            inventory_position++;
         }
      }
      return;


  - name: draw_inventory_boxes
    private: true
    body: |
      std::vector<int> items_in_inventory = af_inventory->get_items_ref();

      float x = inventory_items_left_padding;
      float y = inventory_items_top_padding;
      float spacing_x = inventory_items_box_gutter_x + inventory_items_box_size_x;
      float spacing_y = inventory_items_box_gutter_y + inventory_items_box_size_y;

      for (unsigned row=0; row<num_rows; row++)
      {
         for (unsigned column=0; column<num_columns; column++)
         {
            draw_inventory_box(x + column * spacing_x, y + row * spacing_y);
         }
      }
      return;


  - name: draw_details_item_name
    parameters:
      - name: x
        type: float
        default_argument: 0
      - name: y
        type: float
        default_argument: 0
      - name: font
        type: ALLEGRO_FONT*
        default_argument: nullptr
    body: |
      std::tuple<std::string, std::string, std::string> item_definition = get_item_definition(item_in_details_pane);
      bool contains_item = !std::get<0>(item_definition).empty();
      if (!contains_item) return;

      if (font == nullptr) font = obtain_details_header_font();
      std::string item_name = std::get<0>(item_definition);

      float details_header_reveal_offset = calc_details_header_reveal_x_offset();
      al_draw_text(
         font,
         calc_details_header_reveal_color(),
         x + details_header_reveal_offset,
         y,
         ALLEGRO_ALIGN_LEFT,
         item_name.c_str()
      );
      return;


  - name: draw_details_item_description
    parameters:
      - name: x
        type: float
        default_argument: 0
      - name: y
        type: float
        default_argument: 0
      - name: width
        type: float
        default_argument: 1
      - name: font
        type: ALLEGRO_FONT*
        default_argument: nullptr
    body: |
      std::tuple<std::string, std::string, std::string> item_definition = get_item_definition(item_in_details_pane);
      bool contains_item = !std::get<0>(item_definition).empty();
      if (!contains_item) return;

      if (font == nullptr) font = obtain_description_font();
      std::string item_description = std::get<2>(item_definition);
      //std::string item_name = std::get<0>(item_definition);



      //float x = 820;
      //float y = 430;
      //float width = 1300 - 800- 50 + 5;
      //int dialog_box_num_revealed_characters = 999;
      std::string text = item_description; //"This is the details text that will be shown in the right pane.";
      //float text_padding_x = 40.0f;
      //float text_padding_y = 30.0f;
      //float text_box_max_width = width - (text_padding_x * 2);
      //float text_box_max_width = width;
      //ALLEGRO_FONT* text_font = obtain_description_font();
      float line_height = al_get_font_line_height(font) * 1.2;
      ALLEGRO_COLOR text_color = al_color_html("ffffff");

      al_draw_multiline_text(
         font,
         text_color,
         x,
         y,
         width,
         line_height,
         ALLEGRO_ALIGN_LEFT,
         concat_text(text, details_num_revealed_characters).c_str()
      );


      return;


  - name: draw_details_pane
    private: true
    body: |
      ALLEGRO_COLOR revealed_white = opaquify(ALLEGRO_COLOR{1.0, 1.0, 1.0, 1.0});

      std::tuple<std::string, std::string, std::string> item_definition = get_item_definition(item_in_details_pane);
      bool contains_item = !std::get<0>(item_definition).empty();
      if (!contains_item) return;

      std::string item_name = std::get<0>(item_definition);
      std::string item_bitmap_identifier = std::get<1>(item_definition);
      std::string item_description = std::get<2>(item_definition);


      // draw the item
      //

      ALLEGRO_BITMAP *item_bitmap = bitmap_bin->auto_get(item_bitmap_identifier);
      if (!item_bitmap) {} // TODO: draw missing item graphic

      // setup the graphic positioning and scale
      AllegroFlare::Placement2D box_place;
      box_place.position.x = 1025;
      box_place.position.y = 290;
      box_place.size.x = al_get_bitmap_width(item_bitmap);
      box_place.size.y = al_get_bitmap_height(item_bitmap);
      box_place.scale.x = 1.0f;
      box_place.scale.y = 1.0f;

      // stretch the position to fit the intended width/height
      float intended_width = 380.0f;
      float fit_scale = intended_width / al_get_bitmap_width(item_bitmap);
      box_place.scale.x = fit_scale;
      box_place.scale.y = fit_scale;

      // filter the dimensions for animation
      box_place.position.y = box_place.position.y +
         50 * (1.0 - AllegroFlare::interpolator::fast_in(details_reveal_counter));
      float scale_reveal_multiplier = 0.94 + 0.06 * (AllegroFlare::interpolator::fast_in(details_reveal_counter));
      box_place.scale.x = box_place.scale.x * scale_reveal_multiplier;
      box_place.scale.y = box_place.scale.y * scale_reveal_multiplier;

      // draw the bitmap
      box_place.start_transform();
      al_draw_tinted_bitmap(item_bitmap, revealed_white, 0, 0, 0);
      box_place.restore_transform();


      // draw the item name
      //

      draw_details_item_name(850, 85);


      // draw multiline description
      //

      float text_padding_x = 40.0f;
      float text_padding_y = 30.0f;
      float x = 820 + text_padding_x;
      float y = 430 + text_padding_y;
      float width = 1300 - 800- 50 + 5 - text_padding_x * 2;

      draw_details_item_description(x, y, width);


      return;


  - name: has_valid_size
    type: bool
    private: true
    body: |
      return !(num_columns == 0 || num_rows == 0);


  - name: draw_item_selection_cursor
    body: |
      // position
      float x = inventory_items_left_padding;
      float y = inventory_items_top_padding;
      float spacing_x = inventory_items_box_gutter_x + inventory_items_box_size_x;
      float spacing_y = inventory_items_box_gutter_y + inventory_items_box_size_y;

       // color
      ALLEGRO_COLOR color_a = al_color_name("aquamarine");
      ALLEGRO_COLOR color_b = AllegroFlare::color::transparent;
      float speed_multiplier = 0.9;
      float mix_factor = AllegroFlare::interpolator::slow_in(fmod(al_get_time() * speed_multiplier, 1.0));
      ALLEGRO_COLOR color = AllegroFlare::color::mix(color_a, color_b, 0.7 * mix_factor);
      float r = 8;
      float thickness = 6.0;

      al_draw_rounded_rectangle(
         x + cursor_x*spacing_x,
         y + cursor_y*spacing_y,
         x + cursor_x*spacing_x + inventory_items_box_size_x,
         y + cursor_y*spacing_y + inventory_items_box_size_y,
         r,
         r,
         color,
         thickness
      );
      return;
    body_dependency_symbols:
      - fmod
      - AllegroFlare::Color
      - AllegroFlare::interpolator


  - name: draw_inventory_box
    private: true
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
    body: |
      ALLEGRO_COLOR backfill_color = opaquify(ALLEGRO_COLOR{0.0, 0.0, 0.0, 0.4});
      float roundness = 6.0f;

      // draw frame
      al_draw_filled_rounded_rectangle(
            x+0,
            y+0,
            x+inventory_items_box_size_x,
            y+inventory_items_box_size_y,
            roundness,
            roundness,
            backfill_color
         );
      return;


  - name: draw_inventory_item
    private: true
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: item
        type: int
        default_argument: 0
    body: |
      ALLEGRO_COLOR revealed_white = opaquify(ALLEGRO_COLOR{1.0, 1.0, 1.0, 1.0});
      bool show_item_number = true;
      bool show_item_count = true;

      std::tuple<std::string, std::string, std::string> item_definition = get_item_definition(item);
      bool contains_item = !std::get<0>(item_definition).empty();
      if (contains_item)
      {
         std::string item_name = std::get<0>(item_definition);
         std::string item_bitmap_identifier = std::get<1>(item_definition); //"watch-01.png";
         ALLEGRO_BITMAP *bitmap = bitmap_bin->auto_get(item_bitmap_identifier);
         int item_number = item;
         int item_count = af_inventory->count_item(item);

         if (!bitmap) return; // TODO: draw a [?] placeholder graphic

         //ALLEGRO_COLOR color = ALLEGRO_COLOR{1.0, 1.0, 1.0, 1.0};
         //ALLEGRO_FONT *font = obtain_item_name_font();
         //al_draw_text(font, color, x, y + 150 - 20, ALLEGRO_ALIGN_LEFT, item_name.c_str());

         AllegroFlare::Placement2D box_place;
         box_place.position.x = x + inventory_items_box_size_x * 0.5f;
         box_place.position.y = y + inventory_items_box_size_y * 0.5f;
         box_place.size.x = al_get_bitmap_width(bitmap);
         box_place.size.y = al_get_bitmap_height(bitmap);
         box_place.scale.x = 1.0f;
         box_place.scale.y = 1.0f;

         // scale the bitmap to fit the dimensions of the box
         float fit_padding = 3.0f; // extra pixels of padding so the bitmap does not stretch to the whole box
         // NOTE: using "inventory_items_box_size_x" to fit the image to this window for the time beeing. In the future,
         // may select different "fit" strategies, for example, scale-to-fit, stretch-to-fit, etc..
         float fit_scale = (inventory_items_box_size_x-fit_padding*2) / al_get_bitmap_width(bitmap);
         box_place.scale.x = fit_scale;
         box_place.scale.y = fit_scale;

         if (item_count == 0) // TODO: Turn this into a flag (hide item if not in inventory)
         {
         }
         else
         {
            box_place.start_transform();
            al_draw_tinted_bitmap(bitmap, revealed_white, 0, 0, 0);
            box_place.restore_transform();
         }

         // Render the text, without scaling
         // TODO: Make the scale re-assignment less confusing
         box_place.scale.x = 1.0;
         box_place.scale.y = 1.0;
         box_place.size.x = (inventory_items_box_size_x);
         box_place.size.y = (inventory_items_box_size_y);
         box_place.start_transform();
         if (show_item_number)
         {
            ALLEGRO_FONT *item_details_font = obtain_item_details_font();
            al_draw_textf(
               item_details_font,
               ALLEGRO_COLOR{0.5, 0.51, 0.53, 0.53},
               8,
               box_place.size.y-al_get_font_line_height(item_details_font)-5,
               ALLEGRO_ALIGN_LEFT,
               "%d", item_number
            );
         }
         if (show_item_count && (item_count > 1))
         {
            ALLEGRO_FONT *item_count_font = obtain_item_count_font();
            al_draw_textf(
               item_count_font,
               ALLEGRO_COLOR{1, 1, 1, 1},
               box_place.size.x-7,
               box_place.size.y-al_get_font_line_height(item_count_font)-2,
               ALLEGRO_ALIGN_RIGHT,
               "x%d", item_count
            );
         }
         box_place.restore_transform();

      }
      return;


  - name: get_item_definition
    type: std::tuple<std::string, std::string, std::string>
    parameters:
      - name: index
        type: int
        default_argument: 0
    body: |
      // TODO: Consider if "inventory_index" should throw here
      if (!inventory_index) return {};
      if (!inventory_index->exists(index)) return {};
      return inventory_index->at(index).to_tuple();


  - name: obtain_title_font
    type: ALLEGRO_FONT*
    body: |
      return font_bin->auto_get("Inter-Bold.ttf -40");


  - name: obtain_description_font
    type: ALLEGRO_FONT*
    body: |
      return font_bin->auto_get("Inter-Regular.ttf -36");


  - name: obtain_item_details_font
    type: ALLEGRO_FONT*
    body: |
      return font_bin->auto_get("Inter-Regular.ttf -20");


  - name: obtain_item_count_font
    type: ALLEGRO_FONT*
    body: |
      return font_bin->auto_get("Inter-Bold.ttf -36");


  - name: obtain_item_name_font
    type: ALLEGRO_FONT*
    body: |
      return font_bin->auto_get("Inter-Bold.ttf -46");


  - name: obtain_details_header_font
    type: ALLEGRO_FONT*
    body: |
      return font_bin->auto_get("Inter-Bold.ttf -48");


  - name: infer_item_boxes_width
    type: float
    body: |
      return num_columns * inventory_items_box_size_x + (num_columns - 1) * inventory_items_box_gutter_x;


  - name: infer_item_boxes_height
    type: float
    body: |
      return num_rows * inventory_items_box_size_y + (num_rows - 1) * inventory_items_box_gutter_y;


  - name: play_move_cursor_sound
    private: true
    body: |
      play_sound(cursor_move_sound_identifier);
      return;


  - name: play_hide_inventory_sound
    private: true
    body: |
      play_sound(inventory_hide_sound_identifier);
      return;


  - name: play_show_inventory_sound
    private: true
    body: |
      play_sound(inventory_show_sound_identifier);
      return;


  - name: play_sound
    parameters:
      - name: sound_identifier
        type: std::string
        default_argument: '"[unset-play_sound]"'
    body: |
      if (sound_is_disabled) return;
      if (sound_identifier.empty()) return;
      if (!event_emitter)
      {
         std::cout << "[AllegroFlare::Elements::Inventory::play_sound]: ERROR: expecting an event_emitter "
                   << "but it is nullptr (when attempting to play \"" << sound_identifier << "\"). You can "
                   << "disable sounds with disable_sound() or pass in an event_emitter with set_event_emitter()."
                   << std::endl;
      }
      else
      {
         event_emitter->emit_play_sound_effect_event(sound_identifier);
      }
      return;


  - name: create_placeholder_inventory_index
    type: AllegroFlare::InventoryIndex*
    static: true
    body: |
      AllegroFlare::InventoryIndex *result = new AllegroFlare::InventoryIndex;
      *result = AllegroFlare::InventoryIndex::build_placeholder_inventory_index();
      return result;


  - name: concat_text
    type: std::string
    static: true
    parameters:
      - name: source_text
        type: std::string
        default_argument: '""'
      - name: length
        type: int
        default_argument: 0
    body: |
      return source_text.substr(0, length);


dependencies:


  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: X
    headers:
      - allegro5/allegro_primitives.h
      - allegro5/allegro_color.h
  - symbol: AllegroFlare::Color
    headers: [ AllegroFlare/Color.hpp ]
  - symbol: AllegroFlare::interpolator
    headers: [ AllegroFlare/Interpolators.hpp ]
  - symbol: fmod
    headers: [ cmath ]
  - symbol: AllegroFlare::Inventory
    headers: [ AllegroFlare/Inventory.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: AllegroFlare::InventoryIndex
    headers: [ AllegroFlare/InventoryIndex.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::InventoryDictionary
    headers: [ AllegroFlare/InventoryDictionary.hpp ]
  - symbol: AllegroFlare::Elements::Inventory
    headers: [ AllegroFlare/Elements/Inventory.hpp ]
  - symbol: std::function
    headers: [ functional ]
  - symbol: std::optional
    headers: [ optional ]
  - symbol: std::sort
    headers: [ algorithm ]
  - symbol: std::unique
    headers: [ algorithm ]


