properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    setter: true
    constructor_arg: true

  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: af_inventory
    type: AllegroFlare::Inventory*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: place
    type: AllegroFlare::Placement2D
    init_with: '{ 1920/2, 1080/2, 1300, 700 }'
    getter: true

  - name: cursor_x
    type: int
    init_with: 0
    getter: true

  - name: cursor_y
    type: int
    init_with: 0
    getter: true

  - name: num_columns
    type: int
    init_with: 4

  - name: num_rows
    type: int
    init_with: 3

  - name: active
    type: bool
    init_with: false
    getter: true

  - name: details_reveal_counter
    type: float
    init_with: 0.0f

  - name: details_num_revealed_characters
    type: int
    init_with: 999

  - name: inventory_index
    type: std::map<int, std::tuple<std::string, std::string, std::string>>
    init_with: 'build_inventory_index()'

  - name: reveal_counter
    type: float
    init_with: 0

  - name: item_in_details_pane
    type: int
    init_with: 0

  - name: inventory_items_left_padding
    type: float
    init_with: 80.0f

  - name: inventory_items_top_padding
    type: float
    init_with: 80.0f


functions:


  - name: update
    guards: [ font_bin, bitmap_bin, af_inventory ]
    body: |
      float reveal_speed = (1.0f/60.0f) * 4;  // 60 fps
      if (active) reveal_counter += reveal_speed;
      else reveal_counter -= reveal_speed;
      if (reveal_counter < 0.0) reveal_counter = 0.0;
      if (reveal_counter >= 1.0) reveal_counter = 1.0;

      float details_reveal_speed = (1.0f/60.0f) * 4;  // 60 fps
      details_reveal_counter += details_reveal_speed;
      if (details_reveal_counter >= 1.0) details_reveal_counter = 1.0;

      details_num_revealed_characters += 2;
      if (details_num_revealed_characters > 999) details_num_revealed_characters = 999;
      return;


  - name: activate
    body: |
      active = true;
      reveal_counter = 1.0;
      details_num_revealed_characters = 999;
      details_reveal_counter = 1.0;
      set_details_pane();
      return;


  - name: deactivate
    body: |
      active = false;
      reveal_counter = 0.0;
      details_num_revealed_characters = 0;
      details_reveal_counter = 0.0;
      return;


  - name: set_details_pane
    body: |
      if (!af_inventory) return;
      int cursor_position_abs = cursor_y * num_columns + cursor_x;
      if (cursor_position_abs >= af_inventory->get_items_ref().size()) item_in_details_pane = 0;
      else item_in_details_pane = af_inventory->get_items_ref()[cursor_position_abs];
      return;


  - name: opaquify
    type: ALLEGRO_COLOR
    parameters:
      - name: color
        type: ALLEGRO_COLOR
        default_argument: '{0,0,0,0}'
    body: |
      //AllegroFlare::color::change_alpha(color, reveal_counter);
      //AllegroFlare::color::change_alpha(color, 1.0);
      float alpha = reveal_counter;
         color.a *= alpha;
         color.r *= color.a;
         color.g *= color.a;
         color.b *= color.a;
      return color;


  - name: change_a
    type: ALLEGRO_COLOR
    parameters:
      - name: color
        type: ALLEGRO_COLOR
        default_argument: '{0,0,0,0}'
      - name: alpha
        type: float
        default_argument: 1.0f
    body: |
      color.a *= alpha;
      color.r *= color.a;
      color.g *= color.a;
      color.b *= color.a;
      return color;


  - name: inv_reveal_counter
    type: float
    body: |
      return 1.0 - reveal_counter;


  - name: render
    guards: [ font_bin, bitmap_bin, af_inventory ]
    body: |
      if (reveal_counter <= 0.001) return;

      AllegroFlare::Placement2D time_based_place = place;
      time_based_place.position.y = place.position.y +
         80 * (1.0 - AllegroFlare::interpolator::fast_in(reveal_counter));

      time_based_place.start_transform();

      draw_backframe();
      draw_inventory_title_text();
      draw_inventory_boxes();
      draw_item_selection_cursor();
      draw_inventory_items();
      draw_details_frame();

      time_based_place.restore_transform();

      return;
    body_dependency_symbols:
     - X


  - name: draw_backframe
    private: true
    body: |
      float o = 0.95f;
      ALLEGRO_COLOR right_backfill_color = opaquify(change_a(al_color_html("11111d"), o));
      ALLEGRO_COLOR left_overbackfill_color = opaquify(change_a(al_color_html("16151c"), o));
      ALLEGRO_COLOR top_and_bottom_pin_line_color = opaquify(change_a(ALLEGRO_COLOR{0.6, 0.6, 0.6, 1.0}, o));

      // backfill
      al_draw_filled_rectangle(800, 0, place.size.x, place.size.y, right_backfill_color);

      // left "overbackfill"
      al_draw_filled_rectangle(0, 0, 800, place.size.y, left_overbackfill_color);

      // top and bottom pin lines
      al_draw_line(0, 0, place.size.x, 0, top_and_bottom_pin_line_color, 2.0);
      al_draw_line(0, place.size.y, place.size.x, place.size.y, top_and_bottom_pin_line_color, 2.0);
      return;


  - name: draw_inventory_title_text
    private: true
    body: |
      ALLEGRO_FONT *font = obtain_title_font();
      ALLEGRO_COLOR color = opaquify(ALLEGRO_COLOR{1.0, 1.0, 1.0, 1.0});
      al_draw_text(font, color, 0, -50, ALLEGRO_ALIGN_LEFT, "I N V E N T O R Y");
      return;


  - name: draw_inventory_items
    private: true
    body: |
      std::vector<int> items_in_inventory = af_inventory->get_items_ref();

      float x = inventory_items_left_padding;
      float y = inventory_items_top_padding;
      float spacing = 150 + 20;

      int inventory_position = 0;
      for (unsigned row=0; row<3; row++)
      {
         for (unsigned column=0; column<4; column++)
         {
            int item_to_draw = 0;
            if (inventory_position >= items_in_inventory.size()) {}
            else { item_to_draw = items_in_inventory[inventory_position]; }

            //draw_inventory_box(x + column * spacing, y + row * spacing);
            draw_inventory_item(x + column * spacing, y + row * spacing, item_to_draw);
            inventory_position++;
         }
         inventory_position++;
      }
      return;


  - name: draw_inventory_boxes
    private: true
    body: |
      std::vector<int> items_in_inventory = af_inventory->get_items_ref();

      float x = inventory_items_left_padding;
      float y = inventory_items_top_padding;
      float spacing = 150 + 20;

      int inventory_position = 0;
      for (unsigned row=0; row<3; row++)
      {
         for (unsigned column=0; column<4; column++)
         {
            int item_to_draw = 0;
            if (inventory_position >= items_in_inventory.size()) {}
            else { item_to_draw = items_in_inventory[inventory_position]; }

            draw_inventory_box(x + column * spacing, y + row * spacing);
            //draw_inventory_item(x + column * spacing, y + row * spacing, item_to_draw);
            inventory_position++;
         }
         inventory_position++;
      }
      return;


  - name: draw_details_frame
    private: true
    body: |
      ALLEGRO_COLOR revealed_white = opaquify(ALLEGRO_COLOR{1.0, 1.0, 1.0, 1.0});

      std::tuple<std::string, std::string, std::string> item_definition = get_item_definition(item_in_details_pane);
      bool contains_item = !std::get<0>(item_definition).empty();
      if (!contains_item) return;
      std::string item_name = std::get<0>(item_definition);
      std::string item_bitmap_identifier = std::get<1>(item_definition);
      std::string item_description = std::get<2>(item_definition);
      ALLEGRO_BITMAP *item_bitmap = bitmap_bin->auto_get(item_bitmap_identifier);

      // draw label
      ALLEGRO_FONT* font = obtain_details_header_font();
      float details_header_reveal_offset = 60 * (1.0 - AllegroFlare::interpolator::fast_in(details_reveal_counter));
      al_draw_text(
         font,
         opaquify(ALLEGRO_COLOR{details_reveal_counter, details_reveal_counter, details_reveal_counter, details_reveal_counter}),
         850 + details_header_reveal_offset,
         85,
         ALLEGRO_ALIGN_LEFT,
         item_name.c_str()
      );

      // draw graphic
      ALLEGRO_BITMAP *bitmap = item_bitmap; //bitmap_bin->auto_get("watch-01.png");
      AllegroFlare::Placement2D box_place;
      box_place.position.x = 1025;
      box_place.position.y = 290;
      box_place.size.x = 800;
      box_place.size.y = 800;
      box_place.scale.x = 0.6;
      box_place.scale.y = 0.6;

      box_place.position.y = box_place.position.y +
         50 * (1.0 - AllegroFlare::interpolator::fast_in(details_reveal_counter));
      float scale_reveal_multiplier = 0.94 + 0.06 * (AllegroFlare::interpolator::fast_in(details_reveal_counter));
      box_place.scale.x = box_place.scale.x * scale_reveal_multiplier;
      box_place.scale.y = box_place.scale.y * scale_reveal_multiplier;

      box_place.start_transform();
      al_draw_tinted_bitmap(bitmap, revealed_white, 0, 0, 0);
      box_place.restore_transform();

      // draw multiline description
      float x = 820;
      float y = 430;
      float width = 1300 - 800- 50 + 5;
      //int dialog_box_num_revealed_characters = 999;
      std::string text = item_description; //"This is the details text that will be shown in the right pane.";
      float text_padding_x = 40.0f;
      float text_padding_y = 30.0f;
      float text_box_max_width = width - (text_padding_x * 2);
      ALLEGRO_FONT* text_font = obtain_description_font();
      float line_height = al_get_font_line_height(text_font) * 1.2;
      ALLEGRO_COLOR text_color = opaquify(al_color_html("ffffff"));

      al_draw_multiline_text(
         text_font,
         text_color,
         x + text_padding_x,
         y + text_padding_y,
         text_box_max_width,
         line_height,
         ALLEGRO_ALIGN_LEFT,
         concat_text(text, details_num_revealed_characters).c_str()
      );
      return;


  - name: move_cursor_up
    guards: [ has_valid_size() ]
    body: |
      if (!active) return;
      cursor_y--;
      while(cursor_y < 0) cursor_y += num_rows;
      details_reveal_counter = 0.0f;
      details_num_revealed_characters = 0;
      set_details_pane();
      return;


  - name: move_cursor_down
    guards: [ has_valid_size() ]
    body: |
      if (!active) return;
      cursor_y++;
      cursor_y = cursor_y % num_rows;
      details_reveal_counter = 0.0f;
      details_num_revealed_characters = 0;
      set_details_pane();
      return;


  - name: move_cursor_left
    guards: [ has_valid_size() ]
    body: |
      if (!active) return;
      cursor_x--;
      while(cursor_x < 0) cursor_x += num_columns;
      details_reveal_counter = 0.0f;
      details_num_revealed_characters = 0;
      set_details_pane();
      return;


  - name: move_cursor_right
    guards: [ has_valid_size() ]
    body: |
      if (!active) return;
      cursor_x++;
      cursor_x = cursor_x % num_columns;
      details_reveal_counter = 0.0f;
      details_num_revealed_characters = 0;
      set_details_pane();
      return;


  - name: show
    type: bool
    body: |
      if (active) return false;
      active = true;
      details_reveal_counter = 0.0f;
      details_num_revealed_characters = 0;
      set_details_pane();
      return active;


  - name: hide
    type: bool
    body: |
      if (!active) return false;
      active = false;
      return active;


  - name: has_valid_size
    type: bool
    private: true
    body: |
      return !(num_columns == 0 || num_rows == 0);


  - name: draw_item_selection_cursor
    private: true
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
    body: |
      // position
      x = inventory_items_left_padding;
      y = inventory_items_top_padding;
      float spacing = 150 + 20;

       // color
      ALLEGRO_COLOR color_a = al_color_name("aquamarine");
      ALLEGRO_COLOR color_b = AllegroFlare::color::transparent;
      float speed_multiplier = 0.9;
      float mix_factor = AllegroFlare::interpolator::slow_in(fmod(al_get_time() * speed_multiplier, 1.0));
      ALLEGRO_COLOR color = AllegroFlare::color::mix(color_a, color_b, 0.7 * mix_factor);
      float r = 8;
      float thickness = 6.0;

      al_draw_rounded_rectangle(
         x + cursor_x*spacing,
         y + cursor_y*spacing,
         x + cursor_x*spacing + 150,
         y + cursor_y*spacing + 150,
         r,
         r,
         color,
         thickness
      );
      return;
    body_dependency_symbols:
      - fmod
      - AllegroFlare::Color
      - AllegroFlare::interpolator


  - name: draw_inventory_box
    private: true
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
    body: |
      ALLEGRO_COLOR backfill_color = opaquify(ALLEGRO_COLOR{0.0, 0.0, 0.0, 0.4});
      float roundness = 6.0f;

      // draw frame
      al_draw_filled_rounded_rectangle(x+0, y+0, x+150, y+150, roundness, roundness, backfill_color);
      return;


  - name: draw_inventory_item
    private: true
    parameters:
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
      - name: item
        type: int
        default_argument: 0
    body: |
      ALLEGRO_COLOR revealed_white = opaquify(ALLEGRO_COLOR{1.0, 1.0, 1.0, 1.0});

      std::tuple<std::string, std::string, std::string> item_definition = get_item_definition(item);
      bool contains_item = !std::get<0>(item_definition).empty();
      if (contains_item)
      {
         std::string item_name = std::get<0>(item_definition);
         std::string item_bitmap_identifier = std::get<1>(item_definition); //"watch-01.png";
         ALLEGRO_BITMAP *bitmap = bitmap_bin->auto_get(item_bitmap_identifier);

         //ALLEGRO_COLOR color = ALLEGRO_COLOR{1.0, 1.0, 1.0, 1.0};
         //ALLEGRO_FONT *font = obtain_item_name_font();
         //al_draw_text(font, color, x, y + 150 - 20, ALLEGRO_ALIGN_LEFT, item_name.c_str());

         AllegroFlare::Placement2D box_place;
         box_place.position.x = x + 150/2;
         box_place.position.y = y + 150/2;
         box_place.size.x = 800;
         box_place.size.y = 800;
         box_place.scale.x = 0.25;
         box_place.scale.y = 0.25;

         box_place.start_transform();
         al_draw_tinted_bitmap(bitmap, revealed_white, 0, 0, 0);
         box_place.restore_transform();
      }
      return;


  - name: get_item_definition
    type: std::tuple<std::string, std::string, std::string>
    parameters:
      - name: index
        type: int
        default_argument: 0
    body: |
      if (inventory_index.find(index) == inventory_index.end()) return {};
      return inventory_index[index];


  - name: obtain_title_font
    type: ALLEGRO_FONT*
    body: |
      return font_bin->auto_get("Inter-Bold.ttf -40");


  - name: obtain_description_font
    type: ALLEGRO_FONT*
    body: |
      return font_bin->auto_get("Inter-Medium.ttf -36");


  - name: obtain_item_name_font
    type: ALLEGRO_FONT*
    body: |
      return font_bin->auto_get("Inter-Bold.ttf -46");


  - name: obtain_details_header_font
    type: ALLEGRO_FONT*
    body: |
      return font_bin->auto_get("Inter-Bold.ttf -48");


  - name: build_inventory_index
    type: std::map<int, std::tuple<std::string, std::string, std::string>>
    static: true
    body: |
      std::map<int, std::tuple<std::string, std::string, std::string>> result = {
         { 1, { "Pack of Gum", "elm_circle.png", "Refreshing and long-lasting." } },
         { 2, { "Watch", "elm_circle.png", "Not a smartwatch, but has all the features that matter." } },
      };
      return result;


  - name: concat_text
    type: std::string
    private: true
    parameters:
      - name: source_text
        type: std::string
        default_argument: '""'
      - name: length
        type: int
        default_argument: 0
    body: |
      return source_text.substr(0, length);


dependencies:


  - symbol: AllegroFlare::Inventory*
    headers: [ AllegroFlare/Inventory.hpp ]
  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]
  - symbol: AllegroFlare::BitmapBin*
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: X
    headers:
      - allegro5/allegro_primitives.h
      - allegro5/allegro_color.h
  - symbol: std::map<int, std::tuple<std::string, std::string, std::string>>
    headers: [ map, utility, string ]
  - symbol: std::vector<std::tuple<std::string, std::string, std::string>>
    headers: [ vector, utility, string ]
  - symbol: std::tuple<std::string, std::string, std::string>
    headers: [ utility, string ]
  - symbol: AllegroFlare::Color
    headers: [ AllegroFlare/Color.hpp ]
  - symbol: AllegroFlare::interpolator
    headers: [ AllegroFlare/Interpolators.hpp ]
  - symbol: fmod
    headers: [ cmath ]

