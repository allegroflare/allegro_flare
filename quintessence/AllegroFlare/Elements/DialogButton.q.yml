properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: text_font_size
    type: int
    init_with: -36
    getter: true
    setter: true

  - name: started_at
    type: float
    init_with: 0
    getter: true
    setter: true

  - name: at_last_advance
    type: bool
    init_with: false
    getter: true
    setter: true

  - name: x
    type: float
    init_with: 0
    getter: true
    setter: true
   
  - name: y
    type: float
    init_with: 0
    getter: true
    setter: true


functions:


  - name: render
    type: void
    private: true
    guards: 
      - al_is_system_installed()
      - al_is_font_addon_initialized()
      - al_is_ttf_addon_initialized()
      - al_is_primitives_addon_initialized()
      - font_bin
    body: |
      // TODO: use these positions in tests
      //float x = 1920-400;
      //float y = 1080-300;
      float age = al_get_time() - started_at;
      ALLEGRO_FONT *button_font = obtain_button_font();
      ALLEGRO_COLOR button_color = AllegroFlare::Color::PaleGreen;
      std::string text = "NEXT >";
      if (at_last_advance)
      {
         button_color = AllegroFlare::Color::LemonChiffon;
         text = "FINISH";
      }
      float text_width = al_get_text_width(button_font, text.c_str());
      float text_height = al_get_font_line_height(button_font);
      ALLEGRO_COLOR button_text_color = button_color;
      float button_frame_opacity = ((1.5 - fmod(age, 1.5)) / 1.5) * 0.75 + 0.25;
      ALLEGRO_COLOR button_frame_color = AllegroFlare::color::mix(
            button_color, AllegroFlare::Color::Transparent, 1.0 - button_frame_opacity);
      float thickness = 4.0f;
      float roundness = thickness * 1.5;
      float padding_x = 32.0f;
      float padding_y = 12.0f;
      AllegroFlare::Placement2D button_place;
      button_place.position.x = x;
      button_place.position.y = y;

      float reveal_duration = 0.6f;
      if (age < reveal_duration)
      {
         // modify params by the reveal animation offsets
         float normalized_time = std::max(0.0f, std::min(1.0f, age / reveal_duration));
         float inv_normalized_time = 1.0 - normalized_time;
         float reveal_y_offset = 30;
         //float reveal_opacity = 0.5;
         //ALLEGRO_COLOR reveal_color = AllegroFlare::Color::Indigo;
         ALLEGRO_COLOR reveal_color = AllegroFlare::Color::Transparent;

         button_text_color = AllegroFlare::color::mix(
               reveal_color, button_text_color, normalized_time);
         button_frame_color = AllegroFlare::color::mix(
               reveal_color, button_frame_color, normalized_time);
         button_place.position.y += reveal_y_offset * AllegroFlare::interpolator::tripple_fast_out(inv_normalized_time);
      }

      button_place.start_transform();
      
      // draw the cursor outline
      al_draw_rounded_rectangle(
         -padding_x,
         -padding_y,
         text_width+padding_x,
         text_height+padding_y,
         roundness,
         roundness,
         button_frame_color,
         thickness
      );

      // draw the text
      al_draw_text(button_font, button_text_color, text_width/2, 0, ALLEGRO_ALIGN_CENTER, text.c_str());

      button_place.restore_transform();

      return;
    body_dependency_symbols:
      - fmod
      - AllegroFlare::Color
      - AllegroFlare::Placement2D
      - al_draw_rounded_rectangle
      - al_is_ttf_addon_initialized
      - AllegroFlare::interpolator::*
      - std::min, std::max


  - name: obtain_button_font
    private: true
    type: ALLEGRO_FONT*
    body: |
      std::string font_name = "Inter-Medium.ttf";
      std::stringstream composite_font_str;
      composite_font_str << font_name << " " << text_font_size;
      return font_bin->auto_get(composite_font_str.str());


dependencies:


  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: fmod
    headers: [ cmath ]
  - symbol: AllegroFlare::Color
    headers: [ AllegroFlare/Color.hpp ]
  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]
  - symbol: al_draw_rounded_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_is_ttf_addon_initialized
    headers: [ allegro5/allegro_ttf.h ]
  - symbol: std::min, std::max
    headers: [ algorithm ]
  - symbol: AllegroFlare::interpolator::*
    headers: [ AllegroFlare/Interpolators.hpp ]


