properties:


  - name: parent_mixer
    type: ALLEGRO_MIXER*
    init_with: nullptr

  - name: mixer
    type: ALLEGRO_MIXER*
    init_with: nullptr
    getter: explicit
  
  - name: audio_depth
    type: ALLEGRO_AUDIO_DEPTH
    init_with: ALLEGRO_AUDIO_DEPTH_FLOAT32
    getter: true

  - name: audio_depth_size
    type: std::size_t
    init_with: 0
    getter: true

  - name: frequency
    type: unsigned int
    init_with: 0
    getter: true

  - name: channel_configuration
    type: ALLEGRO_CHANNEL_CONF
    init_with: ALLEGRO_CHANNEL_CONF_2
    getter: true

  - name: channel_count
    type: std::size_t
    init_with: 0
    getter: true

  - name: initialized
    type: bool
    init_with: false


functions:


  - name: get_mixer
    type: ALLEGRO_MIXER*
    guards: [ initialized ]
    body: |
      return mixer;


  - name: validate_configuration
    type: void
    guards: [ initialized ]
    body: |
      // validate configuration
      if (audio_depth != ALLEGRO_AUDIO_DEPTH_FLOAT32)
      {
         std::stringstream error_message;
         error_message << "AllegroFlare::AudioMixer::validate_configuration: error: "
                       << "expecting audio_depth of the passed AcousticEnvironments::Reverb to be "
                       << "ALLEGRO_AUDIO_DEPTH_FLOAT32 but it is not.";
         throw std::runtime_error(error_message.str());
      }
      if (channel_configuration != ALLEGRO_CHANNEL_CONF_2)
      {
         std::stringstream error_message;
         error_message << "AllegroFlare::AudioMixer::validate_configuration: error: "
                       << "expecting channel_configuration of to be "
                       << "ALLEGRO_CHANNEL_CONF_2 but it is not.";
         throw std::runtime_error(error_message.str());
      }
      if (frequency != 44100)
      {
         std::stringstream error_message;
         error_message << "AllegroFlare::AudioMixer::validate_configuration: error: "
                       << "expecting frequency to be 44100 but it is not.";
         throw std::runtime_error(error_message.str());
      }

      return;
    body_dependency_symbols:
      - std::cout


  - name: initialize
    guards: [ al_is_system_installed(), al_is_audio_installed(), al_get_default_mixer() ]
    body: |
      // set the parent_mixer provided by allegro
      parent_mixer = al_get_default_mixer();
      if (!parent_mixer)
      {
         std::stringstream error_message;
         error_message << "AllegroFlare::AcousticEnvironments::Reverb::initialize error: "
                       << "there was an error getting the parent_mixer from allegro.";
         throw std::runtime_error(error_message.str());
      }

      // create our reverb mixer with properties that match the parent_mixer
      audio_depth = al_get_mixer_depth(parent_mixer);
      frequency = al_get_mixer_frequency(parent_mixer);
      channel_configuration = al_get_mixer_channels(parent_mixer);
      mixer = al_create_mixer(frequency, audio_depth, channel_configuration);
      audio_depth_size = al_get_audio_depth_size(audio_depth);
      channel_count = al_get_channel_count(channel_configuration);
      if (!mixer)
      {
         std::stringstream error_message;
         error_message << "AllegroFlare::AcousticEnvironments::Reverb::initialize error: "
                       << "there was an error creating the mixer.";
         throw std::runtime_error(error_message.str());
      }

      bool mixer_attachment_was_successful = al_attach_mixer_to_mixer(mixer, parent_mixer);
      if (!mixer_attachment_was_successful)
      {
         std::stringstream error_message;
         error_message << "AllegroFlare::AcousticEnvironments::Reverb::initialize error: "
                       << "there was an error attaching the mixer to the parent_mixer.";
         throw std::runtime_error(error_message.str());
      }

      /*
       //setup the mixer callback
      bool mixer_postprocess_callback_setup_was_successful = al_set_mixer_postprocess_callback(
         mixer,
         AllegroFlare::AcousticEnvironments::Reverb::mixer_postprocess_callback,
         this
      );
      if (!mixer_postprocess_callback_setup_was_successful)
      {
         std::stringstream error_message;
         error_message << "AllegroFlare::AcousticEnvironments::Reverb::initialize error: "
                       << "there was an error setting up the mixer postprocess callback.";
         throw std::runtime_error(error_message.str());
      }
      */

      initialized = true;
      return;
    body_dependency_symbols:
     - al_is_system_installed
     - al_is_audio_installed


dependencies:


  - symbol: al_is_system_installed
    headers: [ allegro5/allegro.h ]
  - symbol: al_is_audio_installed
    headers: [ allegro5/allegro_audio.h ]
  - symbol: ALLEGRO_MIXER
    headers: [ allegro5/allegro_audio.h ]
  - symbol: ALLEGRO_AUDIO_DEPTH
    headers: [ allegro5/allegro_audio.h ]
  - symbol: ALLEGRO_CHANNEL_CONF
    headers: [ allegro5/allegro_audio.h ]
  - symbol: std::size_t
    headers: [ cstddef ]


