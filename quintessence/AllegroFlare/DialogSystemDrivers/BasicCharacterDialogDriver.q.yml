parent_classes:


  - class: AllegroFlare::DialogSystemDrivers::Base
    scope: public
    init_with: AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver::TYPE


properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: dialog_roll
    type: AllegroFlare::Elements::DialogRoll
    init_with: ''
    getter_ref: true
    getter: true
    setter: true

  - name: handle_activate_dialog_from_raw_script_line_func
    type: std::function<bool(
         AllegroFlare::DialogSystem::DialogSystem*,
         std::string,
         AllegroFlare::DialogTree::Nodes::Base*,
         void*)
      >
    init_with: ''
    getter: true
    setter: true

  - name: handle_activate_dialog_from_raw_script_line_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: handle_finished_dialog_from_raw_script_line_func
    type: std::function<bool(AllegroFlare::DialogSystem::DialogSystem*, AllegroFlare::Elements::DialogBoxes::Base*, AllegroFlare::DialogTree::Nodes::Base*, void*)>
    init_with: ''
    getter: true
    setter: true

  - name: handle_finished_dialog_from_raw_script_line_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: handle_load_node_bank_from_file_func
    type: std::function<bool(std::string, AllegroFlare::DialogTree::NodeBank*, void*)>
    init_with: ''
    getter: true
    setter: true

  - name: handle_load_node_bank_from_file_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: initialized
    type: bool
    init_with: false

  - name: active_character_staging_layout
    type: AllegroFlare::DialogSystem::CharacterStagingLayouts::Base*
    init_with: nullptr
    exposed: true

  - name: character_roster
    type: AllegroFlare::DialogSystem::CharacterRoster*
    init_with: nullptr
    exposed: true

  - name: scene_index
    type: AllegroFlare::DialogSystem::SceneIndex*
    init_with: nullptr
    exposed: true

  - name: chapter_index
    type: AllegroFlare::DialogSystem::ChapterIndex*
    init_with: nullptr
    exposed: true

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver"'
    static: true
    constexpr: true


documentation:


  - todo:
     - consider guarding against bitmap_bin being assigned after init
     - consider ownership cycle of "active_character_staging_layout"
     - consider owning "character_roster" and loading from a file


methods:


  - name: initialize
    guards: [ (!initialized) ]
    body: |
      //active_character_staging_layout = new AllegroFlare::DialogSystem::CharacterStagingLayouts::MultiModal();
      initialized = true;
      return;


  - name: destroy
    guards: [ initialized ]
    body: |
      // TODO: consider where delete character_roster, scene_index should occour
      //if (active_character_staging_layout) delete active_character_staging_layout;
      return;


  - name: on_switch_in
    virtual: true
    override: true
    body: |
      if (active_character_staging_layout) active_character_staging_layout->show();
      return;


  - name: on_switch_out
    virtual: true
    override: true
    body: |
      if (active_character_staging_layout) active_character_staging_layout->hide();
      return;


  - name: on_load_node_bank_from_file
    type: bool
    virtual: true
    override: true
    parameters:
      - name: filename
        type: std::string
        default_argument: '"[unset-filename]"'
      - name: node_bank_to_load_into
        type: AllegroFlare::DialogTree::NodeBank*
        default_argument: nullptr
    guards: [ node_bank_to_load_into ]
    body: |
      bool handled = true;
      if (handle_load_node_bank_from_file_func)
      {
         handled = handle_load_node_bank_from_file_func(
            filename,
            node_bank_to_load_into,
            handle_load_node_bank_from_file_func_user_data
            //user_data
         );

         // TODO: Consider adding "handled == false" error throwing here
      }
      return handled;


  - name: on_render
    virtual: true
    override: true
    body: |
      if (active_character_staging_layout) active_character_staging_layout->render();
      return;


  - name: on_before_spawn_basic_dialog
    virtual: true
    override: true
    parameters:
      - name: speaking_character_identifier
        type: std::string
        default_argument: '"[unset-speaking_character_identifier]"'
    body: |
      set_speaking_character_avatar(speaking_character_identifier);
      return;


  - name: on_before_spawn_choice_dialog
    virtual: true
    override: true
    parameters:
      - name: speaking_character_identifier
        type: std::string
        default_argument: '"[unset-speaking_character_identifier]"'
    body: |
      set_speaking_character_avatar(speaking_character_identifier);
      return;


  - name: on_raw_script_line_activate
    virtual: true
    override: true
    parameters:
      - name: dialog_system
        type: AllegroFlare::DialogSystem::DialogSystem*
        default_argument: nullptr
      - name: activating_node_name
        type: std::string
        default_argument: '"[unset-activating_node_name]"'
      - name: activating_node
        type: AllegroFlare::DialogTree::Nodes::Base*
        default_argument: nullptr
      - name: user_data
        type: void*
        default_argument: nullptr
    body: |
      // TODO: Will you need the dialog node name?
      if (handle_activate_dialog_from_raw_script_line_func)
      {
         handle_activate_dialog_from_raw_script_line_func(
            dialog_system,
            activating_node_name,
            activating_node,
            handle_activate_dialog_from_raw_script_line_func_user_data
         );
      }
      // Nothing to do in this case
      return;


  - name: on_raw_script_line_finished
    virtual: true
    override: true
    parameters:
      - name: dialog_system
        type: AllegroFlare::DialogSystem::DialogSystem*
        default_argument: nullptr
      - name: active_dialog_box
        type: AllegroFlare::Elements::DialogBoxes::Base*
        default_argument: nullptr
      - name: active_dialog_node
        type: AllegroFlare::DialogTree::Nodes::Base*
        default_argument: nullptr
    body: |
      if (handle_finished_dialog_from_raw_script_line_func)
      {
         handle_finished_dialog_from_raw_script_line_func(
            dialog_system,
            active_dialog_box,
            active_dialog_node,
            handle_finished_dialog_from_raw_script_line_func_user_data
         );
      }
      // Nothing to do in this case
      return;


  - name: decorate_speaking_character_name
    type: std::string
    virtual: true
    override: true
    parameters:
      - name: speaking_character_identifier
        type: std::string
        default_argument: '"[unset-speaking_character_identifier]"'
    body: |
      // TODO: Translate the speaking character identifier to display_name
      return speaking_character_identifier;


  - name: clear_character_staging_layout
    guards: [ initialized ]
    body: |
      if (active_character_staging_layout) active_character_staging_layout->clear();
      return;


  - name: find_character_by_identifier_as_Basic
    type: AllegroFlare::DialogSystem::Characters::Basic*
    parameters:
      - name: character_identifier
        type: std::string
        default_argument: '"[unset-character_identifier]"'
    guards: [ initialized, bitmap_bin, character_roster ]
    body: |
      // TOOD: Review guards

      if (!character_roster->character_exists_by_name(character_identifier))
      {
         // Throw for now
         std::stringstream available_character_names;
         available_character_names << "[ ";
         for (auto &character_identifier : character_roster->get_character_names())
         {
            available_character_names << "\"" << character_identifier << "\", ";
         }
         available_character_names << " ]";

         std::string error_message = "Roster is present, but character \"" + character_identifier + "\" "
                                  "does not exist in roster. Available names are " + available_character_names.str();

         AllegroFlare::Logger::throw_error(
            "AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver",
            error_message
         );
      }

      AllegroFlare::DialogSystem::Characters::Base *base =
         character_roster->find_character_by_name(character_identifier);

      if (base->is_type(AllegroFlare::DialogSystem::Characters::Basic::TYPE))
      {
         AllegroFlare::DialogSystem::Characters::Basic *as =
            static_cast<AllegroFlare::DialogSystem::Characters::Basic*>(base);

         return as;
      }
      else
      {
         throw std::runtime_error(
            "DialogSystemDrivers::BasicCharacterDialogDriver::lookup_speaking_character_as_Basic"
            "unknown handled character type"
         );
      }
      return nullptr;
    body_dependency_symbols:
      - AllegroFlare::DialogSystem::Characters::Basic
      - AllegroFlare::Logger


  - name: set_speaking_character_avatar
    parameters:
      - name: speaking_character_identifier
        type: std::string
        default_argument: '"[unset-speaking_character_identifier]"'
      - name: speaking_character_expression
        type: std::string
        default_argument: '"[unset-speaking_character_expression]"'
    guards: [ (!speaking_character_identifier.empty()) ]
    body: |
      auto _driver = this;
      // TODO: Test the guards. Is the second one (!speaking_character_identifier.empty()) necessary?
      //AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver *driver = this;
      if (!_driver->is_type(AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver::TYPE))
      {
         throw std::runtime_error("expecting type aaaaa");
         //AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver *as =
            //static_cast<AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver*>(_driver);
      }

      AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver *as =
         static_cast<AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver*>(_driver);

      //if (!_driver->is_type(AllegroFlare::DialogSystem::CharacterStagingLayouts::MultiModal::TYPE))
      //{
         //throw std::runtime_error("expecting type aaaaa");
      //}

      if (!as->active_character_staging_layout)
      {
         return; // TODO: Hack, not sure if this is expected behavior
         throw std::runtime_error("expecting type bbbbb");
      }
      //->is_type(AllegroFlare::DialogSystem::CharacterStagingLayouts::MultiModal::TYPE))
      if (!as->active_character_staging_layout->is_type(AllegroFlare::DialogSystem::CharacterStagingLayouts::MultiModal::TYPE))
      {
         throw std::runtime_error("expecting type cccccc");
      }

      AllegroFlare::DialogSystem::CharacterStagingLayouts::MultiModal *layout_as =
         static_cast<AllegroFlare::DialogSystem::CharacterStagingLayouts::MultiModal*>(
            as->active_character_staging_layout
         );
      
      AllegroFlare::DialogSystem::CharacterStagingLayouts::Base *layout = layout_as; ////layout_as->active_character_staging_layout;

      //if (driver->active_character_staging_layout->is_type(
               //AllegroFlare::DialogSystem::CharacterStagingLayouts::BasicCentered::TYPE
            //))
      //{
         //AllegroFlare::DialogSystem::CharacterStagingLayouts::BasicCentered *as =
            //static_cast<AllegroFlare::DialogSystem::CharacterStagingLayouts::BasicCentered*>(
               //driver->active_character_staging_layout
            //);
         ALLEGRO_BITMAP *speaking_character_bitmap = as->lookup_speaking_character_avatar(
               speaking_character_identifier,
               speaking_character_expression
            );

         //if (!speaking_character_bitmap) as->clear();
         //else as->set_speaking_character_bitmap(speaking_character_bitmap);

         if (!speaking_character_bitmap) layout->clear();
         else layout->set_speaking_character_bitmap(speaking_character_bitmap);
         // TODO: Set the character
      //}
      //else
      //{
         //throw std::runtime_error(
            //"DialogSystemSystemDrivers::BasicCharacterDialogDriver::set_speaking_character: error: Unable to perform action because "
               //"\"driver.active_character_staging_layout\" is of type \"" + driver->active_character_staging_layout->get_type() + "\" "
               //"and a condition is not provided to handle this type."
         //);
      //}
      return;
    body_dependency_symbols:
      - AllegroFlare::DialogSystem::CharacterStagingLayouts::MultiModal
      - AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver



  - name: lookup_speaking_character_avatar
    type: ALLEGRO_BITMAP*
    parameters:
      - name: speaking_character_identifier
        type: std::string
        default_argument: '"[unset-speaking_character_identifier]"'
      - name: speaking_character_expression
        type: std::string
        default_argument: '"[unset-speaking_character_expression]"'
    guards: [ initialized, bitmap_bin ]
    body: |
      auto _driver = this;
      // TODO: Review guards
      // TODO: Consider throw on missing character_roster
      if (!_driver->is_type(AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver::TYPE))
      {
         throw std::runtime_error("expecting type ddddd");
         //AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver *as =
            //static_cast<AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver*>(_driver);
      }

      AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver *as =
         static_cast<AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver*>(_driver);
      
      AllegroFlare::DialogSystem::CharacterRoster *character_roster = as->character_roster;
      //static_cast<AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver*>(_driver);

      //if (!_driver->is_type(AllegroFlare::DialogSystem::CharacterStagingLayouts::MultiModal::TYPE))
      //{
         //throw std::runtime_error("expecting type aaaaa");
      //}

      if (character_roster)
      {
         if (!character_roster->character_exists_by_name(speaking_character_identifier))
         {
            // Throw for now
            std::stringstream available_character_names;
            available_character_names << "[ ";
            for (auto &character_identifier : character_roster->get_character_names())
            {
               available_character_names << "\"" << character_identifier << "\", ";
            }
            available_character_names << " ]";

            throw std::runtime_error("Roster is present, but character \"" + speaking_character_identifier + "\" "
                                     "does not exist in roster. Available names are " + available_character_names.str()
                                     );
         }

         AllegroFlare::DialogSystem::Characters::Base *base =
            character_roster->find_character_by_name(speaking_character_identifier);

         if (base->is_type(AllegroFlare::DialogSystem::Characters::Basic::TYPE))
         {
            AllegroFlare::DialogSystem::Characters::Basic *as =
               static_cast<AllegroFlare::DialogSystem::Characters::Basic*>(base);

            std::string bitmap_identifier_to_use = "";
            if (as->expression_exists(speaking_character_expression))
            {
               bitmap_identifier_to_use = as->find_expression(speaking_character_expression);
            }
            else
            {
               // TODO: Add report about missing expression
               bitmap_identifier_to_use = as->get_avatar_portrait_identifier();
            }

            return bitmap_bin->auto_get(bitmap_identifier_to_use);
         }
         else
         {
            throw std::runtime_error("DialogSystemDrivers::BasicCharacterDialogDriver: unknown handled character type");
         }
      }
      return nullptr;
    body_dependency_symbols:
      - AllegroFlare::DialogSystem::Characters::Basic







  - name: append_to_dialog_roll
    guards: [ initialized ]
    parameters:
      - name: speaking_character
        type: std::string
        default_argument: '"[unset-speaking_character]"'
      - name: dialog
        type: std::string
        default_argument: '"[unset-dialog]"'
    body: |
      dialog_roll.append_log(speaking_character, dialog);
      return;


dependencies:


  - symbol: AllegroFlare::DialogSystem::DialogSystem
    headers: [ AllegroFlare/DialogSystem/DialogSystem.hpp ]
  - symbol: AllegroFlare::DialogSystemDrivers::Base
    headers: [ AllegroFlare/DialogSystemDrivers/Base.hpp ]
  - symbol: AllegroFlare::DialogSystem::DialogSystem
    headers: [ ]
  - symbol: ALLEGRO_BITMAP
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::EventNames
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: AllegroFlare::DialogSystem::DialogEventDatas::CloseDialog
    headers: [ AllegroFlare/DialogSystem/DialogEventDatas/CloseDialog.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::YouGotEvidence
    headers: [ AllegroFlare/Elements/DialogBoxes/YouGotEvidence.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::Base
    headers: [ AllegroFlare/Elements/DialogBoxes/Base.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::Choice
    headers: [ AllegroFlare/Elements/DialogBoxes/Choice.hpp ]
  - symbol: AllegroFlare::GameEvent
    headers: [ AllegroFlare/GameEvent.hpp ]
  - symbol: AllegroFlare::GameEventDatas::Base
    headers: [ AllegroFlare/GameEventDatas/Base.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxRenderer
    headers: [ AllegroFlare/Elements/DialogBoxRenderer.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::Basic
    headers: [ AllegroFlare/Elements/DialogBoxes/Basic.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::YouGotAnItem
    headers: [ AllegroFlare/Elements/DialogBoxes/YouGotAnItem.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::YouGotAnItem
    headers: [ AllegroFlare/Elements/DialogBoxes/YouGotAnItem.hpp ]
  - symbol: AllegroFlare::InventoryDictionaryItems::WithAttributes
    headers: [ AllegroFlare/InventoryDictionaryItems/WithAttributes.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxFactory
    headers: [ AllegroFlare/Elements/DialogBoxFactory.hpp ]
  - symbol: AllegroFlare::DialogSystem::DialogEventDatas::CreateYouGotAnItemDialog
    headers: [ AllegroFlare/DialogSystem/DialogEventDatas/CreateYouGotAnItemDialog.hpp ]
  - symbol: AllegroFlare::DialogSystem::DialogEventDatas::CreateYouGotEvidenceDialog
    headers: [ AllegroFlare/DialogSystem/DialogEventDatas/CreateYouGotEvidenceDialog.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeBank
    headers: [ AllegroFlare/DialogTree/NodeBank.hpp ]
  - symbol: AllegroFlare::DialogTree::Nodes::Base
    headers: [ AllegroFlare/DialogTree/Nodes/Base.hpp ]
  - symbol: std::filesystem::exists
    headers: [ filesystem ]
  - symbol: AllegroFlare::DialogTree::NodeOptions::GoToNode
    headers: [ AllegroFlare/DialogTree/NodeOptions/GoToNode.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeOptions::ExitDialog
    headers: [ AllegroFlare/DialogTree/NodeOptions/ExitDialog.hpp ]
  - symbol: AllegroFlare::DialogTree::Nodes::MultipageWithOptions
    headers: [ AllegroFlare/DialogTree/Nodes/MultipageWithOptions.hpp ]
  - symbol: AllegroFlare::Elements::SelectionCursorBox
    headers: [ AllegroFlare/Elements/SelectionCursorBox.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxRenderers::ChoiceRenderer
    headers: [ AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer.hpp ]
  - symbol: AllegroFlare::DialogSystem::DialogEventDatas::SpawnDialogByName
    headers: [ AllegroFlare/DialogSystem/DialogEventDatas/SpawnDialogByName.hpp ]
  - symbol: AllegroFlare::DialogSystem::DialogEventDatas::LoadDialogNodeBankFromFile
    headers: [ AllegroFlare/DialogSystem/DialogEventDatas/LoadDialogNodeBankFromFile.hpp ]
  - symbol: AllegroFlare::DialogSystem::CharacterStagingLayouts::Base
    headers: [ AllegroFlare/DialogSystem/CharacterStagingLayouts/Base.hpp ]
  - symbol: AllegroFlare::DialogSystem::CharacterRoster
    headers: [ AllegroFlare/DialogSystem/CharacterRoster.hpp ]
  - symbol: AllegroFlare::DialogSystem::SceneIndex
    headers: [ AllegroFlare/DialogSystem/SceneIndex.hpp ]
  - symbol: AllegroFlare::DialogSystem::ChapterIndex
    headers: [ AllegroFlare/DialogSystem/ChapterIndex.hpp ]
  - symbol: AllegroFlare::DialogSystem::Characters::Basic
    headers: [ AllegroFlare/DialogSystem/Characters/Basic.hpp ]
  - symbol: AllegroFlare::StringFormatValidator
    headers: [ AllegroFlare/StringFormatValidator.hpp ]
  - symbol: AllegroFlare::DialogTree::BasicScreenplayTextLoader
    headers: [ AllegroFlare/DialogTree/BasicScreenplayTextLoader.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::UsefulPHP
    headers: [ AllegroFlare/UsefulPHP.hpp ]
  - symbol: AllegroFlare::DialogTree::Nodes::ExitDialog
    headers: [ AllegroFlare/DialogTree/Nodes/ExitDialog.hpp ]
  - symbol: AllegroFlare::DialogTree::Nodes::ExitProgram
    headers: [ AllegroFlare/DialogTree/Nodes/ExitProgram.hpp ]
  - symbol: AllegroFlare::Elements::DialogRoll
    headers: [ AllegroFlare/Elements/DialogRoll.hpp ]
  - symbol: AllegroFlare::DialogTree::Nodes::Wait
    headers: [ AllegroFlare/DialogTree/Nodes/Wait.hpp ]
  - symbol: AllegroFlare::DialogTree::Nodes::ChapterTitle
    headers: [ AllegroFlare/DialogTree/Nodes/ChapterTitle.hpp ]
  - symbol: AllegroFlare::DialogSystem::CharacterStagingLayouts::MultiModal
    headers: [ AllegroFlare/DialogSystem/CharacterStagingLayouts/MultiModal.hpp ]
  - symbol: AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver
    headers: [ AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver.hpp ]


