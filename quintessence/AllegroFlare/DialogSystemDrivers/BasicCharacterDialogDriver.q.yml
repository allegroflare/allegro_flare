parent_classes:


  - class: AllegroFlare::DialogSystemDrivers::Base
    scope: public
    init_with: AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver::TYPE


properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    setter: true

  - name: dialog_roll
    type: AllegroFlare::Elements::DialogRoll
    init_with: ''
    getter_ref: true
    getter: true
    setter: true

  - name: activate_dialog_node_type_unhandled_func
    type: std::function<bool(AllegroFlare::DialogSystem::DialogSystem*, void*)>
    init_with: ''
    getter: true
    setter: true

  - name: activate_dialog_node_type_unhandled_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: initialized
    type: bool
    init_with: false

  - name: active_character_staging_layout
    type: AllegroFlare::DialogSystem::CharacterStagingLayouts::Base*
    init_with: nullptr
    exposed: true

  - name: character_roster
    type: AllegroFlare::DialogSystem::CharacterRoster*
    init_with: nullptr
    exposed: true

  - name: scene_index
    type: AllegroFlare::DialogSystem::SceneIndex*
    init_with: nullptr
    exposed: true

  - name: chapter_index
    type: AllegroFlare::DialogSystem::ChapterIndex*
    init_with: nullptr
    exposed: true

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver"'
    static: true
    constexpr: true


documentation:


  - todo:
     - guard against bitmap_bin being assigned after init


methods:


  - name: initialize
    guards: [ (!initialized) ]
    body: |
      active_character_staging_layout = new AllegroFlare::DialogSystem::CharacterStagingLayouts::BasicCentered();
      initialized = true;
      return;
    body_dependency_symbols:
      - AllegroFlare::DialogSystem::CharacterStagingLayouts::BasicCentered


  - name: destroy
    guards: [ initialized ]
    body: |
      // TODO: consider where delete character_roster, scene_index should occour
      delete active_character_staging_layout;
      return;


  - name: on_switch_in
    virtual: true
    override: true
    body: |
      if (active_character_staging_layout) active_character_staging_layout->show();
      return;


  - name: on_deactivate
    virtual: true
    override: true
    body: |
      if (active_character_staging_layout) active_character_staging_layout->hide();
      return;


  - name: on_render
    virtual: true
    override: true
    body: |
      if (active_character_staging_layout) active_character_staging_layout->render();
      return;


  - name: clear_character_staging_layout
    guards: [ initialized ]
    body: |
      if (active_character_staging_layout->is_type(
               AllegroFlare::DialogSystem::CharacterStagingLayouts::BasicCentered::TYPE
            ))
      {
         AllegroFlare::DialogSystem::CharacterStagingLayouts::BasicCentered *as =
            static_cast<AllegroFlare::DialogSystem::CharacterStagingLayouts::BasicCentered*>(
               active_character_staging_layout
            );
         as->clear_speaking_character_bitmap();
      }
      else
      {
         throw std::runtime_error(
            "DialogSystemDrivers::BasicCharacterDialogDriver::set_speaking_character: error: Unable to perform action because "
               "\"active_character_staging_layout\" is of type \"" + active_character_staging_layout->get_type() + "\" "
               "and a condition is not provided to handle this type."
         );
      }
      return;


  - name: activate_dialog_node_by_name
    virtual: true
    override: true
    type: bool
    parameters:
      - name: dialog_system
        type: AllegroFlare::DialogSystem::DialogSystem*
        default_argument: nullptr
      - name: active_dialog_node_name
        type: std::string
        default_argument: '"[unset-dialog_node_identifier]"'
      - name: active_dialog_node
        type: AllegroFlare::DialogTree::Nodes::Base*
        default_argument: nullptr
      - name: user_data
        type: void*
        default_argument: nullptr
    body: |
      // TODO: Remove this call  to _func and only call this containing method externally
      return activate_dialog_node_by_name_func(dialog_system, active_dialog_node_name, active_dialog_node, user_data);


  - name: activate_dialog_node_by_name_func
    virtual: true
    type: bool
    parameters:
      - name: dialog_system
        type: AllegroFlare::DialogSystem::DialogSystem*
        default_argument: nullptr
      - name: active_dialog_node_name
        type: std::string
        default_argument: '"[unset-dialog_node_identifier]"'
      - name: active_dialog_node
        type: AllegroFlare::DialogTree::Nodes::Base*
        default_argument: nullptr
      - name: user_data
        type: void*
        default_argument: nullptr
    guards: [ dialog_system, active_dialog_node, initialized ]
    body: |
      std::string &dialog_name = active_dialog_node_name;

      if (active_dialog_node->is_type(AllegroFlare::DialogTree::Nodes::MultipageWithOptions::TYPE))
      {
         AllegroFlare::DialogTree::Nodes::MultipageWithOptions *as_multipage_with_options =
            static_cast<AllegroFlare::DialogTree::Nodes::MultipageWithOptions*>(active_dialog_node);

         std::string node_pages_speaker = as_multipage_with_options->get_speaker();
         std::vector<std::string> node_pages = as_multipage_with_options->get_pages();
         std::vector<std::string> node_options_as_text = as_multipage_with_options->build_options_as_text();

         if (node_options_as_text.empty())
         {
            throw std::runtime_error(
               "DialogSystemDrivers::BasicCharacterDialogDriver::activate_dialog_node_by_name: error: Expecting 1 or many options for node named \""
                  + dialog_name + "\" but there are no options."
            );
         }
         else if (node_options_as_text.size() == 1)
         {
            // If dialog has only one option, spawn a basic dialog
            set_speaking_character_avatar(node_pages_speaker);
            dialog_system->spawn_basic_dialog(node_pages_speaker, node_pages);
            //append_to_dialog_roll(node_pages_speaker, node_pages[0]); // TODO: join(node_pages);
         }
         else // (node_options_as_text.size() > 1)
         {
            // TODO: Here, if dialog has multiple options, spawn a "choice" dialog
            if (node_pages.size() != 1)
            {
               throw std::runtime_error(
                  "DialogSystemDrivers::BasicCharacterDialogDriver::activate_dialog_node_by_name: error: Expecting only 1 page for dialog node \""
                     + dialog_name + "\" (because it is going to be used to build a Choice dialog, "
                     "but there are \"" + std::to_string(node_pages.size()) + "\" pages."
               );
            }
            set_speaking_character_avatar(node_pages_speaker);
            dialog_system->spawn_choice_dialog(node_pages_speaker, node_pages[0], node_options_as_text);
            //append_to_dialog_roll(node_pages_speaker, node_pages[0]); // TODO: join(node_pages);
         }
      }
      else if (active_dialog_node->is_type(AllegroFlare::DialogTree::Nodes::Wait::TYPE))
      {
         // Cast our class
         AllegroFlare::DialogTree::Nodes::Wait *as =
            static_cast<AllegroFlare::DialogTree::Nodes::Wait*>(active_dialog_node);

         // Create a new state for this node
         //AllegroFlare::DialogSystem::NodeStates::Wait *wait_node_state =
               //new AllegroFlare::DialogSystem::NodeStates::Wait(as);
         //wait_node_state->initialize();

         // Assign the state to our "active_dialog_node_state" so it can be managed
         float duration_seconds = as->get_duration_sec();
         dialog_system->spawn_wait_dialog(duration_seconds);
         //dialog_system->set_active_dialog_node_state(wait_node_state);
      }
      else if (active_dialog_node->is_type(AllegroFlare::DialogTree::Nodes::ChapterTitle::TYPE))
      {
         // Cast our class
         AllegroFlare::DialogTree::Nodes::ChapterTitle *as =
            static_cast<AllegroFlare::DialogTree::Nodes::ChapterTitle*>(active_dialog_node);

         // Create a new state for this node
         //AllegroFlare::DialogSystem::NodeStates::Wait *wait_node_state =
               //new AllegroFlare::DialogSystem::NodeStates::Wait(as);
         //wait_node_state->initialize();

         // Assign the state to our "active_dialog_node_state" so it can be managed
         //float duration_seconds = as->get_duration_sec();
         dialog_system->spawn_chapter_title_dialog(
               as->get_title_text(),
               as->get_duration()
            );
         //dialog_system->set_active_dialog_node_state(wait_node_state);
      }
      else if (active_dialog_node->is_type(AllegroFlare::DialogTree::Nodes::ExitDialog::TYPE))
      {
         //AllegroFlare::DialogTree::Nodes::ExitDialog *as =
            //static_cast<AllegroFlare::DialogTree::Nodes::ExitDialog*>(base);
         dialog_system->shutdown_dialog(); // TODO: See if this is a correct expectation for this event
      }
      /*
      else if (active_dialog_node->is_type(AllegroFlare::DialogTree::Nodes::EnterScene::TYPE))
      {
         // TODO: thrwo
         AllegroFlare::Logger::throw_error(
            "AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver::activate_dialog_node_by_name_func",
            "Handling of \"AllegroFlare::DialogTree::Nodes::EnterScene::TYPE\" not implemented"
         );
         //AllegroFlare::DialogTree::Nodes::ExitDialog *as =
            //static_cast<AllegroFlare::DialogTree::Nodes::ExitDialog*>(base);
         //dialog_system->shutdown_dialog(); // TODO: See if this is a correct expectation for this event
      }
      */
      else if (active_dialog_node->is_type(AllegroFlare::DialogTree::Nodes::ExitProgram::TYPE))
      {
         // TODO: Test this event emission
         dialog_system->get_event_emitter()->emit_exit_game_event();
         // TODO: Exit program (either set shutdown_system on framework or emit event)
      }
      else
      {
         bool handled = false;
         if (activate_dialog_node_type_unhandled_func)
         {
            handled = activate_dialog_node_type_unhandled_func(
                  dialog_system,
                  activate_dialog_node_type_unhandled_func_user_data
            );
         }

         if (!handled)
         {
            throw std::runtime_error(
               "DialogSystemDrivers::BasicCharacterDialogDriver::activate_dialog_node_by_name: error: Unable to handle dialog node activation on type \""
                  + active_dialog_node->get_type() + "\". A condition is not provided to handle this type."
            );
         }
      }
      return true;
    body_dependency_symbols:
     - AllegroFlare::DialogTree::Nodes::MultipageWithOptions
     - AllegroFlare::DialogTree::Nodes::ExitDialog
     - AllegroFlare::DialogTree::Nodes::ExitProgram
     - AllegroFlare::DialogTree::Nodes::Wait
     - AllegroFlare::DialogTree::Nodes::ChapterTitle
     - AllegroFlare::DialogSystem::NodeStates::Wait


  - name: set_speaking_character_avatar
    guards: [ initialized ]
    parameters:
      - name: speaking_character_identifier
        type: std::string
        default_argument: '"[unset-speaking_character_identifier]"'
      - name: speaking_character_expression
        type: std::string
        default_argument: '"[unset-speaking_character_expression]"'
    body: |
      
      //guards: [ driver.active_character_staging_layout, (speaking_character_identifier.empty()) ]

      AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver *driver = this;

      //if (_driver->is_type(AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver::TYPE))
      //{
         //AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver *driver =
            //static_cast<AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver*>(_driver);

         //{
         if (driver->active_character_staging_layout->is_type(
                  AllegroFlare::DialogSystem::CharacterStagingLayouts::BasicCentered::TYPE
               ))
         {
            AllegroFlare::DialogSystem::CharacterStagingLayouts::BasicCentered *as =
               static_cast<AllegroFlare::DialogSystem::CharacterStagingLayouts::BasicCentered*>(
                  driver->active_character_staging_layout
               );
            ALLEGRO_BITMAP *speaking_character_bitmap = lookup_speaking_character_avatar(
                  speaking_character_identifier,
                  speaking_character_expression
               );
            if (!speaking_character_bitmap) as->clear_speaking_character_bitmap();
            else as->set_speaking_character_bitmap(speaking_character_bitmap);
            // TODO: Set the character
         }
         else
         {
            throw std::runtime_error(
               "DialogSystemSystemDrivers::BasicCharacterDialogDriver::set_speaking_character: error: Unable to perform action because "
                  "\"driver.active_character_staging_layout\" is of type \"" + driver->active_character_staging_layout->get_type() + "\" "
                  "and a condition is not provided to handle this type."
            );
         }
      //}
      return;


  - name: lookup_speaking_character_avatar
    type: ALLEGRO_BITMAP*
    parameters:
      - name: speaking_character_identifier
        type: std::string
        default_argument: '"[unset-speaking_character_identifier]"'
      - name: speaking_character_expression
        type: std::string
        default_argument: '"[unset-speaking_character_expression]"'
    guards: [ initialized, bitmap_bin ]
    body: |
      //if (!_driver->is_type(AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver::TYPE))
      //{
         //throw std::runtime_error("Unknown _driver type");
      //}

       
      AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver *driver = this;


      //AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver *driver =
         //static_cast<AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver*>(_driver);

      if (driver->character_roster)
      {
         if (!driver->character_roster->character_exists_by_name(speaking_character_identifier))
         {
            // Throw for now
            std::stringstream available_character_names;
            available_character_names << "[ ";
            for (auto &character_identifier : driver->character_roster->get_character_names())
            {
               available_character_names << "\"" << character_identifier << "\", ";
            }
            available_character_names << " ]";

            throw std::runtime_error("Roster is present, but character \"" + speaking_character_identifier + "\" "
                                     "does not exist in roster. Available names are " + available_character_names.str()
                                     );
         }

         AllegroFlare::DialogSystem::Characters::Base *base =
            driver->character_roster->find_character_by_name(speaking_character_identifier);

         if (base->is_type(AllegroFlare::DialogSystem::Characters::Basic::TYPE))
         {
            AllegroFlare::DialogSystem::Characters::Basic *as =
               static_cast<AllegroFlare::DialogSystem::Characters::Basic*>(base);

            std::string bitmap_identifier_to_use = "";
            if (as->expression_exists(speaking_character_expression))
            {
               bitmap_identifier_to_use = as->find_expression(speaking_character_expression);
            }
            else
            {
               // TODO: Add report about missing expression
               bitmap_identifier_to_use = as->get_avatar_portrait_identifier();
            }

            return bitmap_bin->auto_get(bitmap_identifier_to_use);
         }
         else
         {
            throw std::runtime_error("DialogSystemDrivers::BasicCharacterDialogDriver: unknown handled character type");
         }
      }
      return nullptr;
    body_dependency_symbols:
      - AllegroFlare::DialogSystem::Characters::Basic


  - name: find_character_by_identifier_as_Basic
    type: AllegroFlare::DialogSystem::Characters::Basic*
    parameters:
      - name: character_identifier
        type: std::string
        default_argument: '"[unset-character_identifier]"'
    guards: [ initialized, bitmap_bin ]
    body: |
      //if (!_driver->is_type(AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver::TYPE))
      //{
         //throw std::runtime_error("Unknown _driver type");
      //}

       
      AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver *driver = this;


      //AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver *driver =
         //static_cast<AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver*>(_driver);

      if (!driver->character_roster)
      {
         AllegroFlare::Logger::throw_error(
            "AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver"
            "Expecting character_roster to not be a nullptr"
         );
      }

         if (!driver->character_roster->character_exists_by_name(character_identifier))
         {
            // Throw for now
            std::stringstream available_character_names;
            available_character_names << "[ ";
            for (auto &character_identifier : driver->character_roster->get_character_names())
            {
               available_character_names << "\"" << character_identifier << "\", ";
            }
            available_character_names << " ]";

            std::string error_message = "Roster is present, but character \"" + character_identifier + "\" "
                                     "does not exist in roster. Available names are " + available_character_names.str();

            AllegroFlare::Logger::throw_error(
               "AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver",
               error_message
            );
         }

         AllegroFlare::DialogSystem::Characters::Base *base =
            driver->character_roster->find_character_by_name(character_identifier);

         if (base->is_type(AllegroFlare::DialogSystem::Characters::Basic::TYPE))
         {
            AllegroFlare::DialogSystem::Characters::Basic *as =
               static_cast<AllegroFlare::DialogSystem::Characters::Basic*>(base);

            return as;

            //std::string bitmap_identifier_to_use = "";
            //if (as->expression_exists(speaking_character_expression))
            //{
               //bitmap_identifier_to_use = as->find_expression(speaking_character_expression);
            //}
            //else
            //{
               //// TODO: Add report about missing expression
               //bitmap_identifier_to_use = as->get_avatar_portrait_identifier();
            //}

            //return bitmap_bin->auto_get(bitmap_identifier_to_use);
         }
         else
         {
            throw std::runtime_error(
               "DialogSystemDrivers::BasicCharacterDialogDriver::lookup_speaking_character_as_Basic"
               "unknown handled character type"
            );
         }
      //}
      return nullptr;
    body_dependency_symbols:
      - AllegroFlare::DialogSystem::Characters::Basic
      - AllegroFlare::Logger


  - name: append_to_dialog_roll
    guards: [ initialized ]
    parameters:
      - name: speaking_character
        type: std::string
        default_argument: '"[unset-speaking_character]"'
      - name: dialog
        type: std::string
        default_argument: '"[unset-dialog]"'
    body: |
      dialog_roll.append_log(speaking_character, dialog);
      return;


dependencies:


  - symbol: AllegroFlare::DialogSystem::DialogSystem
    headers: [ AllegroFlare/DialogSystem/DialogSystem.hpp ]
  - symbol: AllegroFlare::DialogSystemDrivers::Base
    headers: [ AllegroFlare/DialogSystemDrivers/Base.hpp ]
  - symbol: AllegroFlare::DialogSystem::DialogSystem
    headers: [ ]
  - symbol: ALLEGRO_BITMAP
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::EventNames
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: AllegroFlare::DialogSystem::DialogEventDatas::CloseDialog
    headers: [ AllegroFlare/DialogSystem/DialogEventDatas/CloseDialog.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::YouGotEvidence
    headers: [ AllegroFlare/Elements/DialogBoxes/YouGotEvidence.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::Base
    headers: [ AllegroFlare/Elements/DialogBoxes/Base.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::Choice
    headers: [ AllegroFlare/Elements/DialogBoxes/Choice.hpp ]
  - symbol: AllegroFlare::GameEvent
    headers: [ AllegroFlare/GameEvent.hpp ]
  - symbol: AllegroFlare::GameEventDatas::Base
    headers: [ AllegroFlare/GameEventDatas/Base.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxRenderer
    headers: [ AllegroFlare/Elements/DialogBoxRenderer.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::Basic
    headers: [ AllegroFlare/Elements/DialogBoxes/Basic.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::YouGotAnItem
    headers: [ AllegroFlare/Elements/DialogBoxes/YouGotAnItem.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::YouGotAnItem
    headers: [ AllegroFlare/Elements/DialogBoxes/YouGotAnItem.hpp ]
  - symbol: AllegroFlare::InventoryDictionaryItems::WithAttributes
    headers: [ AllegroFlare/InventoryDictionaryItems/WithAttributes.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxFactory
    headers: [ AllegroFlare/Elements/DialogBoxFactory.hpp ]
  - symbol: AllegroFlare::DialogSystem::DialogEventDatas::CreateYouGotAnItemDialog
    headers: [ AllegroFlare/DialogSystem/DialogEventDatas/CreateYouGotAnItemDialog.hpp ]
  - symbol: AllegroFlare::DialogSystem::DialogEventDatas::CreateYouGotEvidenceDialog
    headers: [ AllegroFlare/DialogSystem/DialogEventDatas/CreateYouGotEvidenceDialog.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeBank
    headers: [ AllegroFlare/DialogTree/NodeBank.hpp ]
  - symbol: AllegroFlare::DialogTree::Nodes::Base
    headers: [ AllegroFlare/DialogTree/Nodes/Base.hpp ]
  - symbol: std::filesystem::exists
    headers: [ filesystem ]
  - symbol: AllegroFlare::DialogTree::NodeOptions::GoToNode
    headers: [ AllegroFlare/DialogTree/NodeOptions/GoToNode.hpp ]
  - symbol: AllegroFlare::DialogTree::NodeOptions::ExitDialog
    headers: [ AllegroFlare/DialogTree/NodeOptions/ExitDialog.hpp ]
  - symbol: AllegroFlare::DialogTree::Nodes::MultipageWithOptions
    headers: [ AllegroFlare/DialogTree/Nodes/MultipageWithOptions.hpp ]
  - symbol: AllegroFlare::Elements::SelectionCursorBox
    headers: [ AllegroFlare/Elements/SelectionCursorBox.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxRenderers::ChoiceRenderer
    headers: [ AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer.hpp ]
  - symbol: AllegroFlare::DialogSystem::DialogEventDatas::SpawnDialogByName
    headers: [ AllegroFlare/DialogSystem/DialogEventDatas/SpawnDialogByName.hpp ]
  - symbol: AllegroFlare::DialogSystem::DialogEventDatas::LoadDialogNodeBankFromFile
    headers: [ AllegroFlare/DialogSystem/DialogEventDatas/LoadDialogNodeBankFromFile.hpp ]
  - symbol: AllegroFlare::DialogSystem::CharacterStagingLayouts::Base
    headers: [ AllegroFlare/DialogSystem/CharacterStagingLayouts/Base.hpp ]
  - symbol: AllegroFlare::DialogSystem::CharacterStagingLayouts::BasicCentered
    headers: [ AllegroFlare/DialogSystem/CharacterStagingLayouts/BasicCentered.hpp ]
  - symbol: AllegroFlare::DialogSystem::CharacterRoster
    headers: [ AllegroFlare/DialogSystem/CharacterRoster.hpp ]
  - symbol: AllegroFlare::DialogSystem::SceneIndex
    headers: [ AllegroFlare/DialogSystem/SceneIndex.hpp ]
  - symbol: AllegroFlare::DialogSystem::ChapterIndex
    headers: [ AllegroFlare/DialogSystem/ChapterIndex.hpp ]
  - symbol: AllegroFlare::DialogSystem::Characters::Basic
    headers: [ AllegroFlare/DialogSystem/Characters/Basic.hpp ]
  - symbol: AllegroFlare::StringFormatValidator
    headers: [ AllegroFlare/StringFormatValidator.hpp ]
  - symbol: AllegroFlare::DialogTree::BasicScreenplayTextLoader
    headers: [ AllegroFlare/DialogTree/BasicScreenplayTextLoader.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::UsefulPHP
    headers: [ AllegroFlare/UsefulPHP.hpp ]
  - symbol: AllegroFlare::DialogTree::Nodes::ExitDialog
    headers: [ AllegroFlare/DialogTree/Nodes/ExitDialog.hpp ]
  - symbol: AllegroFlare::DialogTree::Nodes::ExitProgram
    headers: [ AllegroFlare/DialogTree/Nodes/ExitProgram.hpp ]
  - symbol: AllegroFlare::Elements::DialogRoll
    headers: [ AllegroFlare/Elements/DialogRoll.hpp ]
  - symbol: AllegroFlare::DialogTree::Nodes::Wait
    headers: [ AllegroFlare/DialogTree/Nodes/Wait.hpp ]
  - symbol: AllegroFlare::DialogTree::Nodes::ChapterTitle
    headers: [ AllegroFlare/DialogTree/Nodes/ChapterTitle.hpp ]
  - symbol: AllegroFlare::DialogSystem::NodeStates::Base
    headers: [ AllegroFlare/DialogSystem/NodeStates/Base.hpp ]
  - symbol: AllegroFlare::DialogSystem::NodeStates::Wait
    headers: [ AllegroFlare/DialogSystem/NodeStates/Wait.hpp ]
  - symbol: AllegroFlare::DialogSystem::CharacterStagingLayouts::BasicCentered
    headers: [ AllegroFlare/DialogSystem/CharacterStagingLayouts/BasicCentered.hpp ]


