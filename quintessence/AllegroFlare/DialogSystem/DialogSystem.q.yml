properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    setter: explicit

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    setter: explicit

  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true
    setter: explicit

  - name: active_dialog_box
    type: AllegroFlare::Elements::DialogBoxes::Base*
    init_with: nullptr

  - name: switched_in
    type: bool
    init_with: false
    getter: true

  - name: standard_dialog_box_font_name
    type: std::string
    init_with: DEFAULT_STANDARD_DIALOG_BOX_FONT_NAME
    constructor_arg: true
    getter: true
    setter: true

  - name: standard_dialog_box_font_size
    type: int
    init_with: DEFAULT_STANDARD_DIALOG_BOX_FONT_SIZE
    constructor_arg: true
    getter: true
    setter: true

  - name: initialized
    type: bool
    init_with: false

  - name: DEFAULT_STANDARD_DIALOG_BOX_FONT_NAME
    type: char*
    constexpr: true
    const: true
    static: true
    init_with: '(char*)"Inter-Regular.ttf"'

  - name: DEFAULT_STANDARD_DIALOG_BOX_FONT_SIZE
    type: int
    constexpr: true
    const: true
    static: true
    init_with: -36


documentation:


  - next_steps:
     - modify process_dialog_event to branch based on the ALLEGRO_FLARE_EVENT_DIALOG_* event
     - consider if you need to make GameEventDatas for each of the different types of events
     - review overall the integrety of the system, Add lots of tests, make it so "anybody can emit a dialog event"


methods:


  - name: set_bitmap_bin
    parameters:
      - name: bitmap_bin
        type: AllegroFlare::BitmapBin*
        default_argument: nullptr
    guards: [ (!initialized) ]
    body: |
      this->bitmap_bin = bitmap_bin;


  - name: set_font_bin
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
    guards: [ (!initialized) ]
    body: |
      this->font_bin = font_bin;


  - name: set_event_emitter
    parameters:
      - name: event_emitter
        type: AllegroFlare::EventEmitter*
        default_argument: nullptr
    guards: [ (!initialized) ]
    body: |
      this->event_emitter = event_emitter;


  - name: initialize
    guards:
       - (!initialized)
       - al_is_system_installed()
       - al_is_primitives_addon_initialized()
       - al_is_font_addon_initialized()
       - bitmap_bin
       - font_bin
       - event_emitter
    body: |
      initialized = true;
      return;
    body_dependency_symbols:
      - al_is_primitives_addon_initialized


  - name: switch_in
    guards: [ (!switched_in) ]
    body: |
      switched_in = true;
      return;


  - name: switch_out
    guards: [ (switched_in) ]
    body: |
      switched_in = false;
      return;


  - name: spawn_basic_dialog
    parameters:
      - name: pages
        type: std::vector<std::string>
        default_argument: '{}'
    body: |
      bool a_dialog_existed_before = a_dialog_is_active();
      if (active_dialog_box) delete active_dialog_box; // TODO: address concern that this could clobber an active dialog

      AllegroFlare::Elements::DialogBoxFactory dialog_box_factory;
      active_dialog_box = dialog_box_factory.create_basic_dialog(pages);

      // TODO: Address when and where a switch_in should occur
      bool a_new_dialog_was_created_and_dialog_system_is_now_active = !a_dialog_existed_before;
      if (a_new_dialog_was_created_and_dialog_system_is_now_active)
      {
         switch_in();
         event_emitter->emit_dialog_switch_in_event();
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::Elements::DialogBoxFactory


  - name: update
    parameters:
      - name: time_now
        type: float
        default_argument: 0
    guards: [ initialized ]
    body: |
      // TODO: Ensure time_now does not accidentally become 0 by not being noticed as an argument
      // TODO: Ensure time_now is passed down to active dialog updates()
      if (active_dialog_box) active_dialog_box->update();
      return;


  - name: render
    type: void
    guards: [ initialized ]
    body: |
      if (active_dialog_box)
      {
         AllegroFlare::Elements::DialogBoxRenderer dialog_box_renderer(font_bin, bitmap_bin, active_dialog_box);
         dialog_box_renderer.set_standard_dialog_box_font_name(standard_dialog_box_font_name);
         dialog_box_renderer.set_standard_dialog_box_font_size(standard_dialog_box_font_size);
         dialog_box_renderer.render();
      }
    body_dependency_symbols:
      - AllegroFlare::Elements::DialogBoxRenderer


  - name: a_dialog_is_active
    type: bool
    body: |
      return (active_dialog_box != nullptr);


  - name: dialog_advance
    guards: [ initialized, active_dialog_box ]
    body: |
      active_dialog_box->advance();
      if (active_dialog_box->get_finished())
      {
      }
      return;


  - name: dialog_is_finished
    type: bool
    guards: [ initialized, active_dialog_box ]
    body: |
      return active_dialog_box->get_finished();


  - name: shutdown_dialog
    type: bool
    guards: [ initialized ]
    body: |
      if (!active_dialog_box) return false;
      delete active_dialog_box;
      active_dialog_box = nullptr;
      if (get_switched_in())
      {
         switch_out();
         event_emitter->emit_dialog_switch_out_event();
      }
      return true;


  - name: move_dialog_cursor_position_up
    guards: [ initialized ]
    body: |
      if (active_dialog_box) active_dialog_box->move_cursor_position_up();
      return;


  - name: move_dialog_cursor_position_down
    guards: [ initialized ]
    body: |
      if (active_dialog_box) active_dialog_box->move_cursor_position_down();
      return;


  - name: move_dialog_cursor_position_left
    guards: [ initialized ]
    body: |
      if (active_dialog_box) active_dialog_box->move_cursor_position_left();
      return;


  - name: move_dialog_cursor_position_right
    guards: [ initialized ]
    body: |
      if (active_dialog_box) active_dialog_box->move_cursor_position_right();
      return;


dependencies:


  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::EventNames
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: AllegroFlare::DialogSystem::DialogEventDatas::CloseDialog
    headers: [ AllegroFlare/DialogSystem/DialogEventDatas/CloseDialog.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::YouGotEvidence
    headers: [ AllegroFlare/Elements/DialogBoxes/YouGotEvidence.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::Base
    headers: [ AllegroFlare/Elements/DialogBoxes/Base.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::Choice
    headers: [ AllegroFlare/Elements/DialogBoxes/Choice.hpp ]
  - symbol: AllegroFlare::GameEvent
    headers: [ AllegroFlare/GameEvent.hpp ]
  - symbol: AllegroFlare::GameEventDatas::Base
    headers: [ AllegroFlare/GameEventDatas/Base.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxRenderer
    headers: [ AllegroFlare/Elements/DialogBoxRenderer.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::Basic
    headers: [ AllegroFlare/Elements/DialogBoxes/Basic.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::YouGotAnItem
    headers: [ AllegroFlare/Elements/DialogBoxes/YouGotAnItem.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxes::YouGotAnItem
    headers: [ AllegroFlare/Elements/DialogBoxes/YouGotAnItem.hpp ]
  - symbol: AllegroFlare::InventoryDictionaryItems::WithAttributes
    headers: [ AllegroFlare/InventoryDictionaryItems/WithAttributes.hpp ]
  - symbol: AllegroFlare::Elements::DialogBoxFactory
    headers: [ AllegroFlare/Elements/DialogBoxFactory.hpp ]
  - symbol: AllegroFlare::DialogSystem::DialogEventDatas::CreateYouGotAnItemDialog
    headers: [ AllegroFlare/DialogSystem/DialogEventDatas/CreateYouGotAnItemDialog.hpp ]
  - symbol: AllegroFlare::DialogSystem::DialogEventDatas::CreateYouGotEvidenceDialog
    headers: [ AllegroFlare/DialogSystem/DialogEventDatas/CreateYouGotEvidenceDialog.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]


