parent_classes:


  - class: AllegroFlare::DialogSystem::CharacterStagingLayouts::Base
    scope: public
    init_with: AllegroFlare::DialogSystem::CharacterStagingLayouts::Dynamic::TYPE


properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: staged_characters
    type: tsl::ordered_map<std::string, std::tuple<std::string, AllegroFlare::Placement3D>>
    init_with: '{}'
    getter: true
    setter: true

  - name: surface_width
    type: int
    init_with: 1920
    getter: true
    setter: true

  - name: surface_height
    type: int
    init_with: 1080
    getter: true
    setter: true

  - name: hidden
    type: bool
    init_with: false
    getter: true

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/DialogSystem/CharacterStagingLayouts/Dynamic"'
    static: true
    constexpr: true


methods:


  - name: update
    virtual: true
    override: true
    parameters:
      - name: time_now
        type: float
        default_argument: 0.0f
    body: |
      // NOTE: Nothing to be done here at this time
      return;


  - name: show
    virtual: true
    override: true
    parameters:
      - name: time_now
        type: float
        default_argument: 0.0f
    body: |
      // NOTE: Nothing to be done here at this time
      return;


  - name: hide
    virtual: true
    override: true
    parameters:
      - name: time_now
        type: float
        default_argument: 0.0f
    body: |
      hidden = true; // TODO: Consider more elegant alternative to this "hard stop" on rendering
      return;


  - name: clear
    virtual: true
    override: true
    body: |
      staged_characters.clear();
      return;


  - name: num_staged_characters
    type: int
    body: |
      return staged_characters.size();


  - name: staged_character_exists
    type: bool
    parameters:
      - name: staged_character_identifier
        type: std::string
        default_argument: '"[unset-staged_character_identifier]"'
    body: |
      return (staged_characters.count(staged_character_identifier) > 0);


  - name: add_staged_character
    parameters:
      - name: staged_character_identifier
        type: std::string
        default_argument: '"[unset-staged_character_identifier]"'
      - name: staging
        type: std::tuple<std::string, AllegroFlare::Placement3D>
        default_argument: '{}'
    guards: [ (!staged_character_exists(staged_character_identifier)) ]
    body: |
      staged_characters[staged_character_identifier] = staging;
      return;


  - name: set_staged_character_expression
    parameters:
      - name: staged_character_identifier
        type: std::string
        default_argument: '"[unset-staged_character_identifier]"'
      - name: expression
        type: std::string
        default_argument: '"[unset-expression]"'
    guards: [ staged_character_exists(staged_character_identifier) ]
    body: |
      std::get<0>(staged_characters[staged_character_identifier]) = expression;
      // TODO: Figure out if expression should be set as a string, as a bitmap, if a table should be present here, etc
      return;


  - name: get_staged_character_placement
    type: AllegroFlare::Placement3D
    parameters:
      - name: staged_character_identifier
        type: std::string
        default_argument: '"[unset-staged_character_identifier]"'
    guards: [ staged_character_exists(staged_character_identifier) ]
    body: |
      return std::get<1>(staged_characters[staged_character_identifier]);


  - name: set_staged_character_placement
    parameters:
      - name: staged_character_identifier
        type: std::string
        default_argument: '"[unset-staged_character_identifier]"'
      - name: placement
        type: AllegroFlare::Placement3D
        default_argument: '{}'
    guards: [ staged_character_exists(staged_character_identifier) ]
    body: |
      // TODO
      //std::get<1>(staged_characters[staged_character_identifier])
      return;


  - name: move_staged_character_to_front
    parameters:
      - name: staged_character_identifier
        type: std::string
        default_argument: '"[unset-staged_character_identifier]"'
    guards: [ staged_character_exists(staged_character_identifier) ]
    body: |
      // TODO
      return;


  - name: move_staged_character_to_back
    parameters:
      - name: staged_character_identifier
        type: std::string
        default_argument: '"[unset-staged_character_identifier]"'
    guards: [ staged_character_exists(staged_character_identifier) ]
    body: |
      // TODO
      return;


  - name: move_staged_character_forward
    parameters:
      - name: staged_character_identifier
        type: std::string
        default_argument: '"[unset-staged_character_identifier]"'
    guards: [ staged_character_exists(staged_character_identifier) ]
    body: |
      // TODO
      return;


  - name: move_staged_character_backward
    parameters:
      - name: staged_character_identifier
        type: std::string
        default_argument: '"[unset-staged_character_identifier]"'
    guards: [ staged_character_exists(staged_character_identifier) ]
    body: |
      // TODO
      return;


  - name: render
    virtual: true
    override: true
    guards: [ al_is_system_installed(), bitmap_bin ]
    body: |
      if (hidden) return;

      for (auto &staged_character : staged_characters)
      {
         ALLEGRO_BITMAP *bitmap = bitmap_bin->auto_get(std::get<0>(staged_character.second));
         if (!bitmap) continue;

         AllegroFlare::Placement3D placement = std::get<1>(staged_character.second);
         //AllegroFlare::Placement2D character_bitmap_placement_transform(
            //surface_width * 0.5,
            //surface_height * 1.0,
            //al_get_bitmap_width(bitmap),
            //al_get_bitmap_height(bitmap)
         //);
         //character_bitmap_placement_transform.scale_to_fit_height(surface_height * 2);
         placement.start_transform();
         ALLEGRO_COLOR tint{1.0, 1.0, 1.0, 1.0}; // TODO: Use motion effects for introducing different characters
         al_draw_tinted_bitmap(bitmap, tint, 0, 0, 0);
         placement.restore_transform();
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::Placement2D


  - name: set_speaking_character_bitmap
    virtual: true
    override: true
    parameters:
      - name: speaking_character_bitmap
        type: ALLEGRO_BITMAP*
        default_argument: nullptr
      - name: time_now
        type: float
        default_argument: 0.0f
    guards: [ speaking_character_bitmap ]
    body: |
      // TODO: Test this method
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::DialogSystem::CharacterStagingLayouts::Dynamic::set_speaking_character_bitmap",
         "This method is not implemented in this derived class"
      );

      //if (speaking_character_bitmap == this->speaking_character_bitmap) return;
      //this->speaking_character_bitmap = speaking_character_bitmap;
      //speaking_character_bitmap_changed_at = time_now;
      return;
    body_dependency_symbols:
      - AllegroFlare::Logger


dependencies:


  - symbol: ALLEGRO_BITMAP
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::DialogSystem::CharacterStagingLayouts::Base
    headers: [ AllegroFlare/DialogSystem/CharacterStagingLayouts/Base.hpp ]
  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::Placement3D
    headers: [ AllegroFlare/Placement3D.hpp ]
  - symbol: tsl::ordered_map
    headers: [ lib/tsl/ordered_map.h ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]


