properties:


  - name: devices
    type: std::vector<AllegroFlare::PhysicalInputDevices::Base*>
    init_with: '{}'

  - name: updated_at
    type: float
    init_with: 0.0f
    getter: true


documentation:


  - todos:
      - |
        Initialization appears to deadlock in certain circumstances. See the project doc for more information here:
        https://docs.google.com/document/d/1GMvB4Ex9XFBOjacQ54L93_z8cmq_hkWfrs5h7xkG8wY/edit#bookmark=id.o5wl3b3fkgj


functions:


  - name: initialize
    guards: [ al_is_system_installed() ]
    body: |
      // create a keyboard (if it is installed)
      if (al_is_keyboard_installed())
      {
         AllegroFlare::PhysicalInputDevices::Keyboard *keyboard = new AllegroFlare::PhysicalInputDevices::Keyboard();
         keyboard->set_connected(true);
         devices.push_back(keyboard);
      }

      // Create joysticks (for any that are connected)
      al_reconfigure_joysticks();
      int num_joysticks = al_get_num_joysticks();
      for (int i=0; i<num_joysticks; i++)
      {
         ALLEGRO_JOYSTICK *al_joystick = al_get_joystick(i);

         // TODO: consider the following data
         //al_get_joystick_active
         //al_get_joystick_name
         //al_get_joystick_stick_name
         //al_get_joystick_axis_name
         //al_get_joystick_button_name
         //al_get_joystick_stick_flags
         //al_get_joystick_num_sticks
         //al_get_joystick_num_axes
         //al_get_joystick_num_buttons
         //al_get_joystick_state

         AllegroFlare::PhysicalInputDevices::Joysticks::Base *joystick =
            new AllegroFlare::PhysicalInputDevices::Joysticks::Base();
         joystick->set_al_joystick(al_joystick);
         joystick->set_connected(true);

         devices.push_back(joystick);
      }

      updated_at = al_get_time();

      return;
    body_dependency_symbols:
      - al_is_system_installed
      - AllegroFlare::PhysicalInputDevices::Keyboard
      - AllegroFlare::PhysicalInputDevices::Joysticks::Base


  - name: num_devices
    type: int
    body: |
      return devices.size();


  - name: num_keyboard_devices
    type: int
    body: |
      int keyboard_count = 0;
      for (auto &device : devices) { if (device->is_keyboard()) keyboard_count++; }
      return keyboard_count;


  - name: num_joystick_devices
    type: int
    body: |
      int joystick_count = 0;
      for (auto &device : devices) { if (device->is_joystick()) joystick_count++; }
      return joystick_count;


  - name: num_connected_devices
    type: int
    body: |
      int connected_count = 0;
      for (auto &device : devices) { if (device->get_connected()) connected_count++; }
      return connected_count;


  - name: get_connected_joysticks
    type: std::vector<AllegroFlare::PhysicalInputDevices::Base*>
    body: |
      std::vector<AllegroFlare::PhysicalInputDevices::Base*> result;
      for (auto &device : devices)
      {
         if (device->is_joystick() && device->get_connected()) result.push_back(device);
      }
      return result;


  - name: num_connected_joysticks
    type: int
    body: |
      int count = 0;
      for (auto &device : devices)
      {
         if (device->is_joystick() && device->get_connected()) count++;
      }
      return count;


  - name: find_joystick_device_by_al_joystick
    private: true
    type: AllegroFlare::PhysicalInputDevices::Joysticks::Base*
    parameters:
      - name: al_joystick
        type: ALLEGRO_JOYSTICK*
        default_argument: nullptr
    body: |
      // TODO: Test this function
      for (auto &device : devices)
      {
         if (device->is_joystick())
         {
            // TODO: Catch this statement below if dynamic_cast fails (which it should not, but never hurts)
            AllegroFlare::PhysicalInputDevices::Joysticks::Base *device_as_joystick =
               dynamic_cast<AllegroFlare::PhysicalInputDevices::Joysticks::Base*>(device);

            if (device_as_joystick->is_using_al_joystick(al_joystick)) return device_as_joystick;
         }
      }
      return nullptr;
    body_dependency_symbols:
      - AllegroFlare::PhysicalInputDevices::Joysticks::Base


  - name: joystick_device_exists_with_al_joystick
    private: true
    type: bool
    parameters:
      - name: al_joystick
        type: ALLEGRO_JOYSTICK*
        default_argument: nullptr
    body: |
      return (find_joystick_device_by_al_joystick(al_joystick) != nullptr);


  - name: handle_reconfigured_joystick
    body: |
      bool list_is_modified = false;

      // TODO: Implement this function
      std::vector<AllegroFlare::PhysicalInputDevices::Base*>
         previously_known_joysticks_connected_at_start = get_connected_joysticks();
      std::vector<AllegroFlare::PhysicalInputDevices::Base*>
         previously_known_joysticks_connected_after_reconfiguration;
      std::vector<AllegroFlare::PhysicalInputDevices::Base*>
         previously_known_joysticks_that_became_disconnected;

      // Handle *new* joysticks added
      al_reconfigure_joysticks();
      int num_joysticks = al_get_num_joysticks();
      for (int i=0; i<num_joysticks; i++)
      {
         ALLEGRO_JOYSTICK *al_joystick = al_get_joystick(i);

         // TODO: consider the following data
         //al_get_joystick_active
         //al_get_joystick_name
         //al_get_joystick_stick_name
         //al_get_joystick_axis_name
         //al_get_joystick_button_name
         //al_get_joystick_stick_flags
         //al_get_joystick_num_sticks
         //al_get_joystick_num_axes
         //al_get_joystick_num_buttons
         //al_get_joystick_state

         AllegroFlare::PhysicalInputDevices::Joysticks::Base *joystick =
            find_joystick_device_by_al_joystick(al_joystick);
         bool joystick_is_known = (joystick != nullptr);

         if (!joystick_is_known)
         {
            // This is a newly connected joystick
            joystick = new AllegroFlare::PhysicalInputDevices::Joysticks::Base();
            joystick->set_al_joystick(al_joystick);
            devices.push_back(joystick);

            list_is_modified = true;
         }

         if (!joystick->get_connected())
         {
            joystick->set_connected(true);
            list_is_modified = true;
         }

         if (joystick_is_known)
         {
            // This is an already known joystick that is connected
            previously_known_joysticks_connected_after_reconfiguration.push_back(joystick);
         }
      }

      // Pick out known joysticks that have become disconnected in this reconfiguration
      std::set_difference(
         previously_known_joysticks_connected_at_start.begin(),
         previously_known_joysticks_connected_at_start.end(),
         previously_known_joysticks_connected_after_reconfiguration.begin(),
         previously_known_joysticks_connected_after_reconfiguration.end(),
         std::back_inserter(previously_known_joysticks_that_became_disconnected)
      );

      // Mark existing connected joysticks as disconnected
      // TODO: This set difference may have a bug - devices that are known, were disconnected, and now becoming
      // connected may falsely be included in this list. Please investigate.
      for (auto &previously_known_joystick_that_became_disconnected
         : previously_known_joysticks_that_became_disconnected)
      {
         previously_known_joystick_that_became_disconnected->set_connected(false);
         list_is_modified = true;
      }

      if (list_is_modified)
      {
         al_rest(1.0000);
         updated_at = al_get_time();
      }

      return;
    body_dependency_symbols:
      - std::set_difference


dependencies:


  - symbol: AllegroFlare::PhysicalInputDevices::Base
    headers: [ AllegroFlare/PhysicalInputDevices/Base.hpp ]
  - symbol: al_is_system_installed
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::PhysicalInputDevices::Keyboard
    headers: [ AllegroFlare/PhysicalInputDevices/Keyboard.hpp ]
  - symbol: AllegroFlare::PhysicalInputDevices::Joysticks::Base
    headers: [ AllegroFlare/PhysicalInputDevices/Joysticks/Base.hpp ]
  - symbol: ALLEGRO_JOYSTICK
    headers: [ allegro5/allegro.h ]
  - symbol: std::set_difference
    headers: [ algorithm ]


