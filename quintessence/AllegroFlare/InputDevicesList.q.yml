properties:


  - name: devices
    type: std::vector<AllegroFlare::PhysicalInputDevices::Base*>
    init_with: '{}'


functions:


  - name: initialize
    guards: [ al_is_system_installed() ]
    body: |
      // create a keyboard (if it is installed)
      if (al_is_keyboard_installed())
      {
         AllegroFlare::PhysicalInputDevices::Keyboard *keyboard = new AllegroFlare::PhysicalInputDevices::Keyboard();
         devices.push_back(keyboard);
      }

      // Create joysticks (for any that are connected)
      al_reconfigure_joysticks();
      int num_joysticks = al_get_num_joysticks();
      for (int i=0; i<num_joysticks; i++)
      {
         ALLEGRO_JOYSTICK *al_joystick = al_get_joystick(i);

         // TODO: consider the following data
         //al_get_joystick_active
         //al_get_joystick_name
         //al_get_joystick_stick_name
         //al_get_joystick_axis_name
         //al_get_joystick_button_name
         //al_get_joystick_stick_flags
         //al_get_joystick_num_sticks
         //al_get_joystick_num_axes
         //al_get_joystick_num_buttons
         //al_get_joystick_state

         AllegroFlare::PhysicalInputDevices::Joysticks::Base *joystick =
            new AllegroFlare::PhysicalInputDevices::Joysticks::Base();
         joystick->set_al_joystick(al_joystick);

         devices.push_back(joystick);
      }
      return;
    body_dependency_symbols:
      - al_is_system_installed
      - AllegroFlare::PhysicalInputDevices::Keyboard
      - AllegroFlare::PhysicalInputDevices::Joysticks::Base


  - name: count_num_keyboard_devices
    type: int
    body: |
      int keyboard_count = 0;
      for (auto &device : devices) { if (device->is_keyboard()) keyboard_count++; }
      return keyboard_count;


  - name: count_num_joystick_devices
    type: int
    body: |
      int joystick_count = 0;
      for (auto &device : devices) { if (device->is_joystick()) joystick_count++; }
      return joystick_count;


  - name: find_joystick_device_by_al_joystick
    private: true
    type: AllegroFlare::PhysicalInputDevices::Joysticks::Base*
    parameters:
      - name: al_joystick
        type: ALLEGRO_JOYSTICK*
        default_argument: nullptr
    body: |
      // TODO: Test this function
      for (auto &device : devices)
      {
         if (device->is_joystick())
         {
            // TODO: Catch this statement below if dynamic_cast fails (which it should not, but never hurts)
            AllegroFlare::PhysicalInputDevices::Joysticks::Base *device_as_joystick =
               dynamic_cast<AllegroFlare::PhysicalInputDevices::Joysticks::Base*>(device);

            if (device_as_joystick->is_using_al_joystick(al_joystick)) return device_as_joystick;
         }
      }
      return nullptr;
    body_dependency_symbols:
      - AllegroFlare::PhysicalInputDevices::Joysticks::Base


  - name: joystick_device_exists_with_al_joystick
    private: true
    type: bool
    parameters:
      - name: al_joystick
        type: ALLEGRO_JOYSTICK*
        default_argument: nullptr
    body: |
      return (find_joystick_device_by_al_joystick(al_joystick) != nullptr);


  - name: handle_reconfigured_joystick
    body: |
      // TODO: Implement this function

      // Handle *new* joysticks added
      al_reconfigure_joysticks();
      int num_joysticks = al_get_num_joysticks();
      for (int i=0; i<num_joysticks; i++)
      {
         ALLEGRO_JOYSTICK *al_joystick = al_get_joystick(i);

         // TODO: consider the following data
         //al_get_joystick_active
         //al_get_joystick_name
         //al_get_joystick_stick_name
         //al_get_joystick_axis_name
         //al_get_joystick_button_name
         //al_get_joystick_stick_flags
         //al_get_joystick_num_sticks
         //al_get_joystick_num_axes
         //al_get_joystick_num_buttons
         //al_get_joystick_state

         bool joystick_already_exists = joystick_device_exists_with_al_joystick(al_joystick);
         if (!joystick_already_exists)
         {
            AllegroFlare::PhysicalInputDevices::Joysticks::Base *joystick =
               new AllegroFlare::PhysicalInputDevices::Joysticks::Base();
            joystick->set_al_joystick(al_joystick);
            devices.push_back(joystick);
         }
      }

      // Handle *existing* joysticks that have disconnected
      // TODO ^^
      return;


  - name: num_known_devices
    type: int
    body: |
      return devices.size();


dependencies:


  - symbol: AllegroFlare::PhysicalInputDevices::Base
    headers: [ AllegroFlare/PhysicalInputDevices/Base.hpp ]
  - symbol: al_is_system_installed
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::PhysicalInputDevices::Keyboard
    headers: [ AllegroFlare/PhysicalInputDevices/Keyboard.hpp ]
  - symbol: AllegroFlare::PhysicalInputDevices::Joysticks::Base
    headers: [ AllegroFlare/PhysicalInputDevices/Joysticks/Base.hpp ]
  - symbol: ALLEGRO_JOYSTICK
    headers: [ allegro5/allegro.h ]


