properties:


  - name: string_properties
    type: std::map<std::string, std::string>
    init_with: '{}'
    getter: true
    setter: true

  - name: bool_properties
    type: std::map<std::string, bool>
    init_with: '{}'
    getter: true
    setter: true

  - name: int_properties
    type: std::map<std::string, int>
    init_with: '{}'
    getter: true
    setter: true

  - name: float_properties
    type: std::map<std::string, float>
    init_with: '{}'
    getter: true
    setter: true

  - name: color_properties
    type: std::map<std::string, std::string>
    init_with: '{}'
    getter: true
    setter: true


methods:


  - name: get_keys_in_list
    type: std::string
    body: |
      // TODO: Test this method
      std::set<std::string> result;
      for (auto &string_property : string_properties) result.insert("\"" + string_property.first + "\" (string)");
      for (auto &int_property : int_properties) result.insert("\"" + int_property.first + "\" (int)");
      for (auto &float_property : float_properties) result.insert("\"" + float_property.first + "\" (float)");
      for (auto &bool_property : bool_properties) result.insert("\"" + bool_property.first + "\" (bool)");
      for (auto &color_property : color_properties) result.insert("\"" + color_property.first + "\" (color)");

      std::stringstream result_str;
      result_str << "[";
      for (auto& res : result)
      {
         result_str << res << ", ";
      }
      result_str << "]";

      return result_str.str();
    body_dependency_symbols:
      - std::stringstream
      - std::set


  - name: empty
    type: bool
    body: |
      return string_properties.empty()
         && bool_properties.empty()
         && int_properties.empty()
         && float_properties.empty()
         && color_properties.empty();


  - name: clear
    body: |
      string_properties.clear();
      bool_properties.clear();
      int_properties.clear();
      float_properties.clear();
      color_properties.clear();


  - name: add_string
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: value
        type: std::string
        default_argument: '"[unset-value]"'
    body: |
      throw_if_key_already_exists(name, "add_string");
      string_properties[name] = value;


  - name: add_bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: value
        type: bool
        default_argument: false
    body: |
      throw_if_key_already_exists(name, "add_bool");
      bool_properties[name] = value;


  - name: add_float
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: value
        type: float
        default_argument: 0.0f
    body: |
      throw_if_key_already_exists(name, "add_float");
      float_properties[name] = value;


  - name: add_int
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: value
        type: int
        default_argument: 0
    body: |
      throw_if_key_already_exists(name, "add_int");
      int_properties[name] = value;


  - name: add_color
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
      - name: value
        type: std::string
        default_argument: '"[unset-value]"'
    body: |
      throw_if_key_already_exists(name, "add_color");
      color_properties[name] = value;


  - name: get_string
    type: std::string
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    body: |
      throw_if_key_does_not_exist(name, "get_string");
      return string_properties[name];


  - name: get_bool
    type: bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    body: |
      throw_if_key_does_not_exist(name, "get_bool");
      return bool_properties[name];


  - name: get_float
    type: float
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    body: |
      throw_if_key_does_not_exist(name, "get_float");
      return float_properties[name];


  - name: get_int
    type: int
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    body: |
      throw_if_key_does_not_exist(name, "get_int");
      return int_properties[name];


  - name: get_color
    type: std::string
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    body: |
      throw_if_key_does_not_exist(name, "get_color");
      return color_properties[name];


  - name: get_type
    type: std::string
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    body: |
      throw_if_key_does_not_exist(name, "get_type");
      if (float_properties.find(name) != float_properties.end()) return "float";
      if (int_properties.find(name) != int_properties.end()) return "int";
      if (bool_properties.find(name) != bool_properties.end()) return "bool";
      if (string_properties.find(name) != string_properties.end()) return "string";
      if (color_properties.find(name) != color_properties.end()) return "color";
      return "[ERROR-does_not_exist]";


  - name: exists
    type: bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    body: |
      if (float_properties.find(name) != float_properties.end()) return true;
      if (int_properties.find(name) != int_properties.end()) return true;
      if (bool_properties.find(name) != bool_properties.end()) return true;
      if (string_properties.find(name) != string_properties.end()) return true;
      if (color_properties.find(name) != color_properties.end()) return true;
      return false;


  - name: is_float
    type: bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    body: |
      throw_if_key_does_not_exist(name, "is_float");
      if (float_properties.find(name) != float_properties.end()) return true;
      return false;


  - name: is_bool
    type: bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    body: |
      throw_if_key_does_not_exist(name, "is_bool");
      if (bool_properties.find(name) != bool_properties.end()) return true;
      return false;


  - name: is_int
    type: bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    body: |
      throw_if_key_does_not_exist(name, "is_int");
      if (int_properties.find(name) != int_properties.end()) return true;
      return false;


  - name: is_string
    type: bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    body: |
      throw_if_key_does_not_exist(name, "is_string");
      if (string_properties.find(name) != string_properties.end()) return true;
      return false;


  - name: is_color
    type: bool
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    body: |
      throw_if_key_does_not_exist(name, "is_color");
      if (color_properties.find(name) != color_properties.end()) return true;
      return false;


  - name: throw_if_key_already_exists
    private: true
    parameters:
      - name: key
        type: std::string
        default_argument: '"[unset-key]"'
      - name: while_in_method_name
        type: std::string
        default_argument: '"[unset-location]"'
    body: |
      if (!exists(key)) return;
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::Tiled::TMJObjectCustomProperties::" + while_in_method_name,
         "The key \"" + key + "\" already exists."
      );
      return;
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: throw_if_key_does_not_exist
    private: true
    parameters:
      - name: key
        type: std::string
        default_argument: '"[unset-key]"'
      - name: while_in_method_name
        type: std::string
        default_argument: '"[unset-location]"'
    body: |
      if (exists(key)) return;
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::Tiled::TMJObjectCustomProperties::" + while_in_method_name,
         "The key \"" + key + "\" does not exist."
      );
      return;
    body_dependency_symbols:
      - AllegroFlare::Logger


dependencies:


  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]


