properties:


  - name: filename
    type: std::string
    init_with: '"filename-not-set.tmj"'
    constructor_arg: true
    setter: explicit

  - name: num_columns
    type: int
    init_with: 0
    getter: explicit

  - name: num_rows
    type: int
    init_with: 0
    getter: explicit

  - name: tile_width
    type: int
    init_with: 0
    getter: explicit

  - name: tile_height
    type: int
    init_with: 0
    getter: explicit

  - name: layer_num_columns
    type: int
    init_with: 0
    getter: explicit

  - name: layer_num_rows
    type: int
    init_with: 0
    getter: explicit

  - name: collision_tilelayer_is_present
    type: int
    init_with: 0
    getter: explicit

  - name: collision_layer_num_columns
    type: int
    init_with: 0
    getter: explicit

  - name: collision_layer_num_rows
    type: int
    init_with: 0
    getter: explicit

  - name: collision_layer_tile_data
    type: std::vector<int>
    init_with: '{}'
    getter: explicit

  - name: tilelayers_tile_data
    type: std::map<std::string, std::vector<int>>
    init_with: '{}'
    getter: explicit

  - name: map_class
    type: std::string
    init_with: '"[unset-map_class]"'
    getter: explicit

  - name: map_custom_properties
    type: AllegroFlare::Tiled::TMJObjectCustomProperties
    init_with: '{}'
    getter: explicit

  - name: tilesets
    type: std::vector<std::tuple<int, std::string, std::string>>
    init_with: '{}'
    getter: explicit

  - name: throw_on_missing_collision_tilelayer
    type: bool
    init_with: false
    getter: true

  - name: normalize_tile_data_from_tilesets
    type: bool
    init_with: true

  - name: reduce_any_non_zero_collision_layer_data_to_1
    type: bool
    init_with: true

  - name: loaded
    type: bool
    init_with: false
    getter: true

  - name: objects
    type: std::vector<AllegroFlare::Tiled::TMJObject>
    init_with: '{}'
    getter: true
    getter_ref: true


documentation:


  - todos:
      - Restructure the "normalize_tile_data_from_tilesets" functionality out of this class and make it the
        a optional feature when extracting the data.


methods:


  - name: for_each_object
    parameters:
      - name: function
        type: std::function<void(AllegroFlare::Tiled::TMJObject*, void*)>
        default_argument: '{}'
      - name: user_data
        type: void*
        default_argument: nullptr
    guards: [ loaded ]
    body: |
      for (auto &object : objects)
      {
         function(&object, user_data);
      }
      return;


  - name: set_filename
    parameters:
      - name: filename
        type: std::string
        default_argument: '"[unset-filename]"'
    guards: [ (!loaded) ]
    body: |
      this->filename = filename;


  - name: get_num_columns
    type: int
    guards: [ loaded ]
    body: return num_columns;


  - name: get_num_rows
    type: int
    guards: [ loaded ]
    body: return num_rows;


  - name: get_tile_width
    type: int
    guards: [ loaded ]
    body: return tile_width;


  - name: get_tile_height
    type: int
    guards: [ loaded ]
    body: return tile_height;


  - name: get_layer_num_columns
    type: int
    guards: [ loaded ]
    body: return layer_num_columns;


  - name: get_layer_num_rows
    type: int
    guards: [ loaded ]
    body: return layer_num_rows;


  - name: get_collision_tilelayer_is_present
    type: bool
    guards: [ loaded ]
    body: return collision_tilelayer_is_present;


  - name: get_collision_layer_num_columns
    type: int
    guards: [ loaded, collision_tilelayer_is_present ]
    body: return collision_layer_num_columns;


  - name: get_collision_layer_num_rows
    type: int
    guards: [ loaded, collision_tilelayer_is_present ]
    body: return collision_layer_num_rows;


  - name: get_collision_layer_tile_data
    type: std::vector<int>
    guards: [ loaded, collision_tilelayer_is_present ]
    body: return collision_layer_tile_data;


  - name: get_tilelayers_tile_data
    type: std::map<std::string, std::vector<int>>
    guards: [ loaded ]
    body: return tilelayers_tile_data;


  - name: get_map_class
    type: std::string
    guards: [ loaded ]
    body: return map_class;


  - name: get_map_custom_properties
    type: AllegroFlare::Tiled::TMJObjectCustomProperties
    guards: [ loaded ]
    body: return map_custom_properties;


  - name: get_tilesets
    type: std::vector<std::tuple<int, std::string, std::string>>
    guards: [ loaded ]
    body: return tilesets;


  - name: get_tilelayer_data_by_name
    type: std::vector<int>
    parameters:
      - name: tilelayer_name
        type: std::string
        default_argument: '"[unset-tilelayer_name]"'
    guards: [ loaded, tilelayer_exists(tilelayer_name) ]
    body: |
      // TODO: Test this
      // TODO: Test guards
      // TODO: Improve non-existent layer name error message
      return tilelayers_tile_data[tilelayer_name];


  - name: get_tilelayer_data_by_name_as_2d_vector
    type: std::vector<std::vector<int>>
    parameters:
      - name: tilelayer_name
        type: std::string
        default_argument: '"[unset-tilelayer_name]"'
    guards: [ loaded, tilelayer_exists(tilelayer_name) ]
    body: |
      // TODO: Test this
      // TODO: Test guards
      // TODO: Improve non-existent layer name error message
      std::vector<std::vector<int>> result;
      std::vector<int> &tilelayer_data = tilelayers_tile_data[tilelayer_name];
      for (int y=0; y<num_rows; y++)
      {
         result.push_back(std::vector<int>(num_columns));

         for (int x=0; x<num_columns; x++)
         {
            result.back()[x] = tilelayer_data[x + y * num_columns];
         }
      }
      return result;


  - name: tilelayer_exists
    type: bool
    parameters:
      - name: tilelayer_name
        type: std::string
        default_argument: '"[unset-tilelayer_name]"'
    body: |
      return tilelayers_tile_data.find(tilelayer_name) != tilelayers_tile_data.end();


  - name: load
    type: bool
    guards: [ (!loaded) ]
    body: |
      if (!file_exists(filename))
      {
          AllegroFlare::Logger::throw_missing_file_error("AllegroFlare::Tiled::TMJDataLoader::load", filename, "tmj");
      }

      // load and validate the json data to variables
      std::ifstream i(filename);
      nlohmann::json j;
      try
      {
         i >> j;
      }
      catch (const std::exception& e)
      {
         i.close();
         std::stringstream error_message;
         error_message << "[AllegroFlare::Tiled::TMJDataLoader::load()]: error: The file "
                       << "\"" << filename << "\" appears to have"
                       << " malformed JSON. The following error was thrown by nlohmann::json: \""
                       << e.what() << "\"";
         throw std::runtime_error(error_message.str());
      }

      num_columns = j["width"]; // get width
      num_rows = j["height"]; // get height
      tile_width = j["tilewidth"]; // get width
      tile_height = j["tileheight"]; // get height



      // Obtain the list of "tilesets" (note that multiple tilesets might be used. In the tile data, the value used
      // on each tile is relative to the "firstgid" for that tileset.
      std::vector<std::pair<std::string, int>> tilesets_info; // *source*, *firstgid*
      std::set<int> tilesets_gids;
      if (!j.contains("tilesets"))
      {
         // TODO: Test this throw
         AllegroFlare::Logger::warn_from(
            "AllegroFlare::Tiled::TMJDataLoader::load",
            "Expecting tmj file to contain a root-level \"tilesets\" property when loading \""
               + filename + "\", but it does not exist."
         );
      }
      else
      {
         // TODO: Validate "tilesets" is an array
         for (auto &tileset : j["tilesets"].items())
         {
            int firstgid = tileset.value()["firstgid"];
            //firstgid -= 1; // NOTE: note the -1 here

            tilesets_info.push_back({
               tileset.value()["source"],
               firstgid
            });
            tilesets_gids.insert(firstgid);
         }
      }



      // Extract map "class" (or set to blank if it's not present)
      if (!j.contains("class"))
      {
         map_class = "";
      }
      else
      {
         map_class = j["class"].get<std::string>();
      }


      // Extract map custom properties
      map_custom_properties = attempt_to_extract_custom_properties(&j);




      // Extract the tilesets
      if (!j.contains("tilesets"))
      {
         AllegroFlare::Logger::warn_from(
            "AllegroFlare::Tiled::TMJDataLoader::load",
            "The map does not contain any section \"tilesets\". If this is expected behavior please ignore this "
               "warning message. TODO: Add option to disable this warning."
         );
      }
      else
      {
         if (!j["tilesets"].is_array())
         {
            AllegroFlare::Logger::throw_error(
               "AllegroFlare::Tiled::TMJDataLoader::load",
               "The section \"tilesets\" is present but is not an array."
            );
         }
         
         for (auto &tileset : j["tilesets"].items())
         {
            int firstgid = tileset.value()["firstgid"].get<int>();
            std::string source = tileset.value()["source"].get<std::string>();

            tilesets.push_back(
               std::tuple<int, std::string, std::string>{
                  firstgid,
                  source,
                  extract_last_fragment(source)
               }
            );
         }
      }



      //layer_num_columns = tilelayer["width"];
      //layer_num_rows = tilelayer["height"];
      //layer_tile_data = tilelayer["data"].get<std::vector<int>>();
      if (normalize_tile_data_from_tilesets)
      {
         // TODO: Test this normalization is correct with multiple tilesets
         //layer_tile_data = normalize_tile_data_to_tilesets_firstgids(
               //layer_tile_data,
               //tilesets_gids
            //);

         //background_tilelayer_tile_data = normalize_tile_data_to_tilesets_firstgids(
               //background_tilelayer_tile_data,
               //tilesets_gids
            //);

         //foreground_tilelayer_tile_data = normalize_tile_data_to_tilesets_firstgids(
               //foreground_tilelayer_tile_data,
               //tilesets_gids
            //);
      }


      //
      // Collision tile layer
      //

      // Get the first layer named "collision"

      //bool throw_on_missing_collision_layer = false;
      {
         //bool collision_tilelayer_type_found = false;
         collision_tilelayer_is_present = false;
         nlohmann::json collision_tilelayer;

         // TODO: Confirm "layers" is an array
         for (auto &layer : j["layers"].items())
         {
            if (layer.value()["type"] == "tilelayer" && layer.value()["name"] == "collision")
            {
               collision_tilelayer = layer.value();
               collision_tilelayer_is_present = true;
               break;
            }
         }

         if (!collision_tilelayer_is_present)
         {
            collision_tilelayer_is_present = false;
            std::stringstream error_message;
            error_message << "collision_tilelayer type not found. Expecting a layer of type "
                          << "\"tilelayer\" that also has a \"name\" property of \"collision\". ";
                          // TODO: << "Note that only the following tilelayer type layers are present: ";
            int layer_num = 0;
            for (auto &layer : j["layers"].items())
            {
               layer_num++;
               error_message << "  - layer " << layer_num << ":" << std::endl;
               error_message << "    - type: \"" << layer.value()["type"] << "\"" << std::endl;
               error_message << "    - name: \"" << layer.value()["name"] << "\"" << std::endl;
            }
            //throw std::runtime_error(error_message.str());
            if (!throw_on_missing_collision_tilelayer)
            {
               AllegroFlare::Logger::warn_from(
                  "AllegroFlare::Tiled::TMJDataLoader",
                  error_message.str()
               );
            }
            else
            {
               AllegroFlare::Logger::throw_error(
                  "AllegroFlare::Tiled::TMJDataLoader",
                  error_message.str()
               );
            }
         }
         else
         {
            collision_layer_num_columns = collision_tilelayer["width"];
            collision_layer_num_rows = collision_tilelayer["height"];
            collision_layer_tile_data = collision_tilelayer["data"].get<std::vector<int>>();

            if (normalize_tile_data_from_tilesets)
            {
               // TODO: Test this normalization is correct with multiple tilesets
               collision_layer_tile_data = normalize_tile_data_to_tilesets_firstgids(
                     collision_layer_tile_data,
                     tilesets_gids
                  );
            }

            if (reduce_any_non_zero_collision_layer_data_to_1)
            {
               std::set<int> modified_values;
               for (auto &collision_layer_tile_datum : collision_layer_tile_data)
               {
                  if (collision_layer_tile_datum > 1)
                  {
                     modified_values.insert(collision_layer_tile_datum);
                     collision_layer_tile_datum = 1;
                  }
               }

               if (!modified_values.empty())
               {
                  // Convert the list to string
                  std::ostringstream oss;
                  for (auto it = modified_values.begin(); it != modified_values.end(); ++it)
                  {
                     oss << *it;
                     if (std::next(it) != modified_values.end()) {
                        oss << ", ";
                     }
                  }
                  std::string list_of_modified_values = oss.str();

                  AllegroFlare::Logger::warn_from(
                     "AllegroFlare::Tiled::TMJDataLoader::load",
                     "Note that reduce_any_non_zero_collision_layer_data_to_1 is set to \"true\", and during processing "
                        "the following values were found and truncated to 1: [ " + list_of_modified_values + " ]."
                  );
               }
            }
         }
      }


      // Load *all* tile layers
      {
         //bool collision_tilelayer_type_found = false;
         int layer_num_columns = 0;
             //type: int
             //init_with: 0
             //getter: explicit

          int layer_num_rows = 0;
             //type: int
             //init_with: 0
             //getter: explicit

           std::vector<int> layer_tile_data;
           //- name:
            //collision_layer_tile_data
             //type: std::vector<int>
             //init_with: '{}'
             //getter: explicit
         nlohmann::json tilelayer;
         std::string tilelayer_name;
         std::string layer_name;

         for (auto &layer : j["layers"].items())
         {
            if (layer.value()["type"] != "tilelayer") continue; // && layer.value()["name"] == "collision")
            //{
               tilelayer = layer.value();
               tilelayer_name = layer.value()["name"];
               //tilelayer_type_found = true;
               //break;
            //}
         //}

            layer_num_columns = tilelayer["width"];
            layer_num_rows = tilelayer["height"];
            layer_tile_data = tilelayer["data"].get<std::vector<int>>();

            if (normalize_tile_data_from_tilesets)
            {
               // TODO: Test this normalization is correct with multiple tilesets
               layer_tile_data = normalize_tile_data_to_tilesets_firstgids(
                     layer_tile_data,
                     tilesets_gids
                  );
            }

            tilelayers_tile_data[tilelayer_name] = layer_tile_data;
         }

         // HERE
         //- name: tilelayers_tile_data
           //type: std::map<std::string, std::vector<int>>
           //init_with: '{}'
           //getter: explicit
         //tilelayers_tile_data[tilelayer_name] = layer_tile_data;
      }



      // Load the object layers
      for (auto &layer : j["layers"].items())
      {
         if (layer.value()["type"] == "objectgroup")
         {
            auto &object_layer_json = layer.value();

            if (!object_layer_json.contains("name"))
            {
               AllegroFlare::Logger::throw_error(
                  "AllegroFlare::Tiled::TMJDataLoader::load",
                  "When parsing an \"objectgroup\" type layer, expecting a property of type \"name\" but it does not "
                     "exist."
               );
            }

            std::string object_layer_name = object_layer_json["name"].get<std::string>();

            if (!object_layer_json.contains("objects"))
            {
               std::stringstream error_message;
               error_message << "Expecting [\"objects\"] to exist in the \"objectgoup\"-type layer, but it does not.";
               AllegroFlare::Logger::throw_error(
                  "AllegroFlare::Tiled::TMJDataLoader::load",
                  error_message.str()
               );
            }
            for (auto &object_json : object_layer_json["objects"].items())
            {
               // Note that for compatibility reasons with Tiled, both "class" and "type" are used as possible keys.
               // Depending on the version of Tiled that exported the format, one or the other could have been used.
               // Here in AllegroFlare, it us currently referred to it as "type", which is the correct Tiled name for the
               // property.  Note that for a temporary period it was changed to "class" in Tiled.
               // See this issue for more info: https://github.com/mapeditor/tiled/issues/3492

               // TODO: Throw error if "class" is present, advise to rename/update to "type"
               if (!object_json.value().contains("class") && !object_json.value().contains("type"))
               {
                  AllegroFlare::Logger::throw_error(
                     "AllegroFlare::Tiled::TMJDataLoader::load",
                     "When parsing properties on an object, expecting to find \"class\" or \"type\" but neither was "
                        "present. This error occurred while loading \"" + filename + "\"."
                  );
               }

               // Extract the "type". Note that different versions of Tiled have swapped "class" and "type" as the
               // keys for this value.
               std::string type_property;
               if (object_json.value().contains("class")) type_property =
                  object_json.value()["class"].get<std::string>();
               else if (object_json.value().contains("type")) type_property =
                  object_json.value()["type"].get<std::string>();

               std::string name_property = object_json.value()["name"].get<std::string>();
               int id_property = object_json.value()["id"].get<int>();
               float x_property = object_json.value()["x"].get<float>();
               float y_property = object_json.value()["y"].get<float>();
               float width_property = object_json.value()["width"].get<float>();
               float height_property = object_json.value()["height"].get<float>();
               std::vector<AllegroFlare::Vec2D> polygon = {};
               AllegroFlare::Tiled::TMJObjectCustomProperties custom_properties;

               // Load the "polygon" vertices
               if (object_json.value().contains("polygon"))
               {
                  if (!object_json.value()["polygon"].is_array())
                  {
                     throw std::runtime_error("AllegroFlare::Tiled::TMJDataLoader: polygon is not array");
                  }

                  for (auto &polygon_point : object_json.value()["polygon"].items())
                  {
                     if (!polygon_point.value().contains("x") || !polygon_point.value().contains("y"))
                     {
                        throw std::runtime_error("AllegroFlare::Tiled::TMJDataLoader: polygon point does not contain "
                           "\"x\", \"y\")");
                     }
                     float x = polygon_point.value()["x"].get<float>();
                     float y = polygon_point.value()["y"].get<float>();
                     polygon.push_back({x, y});
                  }
               }

               /*
               // Load custom properties
               if (object_json.value().contains("properties"))
               {
                  // TODO: Improve this error message
                  if (!object_json.value()["properties"].is_array())
                  {
                     throw std::runtime_error("3j4io5jio3j5o2: is not array");
                  }

                  for (auto &custom_property_item : object_json.value()["properties"].items())
                  //for (auto &custom_property_item : values["properties"].items())
                  {
                     nlohmann::json custom_property = custom_property_item.value();
                     std::string custom_property_name = custom_property["name"];

                     if (!custom_property.contains("type"))
                     {
                        AllegroFlare::Logger::throw_error(
                           "AllegroFlare::Tiled::TMJDataLoader::load",
                           "When parsing custom properties on an object, expecting to find \"type\" but it was not "
                              "present. This error occurred while loading \"" + filename + "\"."
                        );
                     }

                     std::string custom_property_type = custom_property["type"];

                     // TODO: Test the parsing of these custom values
                     if (custom_property_type == "string")
                     {
                        std::string custom_property_value = custom_property["value"];
                        custom_properties.add_string(custom_property_name, custom_property_value);
                     }
                     else if (custom_property_type == "int")
                     {
                        int custom_property_value = custom_property["value"];
                        custom_properties.add_int(custom_property_name, custom_property_value);
                     }
                     else if (custom_property_type == "float")
                     {
                        float custom_property_value = custom_property["value"];
                        custom_properties.add_float(custom_property_name, custom_property_value);
                     }
                     else if (custom_property_type == "bool")
                     {
                        bool custom_property_value = custom_property["value"];
                        custom_properties.add_bool(custom_property_name, custom_property_value);
                     }
                     else if (custom_property_type == "object")
                     {
                        int custom_property_value = custom_property["value"];
                        if (custom_property_value == 0)
                        {
                           AllegroFlare::Logger::warn_from(
                              "AllegroFlare::Tiled::TMJDataLoader::load",
                              "When loading custom properies, the property name \"" + custom_property_type + "\" was "
                                 "parsed with value of \"0\", indicating that it is empty (or unset) in Tiled. The "
                                 "loader will skip over including this property internally."
                           );
                        }
                        else
                        {
                           custom_properties.add_int(custom_property_name, custom_property_value);
                        }
                     }
                     else
                     {
                        AllegroFlare::Logger::throw_error(
                           "AllegroFlare::Tiled::TMJDataLoader::load",
                           "When loading custom properies, an object contained a custom property of type \"" +
                              custom_property_type + "\" which is not handled here."
                        );
                     }
                  }
               }
               */

               // TODO: Test this
               custom_properties = attempt_to_extract_custom_properties(&object_json.value());

               objects.push_back({});
               auto &object = objects.back();

               object.id = id_property;
               object.type = type_property;
               object.x = x_property;
               object.y = y_property;
               object.width = width_property;
               object.height = height_property;
               object.name = name_property;
               object.object_layer_name = object_layer_name;
               object.polygon = polygon;
               object.custom_properties = custom_properties;
            }
         }
      }

      loaded = true;

      i.close();

      return true;
    body_dependency_symbols:
      - AllegroFlare::Logger
      - std::stringstream
      - nlohmann::json
      - std::ifstream
      - AllegroFlare::Logger
      - AllegroFlare::StringFormatValidator


  - name: extract_last_fragment
    static: true
    type: std::string
    parameters:
      - name: path_string
        type: std::string
        default_argument: '"[unset-string]"'
    body: |
      size_t last_slash_pos = path_string.find_last_of("/");

      // Extract the substring after the last '/'
      if (last_slash_pos == std::string::npos)
      {
         //return path_string.substr(last_slash_pos + 1);
      //}
         AllegroFlare::Logger::warn_from(
            "AllegroFlare::Tiled::TMJDataLoader::extract_last_fragment",
            "When attempting to extract the image filename from the path string \"" + path_string + "\", one could "
               "not be captured. If this is a real file path, this method should be updated to account for it, "
               "and for now the image filename will not be known and will be blank."
         );
      }
      else
      {
         return path_string.substr(last_slash_pos + 1);
      }
      return "";


  - name: attempt_to_extract_custom_properties
    type: AllegroFlare::Tiled::TMJObjectCustomProperties
    parameters:
      - name: object_json
        xtype: std::pair<const std::string, nlohmann::json>
        type: nlohmann::json*
        default_argument: nullptr
    body: |
      AllegroFlare::Tiled::TMJObjectCustomProperties custom_properties;

      // Load custom properties
      //if (object_json.value().contains("properties"))
      if (object_json->contains("properties"))
      {
         // TODO: Improve this error message
         //if (!object_json.value()["properties"].is_array())
         if (!object_json->operator[]("properties").is_array())
         {
            throw std::runtime_error("3j4io5jio3j5o2: is not array");
         }

         //for (auto &custom_property_item : object_json.value()["properties"].items())
         for (auto &custom_property_item : object_json->operator[]("properties").items())
         //for (auto &custom_property_item : values["properties"].items())
         {
            nlohmann::json custom_property = custom_property_item.value();
            std::string custom_property_name = custom_property["name"];

            if (!custom_property.contains("type"))
            {
               AllegroFlare::Logger::throw_error(
                  "AllegroFlare::Tiled::TMJDataLoader::load",
                  "When parsing custom properties on an object, expecting to find \"type\" but it was not "
                     "present. This error occurred while loading \"" + filename + "\"."
               );
            }

            std::string custom_property_type = custom_property["type"];

            // TODO: Test the parsing of these custom values
            if (custom_property_type == "string")
            {
               std::string custom_property_value = custom_property["value"];
               custom_properties.add_string(custom_property_name, custom_property_value);
            }
            else if (custom_property_type == "int")
            {
               int custom_property_value = custom_property["value"];
               custom_properties.add_int(custom_property_name, custom_property_value);
            }
            else if (custom_property_type == "float")
            {
               float custom_property_value = custom_property["value"];
               custom_properties.add_float(custom_property_name, custom_property_value);
            }
            else if (custom_property_type == "bool")
            {
               bool custom_property_value = custom_property["value"];
               custom_properties.add_bool(custom_property_name, custom_property_value);
            }
            else if (custom_property_type == "object")
            {
               int custom_property_value = custom_property["value"];
               if (custom_property_value == 0)
               {
                  AllegroFlare::Logger::warn_from(
                     "AllegroFlare::Tiled::TMJDataLoader::load",
                     "When loading custom properies, the property name \"" + custom_property_type + "\" was "
                        "parsed with value of \"0\", indicating that it is empty (or unset) in Tiled. The "
                        "loader will skip over including this property internally."
                  );
               }
               else
               {
                  custom_properties.add_int(custom_property_name, custom_property_value);
               }
            }
            else
            {
               AllegroFlare::Logger::throw_error(
                  "AllegroFlare::Tiled::TMJDataLoader::load",
                  "When loading custom properies, an object contained a custom property of type \"" +
                     custom_property_type + "\" which is not handled here."
               );
            }
         }
      }
      return custom_properties;


  - name: normalize_tile_data_to_tilesets_firstgids
    type: std::vector<int>
    parameters:
      - name: data
        type: std::vector<int>
        default_argument: '{}'
      - name: tilesets_firstgids
        type: std::set<int>
        default_argument: '{}'
    body: |
      for (auto &datum : data)
      {
         for (auto rit = tilesets_firstgids.rbegin(); rit != tilesets_firstgids.rend(); ++rit)
         {
            if (datum >= *rit)
            {
               datum = datum - *rit + 1; // TODO: Test this calculation is correct
               goto out;
            }
         }
         out:
      }
      return data;


  - name: file_exists
    type: bool
    static: true
    private: true
    parameters:
      - name: filename
        type: std::string
        default_argument: '"[unset-filename]"'
    body: |
      return std::filesystem::exists(filename);
    body_dependency_symbols:
      - std::filesystem::exists


dependencies:


  - symbol: std::ifstream
    headers: [ fstream ]
  - symbol: nlohmann::json
    headers: [ lib/nlohmann/json.hpp ]
  - symbol: std::filesystem::exists
    headers: [ filesystem ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::StringFormatValidator
    headers: [ AllegroFlare/StringFormatValidator.hpp ]
  - symbol: tsl::ordered_map
    headers: [ lib/tsl/ordered_map.h ]
  - symbol: AllegroFlare::Tiled::TMJObject
    headers: [ AllegroFlare/Tiled/TMJObject.hpp ]
  - symbol: AllegroFlare::Tiled::TMJObjectCustomProperties
    headers: [ AllegroFlare/Tiled/TMJObjectCustomProperties.hpp ]


