parent_classes:


  - class: AllegroFlare::TileMaps::AutoTile::Filters::Base
    scope: public
    init_with: AllegroFlare::TileMaps::AutoTile::Filters::MonolineBlobsHorizontal::TYPE


properties:


  - name: solid_tile_value
    type: int
    init_with: 1
    constructor_arg: true
    getter: true
    setter: true

  - name: monoline_blobs_horizontal_tiles_definition
    type: std::map<uint32_t, int>
    constructor_arg: true
    init_with: build_default_monoline_blobs_horizontal_tiles_definition()
    getter: true
    setter: true

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/TileMaps/AutoTile/Filters/MonolineBlobsHorizontal"'
    static: true
    constexpr: true


enums:


  - scope: public
    enumerators:
      - UNDEF
      - EMPTY
      - SOLID
      - LEFT_CAP
      - RIGHT_CAP
      - LEFT_GAP
      - RIGHT_GAP
      - ISOLATED


functions:


  - name: process
    virtual: true
    override: true
    type: bool
    body: |
      // TODO: finish the remaining match rules on this class
      AllegroFlare::TileMaps::AutoTile::FilterMatrix &input_matrix = get_input_matrix_ref();
      AllegroFlare::TileMaps::AutoTile::FilterMatrix &result_matrix = get_result_matrix_ref();
      int &s = solid_tile_value;
      int _ = -1;
      // NOTE: This match type seems to work for now, but may need to be reviewed (or a new match type introduced
      // in the future.)  Note that the default is OUT_OF_BOUNDS_MATCH_TYPE_EXTRUDED_EDGES (and should remain the 
      // preferred default.)
      std::string match_type = AllegroFlare::TileMaps::AutoTile::Filters::Base::OUT_OF_BOUNDS_MATCH_TYPE_POSITIVE;


      // Resize the result matrix
      result_matrix.resize(input_matrix.get_width(), input_matrix.get_height());



      // basic solid tile

      // Build our match_matrix for the "basic solid tile fiter"
      std::vector<std::vector<int>> basic_solid_tile_match_matrix = {
        // TODO: use ignore tile in corner tiles of this matrix
        { s },
      };

      // Build our apply_matrix for the "basic solid tile filter"
      std::vector<std::vector<int>> basic_solid_tile_apply_matrix = {
        { get_tile_for(SOLID) },
      };

      iterate_through_input_and_apply_to_result_if_match(
         basic_solid_tile_match_matrix,
         basic_solid_tile_apply_matrix,
         0, // match_matrix_offset_x
         0, // match_matrix_offset_y
         0, // apply_matrix_offset_x
         0, // apply_matrix_offset_y
         match_type
      );



      // basic empty tile

      // Build our match_matrix for the "basic empty tile fiter"
      std::vector<std::vector<int>> basic_empty_tile_match_matrix = {
        // TODO: use ignore tile in corner tiles of this matrix
        { 0 },
      };

      // Build our apply_matrix for the "basic empty tile filter"
      std::vector<std::vector<int>> basic_empty_tile_apply_matrix = {
        { get_tile_for(EMPTY) },
      };

      iterate_through_input_and_apply_to_result_if_match(
         basic_empty_tile_match_matrix,
         basic_empty_tile_apply_matrix,
         0, // match_matrix_offset_x
         0, // match_matrix_offset_y
         0, // apply_matrix_offset_x
         0, // apply_matrix_offset_y
         match_type
      );



      // deep solid tile (this is not practically applied to anything in this case)

      // Build our match_matrix for the "deep solid tile fiter"
      std::vector<std::vector<int>> deep_solid_tile_match_matrix = {
        // TODO: use ignore tile in corner tiles of this matrix
        { _, _, _ },
        { 0, s, s },
        { _, _, _ },
      };

      // Build our apply_matrix for the "deep solid tile filter"
      std::vector<std::vector<int>> deep_solid_tile_apply_matrix = {
        { _, _,                      _ },
        { _, get_tile_for(LEFT_CAP), _ },
        { _, _,                      _ },
      };

      iterate_through_input_and_apply_to_result_if_match(
         deep_solid_tile_match_matrix,
         deep_solid_tile_apply_matrix,
         1, // match_matrix_offset_x
         1, // match_matrix_offset_y
         1, // apply_matrix_offset_x
         1, // apply_matrix_offset_y
         match_type
      );



      return true;


  - name: get_tile_for
    type: int
    parameters:
      - name: edge_tile_name
        type: uint32_t
        default_argument: UNDEF
    guards: [ (monoline_blobs_horizontal_tiles_definition.count(edge_tile_name) != 0) ]
    body: |
      return monoline_blobs_horizontal_tiles_definition[edge_tile_name];


  - name: build_default_monoline_blobs_horizontal_tiles_definition
    static: true
    type: std::map<uint32_t, int>
    body: |
      std::function<decltype(tile_coord_to_contiguous)> tc =
         AllegroFlare::TileMaps::AutoTile::Filters::Base::tile_coord_to_contiguous;
      int num_columns = 7;
      int xo = 0;

      std::map<uint32_t, int> result = {
         { UNDEF,        tc(0+xo, 0, num_columns) },
         { EMPTY,        tc(0+xo, 0, num_columns) },
         { SOLID,        tc(3+xo, 0, num_columns) },
         { ISOLATED,     tc(1+xo, 0, num_columns) },
         { LEFT_CAP,     tc(2+xo, 0, num_columns) },
         { RIGHT_CAP,    tc(4+xo, 0, num_columns) },
         { LEFT_GAP,     tc(5+xo, 0, num_columns) },
         { RIGHT_GAP,    tc(6+xo, 0, num_columns) },
      };
      return result;
    body_dependency_symbols:
      - std::function


dependencies:


  - symbol: AllegroFlare::TileMaps::AutoTile::Filters::Base
    headers: [ AllegroFlare/TileMaps/AutoTile/Filters/Base.hpp ]


