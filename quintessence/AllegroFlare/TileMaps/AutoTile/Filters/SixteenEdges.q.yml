parent_classes:


  - class: AllegroFlare::TileMaps::AutoTile::Filters::Base
    scope: public
    init_with: AllegroFlare::TileMaps::AutoTile::Filters::SixteenEdges::TYPE


properties:


  - name: solid_tile_value
    type: int
    init_with: 1
    constructor_arg: true
    getter: true
    setter: true

  - name: sixteen_edges_tiles_definition
    type: std::map<uint32_t, int>
    constructor_arg: true
    init_with: build_default_sixteen_edges_tiles_definition()
    getter: true
    setter: true

  - name: UNDEF
    type: uint32_t
    init_with: 0
    const: true
    constexpr: true
    static: true

  - name: TOP_LEFT
    type: uint32_t
    init_with: 1
    const: true
    constexpr: true
    static: true

  - name: TOP
    type: uint32_t
    init_with: 2
    const: true
    constexpr: true
    static: true

  - name: TOP_RIGHT
    type: uint32_t
    init_with: 3
    const: true
    constexpr: true
    static: true

  - name: TOP_TIP
    type: uint32_t
    init_with: 4
    const: true
    constexpr: true
    static: true

  - name: LEFT
    type: uint32_t
    init_with: 5
    const: true
    constexpr: true
    static: true

  - name: FULL
    type: uint32_t
    init_with: 6
    const: true
    constexpr: true
    static: true

  - name: RIGHT
    type: uint32_t
    init_with: 7
    const: true
    constexpr: true
    static: true

  - name: CENTER
    type: uint32_t
    init_with: 8
    const: true
    constexpr: true
    static: true

  - name: BOTTOM_LEFT
    type: uint32_t
    init_with: 9
    const: true
    constexpr: true
    static: true

  - name: BOTTOM
    type: uint32_t
    init_with: 10
    const: true
    constexpr: true
    static: true

  - name: BOTTOM_RIGHT
    type: uint32_t
    init_with: 11
    const: true
    constexpr: true
    static: true

  - name: BOTTOM_TIP
    type: uint32_t
    init_with: 12
    const: true
    constexpr: true
    static: true

  - name: LEFT_TIP
    type: uint32_t
    init_with: 13
    const: true
    constexpr: true
    static: true

  - name: MIDDLE
    type: uint32_t
    init_with: 14
    const: true
    constexpr: true
    static: true

  - name: RIGHT_TIP
    type: uint32_t
    init_with: 15
    const: true
    constexpr: true
    static: true

  - name: ISOLATED
    type: uint32_t
    init_with: 16
    const: true
    constexpr: true
    static: true

  - name: TYPE
    type: char*
    init_with: '(char*)"Filters/SixteenEdges"'
    static: true
    constexpr: true


functions:


  - name: process
    virtual: true
    override: true
    type: bool
    body: |
      // TODO: this class
      AllegroFlare::TileMaps::AutoTile::FilterMatrix &input_matrix = get_input_matrix_ref();
      AllegroFlare::TileMaps::AutoTile::FilterMatrix &result_matrix = get_result_matrix_ref();

      // Resize the result matrix
      result_matrix.resize(input_matrix.get_width(), input_matrix.get_height());

      // Build our match_matrix for the "floor tile fiter"
      std::vector<std::vector<int>> floor_tile_match_matrix = {
        { 0                },
        { solid_tile_value },
      };

      // Build our apply_matrix for the "floor tile filter"
      std::vector<std::vector<int>> floor_tile_apply_matrix = {
        { -1 },
        { get_tile_for(TOP) },
      };

      iterate_through_input_and_apply_to_result_if_match(floor_tile_match_matrix, floor_tile_apply_matrix);

      return true;


  - name: iterate_through_input_and_apply_to_result_if_match
    parameters:
      - name: match_matrix
        type: std::vector<std::vector<int>>
        default_argument: '{}'
      - name: apply_matrix
        type: std::vector<std::vector<int>>
        default_argument: '{}'
    guards:
      - "AllegroFlare::TileMaps::AutoTile::FilterMatrix::STATIC_is_valid(match_matrix)"
      - "AllegroFlare::TileMaps::AutoTile::FilterMatrix::STATIC_is_valid(apply_matrix)"
    body: |
      // TODO: come up with a better name for this function
      AllegroFlare::TileMaps::AutoTile::FilterMatrix &input_matrix = get_input_matrix_ref();
      AllegroFlare::TileMaps::AutoTile::FilterMatrix &result_matrix = get_result_matrix_ref();

      // Comb through the input_matrix and stamp the result if there is a match
      for (int y=0; y<input_matrix.get_height(); y++)
         for (int x=0; x<input_matrix.get_width(); x++)
         {
            if (matrix_matches(match_matrix, x, y))
            {
               stamp_to_result(apply_matrix, x, y);
            }
         }
      return;


  - name: stamp_to_result
    parameters:
      - name: stamp_matrix
        type: std::vector<std::vector<int>>
        default_argument: '{}'
      - name: offset_x
        type: int
        default_argument: 0
      - name: offset_y
        type: int
        default_argument: 0
      - name: ignore_if_out_of_bounds_on_result
        type: bool
        default_argument: true
      - name: ignore_if_negative_tile_value_on_stamp
        type: bool
        default_argument: true
    guards: [ "AllegroFlare::TileMaps::AutoTile::FilterMatrix::STATIC_is_valid(stamp_matrix)" ]
    body: |
      // TODO: consider removing "STATIC_is_valid" guard for performance
      AllegroFlare::TileMaps::AutoTile::FilterMatrix &result_matrix = get_result_matrix_ref();
      int stamp_matrix_width = stamp_matrix[0].size();
      int stamp_matrix_height = stamp_matrix.size();

      for (int y=0; y<stamp_matrix_height; y++)
         for (int x=0; x<stamp_matrix_width; x++)
         {
            // Get the stamp value
            int stamp_tile_value = stamp_matrix[y][x];
            // Skip if we don't want negative stamp values
            if (ignore_if_negative_tile_value_on_stamp && stamp_tile_value < 0) continue;

            result_matrix.set_tile_ignore_if_out_of_bounds(offset_x + x, offset_y + y, stamp_tile_value);
            // TODO: respect "ignore_if_out_of_bounds_on_result" argument by calling this function instead:
            //result_matrix.set_tile(offset_x + x, offset_y + y, stamp_tile_value);
         }

      return;


  - name: matrix_matches
    type: bool
    parameters:
      - name: match_matrix
        type: std::vector<std::vector<int>>
        default_argument: '{}'
      - name: x
        type: int
        default_argument: 0
      - name: y
        type: int
        default_argument: 0
    guards: [ "AllegroFlare::TileMaps::AutoTile::FilterMatrix::STATIC_is_valid(match_matrix)" ]
    body: |
      AllegroFlare::TileMaps::AutoTile::FilterMatrix &input_matrix = get_input_matrix_ref();
      return (
            input_matrix.tile_matches(x, y,   match_matrix[0][0]) // WARNING: this is hard-coded (0, 0)
         && input_matrix.tile_matches(x, y+1, match_matrix[1][0]) // WARNING: this is hard-coded (0, 0)
      );


  - name: get_tile_for
    type: int
    parameters:
      - name: edge_tile_name
        type: uint32_t
        default_argument: UNDEF
    guards: [ (sixteen_edges_tiles_definition.count(edge_tile_name) != 0) ]
    body: |
      return sixteen_edges_tiles_definition[edge_tile_name];


  - name: tile_coord_to_contiguous
    type: int
    static: true
    parameters:
      - name: tile_x
        type: int
        default_argument: 0
      - name: tile_y
        type: int
        default_argument: 0
      - name: tile_atlas_num_columns
        type: int
        default_argument: 0
    guards: [ (tile_atlas_num_columns > 0), (tile_x < tile_atlas_num_columns) ]
    body: |
      return tile_x + tile_y * tile_atlas_num_columns;


  - name: build_default_sixteen_edges_tiles_definition
    static: true
    type: std::map<uint32_t, int>
    body: |
      std::function<decltype(tile_coord_to_contiguous)> tc =
         AllegroFlare::TileMaps::AutoTile::Filters::SixteenEdges::tile_coord_to_contiguous;
      int num_columns = 8;

      std::map<uint32_t, int> result = {
         { UNDEF,        tc(0, 0, num_columns) },
         { TOP_LEFT,     tc(1, 0, num_columns) },
         { TOP,          tc(2, 0, num_columns) },
         { TOP_RIGHT,    tc(4, 0, num_columns) },
         { TOP_TIP,      tc(0, 0, num_columns) },
         { LEFT,         tc(1, 1, num_columns) },
         { FULL,         tc(2, 1, num_columns) }, // is this the same as "middle", "full", "center"
         { RIGHT,        tc(3, 1, num_columns) },
         { CENTER,       tc(2, 1, num_columns) }, // is this the same as "middle", "full", "center"
         { BOTTOM_LEFT,  tc(1, 2, num_columns) },
         { BOTTOM,       tc(2, 2, num_columns) },
         { BOTTOM_RIGHT, tc(3, 2, num_columns) },
         { BOTTOM_TIP,   tc(0, 2, num_columns) },
         { LEFT_TIP,     tc(3, 1, num_columns) },
         { MIDDLE,       tc(2, 1, num_columns) }, // is this the same as "middle", "full", "center"
         { RIGHT_TIP,    tc(3, 3, num_columns) },
         { ISOLATED,     tc(0, 3, num_columns) },
      };
      return result;



dependencies:


  - symbol: AllegroFlare::TileMaps::AutoTile::Filters::Base
    headers: [ AllegroFlare/TileMaps/AutoTile/Filters/Base.hpp ]
  - symbol: AllegroFlare::TileMaps::AutoTile::FilterMatrix
    headers: [ AllegroFlare/TileMaps/AutoTile/FilterMatrix.hpp ]


