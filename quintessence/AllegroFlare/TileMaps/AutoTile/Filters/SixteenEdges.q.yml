parent_classes:


  - class: AllegroFlare::TileMaps::AutoTile::Filters::Base
    scope: public
    init_with: AllegroFlare::TileMaps::AutoTile::Filters::SixteenEdges::TYPE


properties:


  - name: floor_tile_value
    type: int
    init_with: 0
    constructor_arg: true
    getter: true
    setter: true

  - name: sixteen_edges_tiles_definition
    type: std::map<uint32_t, int>
    constructor_arg: true
    init_with: build_default_sixteen_edges_tiles_definition()
    getter: true
    setter: true

  - name: UNDEF
    type: uint32_t
    init_with: 0
    const: true
    constexpr: true
    static: true

  - name: TOP_LEFT
    type: uint32_t
    init_with: 1
    const: true
    constexpr: true
    static: true

  - name: TOP
    type: uint32_t
    init_with: 2
    const: true
    constexpr: true
    static: true

  - name: TOP_RIGHT
    type: uint32_t
    init_with: 3
    const: true
    constexpr: true
    static: true

  - name: TOP_TIP
    type: uint32_t
    init_with: 4
    const: true
    constexpr: true
    static: true

  - name: LEFT
    type: uint32_t
    init_with: 5
    const: true
    constexpr: true
    static: true

  - name: FULL
    type: uint32_t
    init_with: 6
    const: true
    constexpr: true
    static: true

  - name: RIGHT
    type: uint32_t
    init_with: 7
    const: true
    constexpr: true
    static: true

  - name: CENTER
    type: uint32_t
    init_with: 8
    const: true
    constexpr: true
    static: true

  - name: BOTTOM_LEFT
    type: uint32_t
    init_with: 9
    const: true
    constexpr: true
    static: true

  - name: BOTTOM
    type: uint32_t
    init_with: 10
    const: true
    constexpr: true
    static: true

  - name: BOTTOM_RIGHT
    type: uint32_t
    init_with: 11
    const: true
    constexpr: true
    static: true

  - name: BOTTOM_TIP
    type: uint32_t
    init_with: 12
    const: true
    constexpr: true
    static: true

  - name: LEFT_TIP
    type: uint32_t
    init_with: 13
    const: true
    constexpr: true
    static: true

  - name: MIDDLE
    type: uint32_t
    init_with: 14
    const: true
    constexpr: true
    static: true

  - name: RIGHT_TIP
    type: uint32_t
    init_with: 15
    const: true
    constexpr: true
    static: true

  - name: ISOLATED
    type: uint32_t
    init_with: 16
    const: true
    constexpr: true
    static: true

  - name: TYPE
    type: char*
    init_with: '(char*)"Filters/SixteenEdges"'
    static: true
    constexpr: true


functions:


  - name: process
    virtual: true
    override: true
    type: bool
    body: |
      // TODO: this class
      AllegroFlare::TileMaps::AutoTile::FilterMatrix &input_matrix = get_input_matrix_ref();
      AllegroFlare::TileMaps::AutoTile::FilterMatrix &result_matrix = get_result_matrix_ref();

      // Resize the result matrix
      result_matrix.resize(input_matrix.get_width(), input_matrix.get_height());

      // Build our match_matrix
      std::vector<std::vector<int>> match_matrix = {
        { 0 },
        { 1 },
      };

      std::vector<std::vector<int>> apply_this = {
        { 0 },
        { floor_tile_value },
      };

      for (int y=0; y<input_matrix.get_height(); y++)
         for (int x=0; x<input_matrix.get_width(); x++)
         {
            if (matrix_matches(match_matrix, x, y))
            {
               //result_matrix.set_tile(x, y, floor_tile_value);
               result_matrix.set_tile_ignore_if_out_of_bounds(x, y+1, floor_tile_value);
            }
         }

      return true;


  - name: matrix_matches
    type: bool
    parameters:
      - name: match_matrix
        type: std::vector<std::vector<int>>
        default_argument: '{}'
      - name: x
        type: int
        default_argument: 0
      - name: y
        type: int
        default_argument: 0
    guards: [ "AllegroFlare::TileMaps::AutoTile::FilterMatrix::STATIC_is_valid(match_matrix)" ]
    body: |
      AllegroFlare::TileMaps::AutoTile::FilterMatrix &input_matrix = get_input_matrix_ref();
      return (
            input_matrix.tile_matches(x, y,   match_matrix[0][0]) // WARNING: this is hard-coded (0, 0)
         && input_matrix.tile_matches(x, y+1, match_matrix[1][0]) // WARNING: this is hard-coded (0, 0)
      );


  - name: tile_coord_to_contiguous
    type: int
    static: true
    parameters:
      - name: tile_x
        type: int
        default_argument: 0
      - name: tile_y
        type: int
        default_argument: 0
      - name: tile_atlas_num_columns
        type: int
        default_argument: 0
    guards: [ (tile_atlas_num_columns > 0) ]
    body: |
      // TODO: this function
      return 0;


  - name: build_default_sixteen_edges_tiles_definition
    static: true
    type: std::map<uint32_t, int>
    body: |
      
      std::function<decltype(tile_coord_to_contiguous)> bitmap =
         AllegroFlare::TileMaps::AutoTile::Filters::SixteenEdges::tile_coord_to_contiguous;
      //auto bitmap = 0;
      auto c = 8; // num_columns_in_tilemap

      std::map<uint32_t, int> result = {
         { UNDEF,        bitmap(0, 0, 8) },
         { TOP_LEFT,     bitmap(1, 0, 8) },
         { TOP,          bitmap(2, 0, 8) },
         { TOP_RIGHT,    bitmap(4, 0, 8) },
         { TOP_TIP,      bitmap(0, 0, 8) },
         { LEFT,         bitmap(1, 1, 8) },
         { FULL,         bitmap(2, 1, 8) }, // is this the same as "middle", "full", "center"
         { RIGHT,        bitmap(3, 1, 8) },
         { CENTER,       bitmap(2, 1, 8) }, // is this the same as "middle", "full", "center"
         { BOTTOM_LEFT,  bitmap(1, 2, 8) },
         { BOTTOM,       bitmap(2, 2, 8) },
         { BOTTOM_RIGHT, bitmap(3, 2, 8) },
         { BOTTOM_TIP,   bitmap(0, 2, 8) },
         { LEFT_TIP,     bitmap(3, 1, 8) },
         { MIDDLE,       bitmap(2, 1, 8) }, // is this the same as "middle", "full", "center"
         { RIGHT_TIP,    bitmap(3, 3, 8) },
         { ISOLATED,     bitmap(0, 3, 8) },
      };
      return result;



dependencies:


  - symbol: AllegroFlare::TileMaps::AutoTile::Filters::Base
    headers: [ AllegroFlare/TileMaps/AutoTile/Filters/Base.hpp ]
  - symbol: AllegroFlare::TileMaps::AutoTile::FilterMatrix
    headers: [ AllegroFlare/TileMaps/AutoTile/FilterMatrix.hpp ]


