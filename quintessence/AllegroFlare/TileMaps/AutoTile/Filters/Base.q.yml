properties:


  - name: type
    type: std::string
    init_with: AllegroFlare::TileMaps::AutoTile::Filters::Base::TYPE
    constructor_arg: true
    getter: true

  - name: input_matrix
    type: AllegroFlare::TileMaps::AutoTile::FilterMatrix
    init_with: '{}'
    constructor_arg: true
    getter: true
    getter_ref: true
    setter: true

  - name: result_matrix
    type: AllegroFlare::TileMaps::AutoTile::FilterMatrix
    init_with: '{}'
    getter: true
    getter_ref: true

  - name: TYPE
    type: char*
    init_with: '(char*)"Filters/Base"'
    static: true
    constexpr: true


documentation:


  - body: |
      Note that a lot of logic in this initial concept is derived from 
      https://github.com/MarkOates/tilemap/blob/master/include/tilemap, for example
      https://github.com/MarkOates/tilemap/blob/master/include/tilemap/lib/SixteenEdgeTileSet.hpp
    todos:
      - Integrate SixteenEdgeTileSet concept for a quick draft at design



functions:


  - name: process
    type: bool
    virtual: true
    body: |
      return true;


  - name: iterate_through_input_and_apply_to_result_if_match
    parameters:
      - name: match_matrix
        type: std::vector<std::vector<int>>
        default_argument: '{}'
      - name: apply_matrix
        type: std::vector<std::vector<int>>
        default_argument: '{}'
      - name: match_matrix_offset_x
        type: int
        default_argument: 0
      - name: match_matrix_offset_y
        type: int
        default_argument: 0
      - name: apply_matrix_offset_x
        type: int
        default_argument: 0
      - name: apply_matrix_offset_y
        type: int
        default_argument: 0
      - name: ignore_if_negative_tile_value_on_match_matrix
        type: bool
        default_argument: true
      - name: out_of_bounds_on_input_matrix_is_positive_match
        type: bool
        default_argument: true
      - name: ignore_write_if_negative_tile_value_on_stamp_tile
        type: bool
        default_argument: true
      - name: ignore_if_stamp_tile_is_out_of_bounds_on_result_matrix
        type: bool
        default_argument: true
    guards:
      - "AllegroFlare::TileMaps::AutoTile::FilterMatrix::STATIC_is_valid(match_matrix)"
      - "AllegroFlare::TileMaps::AutoTile::FilterMatrix::STATIC_is_valid(apply_matrix)"
    body: |
      // TODO: come up with a better name for this function
      AllegroFlare::TileMaps::AutoTile::FilterMatrix &input_matrix = get_input_matrix_ref();
      AllegroFlare::TileMaps::AutoTile::FilterMatrix &result_matrix = get_result_matrix_ref();

      // Comb through the input_matrix and stamp the result if there is a match
      for (int y=0; y<input_matrix.get_height(); y++)
         for (int x=0; x<input_matrix.get_width(); x++)
         {
            bool matrix_match_is_positive = matrix_matches(
                  match_matrix,
                  x,
                  y,
                  match_matrix_offset_x,
                  match_matrix_offset_y,
                  ignore_if_negative_tile_value_on_match_matrix,
                  out_of_bounds_on_input_matrix_is_positive_match
               );

            if (matrix_match_is_positive)
            {
               stamp_to_result(
                  apply_matrix,
                  x,
                  y,
                  apply_matrix_offset_x,
                  apply_matrix_offset_y,
                  ignore_write_if_negative_tile_value_on_stamp_tile,
                  ignore_if_stamp_tile_is_out_of_bounds_on_result_matrix
               );
            }
         }
      return;


  - name: matrix_matches
    type: bool
    parameters:
      - name: match_matrix
        type: std::vector<std::vector<int>>
        default_argument: '{}'
      - name: at_coord_x
        type: int
        default_argument: 0
      - name: at_coord_y
        type: int
        default_argument: 0
      - name: match_matrix_offset_x
        type: int
        default_argument: 0
      - name: match_matrix_offset_y
        type: int
        default_argument: 0
      - name: ignore_if_negative_tile_value_on_match_matrix
        type: bool
        default_argument: true
      - name: out_of_bounds_on_input_is_positive_match
        type: bool
        default_argument: true
    guards: [ "AllegroFlare::TileMaps::AutoTile::FilterMatrix::STATIC_is_valid(match_matrix)" ]
    body: |
      // TODO: un-hardcode this function (note is done, just leaving commented code preserved in case of needed revert)
      AllegroFlare::TileMaps::AutoTile::FilterMatrix &input_matrix = get_input_matrix_ref();
      int match_matrix_width = match_matrix[0].size();
      int match_matrix_height = match_matrix.size();

      for (int y=0; y<match_matrix_height; y++)
         for (int x=0; x<match_matrix_width; x++)
         {
            int match_matrix_tile_value = match_matrix[y][x];
            if (ignore_if_negative_tile_value_on_match_matrix && match_matrix_tile_value < 0) continue;

            if (!input_matrix.tile_matches(
                     // TODO: use "match_matrix_offset_x" and "match_matrix_offset_y"
                     at_coord_x + x - match_matrix_offset_x,
                     at_coord_y + y - match_matrix_offset_y,
                     match_matrix_tile_value,
                     out_of_bounds_on_input_is_positive_match
                  )
            ) return false;
         }
      return true;

      //return (
            //input_matrix.tile_matches(at_coord_x, at_coord_y,   match_matrix[0][0]) // WARNING: this is hard-coded (0, 0)
         //&& input_matrix.tile_matches(at_coord_x, at_coord_y+1, match_matrix[1][0]) // WARNING: this is hard-coded (0, 0)
      //);


  - name: stamp_to_result
    parameters:
      - name: stamp_matrix
        type: std::vector<std::vector<int>>
        default_argument: '{}'
      - name: at_coord_x
        type: int
        default_argument: 0
      - name: at_coord_y
        type: int
        default_argument: 0
      - name: apply_matrix_offset_x
        type: int
        default_argument: 0
      - name: apply_matrix_offset_y
        type: int
        default_argument: 0
      - name: ignore_write_if_negative_tile_value_on_stamp_tile
        type: bool
        default_argument: true
      - name: ignore_if_stamp_tile_is_out_of_bounds_on_result_matrix
        type: bool
        default_argument: true
    guards: [ "AllegroFlare::TileMaps::AutoTile::FilterMatrix::STATIC_is_valid(stamp_matrix)" ]
    body: |
      // TODO: consider removing "STATIC_is_valid" guard for performance
      AllegroFlare::TileMaps::AutoTile::FilterMatrix &result_matrix = get_result_matrix_ref();
      int stamp_matrix_width = stamp_matrix[0].size();
      int stamp_matrix_height = stamp_matrix.size();

      for (int y=0; y<stamp_matrix_height; y++)
         for (int x=0; x<stamp_matrix_width; x++)
         {
            // Get the stamp value
            int stamp_tile_value = stamp_matrix[y][x];
            // Skip if we don't want negative stamp values
            if (ignore_write_if_negative_tile_value_on_stamp_tile && stamp_tile_value < 0) continue;

            if (ignore_if_stamp_tile_is_out_of_bounds_on_result_matrix)
            {
               // TODO: use "apply_matrix_offset_x" and "apply_matrix_offset_y"
               result_matrix.set_tile_ignore_if_out_of_bounds(
                  at_coord_x + x - apply_matrix_offset_x,
                  at_coord_y + y - apply_matrix_offset_y,
                  stamp_tile_value
               );
            }
            else
            {
               // TODO: use "apply_matrix_offset_x" and "apply_matrix_offset_y"
               // TODO: test this case
               result_matrix.set_tile(
                  at_coord_x + x - apply_matrix_offset_x,
                  at_coord_y + y - apply_matrix_offset_y,
                  stamp_tile_value
               );
            }
         }

      return;


  - name: tile_coord_to_contiguous
    type: int
    static: true
    parameters:
      - name: tile_x
        type: int
        default_argument: 0
      - name: tile_y
        type: int
        default_argument: 0
      - name: tile_atlas_num_columns
        type: int
        default_argument: 0
    guards: [ (tile_atlas_num_columns > 0), (tile_x < tile_atlas_num_columns) ]
    body: |
      return tile_x + tile_y * tile_atlas_num_columns;


dependencies:


  - symbol: AllegroFlare::TileMaps::AutoTile::FilterMatrix
    headers: [ AllegroFlare/TileMaps/AutoTile/FilterMatrix.hpp ]


