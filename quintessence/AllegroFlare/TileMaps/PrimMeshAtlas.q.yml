properties:


  - name: bitmap
    type: ALLEGRO_BITMAP*
    init_with: nullptr
    getter: true

  - name: bitmap_filename
    type: std::string
    init_with: '"[unset-bitmap_filename]"'
    getter: true
    setter: true

  - name: tile_width
    type: int
    init_with: 1
    getter: true
    setter: explicit

  - name: tile_height
    type: int
    init_with: 1
    getter: true
    setter: explicit

  - name: tile_spacing
    type: int
    init_with: 0
    getter: true
    setter: explicit

  - name: tile_index
    type: std::vector<AllegroFlare::TileMaps::PrimMeshAtlasIndexRecord>
    init_with: ''
    getter: true
    setter: false


methods:


  - name: set_tile_width
    parameters:
      - name: tile_width
        type: int
        default_argument: 16
    body: |
      // TODO: Consider re-evaluating this warning, consider initialization scheduling on this class instead, or
      // "setter: before_initialize" instead
      std::cout << "[PrimMeshAtlas::set_tile_width()] WARNING: setting the tile width will invalidate the mesh, please review."
                << std::endl;
      // TODO: important, the mesh needs to be refreshed if this value is changed
      this->tile_width = tile_width;
      return;
    body_dependency_symbols:
      - std::cout


  - name: set_tile_height
    parameters:
      - name: tile_height
        type: int
        default_argument: 16
    body: |
      // TODO: Consider re-evaluating this warning, consider initialization scheduling on this class instead, or
      // "setter: before_initialize" instead
      std::cout << "[PrimMeshAtlas::set_tile_height()] WARNING: setting the tile height will invalidate the mesh, please review."
                << std::endl;
      // TODO: important, the mesh needs to be refreshed if this value is changed
      this->tile_height = tile_height;
      return;
    body_dependency_symbols:
      - std::cout


  - name: set_tile_spacing
    parameters:
      - name: tile_spacing
        type: int
        default_argument: 16
    body: |
      // TODO: Consider re-evaluating this warning, consider initialization scheduling on this class instead, or
      // "setter: before_initialize" instead
      std::cout << "[PrimMeshAtlas::set_tile_spacing()] WARNING: setting the tile spacing will invalidate the mesh, please review."
                << std::endl;
      // TODO: important, the mesh needs to be refreshed if this value is changed
      this->tile_spacing = tile_spacing;
      return;
    body_dependency_symbols:
      - std::cout


  - name: clear
    body: |
      // TODO: Consider re-evaluating this warning, consider initialization scheduling on this class instead
      std::cout << "[PrimMeshAtlas::clear()] WARNING: this feature is destroying a bitmap that potentially may "
                << "have depenedencies (as sub-bitmaps). This destruction mechanism has not yet been properly "
                << "implemented."
                << std::endl;

      for (unsigned i=0; i<tile_index.size(); i++) al_destroy_bitmap(tile_index[i].get_sub_bitmap());
      if (bitmap) al_destroy_bitmap(bitmap);
      bitmap = NULL;
      tile_index.clear();
      return;
    body_dependency_symbols:
      - std::cout


  - name: duplicate_bitmap_and_load
    parameters:
      - name: source_bitmap
        type: ALLEGRO_BITMAP*
        default_argument: nullptr
      - name: tile_width
        type: int
        default_argument: 16
      - name: tile_height
        type: int
        default_argument: 16
      - name: tile_spacing
        type: int
        default_argument: 0
    body: |
      this->tile_width = tile_width;
      this->tile_height = tile_height;
      this->tile_spacing = tile_spacing;

      if (!source_bitmap)
      {
         std::cout << "[PrimMeshAtlas::load()] ERROR: the ALLEGRO_BITMAP provided is NULL" << std::endl;
      }

      // clear the existing contents of this tile atlas (if any)
      clear();

      bitmap = al_clone_bitmap(source_bitmap);

      int tile_step_x = tile_width + (tile_spacing*2);
      int tile_step_y = tile_height + (tile_spacing*2);

      int num_columns = al_get_bitmap_width(bitmap) / tile_step_x;
      int num_rows = al_get_bitmap_height(bitmap) / tile_step_y;
      tile_index.resize(num_columns * num_rows);

      // TODO: add one empty spot for "0"

      for (unsigned index_num=0; index_num<tile_index.size(); index_num++)
      {
         int x1 = (index_num % num_columns) * tile_step_x + tile_spacing;
         int y1 = (index_num / num_columns) * tile_step_y + tile_spacing;
         int x2 = x1 + tile_width;
         int y2 = y1 + tile_height;

         tile_index[index_num].set_index_num(index_num);
         tile_index[index_num].set_bitmap_source(nullptr);
         tile_index[index_num].set_sub_bitmap(al_create_sub_bitmap(bitmap, x1, y1, x2-x1, y2-y1));
         tile_index[index_num].set_u1(x1);
         tile_index[index_num].set_v1(y1);
         tile_index[index_num].set_u2(x2);
         tile_index[index_num].set_v2(y2);
      }
      return;


  - name: get_tile_index_size
    type: int
    body: |
      return tile_index.size();
      return 0;


  - name: get_bitmap_width
    type: int
    body: |
      if (!bitmap) return 0; // TODO: Consider throwing here instead
      return al_get_bitmap_width(bitmap);
      return 0;


  - name: get_bitmap_height
    type: int
    body: |
      if (!bitmap) return 0; // TODO: Consider throwing here instead
      return al_get_bitmap_height(bitmap);
      return 0;


  - name: get_tile_uv
    type: bool
    parameters:
      - name: index_num
        type: int
        default_argument: 0
      - name: u1
        type: int*
        default_argument: nullptr
      - name: v1
        type: int*
        default_argument: nullptr
      - name: u2
        type: int*
        default_argument: nullptr
      - name: v2
        type: int*
        default_argument: nullptr
    body: |
      // TODO: Investigate why there are two "get_tile_uv" methods, with int and float argument variants. Remove the
      // incorrect one if that's the case.
      if (index_num < 0 || index_num >= (int)tile_index.size()) return false;

      *u1 = tile_index[index_num].get_u1();
      *v1 = tile_index[index_num].get_v1();
      *u2 = tile_index[index_num].get_u2();
      *v2 = tile_index[index_num].get_v2();

      return true;


  - name: get_tile_uv
    type: bool
    parameters:
      - name: index_num
        type: int
        default_argument: 0
      - name: u1
        type: float*
        default_argument: nullptr
      - name: v1
        type: float*
        default_argument: nullptr
      - name: u2
        type: float*
        default_argument: nullptr
      - name: v2
        type: float*
        default_argument: nullptr
    body: |
      // TODO: Investigate why there are two "get_tile_uv" methods, with int and float argument variants. Remove the
      // incorrect one if that's the case.
      if (index_num < 0 || index_num >= (int)tile_index.size()) return false;

      *u1 = tile_index[index_num].get_u1();
      *v1 = tile_index[index_num].get_v1();
      *u2 = tile_index[index_num].get_u2();
      *v2 = tile_index[index_num].get_v2();

      return true;
      return false;


  - name: get_tile_sub_bitmap
    type: ALLEGRO_BITMAP*
    parameters:
      - name: index_num
        type: int
        default_argument: 0
    body: |
      if (index_num < 0 || index_num >= (int)tile_index.size()) return nullptr;
      return tile_index[index_num].get_sub_bitmap();
      return nullptr;


dependencies:


  - symbol: AllegroFlare::TileMaps::PrimMeshAtlasIndexRecord
    headers: [ AllegroFlare/TileMaps/PrimMeshAtlasIndexRecord.hpp ]
  - symbol: ALLEGRO_BITMAP
    headers: [ allegro5/allegro.h ]



