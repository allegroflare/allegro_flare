parent_classes:


  - class: AllegroFlare::CSVParser
    scope: public
    init_with: ''


properties:


  - name: csv_full_path
    type: std::string
    init_with: '"[unset-csv_full_path]"'
    getter: true
    setter: true

  - name: records
    type: std::vector<AllegroFlare::AssetStudio::Record>
    init_with: '{}'
    getter: explicit

  - name: loaded
    type: bool
    init_with: false

  - name: records_loaded
    type: bool
    init_with: false


documentation:


  - todos:
    - This class is actually an integration when used as expected. Consider testing it on both sides, in
      /../Repos/AllegroFlare and in /../Assets/
    

methods:


  - name: get_initialized
    type: bool
    body: |
      return loaded;


  - name: csv_file_exists
    type: bool
    body: |
      return std::filesystem::exists(csv_full_path);
    body_dependency_symbols:
      - std::filesystem::exists


  - name: num_records
    type: std::size_t
    guards: [ records_loaded ]
    body: |
      return records.size();


  - name: get_records
    type: std::vector<AllegroFlare::AssetStudio::Record>
    guards: [ records_loaded ]
    body: |
      return records;


  - name: record_exists
    type: bool
    parameters:
      - name: asset_identifier
        type: std::string
        default_argument: '"[unset-asset_identifier]"'
    guards: [ records_loaded ]
    body: |
      // TODO: Consider if an index on "Record::identifier" would be helpful
      for (auto &record : records) if (record.identifier == asset_identifier) return true;
      return false;


  - name: obtain_record_as_copy
    type: AllegroFlare::AssetStudio::Record
    parameters:
      - name: asset_identifier
        type: std::string
        default_argument: '"[unset-asset_identifier]"'
    guards: [ loaded ]
    body: |
      // TODO: Consider if an index on "Record::identifier" would be helpful
      for (auto &record : records) if (record.identifier == asset_identifier) return record;
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::AssetStudio::DatabaseCSVLoader::obtain_record_as_copy",
         "A record with the asset_identifier \"" + asset_identifier + "\" does not exist."
      );
      return {};


  - name: find_record
    type: AllegroFlare::AssetStudio::Record*
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"[unset-identifier]"'
    guards: [ records_loaded ]
    body: |
      // TODO: Test this
      for (auto &record : records) if (record.identifier == identifier) return &record;
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::AssetStudio::DatabaseCSVLoader::find_record",
         "A record with the identifier \"" + identifier + "\" does not exist."
      );
      return nullptr;


  - name: toi
    type: int
    static: true
    parameters:
      - name: value
        type: std::string
        default_argument: '"[unset-value]"'
    body: |
      if (value.empty()) return 0;
      if (value[0] == '+') value.erase(0, 1); // Pop front on the '+' sign
      return std::atoi(value.c_str());
    body_dependency_symbols:
      - std::atoi


  - name: tof
    type: float
    static: true
    parameters:
      - name: value
        type: std::string
        default_argument: '"[unset-value]"'
    body: |
      if (value.empty()) return 0;
      if (value[0] == '+') value.erase(0, 1); // Pop front on the '+' sign
      return std::stof(value.c_str());
    body_dependency_symbols:
      - std::stof


  - name: comma_separated_quoted_strings_to_vector_of_strings
    type: std::vector<std::string>
    static: true
    parameters:
      - name: comma_separated_quoted_strings
        type: std::string
        default_argument: '"[unset-comma_separated_quoted_strings]"'
    body: |
      std::vector<std::string> result;
      std::stringstream ss(comma_separated_quoted_strings);
      std::string current_element;
      bool in_quotes = false;

      // Parse the CSV list character by character
      for (char ch : comma_separated_quoted_strings)
      {
         if (ch == '"')
         {
            // Toggle quotes state
            in_quotes = !in_quotes;
         }
         else if (ch == ',' && !in_quotes)
         {
            // Found a comma outside quotes, push the current element
            result.push_back(current_element);
            current_element.clear(); // Reset for the next element
         }
         else if (in_quotes)
         {
            current_element += ch;
         }
      }

      // Push the last element if it's not empty
      if (!current_element.empty())
      {
         result.push_back(current_element);
      }

      return result;


  - name: comma_separated_strings_to_vector_of_strings
    type: std::vector<std::string>
    static: true
    parameters:
      - name: comma_separated_strings
        type: std::string
        default_argument: '"[unset-comma_separated_strings]"'
    body: |
      // NOTE: Does not account for nested strings
      return tokenize(comma_separated_strings, ',');


  - name: str_to_playmode
    type: std::pair<bool, uint32_t>
    parameters:
      - name: playmode_string
        type: std::string
        default_argument: '"[unset-playmode_string]"'
    body: |
      if (playmode_string == "once")
      {
         return { true, AllegroFlare::FrameAnimation::Animation::PLAYMODE_FORWARD_ONCE };
      }
      else if (playmode_string == "loop")
      {
         return { true, AllegroFlare::FrameAnimation::Animation::PLAYMODE_FORWARD_LOOP };
      }
      else if (playmode_string == "ping_pong_forward")
      {
         return { true, AllegroFlare::FrameAnimation::Animation::PLAYMODE_FORWARD_PING_PONG };
      }

      return { false, 0 };
    body_dependency_symbols:
      - AllegroFlare::FrameAnimation::Animation


  - name: validate_key_and_return
    type: std::string
    static: true
    parameters:
      - name: extracted_row
        type: std::map<std::string, std::string>*
        default_argument: nullptr
      - name: key
        type: std::string
        default_argument: '"[unset-key]"'
    body: |
      if (extracted_row->count(key) == 0)
      {
         std::vector<std::string> valid_keys;
         for (const auto& pair : *extracted_row) valid_keys.push_back(pair.first);

         std::stringstream ss;
         ss << "[";
         for (auto &valid_key : valid_keys)
         {
            ss << "\"" << valid_key << "\", ";
         }
         ss << "]";

         AllegroFlare::Logger::throw_error(
            "Robieo::CSVToLevelLoader::validate_key_and_return",
            "key \"" + key + "\" does not exist. The following keys are present: " + ss.str() + "."
         );
      }
      return extracted_row->operator[](key);
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: load_records
    guards: [ (!records_loaded) ]
    body: |
      if (!std::filesystem::exists(csv_full_path))
      {
         AllegroFlare::Logger::throw_error(
            "AllegroFlare::AssetStudio::DatabaseCSVLoader::load",
            "The file \"" + csv_full_path + "\" does not exist."
         );
      }
      std::string content = AllegroFlare::php::file_get_contents(csv_full_path);
      if (content.empty())
      {
         AllegroFlare::Logger::throw_error(
            "AllegroFlare::AssetStudio::DatabaseCSVLoader::load",
            "The file \"" + csv_full_path + "\" is present but appears to be empty."
         );
      }
      AllegroFlare::CSVParser csv_parser;
      csv_parser.set_raw_csv_content(content);
      csv_parser.parse();
      csv_parser.assemble_column_headers(3);


      //
      // Extract the data from the CSV into "records" (as AssetStudio/Record objects)
      //
      {
         records.clear();
         records.reserve(csv_parser.num_records());

         int first_record_row = csv_parser.get_num_header_rows();
         int row_i = first_record_row;
         int record_index_in_vector = 0;
         for (std::map<std::string, std::string> &extracted_row : csv_parser.extract_all_rows())
         {
            // Load the record data to CSV
            int id = toi(validate_key_and_return(&extracted_row, "id"));
            std::string identifier = validate_key_and_return(&extracted_row, "identifier");
            int source_csv_column_num = row_i;
            std::string status = validate_key_and_return(&extracted_row, "status");
            std::string visibility = validate_key_and_return(&extracted_row, "visibility");
            std::string type = validate_key_and_return(&extracted_row, "type");
            std::string asset_pack_identifier = validate_key_and_return(&extracted_row, "asset_pack_identifier");
            std::string intra_pack_identifier = validate_key_and_return(&extracted_row, "intra_pack_identifier");
            int cell_width = toi(validate_key_and_return(&extracted_row, "cell_width"));
            int cell_height = toi(validate_key_and_return(&extracted_row, "cell_height"));
            float align_x = tof(validate_key_and_return(&extracted_row, "align_x"));
            float align_y = tof(validate_key_and_return(&extracted_row, "align_y"));
            float align_in_container_x = tof(validate_key_and_return(&extracted_row, "align_in_container_x"));
            float align_in_container_y = tof(validate_key_and_return(&extracted_row, "align_in_container_y"));
            float anchor_x = tof(validate_key_and_return(&extracted_row, "anchor_x"));
            float anchor_y = tof(validate_key_and_return(&extracted_row, "anchor_y"));
            std::string image_filename = validate_key_and_return(&extracted_row, "image_filename");
            std::string images_list_raw = validate_key_and_return(&extracted_row, "images_list"); // ***
            std::string full_path_to_initial_image =
               validate_key_and_return(&extracted_row, "full_path_to_initial_image");
            std::string playmode = validate_key_and_return(&extracted_row, "playmode");
            std::string notes = validate_key_and_return(&extracted_row, "notes");
            std::string frame_data__build_n_frames__num_frames =
               validate_key_and_return(&extracted_row, "frame_data__build_n_frames__num_frames");
            std::string frame_data__build_n_frames__start_from_frame =
               validate_key_and_return(&extracted_row, "frame_data__build_n_frames__start_from_frame");
            std::string frame_data__build_n_frames__each_frame_duration =
               validate_key_and_return(&extracted_row, "frame_data__build_n_frames__each_frame_duration");
            std::string frame_data__in_hash = validate_key_and_return(&extracted_row, "frame_data__in_hash");

            // Create the record
            AllegroFlare::AssetStudio::Record record;

            record.id = id;
            record.identifier = identifier;
            record.source_csv_column_num = source_csv_column_num;
            record.status = status;
            record.visibility = visibility;
            record.type = type;
            record.asset_pack_identifier = asset_pack_identifier;
            record.intra_pack_identifier = intra_pack_identifier;
            record.cell_width = cell_width;
            record.cell_height = cell_height;
            record.align_x = align_x;
            record.align_y = align_y;
            record.align_in_container_x = align_in_container_x;
            record.align_in_container_y = align_in_container_y;
            record.anchor_x = anchor_x;
            record.anchor_y = anchor_y;
            record.image_filename = image_filename;
            record.images_list = comma_separated_strings_to_vector_of_strings(images_list_raw);
            record.full_path_to_initial_image = full_path_to_initial_image;
            record.playmode = playmode;
            record.notes = notes;
            // TODO: Test this is int
            record.frame_data__build_n_frames__num_frames = toi(frame_data__build_n_frames__num_frames);
            // TODO: Test this is int
            record.frame_data__build_n_frames__start_from_frame = toi(frame_data__build_n_frames__start_from_frame);
            // TODO: Test this is float
            record.frame_data__build_n_frames__each_frame_duration =
               tof(frame_data__build_n_frames__each_frame_duration);
            record.frame_data__in_hash = frame_data__in_hash;

            // Add the record
            records.push_back(record);

            row_i++;
         }
      }

      records_loaded = true;
      return;
    body_dependency_symbols:
      - AllegroFlare::UsefulPHP


  - name: split
    type: std::vector<std::string>
    private: true
    static: true
    parameters:
      - name: string
        type: std::string
        default_argument: '""'
      - name: delimiter
        type: char
        default_argument: "' '"
    body: |
      std::vector<std::string> elems;
      auto result = std::back_inserter(elems);
      std::stringstream ss(string);
      std::string item;
      while (std::getline(ss, item, delimiter)) { *(result++) = item; }
      return elems;


  - name: tokenize
    private: true
    static: true
    type: std::vector<std::string>
    parameters:
      - name: str
        type: std::string
        default_argument: '""'
      - name: delim
        type: char
        default_argument: "'|'"
    body: |
      std::vector<std::string> tokens = split(str, delim);
      for (auto &token : tokens) token = trim(token);
      return tokens;


  - name: trim
    type: std::string
    private: true
    static: true
    parameters:
      - name: s
        type: std::string
        default_argument: '""'
    body: |
      // ltrim
      s.erase(s.begin(), std::find_if(s.begin(), s.end(), [](int c) {return !std::isspace(c);}));
      // rtrim
      s.erase(std::find_if(s.rbegin(), s.rend(), [](int c) {return !std::isspace(c);}).base(), s.end());
      return s;
    body_dependency_symbols:
      - std::find_if


dependencies:


  - symbol: AllegroFlare::CSVParser
    headers: [ AllegroFlare/CSVParser.hpp ]
  - symbol: AllegroFlare::UsefulPHP
    headers: [ AllegroFlare/UsefulPHP.hpp ]
  - symbol: SurviveTheCity::CSVParser
    headers: [ SurviveTheCity/CSVParser.hpp ]
  - symbol: AllegroFlare::AssetStudio::Asset
    headers: [ AllegroFlare/AssetStudio/Asset.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: std::atoi
    headers: [ cstdlib ]
  - symbol: std::stof
    headers: [ string ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::FrameAnimation::SpriteSheet
    headers: [ AllegroFlare/FrameAnimation/SpriteSheet.hpp ]
  - symbol: AllegroFlare::FrameAnimation::Frame
    headers: [ AllegroFlare/FrameAnimation/Frame.hpp ]
  - symbol: std::find_if
    headers: [ algorithm ]
  - symbol: AllegroFlare::FrameAnimation::SpriteStripAssembler
    headers: [ AllegroFlare/FrameAnimation/SpriteStripAssembler.hpp ]
  - symbol: std::filesystem::exists
    headers: [ filesystem ]
  - symbol: AllegroFlare::AssetStudio::Record
    headers: [ AllegroFlare/AssetStudio/Record.hpp ]
  - symbol: AllegroFlare::FrameAnimation::Animation
    headers: [ AllegroFlare/FrameAnimation/Animation.hpp ]


