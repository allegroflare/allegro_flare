properties:


  - name: assets
    type: std::map<std::string, AllegroFlare::AssetStudio::Asset*>
    init_with: ''
    getter: true
    setter: true

  - name: global_identifier_prefix
    type: std::string
    init_with: DEFAULT_GLOBAL_IDENTIFIER_PREFIX
    getter: true
    setter: explicit

  - name: using_global_identifier_prefix
    type: bool
    init_with: false
    getter: true

  - name: DEFAULT_GLOBAL_IDENTIFIER_PREFIX
    type: char*
    init_with: '(char*)"asset_studio::"'
    static: true
    constexpr: true


methods:


  - name: set_global_identifier_prefix
    parameters:
      - name: global_identifier_prefix
        type: std::string
        default_argument: DEFAULT_GLOBAL_IDENTIFIER_PREFIX
    guards: [ (!using_global_identifier_prefix) ]
    body: |
      if (using_global_identifier_prefix) remove_global_identifier_prefixes();
      this->global_identifier_prefix = global_identifier_prefix;
      prefix_global_identifier_prefix_to_identifiers(this->global_identifier_prefix);
      return;


  - name: remove_global_identifier_prefix
    guards: [ using_global_identifier_prefix ]
    body: |
      if (using_global_identifier_prefix) remove_global_identifier_prefixes();
      return;


  - name: asset_identifiers
    type: std::set<std::string>
    body: |
      std::set<std::string> result;
      for (auto &asset : assets) result.insert(asset.first);
      return result;


  - name: remove_global_identifier_prefixes
    private: true
    guards: [ using_global_identifier_prefix ]
    body: |
      int prefix_length = global_identifier_prefix.length();

      // Pull out the keys first
      std::vector<std::string> asset_keys;
      for (auto &asset : assets)
      {
         asset_keys.push_back(asset.first);
      }
    
      // Go through each key, and remove n characters from the front of each key
      for (auto &asset_key : asset_keys)
      {
         auto extracted_asset_element = assets.extract(asset_key);
         extracted_asset_element.key() = extracted_asset_element.key().substr(prefix_length);
         // TODO: Validate new key does not already exist
         assets.insert(std::move(extracted_asset_element));
      }

      using_global_identifier_prefix = false;
      return;


  - name: prefix_global_identifier_prefix_to_identifiers
    private: true
    parameters:
      - name: prefix
        type: std::string
        default_argument: '"[unset-prefix]"'
    guards: [ (!using_global_identifier_prefix) ]
    body: |
      // Pull out the keys first
      std::vector<std::string> asset_keys;
      for (auto &asset : assets)
      {
         asset_keys.push_back(asset.first);
      }

      // Go through each key, and rename
      for (auto &asset_key : asset_keys)
      {
         auto extracted_asset_element = assets.extract(asset_key);
         extracted_asset_element.key() = prefix + asset_key;
         // TODO: Validate new key does not already exist
         assets.insert(std::move(extracted_asset_element));
      }

      global_identifier_prefix = prefix; // TODO: Test this assignment
      using_global_identifier_prefix = true;
      return;


  - name: asset_exists
    type: bool
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"[unset-identifier]"'
    body: |
      return (assets.count(identifier) > 0);


  - name: find_asset_by_identifier
    type: AllegroFlare::AssetStudio::Asset*
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"[unset-identifier]"'
    body: |
      if (assets.count(identifier) == 0)
      {
         AllegroFlare::Errors::throw_error(
               "AllegroFlare::AssetStudio::Database::find_asset_by_identifier",
               "No asset exists with the identifier \"" + identifier+ "\""
            );
      }
      return assets[identifier];
    body_dependency_symbols:
      - AllegroFlare::Errors


  - name: asset_exists_as_animation
    type: bool
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"[unset-identifier]"'
    body: |
      if (!(assets.count(identifier) > 0)) return false;
      AllegroFlare::AssetStudio::Asset* asset = find_asset_by_identifier(identifier);
      if (asset->animation) return true;
      return false;


  - name: find_animation_by_identifier
    type: AllegroFlare::FrameAnimation::Animation*
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"[unset-identifier]"'
    body: |
      if (!asset_exists(identifier))
      {
         AllegroFlare::Errors::throw_error(
               "AllegroFlare::AssetStudio::Database::find_animation_by_identifier",
               "No asset exists for identifier \"" + identifier+ "\" to evaluate for an animation."
            );
      }
      AllegroFlare::AssetStudio::Asset* asset = find_asset_by_identifier(identifier);
      if (!asset->animation)
      {
         AllegroFlare::Errors::throw_error(
               "AllegroFlare::AssetStudio::Database::find_animation_by_identifier",
               "The asset \"" + identifier+ "\" exists but does not contain an animation."
            );
      }
      return asset->animation;
    body_dependency_symbols:
      - AllegroFlare::Errors


dependencies:


  - symbol: AllegroFlare::Errors
    headers: [ AllegroFlare/Errors.hpp ]
  - symbol: AllegroFlare::FrameAnimation::Animation
    headers: [ AllegroFlare/FrameAnimation/Animation.hpp ]
  - symbol: AllegroFlare::AssetStudio::Asset
    headers: [ AllegroFlare/AssetStudio/Asset.hpp ]


