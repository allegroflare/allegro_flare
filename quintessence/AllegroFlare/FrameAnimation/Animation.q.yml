properties:


  - name: sprite_sheet
    type: AllegroFlare::FrameAnimation::SpriteSheet*
    init_with: nullptr
    constructor_arg: true
    getter: true

  - name: name
    type: std::string
    init_with: '"[unset-name]"'
    constructor_arg: true

  - name: frames
    type: std::vector<AllegroFlare::FrameAnimation::Frame>
    init_with: '{}'
    constructor_arg: true
    getter: true

  - name: playmode
    type: uint32_t
    init_with: PLAYMODE_UNDEF
    constructor_arg: true
    getter: true

  - name: playspeed_multiplier
    type: float
    init_with: 1.0f
    getter: true
    setter: false

  - name: playhead
    type: float
    init_with: 0.0f
    getter: true

  - name: finished
    type: bool
    init_with: false
    getter: true

  - name: finished_at
    type: float
    init_with: 0.0f
    getter: true

  - name: initialized
    type: bool
    init_with: false
    getter: true


enums:


  - name: Playmode
    scope: public
    enumerators:
      - PLAYMODE_UNDEF
      - PLAYMODE_FORWARD_ONCE
      - PLAYMODE_FORWARD_ONCE_AND_HOLD_LAST_FRAME
      - PLAYMODE_FORWARD_LOOP
      - PLAYMODE_FORWARD_PING_PONG


documentation:


  - todos:
      - Currently, frame 0 id is a "dead" frame, and is skipped over when. This should be updated to have a better
        mechanism, including an option to display the dead frame.  Also, some animations will intermittently flash the
        0 frame. I'm not sure what the cause is but it needs to be looked into. Probably "empty" frame ids shoudl be
        returned as -1 and checked accordingly.
      - Add PLAYMODE_FORWARD_ONCE_AND_HOLD_LAST_FRAME


  - body_markdown: |-
      ## Terminology
      - cell:          an individual image from the sprite_sheet
      - frame:         an individual AllegroFlare::FrameAnimation::Frame* from the frames in this animation
      - frame_num:     the sequential number of a frame in an animation, starting with 0
                       (excluding any looping or ping-ponging)
      - frame_bitmap:  the bitmap image from the frame. A combination of the sprite sheet index num from the frame
                       and a lookup on the sprite sheet.
      - num_frames:    the number of frames in the animation (excluding any looping or ping-ponging)
      - sprite_sheet_cell_index_num:   the index of the bitmap in the sprite_sheet (was previously named "frame_id")
      ## Notes


functions:


  - name: initialize
    guards:
      - (!initialized)
      - sprite_sheet
      - sprite_sheet->get_initialized()
      - al_is_system_installed()
    body: |
      initialized = true;
      return;
    body_dependency_symbols:
      - al_is_system_installed


  - name: start
    guards: [ initialized ]
    body: |
      playhead = 0.0f;
      finished = false;
      finished_at = 0.0f;
      return;


  - name: reset
    guards: [ initialized ]
    body: |
      // NOTE: Internally, this is functionally the same as start()
      playhead = 0.0f;
      finished = false;
      finished_at = 0.0f;
      return;


  - name: set_playspeed_multiplier
    parameters:
      - name: playspeed_multiplier
        type: float
        default_argument: 1.0
    guards: [ (playspeed_multiplier >= 0.0f) ]
    body: |
      this->playspeed_multiplier = playspeed_multiplier;
      return;


  - name: update
    guards: [ initialized ]
    body: |
      // TODO: Pass in time_now (for capturing "finished_at")

      const float FRAME_INCREMENT = 1.0f/60.0f; // TODO: Move FRAME_INCREMENT to member.
                                                // TODO: Make sure FRAME_INCREMENT is guarded. Consider interesting
                                                // things that could happen with negative increment (reverse loop?)
      playhead += (FRAME_INCREMENT * playspeed_multiplier);

      // update "finished"
      switch(playmode)
      {
         case PLAYMODE_FORWARD_ONCE:
         case PLAYMODE_FORWARD_ONCE_AND_HOLD_LAST_FRAME:
            if (playhead > calculate_duration())
            {
               if (!finished)
               {
                  finished = true;
                  finished_at = al_get_time(); // NOTE: This will crash if al_init has not been called
               }
            }
         break;

         case PLAYMODE_FORWARD_LOOP:
           // NOTE: nothing to do, FORWARD_LOOP plays indefinitely
         break;

         case PLAYMODE_FORWARD_PING_PONG:
           // NOTE: nothing to do, PING_PONG plays indefinitely
         break;
      }
      return;


  - name: draw
    guards: [ initialized ]
    body: |
      ALLEGRO_BITMAP *bitmap = get_frame_bitmap_at_time(playhead);
      if (!bitmap) return;
      al_draw_bitmap(bitmap, 0, 0, 0);
      return;


  - name: get_num_frames
    type: int
    body: |
      return frames.size();


  - name: get_frame_bitmap_at_time
    type: ALLEGRO_BITMAP*
    parameters:
      - name: time
        type: float
        default_argument: 0.0f
    guards: [ initialized ]
    body: |
      int sprite_sheet_cell_index_num = get_sprite_sheet_cell_index_num_at(time);
      if (sprite_sheet_cell_index_num == -1) return nullptr;
      return sprite_sheet->get_cell(sprite_sheet_cell_index_num);


  - name: get_frame_bitmap_now
    type: ALLEGRO_BITMAP*
    guards: [ initialized ]
    body: |
      return get_frame_bitmap_at_time(playhead);


  - name: get_frame_alignment_and_anchors_now
    type: std::pair<bool, std::tuple<float, float, float, float, float, float>>
    body: |
      AllegroFlare::FrameAnimation::Frame *frame = get_frame_at(playhead);
      if (!frame) return { false, { 0, 0, 0, 0, 0, 0 } };
      return { true, {
         frame->get_align_x(),
         frame->get_align_y(),
         frame->get_align_in_container_x(),
         frame->get_align_in_container_y(),
         frame->get_anchor_x(),
         frame->get_anchor_y(),
      }};


  - name: get_frame_alignment_and_anchors_at_time
    type: ALLEGRO_BITMAP*
    parameters:
      - name: time
        type: float
        default_argument: 0.0f
    guards: [ initialized ]
    body: |
      // HERE
      int sprite_sheet_cell_index_num = get_sprite_sheet_cell_index_num_at(time);
      if (sprite_sheet_cell_index_num == -1) return nullptr;
      return sprite_sheet->get_cell(sprite_sheet_cell_index_num);


  - name: get_sprite_sheet_cell_index_num_now
    type: int
    guards: [ initialized ]
    body: |
      return get_sprite_sheet_cell_index_num_at(playhead);


  - name: get_frame_num_now
    type: int
    guards: [ initialized ]
    body: |
      return get_frame_num_at(playhead);


  - name: get_bitmap_at_frame_num
    type: ALLEGRO_BITMAP*
    parameters:
      - name: frame_num
        type: int
        default_argument: 0
    guards: [ initialized, (frame_num >= 0), (frame_num < frames.size()) ]
    body: |
      int sprite_sheet_cell_index_num = frames[frame_num].get_index();
      return sprite_sheet->get_cell(sprite_sheet_cell_index_num);


  - name: get_alignment_and_anchors_at_frame_num
    type: std::tuple<float, float, float, float>
    parameters:
      - name: frame_num
        type: int
        default_argument: 0
    guards: [ initialized, (frame_num >= 0), (frame_num < frames.size()) ]
    body: |
      // TODO: Never tested, never used
      std::tuple<float, float, float, float> result;

      auto &frame = frames[frame_num];

      result = {
         frame.get_align_x(),
         frame.get_align_y(),
         frame.get_anchor_x(),
         frame.get_anchor_y(),
      };

      return result;


  - name: get_frame_at
    type: AllegroFlare::FrameAnimation::Frame*
    parameters:
      - name: time
        type: float
        default_argument: 0.0f
    guards: [ initialized ]
    body: |
      return std::get<0>(get_frame_info_at(time));


  - name: get_frame_num_at
    type: int
    parameters:
      - name: time
        type: float
        default_argument: 0.0f
    guards: [ initialized ]
    body: |
      return std::get<1>(get_frame_info_at(time));


  - name: get_sprite_sheet_cell_index_num_at
    type: int
    parameters:
      - name: time
        type: float
        default_argument: 0.0f
    guards: [ initialized ]
    body: |
      return std::get<2>(get_frame_info_at(time));


  - name: get_frame_info_at
    type: std::tuple<AllegroFlare::FrameAnimation::Frame*, int, int>
    private: true
    parameters:
      - name: time
        type: float
        default_argument: 0.0f
    guards: [ initialized ]
    body: |
      // Note the return value is std::pair<frame, current_animations_frame_number, sprite_sheet_frame_index>

      float duration = calculate_duration();
      // The animation has a very very short duration (this is a technique to evaluate if it is invalid and contains
      // no frames)
      if (frames.empty()) return { nullptr, 0, -1 };
      // Previously: TODO: clear these lines
      //if (duration < 0.0001) return { nullptr, 0, 0 }; // TODO: have a value other than 0 representing the frame_count
                                                        // when not present
      int current_frame_count = 0;

      switch(playmode)
      {
         case PLAYMODE_FORWARD_ONCE: {
            float duration_so_far = 0.0f;
            for (auto &frame : frames)
            {
               duration_so_far += frame.get_duration();
               if (time < duration_so_far)
               {
                  AllegroFlare::FrameAnimation::Frame* result_frame = nullptr;
                  if (current_frame_count < frames.size()) result_frame = &frames[current_frame_count];
                  return { result_frame, current_frame_count, frame.get_index() };
               }
               current_frame_count++;
            }
         } break;

         case PLAYMODE_FORWARD_ONCE_AND_HOLD_LAST_FRAME: {
            float duration_so_far = 0.0f;
            for (auto &frame : frames)
            {
               duration_so_far += frame.get_duration();
               if (time < duration_so_far)
               {
                  AllegroFlare::FrameAnimation::Frame* result_frame = nullptr;
                  if (current_frame_count < frames.size()) result_frame = &frames[current_frame_count];
                  return { result_frame, current_frame_count, frame.get_index() };
               }
               current_frame_count++;
            }
            if (!frames.empty())
            {
               int last_frame_index = frames.size()-1;
               AllegroFlare::FrameAnimation::Frame* result_frame = &frames[last_frame_index];
               //int last_frame_in_animation = frmes
               return { result_frame, last_frame_index, result_frame->get_index() };
            }
         } break;

         case PLAYMODE_FORWARD_LOOP: {
            float duration_so_far = 0.0f;
            float duration = calculate_duration();
            float looped_playhead = fmod(time, duration);
            for (auto &frame : frames)
            {
               duration_so_far += frame.get_duration();
               if (looped_playhead < duration_so_far)
               {
                  AllegroFlare::FrameAnimation::Frame* result_frame = nullptr;
                  if (current_frame_count < frames.size()) result_frame = &frames[current_frame_count];
                  return { result_frame, current_frame_count, frame.get_index() };
               }
               current_frame_count++;
            }
         } break;

         case PLAYMODE_FORWARD_PING_PONG: {
            float duration_so_far = 0.0f;
            float duration = calculate_duration();

            // Create an virtual ping_pong_playhead that will play in reverse after the initial duration
            float ping_pong_playhead = fmod(time, duration*2);
            // If the virtual ping_pong_playhead is over half the duration, then have the playhead play in reverse
            if (ping_pong_playhead >= duration) ping_pong_playhead = duration*2 - ping_pong_playhead;

            for (auto &frame : frames)
            {
               duration_so_far += frame.get_duration();
               if (ping_pong_playhead < duration_so_far)
               {
                  AllegroFlare::FrameAnimation::Frame* result_frame = nullptr;
                  if (current_frame_count < frames.size()) result_frame = &frames[current_frame_count];
                  return { result_frame, current_frame_count, frame.get_index() };
               }
               current_frame_count++;
            }
         } break;
      }

      return { nullptr, current_frame_count, -1 };
    body_dependency_symbols:
      - fmod


  - name: calculate_duration
    type: float
    guards: [ initialized ]
    body: |
      float result = 0.0f;
      for (auto &frame : frames)
      {
         result += frame.get_duration();
      }
      return result;


dependencies:


  - symbol: AllegroFlare::FrameAnimation::Frame
    headers: [ AllegroFlare/FrameAnimation/Frame.hpp ]
  - symbol: AllegroFlare::FrameAnimation::SpriteSheet
    headers: [ AllegroFlare/FrameAnimation/SpriteSheet.hpp ]
  - symbol: ALLEGRO_BITMAP
    headers: [ allegro5/allegro.h ]
  - symbol: al_is_system_installed
    headers: [ allegro5/allegro.h ]
  - symbol: fmod
    headers: [ cmath ]


