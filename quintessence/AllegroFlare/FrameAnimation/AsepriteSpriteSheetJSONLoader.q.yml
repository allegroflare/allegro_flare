properties:


  - name: filename
    type: std::string
    init_with: '"./bin/data/bitmaps/sprites_grid-x.json"'
    constructor_arg: true

  - name: sprite_sheet
    type: AllegroFlare::FrameAnimation::SpriteSheet*
    init_with: nullptr
    constructor_arg: true

  - name: load_tag_names_ending_in_bang_char_with_looping_playmode
    type: bool
    init_with: true
    getter: true
    setter: true

  - name: discard_last_bang_char_in_tag_names
    type: bool
    init_with: true
    getter: true
    setter: true

  - name: PLAY_ONCE_BANG_CHAR
    type: char
    init_with: "'!'"
    static: true
    constexpr: true

  - name: PLAY_ONCE_AND_HOLD_LAST_FRAME_BANG_CHAR
    type: char
    init_with: "'.'"
    static: true
    constexpr: true


documentation:


  - todos:
    - Replace the filename default value with an "unset" value


functions:


  - name: load
    type: std::map<std::string, AllegroFlare::FrameAnimation::Animation>
    body: |
      using AllegroFlare::Errors;
      //std::string filename = "./bin/data/bitmaps/sprites_grid-x.json";

      if (!AllegroFlare::php::file_exists(filename))
      {
         AllegroFlare::Errors::throw_missing_file_error(
            "AllegroFlare::FrameAnimation::AsepriteSpriteSheetJSONLoader::load",
            filename,
            "json"
         );
      }
      nlohmann::json parsed_json = nlohmann::json::parse(AllegroFlare::php::file_get_contents(filename));
      std::map<std::string, AllegroFlare::FrameAnimation::Animation> result;

      // validate expected sections

      if (!parsed_json.contains("frames"))
      {
         Errors::throw_error("AllegroFlare::FrameAnimation/AsepriteSpriteSheetJSONDataLoader",
                             "missing \"frames\" element in json");
      }
      if (!parsed_json.contains("meta"))
      {
         Errors::throw_error("AllegroFlare::FrameAnimation/AsepriteSpriteSheetJSONDataLoader",
                             "missing \"meta\" element in json");
      }
      if (!parsed_json["meta"].contains("frameTags"))
      {
         Errors::throw_error("AllegroFlare::FrameAnimation/AsepriteSpriteSheetJSONDataLoader",
                             "missing [\"meta\"][\"tags\"] element in json");
      }

      // load frame data

      std::map<int, int> frame_data;
      nlohmann::json frames = parsed_json["frames"];
      int index = 0;
      if (!frames.is_array())
      {
         Errors::throw_error("AllegroFlare::FrameAnimation::AsepriteSpriteSheetJSONDataLoader::load",
                             "expecting \"frames\" element in the JSON to be an array, but it is a hash. When "
                             "exporting the "
                             "sprite sheet in Aesprite, go to File > Export Sprite Sheet. Under the \"Output\" tab, "
                             "the \"JSON data\" checkbox should be checked. In the dropdown just below, be sure "
                             "\"Array\" is selected and not \"Hash\". This is needed to ensure the frames are imported "
                             "in sequential order."
                            );

      }
      for (auto &frame : frames)
      {
         // TODO: validate frame name
         int frame_num = index;
         int duration_msec;
         frame.at("duration").get_to(duration_msec);

         frame_data[frame_num] = duration_msec;
         index++;
      }

      nlohmann::json tags = parsed_json["meta"]["frameTags"];
      //std::map<std::string, AllegroFlare::FrameAnimation::Animation> animations_dictionary;

      for (auto &tag : tags)
      {
         std::string unsanitized_tag_name;
         std::string tag_name;
         std::string mode;
         int start_frame, end_frame;

         tag.at("name").get_to(unsanitized_tag_name);
         tag.at("from").get_to(start_frame);
         tag.at("to").get_to(end_frame);
         tag.at("direction").get_to(mode);

         bool tag_name_ends_in_play_once_bang_char = ends_in_play_once_bang_char(unsanitized_tag_name);
         bool tag_name_ends_in_play_once_and_hold_bang_char =
            ends_in_play_once_and_hold_bang_char(unsanitized_tag_name);

         tag_name = discard_last_bang_char_in_tag_names
                  ? strip_appended_bang_char(unsanitized_tag_name)
                  : unsanitized_tag_name;

         if (result.count(tag_name) > 0)
         {
            std::stringstream error_message;
            error_message << "duplicate key (a.k.a. tag) for \"" << tag_name << "\"";
            Errors::throw_error("AllegroFlare::FrameAnimation::AsepriteSpriteSheetJSONDataLoader::load",
                                error_message.str());
         }


         bool playmode_is_looped = true;
         bool hold_last_frame = false;
         if (load_tag_names_ending_in_bang_char_with_looping_playmode && tag_name_ends_in_play_once_bang_char)
         {
            playmode_is_looped = false;
         }
         if (load_tag_names_ending_in_bang_char_with_looping_playmode &&
            tag_name_ends_in_play_once_and_hold_bang_char)
         {
            playmode_is_looped = false;
            hold_last_frame = true;
         }

         result[tag_name] = AllegroFlare::FrameAnimation::Animation(
            sprite_sheet,
            tag_name,
            _build_animation_frames_for(start_frame, end_frame, frame_data), // <- NOTE: this copy arg can be optimized
            _get_playmode_from_direction(mode, playmode_is_looped, hold_last_frame)
         );
      }

      return result;
    body_dependency_symbols:
      - AllegroFlare::FrameAnimation::Frame
      - AllegroFlare::FrameAnimation::Animation
      - AllegroFlare::Errors
      - AllegroFlare::UsefulPHP
      - nlohmann::json


  - name: _build_animation_frames_for
    type: std::vector<AllegroFlare::FrameAnimation::Frame>
    parameters:
      - name: start_frame
        type: uint32_t
        default_argument: 0
      - name: end_frame
        type: uint32_t
        default_argument: 0
      - name: frame_data
        type: std::map<int, int>
        default_argument: '{}'
    guards: [ end_frame >= start_frame ]
    body: |
      std::vector<AllegroFlare::FrameAnimation::Frame> result;
      for (uint32_t frame=start_frame; frame<=end_frame; frame++)
      {
         if (frame_data.count(frame) == 0)
         {
            // This frame does not exist
            Errors::throw_error("AllegroFlare::FrameAnimation::AsepriteSpriteSheetJSONDataLoader::_build_animation_frames_for",
                                "a frame does not exist for this num");
         }
         int duration_msec = frame_data[frame];
         result.push_back(AllegroFlare::FrameAnimation::Frame(frame, (float)duration_msec*0.001));
      }
      return result;


  - name: ends_in_play_once_bang_char
    type: bool
    parameters:
      - name: str
        type: std::string
        default_argument: '"[unset-str]"'
    body: |
      if (str.size() <= 1) return false;
      return str[str.size()-1] == PLAY_ONCE_BANG_CHAR;


  - name: ends_in_play_once_and_hold_bang_char
    type: bool
    parameters:
      - name: str
        type: std::string
        default_argument: '"[unset-str]"'
    body: |
      if (str.size() <= 1) return false;
      return str[str.size()-1] == PLAY_ONCE_AND_HOLD_LAST_FRAME_BANG_CHAR;


  - name: strip_appended_bang_char
    type: std::string
    parameters:
      - name: str
        type: std::string
        default_argument: '"[unset-str]"'
    body: |
      bool has_ending_bang_char = false;
      if (ends_in_play_once_bang_char(str)) has_ending_bang_char = true;
      else if (ends_in_play_once_and_hold_bang_char(str)) has_ending_bang_char = true;

      if (has_ending_bang_char) str.pop_back();

      return str;


  - name: _get_playmode_from_direction
    type: uint32_t
    parameters:
      - name: direction
        type: std::string
        default_argument: '"[unset-direction]"'
      - name: playmode_is_looped
        type: bool
        default_argument: true
      - name: hold_last_frame
        type: bool
        default_argument: false
    body: |
      std::map<std::string, uint32_t> playmode_map = {
         { "pingpong", AllegroFlare::FrameAnimation::Animation::PLAYMODE_FORWARD_PING_PONG },
         { "forward",  AllegroFlare::FrameAnimation::Animation::PLAYMODE_FORWARD_ONCE },
      };

      if (playmode_is_looped)
      {
         if (direction == "forward")
         {
            return AllegroFlare::FrameAnimation::Animation::PLAYMODE_FORWARD_LOOP;
         }
      }
      else // (!playmode_is_looped)
      {
         if (direction == "forward")
         {
            if (hold_last_frame) return AllegroFlare::FrameAnimation::Animation::PLAYMODE_FORWARD_ONCE_AND_HOLD_LAST_FRAME;
            else return AllegroFlare::FrameAnimation::Animation::PLAYMODE_FORWARD_ONCE;
         }
      }

      if (playmode_map.count(direction) == 0)
      {
           // This playmode does not exist
           Errors::throw_error("AllegroFlare::FrameAnimation::AsepriteSpriteSheetJSONDataLoader::_get_playmode_from_direction",
                               "a playmode does not exist for this direction.");
      }

      return playmode_map[direction];


dependencies:


  - symbol: AllegroFlare::UsefulPHP
    headers: [ AllegroFlare/UsefulPHP.hpp ]
  - symbol: nlohmann::json
    headers: [ lib/nlohmann/json.hpp ]
  - symbol: AllegroFlare::Errors
    headers: [ AllegroFlare/Errors.hpp ]
  - symbol: AllegroFlare::FrameAnimation::Animation
    headers: [ AllegroFlare/FrameAnimation/Animation.hpp ]
  - symbol: AllegroFlare::FrameAnimation::Frame
    headers: [ AllegroFlare/FrameAnimation/Frame.hpp ]
  - symbol: AllegroFlare::FrameAnimation::SpriteSheet
    headers: [ AllegroFlare/FrameAnimation/SpriteSheet.hpp ]
  - symbol: AllegroFlare::FrameAnimation::Errors
    headers: [ AllegroFlare/FrameAnimation/Errors.hpp ]


