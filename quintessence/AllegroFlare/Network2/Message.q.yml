properties:


  - name: HEADER_LENGTH
    static: true
    const: true
    type: std::size_t
    init_with: 16
    constexpr: true
    
  - name: MAX_BODY_LENGTH
    static: true
    const: true
    type: std::size_t
    init_with: 512
    constexpr: true

  - name: MAGIC_HEADER_CHUNK
    static: true
    const: true
    type: std::string
    getter: true
    init_with: '"AFNM"'

  - name: data
    type: std::string
    getter: true
    init_with: "HEADER_LENGTH+MAX_BODY_LENGTH, ' '"

  - name: body_length
    type: std::size_t
    getter: true
    setter: false
    init_with: 0


functions:


  - name: todo
    body: |
      // set guards for unexpected acces when header has not been encoded
      return;


  - name: data_ptr
    type: char*
    body: |
      return data.data();


  - name: body_ptr
    type: char*
    body: |
      return data.data() + HEADER_LENGTH;


  - name: length
    type: std::size_t
    body: |
       return HEADER_LENGTH + body_length;


  - name: set_body_length
    type: void
    parameters:
      - name: new_length
        type: std::size_t
        default_argument: 0
    guards: [ (!(new_length > MAX_BODY_LENGTH)) ]
    body: |
      body_length = new_length;
      return;


  - name: set_body
    type: void
    parameters:
      - name: content
        type: std::string
        default_argument: '""'
    guards: [ (!(content.size() > MAX_BODY_LENGTH)) ]
    body: |
      set_body_length(content.size());
      std::memcpy(data_ptr() + HEADER_LENGTH, content.c_str(), body_length);
      return;


  - name: get_header
    type: std::string
    body: |
      return data.substr(0, HEADER_LENGTH);


  - name: get_body
    type: std::string
    body: |
      return data.substr(HEADER_LENGTH, body_length);


  - name: decode_header_and_validate
    type: std::vector<std::string>
    body: |
      std::vector<std::string> error_messages;
      std::string header = get_header();

      // validate magic header chunk matches
      // TODO: test this condition
      if (header.substr(0, 4) != MAGIC_HEADER_CHUNK) error_messages.push_back("Magic header chunk does not match.");

      // TODO: validate the second chunk does decode
      // TODO: test this condition
      int decoded_body_size = decode_body_size_chunk();

      // Validate the second chunk value not larger than MAX_BODY_SIZE
      // TODO: test this condition
      if (decoded_body_size > MAX_BODY_LENGTH) error_messages.push_back("Body size value in header is too large");

      // Generate the expected value of the third chunk and ensure it matches the existing one
      // TODO: test this condition
      std::string first_8 = extract_nth_header_chunk(0) + extract_nth_header_chunk(1);
      std::string expected_third_chunk_value = first_4_chars_hash_of(first_8);
      if (expected_third_chunk_value != extract_nth_header_chunk(2))
          error_messages.push_back("Third chunk does not match an expected hash.");

      if (!error_messages.empty()) return error_messages;

      // set the body size to mach the header body size
      // TODO: test this new body size is a size matching the header
      set_body_length(decoded_body_size);

      return error_messages;


  - name: validate_body_hash
    type: std::vector<std::string>
    body: |
      std::vector<std::string> error_messages;
      std::string expected_fourth_chunk_value = first_4_chars_hash_of(get_body());
      if (expected_fourth_chunk_value != extract_nth_header_chunk(3))
          error_messages.push_back("Fourth chunk does not match the expected hash of the body.");
      return error_messages;


  - name: encode_header
    type: void
    body: |
       // header is in the following format:
       // 4 chars, special block with the characters "AFNM" for "AllegroFlare network message"
       // 4 chars, size of the data block in base62 (not base64) (with the lowercase first)
       // 4 chars, the first 4 characters of a hash. This hash is of the first 8 characters of the header
       // 4 chars, the first 4 characters of a hash of the whole body

       char header[HEADER_LENGTH + 1] = "";

       std::string first_8 = MAGIC_HEADER_CHUNK + body_size_base62();

       std::sprintf(header,    MAGIC_HEADER_CHUNK.c_str());
       std::sprintf(header+4,  body_size_base62().c_str());
       std::sprintf(header+8,  first_4_chars_hash_of(first_8).c_str());
       std::sprintf(header+12, first_4_chars_hash_of(get_body()).c_str());

       std::memcpy(data_ptr(), header, HEADER_LENGTH);
       return;
    body_dependency_symbols:
      - std::cout


  - name: first_4_chars_hash_of
    type: std::string
    parameters:
      - name: string_to_hash
        type: std::string
        default_argument: '""'
    body: |
      AllegroFlare::SHA2 sha2;
      return sha2.generate_sha224_hash(string_to_hash).substr(0, 4);
    body_dependency_symbols:
      - AllegroFlare::SHA2


  - name: body_size_base62
    type: std::string
    body: |
      AllegroFlare::EncoderDecoders::Base62 base62_encoder;
      return base62_encoder.encode(body_length, 4);
    body_dependency_symbols:
      - AllegroFlare::EncoderDecoders::Base62


  - name: decode_body_size_chunk
    type: int
    body: |
      AllegroFlare::EncoderDecoders::Base62 base62_encoder;
      return base62_encoder.decode(extract_nth_header_chunk(1));
    body_dependency_symbols:
      - AllegroFlare::EncoderDecoders::Base62


  - name: extract_nth_header_chunk
    type: std::string
    parameters:
      - name: position
        type: int
        default_argument: 0
    body: |
      return data.substr(position * 4, 4);


  - name: ignore
    body: |
      return;
    body_dependency_symbols:
      - chat_message


dependencies:


  - symbol: chat_message
    headers: [ AllegroFlare/Network2/inc/chat_message.hpp ]
  - symbol: char*
    headers: [ ]
  - symbol: std::size_t
    headers: [ cstddef ]
  - symbol: AllegroFlare::EncoderDecoders::Base62
    headers: [ AllegroFlare/EncoderDecoders/Base62.hpp ]
  - symbol: AllegroFlare::SHA2
    headers: [ AllegroFlare/SHA2.hpp ]


