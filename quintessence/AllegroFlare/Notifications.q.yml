properties:


  - name: notifications
    type: std::vector<AllegroFlare::Elements::Notifications::Base*>
    init_with: '{}'
    constructor_arg: true
    getter: true
    setter: true


functions:


  - name: size
    type: int
    body: |
      return notifications.size();


  - name: add
    parameters:
      - name: notification
        type: AllegroFlare::Elements::Notifications::Base*
        default_argument: nullptr
    guards: [ notification ]
    body: |
      notifications.push_back(notification);
      return;


  - name: select_all_order_by_created_at_desc
    type: std::vector<AllegroFlare::Elements::Notifications::Base*>
    body: |
      std::vector<AllegroFlare::Elements::Notifications::Base*> result = notifications;
      std::sort(result.begin(), result.end(), sort_by_created_at_desc_func);
      return result;


  - name: select_created_at_since_order_by_created_at
    type: std::vector<AllegroFlare::Elements::Notifications::Base*>
    parameters:
      - name: min_created_at
        type: float
        default_argument: 0.0f
    body: |
      std::vector<AllegroFlare::Elements::Notifications::Base*> result;
      std::copy_if(
         notifications.begin(),
         notifications.end(),
         std::back_inserter(result),
         [min_created_at](AllegroFlare::Elements::Notifications::Base* notification) {
            return notification && notification->get_created_at() >= min_created_at;
         }
      );
      std::sort(result.begin(), result.end(), sort_by_created_at_desc_func);
      return result;


  - name: destroy_all
    body: |
      for (auto &notification : notifications) delete notification;
      notifications.clear();
      return;


  - name: sort_by_created_at_desc_func
    static: true
    type: bool
    parameters:
      - name: a
        type: AllegroFlare::Elements::Notifications::Base*
        default_argument: nullptr
      - name: b
        type: AllegroFlare::Elements::Notifications::Base*
        default_argument: nullptr
    body: |
      if (a->get_created_at() == b->get_created_at()) return a; // TODO: return by ID
      return a->get_created_at() > b->get_created_at();


dependencies:


  - symbol: std::vector<AllegroFlare::Elements::Notifications::Base*>
    headers: [ vector, AllegroFlare/Elements/Notifications/Base.hpp ]
  - symbol: AllegroFlare::Elements::Notifications::Base*
    headers: [ AllegroFlare/Elements/Notifications/Base.hpp ]
  - symbol: AllegroFlare::Elements::Notifications::Base
    headers: [ vector, AllegroFlare/Elements/Notifications/Base.hpp ]



