properties:


  - name: block
    type: std::vector<float>
    init_with: '{}'

  - name: sample_count
    type: std::size_t
    constructor_arg: true
    init_with: 2048
    getter: true
    setter: false

  - name: depth_type
    type: ALLEGRO_AUDIO_DEPTH
    init_with: ALLEGRO_AUDIO_DEPTH_FLOAT32
    getter: true
    constructor_arg: true

  - name: depth_type_size
    type: std::size_t
    init_with: al_get_audio_depth_size(depth_type)
    getter: true

  - name: frequency
    type: unsigned int
    init_with: 44100
    getter: true

  - name: channel_configuration
    type: ALLEGRO_CHANNEL_CONF
    init_with: ALLEGRO_CHANNEL_CONF_2
    getter: true

  - name: channel_count
    type: std::size_t
    init_with: 0
    getter: true

  - name: CHANNEL_LEFT
    type: int
    constexpr: true
    static: true
    init_with: 0

  - name: CHANNEL_RIGHT
    type: int
    constexpr: true
    static: true
    init_with: 1

  - name: head
    type: std::size_t
    init_with: 0
    getter: true

  - name: initialized
    type: bool
    init_with: false


functions:


  - name: initialize
    guards: [ (!initialized), (sample_count > 0) ]
    body: |
      channel_count = al_get_channel_count(channel_configuration);
      block.resize(sample_count * channel_count, 0);
      initialized = true;


  - name: move_head_by
    parameters:
      - name: delta
        type: std::size_t
        default_argument: 0
    guards: [ initialized ]
    body: |
      // TODO: test this
      head += delta;
      while (head > block.size()) head -= block.size();
      return;


  - name: set_sample_count
    parameters:
      - name: sample_count
        type: std::size_t
        default_argument: 2048
      - name: clear
        type: bool
        default_argument: false
    guards: [ (sample_count > 0) ]
    body: |
      this->sample_count = sample_count;
      block.resize(sample_count * channel_count, 0);
      return;


  - name: get_sample_at
    type: float
    parameters:
      - name: sample_position
        type: int
        default_argument: 0
      - name: channel_t
        type: int
        default_argument: CHANNEL_LEFT
    body: |
      sample_position = clamp_loop_sample_position(head + sample_position);

      return block[(sample_position * channel_count) + channel_t];


  - name: set_sample_at
    parameters:
      - name: sample_position
        type: int
        default_argument: 0
      - name: channel_t
        type: int
        default_argument: CHANNEL_LEFT
      - name: value
        type: float
        default_argument: 0.0f
    body: |
      sample_position = clamp_loop_sample_position(head + sample_position);

      block[(sample_position * channel_count) + channel_t] = value;


  - name: set_sample_at
    parameters:
      - name: sample_position
        type: int
        default_argument: 0
      - name: left_channel_value
        type: float
        default_argument: 0.0f
      - name: right_channel_value
        type: float
        default_argument: 0.0f
    body: |
      sample_position = clamp_loop_sample_position(head + sample_position);

      block[sample_position + CHANNEL_LEFT] = left_channel_value;
      block[sample_position + CHANNEL_RIGHT] = right_channel_value;


  - name: get_sample_at
    type: std::pair<float, float>
    parameters:
      - name: sample_position
        type: int
        default_argument: 0
      - name: left_channel_value
        type: float
        default_argument: 0.0f
      - name: right_channel_value
        type: float
        default_argument: 0.0f
    body: |
      sample_position = clamp_loop_sample_position(head + sample_position);
      
      return std::pair<float, float>{
         block[(sample_position * channel_count) + CHANNEL_LEFT],
         block[(sample_position * channel_count) + CHANNEL_RIGHT],
      };


  - name: clamp_loop_sample_position
    type: int
    private: true
    parameters:
      - name: sample_position
        type: int
        default_argument: 0
    body: |
      while (sample_position >= sample_count) sample_position -= sample_count;
      while (sample_position < 0) sample_position += sample_count;
      return sample_position;


dependencies:


  - symbol: ALLEGRO_MIXER
    headers: [ allegro5/allegro_audio.h ]
  - symbol: ALLEGRO_AUDIO_DEPTH
    headers: [ allegro5/allegro_audio.h ]
  - symbol: ALLEGRO_CHANNEL_CONF
    headers: [ allegro5/allegro_audio.h ]
  - symbol: std::size_t
    headers: [ cstddef ]


