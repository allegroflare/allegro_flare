properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true

  - name: x
    type: float
    init_with: 0.0f
    constructor_arg: true
    getter: true
    setter: true

  - name: y
    type: float
    init_with: 0.0f
    constructor_arg: true
    getter: true
    setter: true

  - name: actor_manager
    type: AllegroFlare::Timeline::ActorManager
    init_with: '{}'

  - name: initialized
    type: bool
    init_with: false


functions:


  - name: initialize
    guards: [ (!initialized) ]
    body: |
      // create the actor
      Timeline::Actor *main_star_actor = new Timeline::Actor2D("foo", obtain_star_bitmap());
      std::vector<Timeline::Actor*> friend_stars = {
         new Timeline::Actor2D("foo", obtain_star_bitmap()),
         new Timeline::Actor2D("foo", obtain_star_bitmap()),
         new Timeline::Actor2D("foo", obtain_star_bitmap()),
         new Timeline::Actor2D("foo", obtain_star_bitmap()),
         new Timeline::Actor2D("foo", obtain_star_bitmap()),
      };

      std::vector<Timeline::Actor*> all_actors = { main_star_actor };
      all_actors.insert(all_actors.end(), friend_stars.begin(), friend_stars.end());

      // add the actors to the manager
      actor_manager.set_actors(all_actors);

      // main star
      // [time_sec] [param] [value] [!interpoltor]
      std::vector<std::string> script_lines = {
         "0.0 rotation 4.0 linear",
         "2.0 rotation 0.0 tripple_fast_in",
         "0.0 opacity 0.0 linear",
         "0.2 opacity 1.0 linear",
         "0.0 scale_x 0 linear",
         "0.0 scale_y 0 linear",
         "0.7 scale_x 1.2 bounce_out",
         "0.7 scale_y 1.2 bounce_out",

         "0 color_r 1.0 linear",
         "0 color_g 0.84 linear",
         "0 color_b 0.0 linear",

         // fade out
         "1.9 opacity 1.0 linear",
         "2.2 opacity 0.0 fast_out",
      };
      main_star_actor->load_script(script_lines);

      // friend stars
      int count = 0;
      for (auto &friend_star : friend_stars)
      {
         float rotation_steps = (3.1415 * 2) / friend_stars.size();
         friend_star->load_script(build_friend_star_script_lines(rotation_steps * count));
         count++;
      }

      initialized = true;
      return;
    body_dependency_symbols:
      - AllegroFlare::Timeline::Actor2D
      - AllegroFlare::Interpolators::*
      - std::vector<std::string>


  - name: update
    type: void
    guards: [ al_is_system_installed(), al_is_font_addon_initialized(), initialized ]
    body: |
      return;


  - name: build_friend_star_script_lines
    type: std::vector<std::string>
    parameters:
      - name: rotation
        type: float
        default_argument: 0.0f
    body: |
      std::stringstream rotation_start_line;
         rotation_start_line << "0.0 rotation " << rotation + -4.0 << " linear";
      std::stringstream rotation_end_line;
         rotation_end_line << "3.0 rotation " << rotation << " tripple_fast_in";

      std::vector<std::string> result = {
         "0.0 align_x 0 linear",
         "0.2 align_x 0 linear",
         "1.0 align_x 2.3 tripple_fast_in",

         rotation_start_line.str(),
         rotation_end_line.str(),

         "0.0 opacity 0.0 linear",
         "0.2 opacity 1.0 linear",

         "0.0 scale_x 0 linear",
         "0.0 scale_y 0 linear",
         "0.3 scale_x 0.5 double_fast_in",
         "0.3 scale_y 0.5 double_fast_in",

         "0 color_r 1.0 linear",
         "0 color_g 0.84 linear",
         "0 color_b 1.0 linear",

         // fade out
         "1.2 scale_x 0.5 double_slow_out",
         "1.2 scale_y 0.5 double_slow_out",
         "1.8 scale_x 0.55 double_slow_in",
         "1.8 scale_y 0.55 double_slow_in",

         "1.5 opacity 1.0 linear",
         "1.8 opacity 0.0 linear",
      };
      return result;


  - name: render
    type: void
    guards: [ al_is_system_installed(), al_is_font_addon_initialized(), initialized ]
    body: |
      Placement2D place(x, y, 0, 0);
      place.scale.x = 0.5;
      place.scale.y = 0.5;
      place.start_transform();
      actor_manager.render(al_get_time());
      place.restore_transform();
      return;
    body_dependency_symbols:
      - AllegroFlare::Placement2D


  - name: obtain_star_bitmap
    private: true
    type: ALLEGRO_BITMAP*
    guards: [ bitmap_bin ]
    body: |
      return bitmap_bin->auto_get("star-b.png");


dependencies:


  - symbol: AllegroFlare::BitmapBin*
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: ALLEGRO_BITMAP*
    headers: [ allegro5/allegro_font.h ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: AllegroFlare::Timeline::ActorManager
    headers: [ AllegroFlare/Timeline/ActorManager.hpp ]
  - symbol: AllegroFlare::Timeline::Actor2D
    headers: [ AllegroFlare/Timeline/Actor2D.hpp ]
  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]
  - symbol: AllegroFlare::Interpolators::*
    headers: [ AllegroFlare/Interpolators.hpp ]


