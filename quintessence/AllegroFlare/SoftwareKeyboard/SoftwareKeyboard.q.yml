properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    constructor_arg: true
    init_with: nullptr
    getter: true
    setter: false

  - name: font_name
    type: std::string
    init_with: '"Inter-Medium.ttf"'
    constructor_arg: true
    getter: true
    setter: true

  - name: font_size
    type: int
    init_with: -54
    constructor_arg: true
    getter: true
    setter: true

  - name: keys
    type: std::unordered_map<std::string, AllegroFlare::SoftwareKeyboard::KeyboardKey>
    init_with: '{}'
    getter_ref: true
    setter: false

  - name: cursor_pos
    type: int
    init_with: 0

  - name: cursor_location
    type: AllegroFlare::Vec2D
    init_with: '{}'

  - name: cursor_size
    type: AllegroFlare::Vec2D
    init_with: '80, 80'

  - name: initialized
    type: bool
    init_with: false
    getter: true

  - name: show_rectangle_outline_on_keys
    type: bool
    init_with: false

  - name: keyboard_placement
    type: AllegroFlare::Placement2D
    init_with: '{}'


functions:


  - name: set_font_bin
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
    guards: [ (!initialized) ]
    body: |
      this->font_bin = font_bin;
      return;


  - name: set_keys
    parameters:
      - name: keys
        type: std::unordered_map<std::string, AllegroFlare::SoftwareKeyboard::KeyboardKey>
        default_argument: '{}'
    body: |
      this->keys = keys;
      cursor_pos = 0;
      update_cursor_location();
      return;


  - name: initialize
    guards:
      - al_is_system_installed()
      - al_is_primitives_addon_initialized()
      - al_is_font_addon_initialized()
      - font_bin
    body: |
      keyboard_placement.position.x = 200;
      keyboard_placement.position.y = 200;
      initialized = true;
      return;
    body_dependency_symbols:
      - al_is_system_installed
      - al_is_primitives_addon_initialized
      - al_is_font_addon_initialized


  - name: press_key_by_name
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    guards: [ initialized ]
    body: |
      if (!key_exists(name)) return; // TODO: maybe cout a warning
      AllegroFlare::SoftwareKeyboard::KeyboardKey &key = keys[name];
      key.set_last_pressed_at(al_get_time());
      return;


  - name: update_cursor_location
    private: true
    body: |
      if (keys.empty()) return;
      int i=0;
      for (auto &key_dictionary_element : keys)
      {
         if (cursor_pos == i)
         {
            auto &key = key_dictionary_element.second;
            cursor_location.x = key.get_x();
            cursor_location.y = key.get_y();
            cursor_size.x = key.get_width();
            cursor_size.y = key.get_height();
            // this key_dictionary_element is the current cursor selected key
         }
         i++;
      }
      return;


  - name: increment_cursor_pos
    body: |
      if (keys.empty()) return; // TODO: play bonk sound
      cursor_pos++;
      while (cursor_pos >= keys.size()) cursor_pos -= keys.size();
      update_cursor_location();
      return;


  - name: decrement_cursor_pos
    body: |
      if (keys.empty()) return; // TODO: play bonk sound
      cursor_pos--;
      while (cursor_pos < 0) cursor_pos += keys.size();
      update_cursor_location();
      return;


  - name: render
    guards: [ initialized ]
    body: |
      keyboard_placement.start_transform();
      // draw keys
      int i=0;
      ALLEGRO_FONT *font = obtain_font();
      float font_hline_height = al_get_font_line_height(font) / 2;
      for (auto &key_dictionary_element : keys)
      {
         auto &key = key_dictionary_element.second;
         if (show_rectangle_outline_on_keys)
         {
            al_draw_rectangle(
               key.get_x(),
               key.get_y(),
               key.get_x2(),
               key.get_y2(),
               ALLEGRO_COLOR{0.5, 0.5, 0.5, 0.5},
               1.0
            );
         }
         al_draw_text(
            font,
            ALLEGRO_COLOR{1, 1, 1, 1},
            key.get_center(),
            key.get_middle() - font_hline_height,
            ALLEGRO_ALIGN_CENTER,
            key.get_label().c_str()
         );
         i++;
      }

      // draw cursor
      al_draw_rectangle(
         cursor_location.x,
         cursor_location.y,
         cursor_location.x+cursor_size.x,
         cursor_location.y+cursor_size.y,
         ALLEGRO_COLOR{0.5, 1, 0.75, 1},
         4.0
      );

      keyboard_placement.restore_transform();
      return;


  - name: key_exists
    private: true
    type: bool
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"[unset-identifier]"'
    body: |
      return (keys.count(identifier) >= 1);


  - name: obtain_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ initialized ]
    body: |
      std::stringstream composite_font_str;
      composite_font_str << font_name << " " << font_size;
      return font_bin->auto_get(composite_font_str.str());


  - name: build_boilerplate_keyboard_keys
    static: true
    type: std::unordered_map<std::string, AllegroFlare::SoftwareKeyboard::KeyboardKey>
    body: |
      float x_spacing = 70;
      float y_spacing = 90;
      float column_spacing = 500;
      std::unordered_map<std::string, AllegroFlare::SoftwareKeyboard::KeyboardKey> result = {
        { "A", { "A", x_spacing*0, 100+y_spacing*0, 80, 80 } },
        { "B", { "B", x_spacing*1, 100+y_spacing*0, 80, 80 } },
        { "C", { "C", x_spacing*2, 100+y_spacing*0, 80, 80 } },
        { "D", { "D", x_spacing*3, 100+y_spacing*0, 80, 80 } },
        { "E", { "E", x_spacing*4, 100+y_spacing*0, 80, 80 } },
        { "F", { "F", x_spacing*5, 100+y_spacing*0, 80, 80 } },

        { "a", { "a", column_spacing*1+x_spacing*0, 100+y_spacing*0, 80, 80 } },
        { "b", { "b", column_spacing*1+x_spacing*1, 100+y_spacing*0, 80, 80 } },
        { "c", { "c", column_spacing*1+x_spacing*2, 100+y_spacing*0, 80, 80 } },
        { "d", { "d", column_spacing*1+x_spacing*3, 100+y_spacing*0, 80, 80 } },
        { "e", { "e", column_spacing*1+x_spacing*4, 100+y_spacing*0, 80, 80 } },
        { "f", { "f", column_spacing*1+x_spacing*5, 100+y_spacing*0, 80, 80 } },

        { "0", { "0", column_spacing*2+x_spacing*0, 100+y_spacing*0, 80, 80 } },
        { "1", { "1", column_spacing*2+x_spacing*1, 100+y_spacing*0, 80, 80 } },
        { "2", { "2", column_spacing*2+x_spacing*2, 100+y_spacing*0, 80, 80 } },
        { "3", { "3", column_spacing*2+x_spacing*3, 100+y_spacing*0, 80, 80 } },
        { "4", { "4", column_spacing*2+x_spacing*4, 100+y_spacing*0, 80, 80 } },
        { "5", { "5", column_spacing*2+x_spacing*5, 100+y_spacing*0, 80, 80 } },

        // row 2

        { "G", { "G", x_spacing*0, 100+y_spacing*1, 80, 80 } },
        { "H", { "H", x_spacing*1, 100+y_spacing*1, 80, 80 } },
        { "I", { "I", x_spacing*2, 100+y_spacing*1, 80, 80 } },
        { "J", { "J", x_spacing*3, 100+y_spacing*1, 80, 80 } },
        { "K", { "K", x_spacing*4, 100+y_spacing*1, 80, 80 } },
        { "L", { "L", x_spacing*5, 100+y_spacing*1, 80, 80 } },


        // bottom row
        { "BACKSPACE", { "Backspace", 900, 500+y_spacing*1, 330, 80 } },
        { "OK", { "OK", 1300, 500+y_spacing*1, 140, 80 } },

      };
      return result;


dependencies:


  - symbol: AllegroFlare::SoftwareKeyboard::KeyboardKey
    headers: [ AllegroFlare/SoftwareKeyboard/KeyboardKey.hpp ]
  - symbol: AllegroFlare::Vec2D
    headers: [ AllegroFlare/Vec2D.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: al_is_system_installed
    headers: [ allegro5/allegro.h ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_is_font_addon_initialized
    headers: [ allegro5/allegro_font.h ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]


