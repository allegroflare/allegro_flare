properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    constructor_arg: true
    init_with: nullptr
    getter: true
    setter: false

  - name: font_name
    type: std::string
    init_with: '"Inter-Medium.ttf"'
    constructor_arg: true
    getter: true
    setter: true

  - name: font_size
    type: int
    init_with: -32
    constructor_arg: true
    getter: true
    setter: true

  - name: keys
    type: std::unordered_map<std::string, AllegroFlare::SoftwareKeyboard::KeyboardKey>
    init_with: '{}'
    getter_ref: true

  - name: cursor_pos
    type: int
    init_with: 0

  - name: initialized
    type: bool
    init_with: false
    getter: true


functions:


  - name: set_font_bin
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
    guards: [ (!initialized) ]
    body: |
      this->font_bin = font_bin;
      return;


  - name: initialize
    guards:
      - al_is_system_installed()
      - al_is_primitives_addon_initialized()
      - al_is_font_addon_initialized()
      - font_bin
    body: |
      initialized = true;
      return;
    body_dependency_symbols:
      - al_is_system_installed
      - al_is_primitives_addon_initialized
      - al_is_font_addon_initialized


  - name: press_key_by_name
    parameters:
      - name: name
        type: std::string
        default_argument: '"[unset-name]"'
    guards: [ initialized ]
    body: |
      if (!key_exists(name)) return; // TODO: maybe cout a warning
      AllegroFlare::SoftwareKeyboard::KeyboardKey &key = keys[name];
      key.set_last_pressed_at(al_get_time());
      return;


  - name: update_cursor_placement
    private: true
    body: |
      if (keys.empty()) return;
      return;


  - name: increment_cursor_pos
    body: |
      if (keys.empty()) return; // TODO: play bonk sound
      cursor_pos++;
      while (cursor_pos >= keys.size()) cursor_pos -= keys.size();
      update_cursor_placement();
      return;


  - name: decrement_cursor_pos
    body: |
      if (keys.empty()) return; // TODO: play bonk sound
      cursor_pos--;
      while (cursor_pos < 0) cursor_pos += keys.size();
      update_cursor_placement();
      return;


  - name: render
    guards: [ initialized ]
    body: |
      int i=0;
      for (auto &key_dictionary_element : keys)
      {
         auto &key = key_dictionary_element.second;
         al_draw_rectangle(key.get_x(), key.get_y(), key.get_x2(), key.get_y2(), ALLEGRO_COLOR{1, 1, 1, 1}, 2.0);
         i++;
      }
      return;


  - name: key_exists
    private: true
    type: bool
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"[unset-identifier]"'
    body: |
      return (keys.count(identifier) >= 1);


  - name: obtain_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ initialized ]
    body: |
      std::stringstream composite_font_str;
      composite_font_str << font_name << " " << font_size;
      return font_bin->auto_get(composite_font_str.str());


  - name: build_boilerplate_keyboard_keys
    static: true
    type: std::unordered_map<std::string, AllegroFlare::SoftwareKeyboard::KeyboardKey>
    body: |
      std::unordered_map<std::string, AllegroFlare::SoftwareKeyboard::KeyboardKey> result = {
        { "A", { "A", 100, 100, 80, 80 } },
        { "B", { "B", 190, 100, 80, 80 } },
        { "C", { "C", 280, 100, 80, 80 } },
      };
      return result;


dependencies:


  - symbol: AllegroFlare::SoftwareKeyboard::KeyboardKey
    headers: [ AllegroFlare/SoftwareKeyboard/KeyboardKey.hpp ]
  - symbol: AllegroFlare::Vec2D
    headers: [ AllegroFlare/Vec2D.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: al_is_system_installed
    headers: [ allegro5/allegro.h ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_is_font_addon_initialized
    headers: [ allegro5/allegro_font.h ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]


