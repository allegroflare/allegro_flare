properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: input_hints_tokens
    type: std::vector<std::pair<std::string, std::string>>
    init_with: 'build_placeholder_input_hints_tokens()'
    constructor_arg: true
    getter: true
    setter: true

  - name: keyboard_combo_tokens
    type: std::vector<std::string>
    init_with: '{}'
    constructor_arg: true
    getter: true
    setter: true

  - name: bar_height
    type: int
    init_with: 60
    getter: true
    setter: true

  - name: text_color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{1, 1, 1, 1}
    getter: true
    setter: true

  - name: surface_width
    type: int
    init_with: 1920
    getter: true
    setter: true

  - name: surface_height
    type: int
    init_with: 1080
    getter: true
    setter: true


functions:


  - name: render
    type: void
    guards:
      - al_is_system_installed()
      - al_is_font_addon_initialized()
      - al_is_ttf_addon_initialized()
      - al_is_primitives_addon_initialized()
    body: |
      draw_inputs_bar();
      draw_inputs_hints_tokens();
      return;
    body_dependency_symbols:
      - al_is_system_installed
      - al_is_font_addon_initialized
      - al_is_ttf_addon_initialized
      - al_is_primitives_addon_initialized


  - name: draw_inputs_bar
    body: |
      // draw inputs
      float backfill_opacity = 0.35;
      ALLEGRO_COLOR backfill_color = ALLEGRO_COLOR{0, 0, 0, backfill_opacity};
      al_draw_filled_rectangle(0, surface_height-bar_height, surface_width, surface_height, backfill_color);
      return;


  - name: draw_keyboard_combo_tokens
    body: |
      // TODO
      return;


  - name: draw_inputs_hints_tokens
    body: |
      // draw inputs text
      ALLEGRO_FONT *font = obtain_font();
      std::string SPACER = "         ";

      std::stringstream inputs_composite_str;
      for (int i=0; i<input_hints_tokens.size(); i++)
      {
         auto &input_hint = input_hints_tokens[i];
         std::string input_hint_key = input_hint.first;
         std::string input_hint_description = input_hint.second;
         bool is_last_input_hint = (i == input_hints_tokens.size()-1);
 
         inputs_composite_str << input_hint_key << "  " << input_hint_description;
         if (!is_last_input_hint) inputs_composite_str << SPACER;
      }

      float text_height = al_get_font_line_height(font);
      al_draw_text(
         font,
         text_color,
         surface_width/2,
         (int)(surface_height-text_height/2-bar_height/2),
         ALLEGRO_ALIGN_CENTER,
         inputs_composite_str.str().c_str()
      );
      return;


  - name: build_placeholder_input_hints_tokens
    static: true
    type: std::vector<std::pair<std::string, std::string>>
    body: |
      return std::vector<std::pair<std::string, std::string>>{
         { "[W/A/S/D]", "Move cursor" },
         { "[N/P]",     "Next/Previous entity" },
         { "[Shift+8]", "Capture screenshot" },
         { "[PAD +/-]", "Zoom" },
         { "[ESC]",     "Toggle Inventory" },
         { "[-/+]",     "Change time of day" },
      };


  - name: obtain_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      std::string font_name = "Inter-Medium.ttf";
      int font_size = -20;

      std::stringstream composite_font_str;
      composite_font_str << font_name << " " << font_size;
      return font_bin->auto_get(composite_font_str.str());


dependencies:


  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_is_system_installed
    headers: [ allegro5/allegro.h ]
  - symbol: al_is_font_addon_initialized
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_is_ttf_addon_initialized
    headers: [ allegro5/allegro_ttf.h ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: std::vector<std::pair<std::string, std::string>>
    headers: [ vector, utility, string ]
  - symbol: AllegroFlare::InputDiagrams::KeyboardKey
    headers: [ AllegroFlare/InputDiagrams/KeyboardKey.hpp ]


