properties:


  - name: type
    type: std::string
    init_with: AllegroFlare::GameConfigurations::Complete::TYPE
    constructor_arg: true
    getter: true

  - name: runner
    type: AllegroFlare::Runners::Complete*
    constructor_arg: true
    init_with: nullptr
    getter: true
    setter: true

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/GameConfigurations/Complete"'
    static: true
    constexpr: true


documentation:


  - notes:
     - this Complete class actually acts as a base class, but it's not clear and might appear to be final derived from
       GameConfigurations/Base. I'm not sure how to resolve this if it will require a renaming or what.
     - This Complete class is intended to be paired with the Runners/Complete class


methods:


  - name: app_icon_1024_filename
    type: std::string
    virtual: true
    body: |
      return "icons/allegro-flare-generic-icon-1024.png";


  - name: app_title
    type: std::string
    virtual: true
    body: |
      //return "Return of the Wanderer";
      return "Untitled Game";


  - name: title_screen_title
    type: std::string
    virtual: true
    body: |
      return "Untitled Game";


  - name: primary_display_icon_filename
    type: std::string
    virtual: true
    body: |
      return "icons/allegro-flare-generic-icon-1024.png";


  - name: get_num_save_profiles
    virtual: true
    type: int
    body: |
      return 1;


  - name: get_num_manual_save_slots
    virtual: true
    type: int
    body: |
      return 3;


  - name: get_num_autosave_save_slots
    virtual: true
    type: int
    body: |
      return 0;


  - name: get_num_quicksave_save_slots
    virtual: true
    type: int
    body: |
      return 0;


  - name: get_saving_and_loading_start_style
    virtual: true
    type: AllegroFlare::SavingAndLoading::SavingAndLoading::StartStyle
    body: |
      return AllegroFlare::SavingAndLoading::SavingAndLoading::StartStyle::GAME_START_STYLE_A;


  - name: get_saving_and_loading_save_style
    virtual: true
    type: AllegroFlare::SavingAndLoading::SavingAndLoading::SaveStyle
    body: |
      return AllegroFlare::SavingAndLoading::SavingAndLoading::SaveStyle::GAME_SAVE_STYLE_4;


  - name: get_saving_and_loading_load_style
    virtual: true
    type: AllegroFlare::SavingAndLoading::SavingAndLoading::LoadStyle
    body: |
      return AllegroFlare::SavingAndLoading::SavingAndLoading::LoadStyle::GAME_LOAD_STYLE_0;


  - name: on_runner_after_initialization_func
    virtual: true
    parameters:
      - name: runner
        type: AllegroFlare::Runners::Complete*
        default_argument: nullptr
        default_argument_dependency_symbols:
          - AllegroFlare::ForwardDeclarations::AllegroFlare::Runners::Complete
          - AllegroFlare::ForwardDeclarations::AllegroFlare::GameConfigurations::Complete
    body: |
      // TODO: Consider renaming this method to align with other methods
      return;


  - name: before_activate_screen_callback
    virtual: true
    parameters:
      - name: screen_identifier_that_will_activate
        type: std::string
        default_argument: '"[unset-screen_identifier_that_will_activate]"'
      - name: currently_active_screen_identifier
        type: std::string
        default_argument: '"[unset-currently_active_screen_identifier]"'
    body: |
      // TODO: Consider renaming this method to align with other methods

      //type: std::function<void(std::string, std::string, AllegroFlare::Routers::Base*, void*)>
      //init_with: '{}'
      //getter: true
      //setter: true
      //- name: on_before_activate_screen_func_user_data
        //type: void*
        //init_with: nullptr
        //getter: true
        //setter: true
      return;


  - name: handle_game_event
    virtual: true
    parameters:
      - name: game_event
        type: AllegroFlare::GameEvent*
        default_argument: nullptr
    body: |
      // NOTE: Handle top-level game events here.
      // Some examples:

      // Handling a screen Activation
      // This (Change from one screen to another). You might do a foreground show or hide
      // event
      //if (game_event->is_type(AllegroFlare::GameEventDatas::ScreenActivated::NAME))
      //{
         //AllegroFlare::GameEventDatas::ScreenActivated* as =
           //static_cast<AllegroFlare::GameEventDatas::ScreenActivated*>(game_event->get_data());

         //// TODO: Handle game-specific logic for a after a screen switch
      //}

      // Handling an Achievement
      // Achievement notification are handled by the framework, but you might trigger an auto-save if your game
      // has a save system setup.
      if (game_event->get_type() == AllegroFlare::GameEventDatas::AchievementUnlocked::NAME)
      {
         if (game_event->get_data()->is_type(AllegroFlare::GameEventDatas::AchievementUnlocked::TYPE))
         {
            AllegroFlare::GameEventDatas::AchievementUnlocked *as =
               static_cast<AllegroFlare::GameEventDatas::AchievementUnlocked *>(game_event->get_data());
            // TODO: Handle saving progress of achievements. Something like below.
            // See this guide:
            // https://docs.google.com/document/d/1QdDVa6giZOmGbF61dgom1ZJ_Ev5OFvZEM2Bc453RjGw/edit
            //mark_achievement_as_unlocked(as->get_achievement_identifier());
            //save_game_progress_and_state_info();
         }
         else
         {
            throw std::runtime_error("Gameplay/Runner/game_event_func: unexpected AchievementUnlocked event data type");
         }
      }
      return;
    body_dependency_symbols:
      - AllegroFlare::EventNames
      - AllegroFlare::GameEventDatas::ScreenActivated
      - AllegroFlare::GameEventDatas::AchievementUnlocked


  - name: load_level_by_identifier
    virtual: true
    type: AllegroFlare::Levels::Base*
    parameters:
      - name: level_identifier
        type: std::string
        default_argument: '"[unset-level_identifier]"'
    body: |
      // TODO: Add tests for this method or consider making it a pure virtual
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Base::load_level_by_identifier",
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      return nullptr;
    body_dependency_symbols:
     - AllegroFlare::Logger


  - name: build_level_list_for_level_select_screen_by_identifier
    virtual: true
    type: std::vector<std::pair<std::string, std::string>>
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"[unset-identifier]"'
    body: |
      // TODO: Add tests for this method or consider making it a pure virtual
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Base::build_level_list_for_level_select_screen_by_identifier",
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      return {};
    body_dependency_symbols:
     - AllegroFlare::Logger


  - name: build_locked_list_for_level_select_screen
    virtual: true
    type: std::set<std::string>
    body: |
      std::set<std::string> result = {
         //{ "space_station" },
         //{ "catwalk" },
         //{ "forest-01" },
         //{ "tunnels-01" },
         //{ "subway_car" },
      };
      return result;


  - name: build_dialog_bank_by_identifier
    virtual: true
    type: AllegroFlare::DialogTree::NodeBank
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"[unset-identifier]"'
    body: |
      // TODO: Add tests for this method or consider making it a pure virtual
      AllegroFlare::DialogTree::NodeBank node_bank;
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Base::build_dialog_bank_by_identifier",
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      return node_bank;
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: build_achievements
    virtual: true
    type: std::vector<std::tuple<std::string, AllegroFlare::Achievement*, bool, bool>>
    body: |
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Base::build_achievements",
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      return {};
    body_dependency_symbols:
      - AllegroFlare::Achievement


  - name: create_intro_logos_storyboard_pages
    virtual: true
    type: std::vector<AllegroFlare::Elements::StoryboardPages::Base *>
    body: |
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Base::create_intro_logos_storyboard_pages",
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      //page_factory.create_clubcatt_logo_page(),
      //page_factory.create_image_page(bitmap_bin->operator[]("clubcatt-website-01.jpg")),
      return {};


  - name: create_shared_background
    virtual: true
    type: AllegroFlare::Elements::Backgrounds::Base*
    body: |
      // TODO: Customize this
      return new AllegroFlare::Elements::Backgrounds::ClearToColor(ALLEGRO_COLOR{0, 0.05, 0.1, 1});
    body_dependency_symbols:
      - AllegroFlare::Elements::Backgrounds::ClearToColor


  - name: create_shared_foreground
    virtual: true
    type: AllegroFlare::Elements::Backgrounds::Base*
    body: |
      // TODO: Customize this
      return new AllegroFlare::Elements::Backgrounds::None();
    body_dependency_symbols:
      - AllegroFlare::Elements::Backgrounds::None


  - name: create_new_game_intro_storyboard_pages
    virtual: true
    type: std::vector<AllegroFlare::Elements::StoryboardPages::Base *>
    body: |
      // Create a storyboard factory and page factory
      //AllegroFlare::StoryboardFactory storyboard_factory;
      //storyboard_factory.set_font_bin(font_bin);
      //storyboard_factory.set_event_emitter(event_emitter);
      //AllegroFlare::StoryboardPageFactory page_factory;
      //page_factory.set_font_bin(font_bin);
      //page_factory.set_bitmap_bin(bitmap_bin);
      //page_factory.set_model_bin(model_bin);

      //std::vector<AllegroFlare::Elements::StoryboardPages::Base *> result =
      //{
         //page_factory.create_advancing_text_page(
           //"In a land beset by darkness, a young hero embarks on a perilous journey to retrieve a powerful "
              //"artifact that can restore light to the kingdom."
         //),
         //page_factory.create_advancing_text_page(
           //"With nothing but a trusty sword and his wits to guide him, he sets out to face whatever dangers "
              //"lie ahead."
         //),
      //};
      //return result;
      return {};


  - name: create_primary_gameplay_screen
    virtual: true
    type: AllegroFlare::Screens::Gameplay*
    parameters:
      - name: runner
        type: AllegroFlare::Runners::Complete*
        default_argument: nullptr
        default_argument_dependency_symbols:
          - AllegroFlare::ForwardDeclarations::AllegroFlare::Runners::Complete
          - AllegroFlare::ForwardDeclarations::AllegroFlare::GameConfigurations::Complete
    body: |
      // TODO: Consider alternatives to get "runner" dependency out of this class
      // TODO: Consider that "runner" is now a member of GameConfigurations/Complex and the runner assigns it
      // during initialization
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Complete::create_primary_gameplay_screen",
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      //primary_gameplay_screen.set_event_emitter(event_emitter);
      //primary_gameplay_screen.set_bitmap_bin(bitmap_bin);
      //primary_gameplay_screen.set_font_bin(font_bin);
      //primary_gameplay_screen.set_model_bin(model_bin);
      //primary_gameplay_screen.set_game_configuration(game_configuration); // TODO: Consider how to remove this dependency
      //primary_gameplay_screen.initialize();
      return nullptr;


  - name: destroy_primary_gameplay_screen
    virtual: true
    body: |
      // NOTE: This destruction is for the primary_gameplay_screen, but there could (should?) certainly be destruction
      // methods for the other classes created here as well. It's possible to just simply add a "destroy" method, but
      // the user may want more granular control.

      // NOTE: Implementation to be managed by the derived class
      AllegroFlare::Logger::info_from(THIS_CLASS_AND_METHOD_NAME,
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      return;


  - name: handle_primary_gameplay_screen_paused
    virtual: true
    body: |
      // NOTE: Implementation to be managed by the derived class
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Base::handle_primary_gameplay_screen_paused",
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      // NOTE: Typically:
      // TODO: Consider if game is already paused or not
      // // guards: [ primary_gameplay_screen ]
      // primary_gameplay_screen->suspend_gameplay();
      //router->emit_route_event(
         //AllegroFlare::Routers::Standard::EVENT_ACTIVATE_SUBSCREEN_SCREEN,
         //nullptr,
         //al_get_time()
      //);
      return;


  - name: handle_primary_gameplay_screen_unpaused
    virtual: true
    body: |
      // NOTE: Implementation to be managed by the derived class
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Base::handle_primary_gameplay_screen_unpaused",
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      // NOTE: Typically:
      // TODO: Consider if game is already unpaused or not
      // // guards: [ primary_gameplay_screen ]
      // primary_gameplay_screen->resume_suspend_gameplay();
      //router->emit_route_event(
         //AllegroFlare::Routers::Standard::EVENT_ACTIVATE_PRIMARY_GAMEPLAY_SCREEN,
         //nullptr,
         //al_get_time()
      //);
      return;


  - name: handle_primary_gameplay_screen_finished
    virtual: true
    body: |
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Base::handle_primary_gameplay_screen_finished",
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      // NOTE: Typically:
      //router->emit_route_event(
         //AllegroFlare::Routers::Standard::EVENT_ACTIVATE_LEVEL_SELECT_SCREEN,
         //nullptr,
         //al_get_time()
      //);
      return;


  - name: create_primary_gameplay_subscreen
    virtual: true
    type: AllegroFlare::Screens::Subscreen::Screen*
    parameters:
      - name: runner
        type: AllegroFlare::Runners::Complete*
        default_argument: nullptr
    body: |
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Base::create_primary_gameplay_subscreen",
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      return nullptr;


  - name: create_pause_screen
    virtual: true
    xtype: AllegroFlare::Screens::PauseScreen*
    type: AllegroFlare::Screens::Base*
    parameters:
      - name: runner
        type: AllegroFlare::Runners::Complete*
        default_argument: nullptr
    body: |
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Base::create_pause_screen",
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      return nullptr;


  - name: destroy_pause_screen
    virtual: true
    body: |
      AllegroFlare::Logger::warn_from(
         THIS_CLASS_AND_METHOD_NAME,
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      return;


  - name: handle_arbitrary_storyboard_screen_finished
    virtual: true
    body: |
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Base::handle_arbitrary_storyboard_screen_finished",
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      // NOTE: Typically:
      //router->emit_route_event(
         //AllegroFlare::Routers::Standard::EVENT_ACTIVATE_LEVEL_SELECT_SCREEN,
         //nullptr,
         //al_get_time()
      //);
      return;


  - name: create_arbitrary_storyboard_pages_by_identifier
    virtual: true
    type: std::vector<AllegroFlare::Elements::StoryboardPages::Base *>
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"[unset-identifier]"'
    body: |
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Base::create_arbitrary_storyboard_pages_by_identifier",
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      //AllegroFlare::StoryboardPageFactory page_factory;
      //page_factory.set_font_bin(font_bin);
      //page_factory.set_bitmap_bin(bitmap_bin);
      //page_factory.set_model_bin(model_bin);

      //std::vector<AllegroFlare::Elements::StoryboardPages::Base *> result =
      //{
         //page_factory.create_image_with_advancing_text_page(
            //"storyboard-1-01-1165x500.png",
            //"Once upon a time, in a magical kingdom ruled by a wise and just queen, a young hero sets out on a "
               //"journey to prove himself and save his people from a terrible curse."
         //),
         //page_factory.create_image_with_advancing_text_page(
            //"storyboard-2-01-1165x500.png",
            //"With the help of his trusty sidekick and a band of unlikely allies, he must navigate treacherous "
               //"terrain and battle fierce foes."
         //),
         //page_factory.create_advancing_text_page(
           //"And achieve his goal to save the kingdom."
         //),
      //};
      return {};


  - name: create_intro_storyboard_pages
    virtual: true
    type: std::vector<AllegroFlare::Elements::StoryboardPages::Base *>
    body: |
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Base::create_intro_storyboard_pages",
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      //AllegroFlare::StoryboardPageFactory page_factory;
      //page_factory.set_font_bin(font_bin);
      //page_factory.set_bitmap_bin(bitmap_bin);
      //page_factory.set_model_bin(model_bin);

      //std::vector<AllegroFlare::Elements::StoryboardPages::Base *> result =
      //{
         //page_factory.create_image_with_advancing_text_page(
            //"storyboard-1-01-1165x500.png",
            //"Once upon a time, in a magical kingdom ruled by a wise and just queen, a young hero sets out on a "
               //"journey to prove himself and save his people from a terrible curse."
         //),
         //page_factory.create_image_with_advancing_text_page(
            //"storyboard-2-01-1165x500.png",
            //"With the help of his trusty sidekick and a band of unlikely allies, he must navigate treacherous "
               //"terrain and battle fierce foes."
         //),
         //page_factory.create_advancing_text_page(
           //"And achieve his goal to save the kingdom."
         //),
      //};
      return {};


  - name: build_save_slots_for_load_a_saved_game_screen
    virtual: true
    type: std::vector<AllegroFlare::LoadASavedGame::SaveSlots::Base*>
    body: |
      /*
      std::vector<AllegroFlare::LoadASavedGame::SaveSlots::Base*> result = {
         new AllegroFlare::LoadASavedGame::SaveSlots::Empty(), // TODO: Fill this list with items from save file
         new AllegroFlare::LoadASavedGame::SaveSlots::Empty(),
         new AllegroFlare::LoadASavedGame::SaveSlots::Empty(),
      };
      return result;
      */
      return {};


  - name: load_game_progress_and_state_info_into_universe
    virtual: true
    body: |
      // TODO: This method
      // TODO: Determine, how is this different from "load_game_progress_and_state_info"
      return;


  - name: load_save_file_content_into_gameplay
    virtual: true
    parameters:
      - name: save_file_content
        type: std::string
        default_argument: '"[unset-save_file_content]"'
    body: |
      // TODO: This method
      AllegroFlare::Logger::throw_error(THIS_CLASS_AND_METHOD_NAME,
         "Not implemented in the base class. This method must be implemented in the derived class."
      );
      return;


  - name: build_save_file_content_for_current_game
    type: std::string
    virtual: true
    body: |
      // TODO: This method
      AllegroFlare::Logger::throw_error(THIS_CLASS_AND_METHOD_NAME,
         "Not implemented in the base class. This method must be implemented in the derived class."
      );
      return "{}";


  - name: handle_save_file_loading_finished
    virtual: true
    body: |
      AllegroFlare::Logger::throw_error(THIS_CLASS_AND_METHOD_NAME,
         "Not implemented in the base class. This method must be implemented in the derived class. Typically you might "
         "emit an event to activate a gameplay screen, or level select screen, etc. depending on what game state was "
         "loaded and where the player should start."
      );

      // Typically, either of these two
      //router->emit_route_event(
         //AllegroFlare::Routers::Standard::EVENT_ACTIVATE_PRIMARY_GAMEPLAY_SCREEN,
         ////AllegroFlare::Routers::Standard::EVENT_ACTIVATE_LEVEL_SELECT_SCREEN,
         //nullptr,
         //al_get_time()
      //);
      return;


  - name: save_game_progress_and_state_info
    virtual: true
    parameters:
      - name: game_session
        type: AllegroFlare::GameSession*
        default_argument: nullptr
    guards: [ game_session, game_session->is_active(), game_session->get_game_progress_and_state_info() ]
    body: |
      // NOTE: Not sure if this is an appropriate design to put this method here
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Base::save_game_progress_and_state_info",
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      return;


  - name: load_game_progress_and_state_info
    virtual: true
    parameters:
      - name: game_session
        type: AllegroFlare::GameSession*
        default_argument: nullptr
    guards: [ game_session, game_session->get_game_progress_and_state_info() ]
    body: |
      // NOTE: Not sure if this is an appropriate design to put this method here
      // TODO: Should "game_session->is_active" be a guard here?
      //std::string save_file_content = AllegroFlare::php::file_get_contents(save_state_filename);
      //game_session->get_game_progress_and_state_info()->import_from_string(save_file_content);
      return;
#    body_dependency_symbols:
#      - AllegroFlare::UsefulPHP


  - name: setup_new_game_progress_and_state_info_DEPRECATED
    virtual: true
    parameters:
      - name: game_session
        type: AllegroFlare::GameSession*
        default_argument: nullptr
    guards: [ game_session ]
    body: |
      // NOTE: Use create_game_progress_and_state_info_saver_loader() instead.
      // TODO: This method
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Base::setup_new_game_progress_and_state_info",
         "DEPRECATED. Use create_game_progress_and_state_info_saver_loader() instead"
      );
      //AllegroFlare::GameProgressAndStateInfos::Base *game_progress_and_state_info =
        //game_session->get_game_progress_and_state_info();
      return;
    body_dependency_symbols:
      - AllegroFlare::GameProgressAndStateInfos::Base


  - name: create_game_progress_and_state_info_saver_loader
    virtual: true
    type: AllegroFlare::GameProgressAndStateInfos::Base*
    body: |
      // NOTE: *** This is the newest preferred method for creating the games' game progress and state info. Note
      // that a GameProgressAndStateInfo object represents a games' *specialization* to save and load, but on creation
      // it does not represent an explicit save or load, or any creation of a session.  This class, after being created,
      // is then handed off to the game_session, owned and located in the router.

      // TODO: This method
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Base::create_game_progress_and_state_info_saver_loader",
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      //AllegroFlare::GameProgressAndStateInfos::Base *game_progress_and_state_info =
        //game_session->get_game_progress_and_state_info();
      return nullptr;
    body_dependency_symbols:
      - AllegroFlare::GameProgressAndStateInfos::Base


  - name: load_last_played_session_or_start_new
    virtual: true
    parameters:
      - name: game_session
        type: AllegroFlare::GameSession*
        default_argument: nullptr
    guards: [ game_session ]
    body: |
      // TODO: This method
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Base::load_last_played_session_or_start_new",
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      //AllegroFlare::GameProgressAndStateInfos::Base *game_progress_and_state_info =
        //game_session->get_game_progress_and_state_info();
      return;
    body_dependency_symbols:
      - AllegroFlare::GameProgressAndStateInfos::Base


  - name: load_audio_controller
    virtual: true
    parameters:
      - name: audio_controller
        type: AllegroFlare::AudioController*
        default_argument: nullptr
    body: |
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Base::load_audio_controller",
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      //AllegroFlare::AudioController &audio_controller = framework->get_audio_controller_ref();
      //audio_controller.set_and_load_sound_effect_elements({
         //// { "menu_move", { "menu_move_tink-02.ogg", false, "restart" } }, // TODO: Throw on an unknown replay type
      //});
      //audio_controller.set_and_load_music_track_elements({
         //// An example of how to load a music track:
         ////{ "intro_music", { "wanderer-01.ogg", true, "ignore" } },
      //});
      //// An example of how to play a music track:
      //// event_emitter->emit_play_music_track_event("intro_music");
      return;


  - name: obtain_context_sensitive_menu_items_for_starting_or_loading_the_game
    virtual: true
    type: std::vector<std::pair<std::string, std::string>>
    body: |
      std::vector<std::pair<std::string, std::string>> game_start_options = {



         // Start style A (Metroid Prime):
         //{ "Play",              "goto_load_a_saved_game_screen" },



         // Start style B (Fade to White) (with no saves)
         //{ "Start new game",    "continue_from_last_save" },

         // Start style B (Fade to White) (with existing saves)
         //{ "Continue",          "..." }, // Loads the most recent save, Will advance to wherever the game wants
         //{ "Start new game",    "..." }, // Will prompt to erase all save data



         // Start style C (Zelda:BOTW) (with no saves)
         //{ "Start new game",    "..." },

         // Start style C (Zelda:BOTW) (with existing saves)
         //{ "Continue",          "..." }, // Will advance to the load_a_saved_game_screen (with list of recent saves)
         //{ "Start new game",    "..." }, // Will prompt to erase all save data



         // Start style D (Tunic) (with no saves) (This is the same as Start Style A, but with convenience),
                                                  // Tunic has up to 10 save slots
         //{ "Start new game",    "..." },

         // Start style D (Tunic) (with existing saves)
         //{ "Continue",          "..." }, // Will load the most recent save, from the most recent profile
         //{ "New game",          "..." },
         //{ "Load game",         "..." },



         // Start style E (Final Fantasy), same as Start Style D, but there are many save slots



         // Start style F (Mega Man)
         //{ "Start game",        "..." },
         //{ "Enter passcode",    "..." },



         // Start style G (Signalis, Wolfenstein II: The New Colossus)
         //{ "Start game",        "..." }, // Will continue from last most recent save on this profile
         //{ "Change profile",    "..." },



      };
      return game_start_options;


  - name: build_title_screen_menu_options
    virtual: true
    type: std::vector<std::pair<std::string, std::string>>
    body: |
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Base::build_title_screen_menu_options",
         "Not implemented in the base class. This method must be implemented in the derived class"
      );

      //std::vector<std::pair<std::string, std::string>> save_context_dependent_game_start_menu_options =
         //saving_and_loading.obtain_context_sensitive_menu_items_for_starting_or_loading_the_game();
         //{ "Continue",          "continue_from_last_save" },       // TODO: If game session is saved and valid
         //{ "Load a Saved Game", "goto_load_a_saved_game_screen" }, // TODO: If game session is saved and valid,
                                                                   // and the game supports save slots
         //{ "Start New Game",    "start_new_game" },                // TODO: If the game session has not begun

      //std::vector<std::pair<std::string, std::string>> my_game_specific_menu_options = {
         //{ "Achievements",      "goto_achievements_screen" },
         //{ "Settings",          "goto_settings_screen" },
         //{ "Version",           "goto_version_screen" },
         //{ "Credits",           "goto_credits_screen" },           // TODO: If game has been won
      //};

      //std::vector<std::pair<std::string, std::string>> quit_options = {
         //{ "Quit", "quit" },
      //};

      //// Assemble the final menu options
      //std::vector<std::pair<std::string, std::string>> result_options;
      //for (const auto& vec : {
            //save_context_dependent_game_start_menu_options,
            //my_game_specific_menu_options,
            //quit_options
         //})
      //{
         //vector_A.insert(result_options, vec.begin(), vec.end());
      //}

      //return result_options;
      return {};


  - name: build_copyright_text
    virtual: true
    type: std::string
    parameters:
      - name: release_info
        type: ReleaseInfo*
        default_argument: nullptr
    guards: [ release_info ]
    body: |
      AllegroFlare::TemplatedText templated_text(
         "[[COPYRIGHT_SYMBOL]] 2024 CLUBCATT Games         clubcatt.com         version [[VERSION_NUMBER]]",
         {
            { "[[COPYRIGHT_SYMBOL]]", AllegroFlare::UnicodeCharacters::COPYRIGHT_SYMBOL },
            { "[[VERSION_NUMBER]]",   release_info->get_version() },
         }
      );
      return templated_text.generate_content();
    body_dependency_symbols:
      - ReleaseInfo
      - AllegroFlare::TemplatedText
      - AllegroFlare::UnicodeCharacters


  - name: build_rolling_credits_sections
    virtual: true
    type: std::vector<AllegroFlare::Elements::RollingCredits::Sections::Base*>
    body: |
      /*
      AllegroFlare::Elements::RollingCredits::SectionFactory section_factory;
      std::vector<AllegroFlare::Elements::RollingCredits::Sections::Base*> result = {
         section_factory.create_spacer(),

         section_factory.create_text(
            "A game by Mark Oates"
         ),

         //section_factory.create_spacer(),

         //section_factory.create_text(
            //"KrampusHack 2024\nhttps://tins.amarillion.org/krampu23"
         //),

         section_factory.create_section_spacer(),

         section_factory.create_header("Programming"),
         section_factory.create_column_with_labels({
            { "Made with", "Allegro (5.2.9)" },
            {          "", "https://liballeg.org/" },
            //{          "", "by Allegro Developers" },
            { "Framework", "AllegroFlare (0.8.11-wip)" },
            {          "", "https://github.com/allegroflare/allegro_flare" },
            {          "", "by Mark Oates" },
         }),

         section_factory.create_section_spacer(),

         section_factory.create_header("People who have contributed code to Allegro 5"),
         section_factory.create_allegro5_contributors_list(3),

         section_factory.create_section_spacer(),
      //});
      //std::vector<AllegroFlare::Elements::RollingCredits::Sections::Base*> result = {
      };
      // TODO: Append disclaimers
      rolling_credits_screen.append_sections(section_factory.create_standard_disclaimers_text());
      return result;
      */

      AllegroFlare::Elements::RollingCredits::SectionFactory section_factory;
      std::vector<AllegroFlare::Elements::RollingCredits::Sections::Base*> result = {
         section_factory.create_spacer(),

         section_factory.create_text(
            "A game by Mark Oates"
         ),

         section_factory.create_spacer(),

         section_factory.create_text(
            "Thank you for playing."
         ),

      };
      //rolling_credits_screen.append_sections(section_factory.create_standard_disclaimers_text());
      return result;


      //return {};
    body_dependency_symbols:
      - AllegroFlare::Elements::RollingCredits::Sections::Base
      - AllegroFlare::Elements::RollingCredits::SectionFactory


  - name: is_type
    type: bool
    parameters:
      - name: possible_type
        type: std::string
        default_argument: '""'
    body: |
      return (possible_type == get_type());


dependencies:


  - symbol: AllegroFlare::DialogTree::NodeBank
    headers: [ AllegroFlare/DialogTree/NodeBank.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::Levels::Base
    headers: [ AllegroFlare/Levels/Base.hpp ]
  - symbol: AllegroFlare::Achievement
    headers: [ AllegroFlare/Achievement.hpp ]
  - symbol: AllegroFlare::Elements::StoryboardPages::Base
    headers: [ AllegroFlare/Elements/StoryboardPages/Base.hpp ]
  - symbol: AllegroFlare::GameProgressAndStateInfos::Base
    headers: [ AllegroFlare/GameProgressAndStateInfos/Base.hpp ]
  - symbol: AllegroFlare::GameSession
    headers: [ AllegroFlare/GameSession.hpp ]
  - symbol: AllegroFlare::Elements::RollingCredits::Sections::Base
    headers: [ AllegroFlare/Elements/RollingCredits/Sections/Base.hpp ]
  - symbol: AllegroFlare::Elements::RollingCredits::SectionFactory
    headers: [ AllegroFlare/Elements/RollingCredits/SectionFactory.hpp ]
  - symbol: AllegroFlare::LoadASavedGame::SaveSlots::Base
    headers: [ AllegroFlare/LoadASavedGame/SaveSlots/Base.hpp ]
  - symbol: ReleaseInfo
    headers: [ ReleaseInfo.hpp ]
  - symbol: AllegroFlare::Elements::Backgrounds::Base
    headers: [ AllegroFlare/Elements/Backgrounds/Base.hpp ]
  - symbol: AllegroFlare::Elements::Backgrounds::ClearToColor
    headers: [ AllegroFlare/Elements/Backgrounds/ClearToColor.hpp ]
  - symbol: AllegroFlare::Elements::Backgrounds::None
    headers: [ AllegroFlare/Elements/Backgrounds/None.hpp ]
  - symbol: AllegroFlare::GameEvent
    headers: [ AllegroFlare/GameEvent.hpp ]
  - symbol: AllegroFlare::EventNames
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: AllegroFlare::GameEventDatas::ScreenActivated
    headers: [ AllegroFlare/GameEventDatas/ScreenActivated.hpp ]
  - symbol: AllegroFlare::TemplatedText
    headers: [ AllegroFlare/TemplatedText.hpp ]
  - symbol: AllegroFlare::UnicodeCharacters
    headers: [ AllegroFlare/UnicodeCharacters.hpp ]
  - symbol: AllegroFlare::GameEventDatas::AchievementUnlocked
    headers: [ AllegroFlare/GameEventDatas/AchievementUnlocked.hpp ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::Screens::Gameplay
    headers: [ AllegroFlare/Screens/Gameplay.hpp ]
  - symbol: AllegroFlare::Runners::Complete
    headers: [ AllegroFlare/Runners/Complete.hpp ]
  - symbol: AllegroFlare::AudioController
    headers: [ AllegroFlare/AudioController.hpp ]
  - symbol: AllegroFlare::ForwardDeclarations::AllegroFlare::Runners::Complete
    headers: [ AllegroFlare/ForwardDeclarations/AllegroFlare/Runners/Complete.hpp ]
  - symbol: AllegroFlare::ForwardDeclarations::AllegroFlare::GameConfigurations::Complete
    headers: [ AllegroFlare/ForwardDeclarations/AllegroFlare/GameConfigurations/Complete.hpp ]
  - symbol: AllegroFlare::Screens::PauseScreen
    headers: [ AllegroFlare/Screens/PauseScreen.hpp ]
  - symbol: AllegroFlare::Screens::Subscreen::Screen
    headers: [ AllegroFlare/Screens/Subscreen/Screen.hpp ]
  - symbol: AllegroFlare::SavingAndLoading::SavingAndLoading::LoadStyle
    headers: [ AllegroFlare/SavingAndLoading/SavingAndLoading.hpp ]
  - symbol: AllegroFlare::SavingAndLoading::SavingAndLoading::SaveStyle
    headers: [ AllegroFlare/SavingAndLoading/SavingAndLoading.hpp ]
  - symbol: AllegroFlare::SavingAndLoading::SavingAndLoading::StartStyle
    headers: [ AllegroFlare/SavingAndLoading/SavingAndLoading.hpp ]


