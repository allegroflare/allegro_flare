properties:


  - name: type
    type: std::string
    init_with: AllegroFlare::GameConfigurations::Complete::TYPE
    constructor_arg: true
    getter: true

  - name: TYPE
    type: char*
    init_with: '(char*)"AllegroFlare/GameConfigurations/Complete"'
    static: true
    constexpr: true


documentation:


  - notes:
     - this Complete class actually acts as a base class, but it's not clear and might appear to be derived from
       GameConfigurations/Base. I'm not sure how to resolve this if it will require a renaming or what.
     - This Complete class is intended to be paired with the Runners/Complete class


methods:


  - name: load_level_by_identifier
    virtual: true
    type: AllegroFlare::Levels::Base*
    parameters:
      - name: level_identifier
        type: std::string
        default_argument: '"[unset-level_identifier]"'
    body: |
      // TODO: Add tests for this method or consider making it a pure virtual
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Base::load_level_by_identifier"
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      return nullptr;
    body_dependency_symbols:
     - AllegroFlare::Logger


  - name: build_level_list_for_level_select_screen_by_identifier
    virtual: true
    type: std::vector<std::pair<std::string, std::string>>
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"[unset-identifier]"'
    body: |
      // TODO: Add tests for this method or consider making it a pure virtual
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Base::build_level_list_for_level_select_screen_by_identifier"
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      return {};
    body_dependency_symbols:
     - AllegroFlare::Logger


  - name: build_dialog_bank_by_identifier
    virtual: true
    type: AllegroFlare::DialogTree::NodeBank
    parameters:
      - name: identifier
        type: std::string
        default_argument: '"[unset-identifier]"'
    body: |
      // TODO: Add tests for this method or consider making it a pure virtual
      AllegroFlare::DialogTree::NodeBank node_bank;
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Base::build_dialog_bank_by_identifier",
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      return node_bank;
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: build_achievements
    virtual: true
    type: std::vector<std::tuple<std::string, AllegroFlare::Achievement*, bool, bool>>
    body: |
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Base::build_achievements",
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      return {};
    body_dependency_symbols:
      - AllegroFlare::Achievement


  - name: create_intro_logos_storyboard_pages
    virtual: true
    type: std::vector<AllegroFlare::Elements::StoryboardPages::Base *>
    body: |
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Base::create_intro_logos_storyboard_pagse",
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      //AllegroFlare::StoryboardPageFactory page_factory;
      //page_factory.set_font_bin(font_bin);
      //page_factory.set_bitmap_bin(bitmap_bin);
      //page_factory.set_model_bin(model_bin);

      //std::vector<AllegroFlare::Elements::StoryboardPages::Base *> result =
      //{
         //page_factory.create_image_with_advancing_text_page(
            //"storyboard-1-01-1165x500.png",
            //"Once upon a time, in a magical kingdom ruled by a wise and just queen, a young hero sets out on a "
               //"journey to prove himself and save his people from a terrible curse."
         //),
         //page_factory.create_image_with_advancing_text_page(
            //"storyboard-2-01-1165x500.png",
            //"With the help of his trusty sidekick and a band of unlikely allies, he must navigate treacherous "
               //"terrain and battle fierce foes."
         //),
         //page_factory.create_advancing_text_page(
           //"And achieve his goal to save the kingdom."
         //),
      //};
      return {};


  - name: setup_new_game_progress_and_state_info
    parameters:
      - name: game_session
        type: AllegroFlare::GameSession*
        default_argument: nullptr
    guards: [ game_session ]
    body: |
      // TODO: This method
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Base::setup_new_game_progress_and_state_info",
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      //AllegroFlare::GameProgressAndStateInfos::Base *game_progress_and_state_info =
        //game_session->get_game_progress_and_state_info();
      return;
    body_dependency_symbols:
      - AllegroFlare::GameProgressAndStateInfos::Base


  - name: load_last_played_session_or_start_new
    parameters:
      - name: game_session
        type: AllegroFlare::GameSession*
        default_argument: nullptr
    guards: [ game_session ]
    body: |
      // TODO: This method
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Base::load_last_played_session_or_start_new",
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      //AllegroFlare::GameProgressAndStateInfos::Base *game_progress_and_state_info =
        //game_session->get_game_progress_and_state_info();
      return;
    body_dependency_symbols:
      - AllegroFlare::GameProgressAndStateInfos::Base


  - name: load_audio_controller
    body: |
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Base::load_audio_controller",
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      //AllegroFlare::AudioController &audio_controller = framework->get_audio_controller_ref();
      //audio_controller.set_and_load_sound_effect_elements({
         //// { "menu_move", { "menu_move_tink-02.ogg", false, "restart" } }, // TODO: Throw on an unknown replay type
      //});
      //audio_controller.set_and_load_music_track_elements({
         //// An example of how to load a music track:
         ////{ "intro_music", { "wanderer-01.ogg", true, "ignore" } },
      //});
      //// An example of how to play a music track:
      //// event_emitter->emit_play_music_track_event("intro_music");
      return;


  - name: build_title_screen_menu_options
    type: std::vector<std::pair<std::string, std::string>>
    body: |
      AllegroFlare::Logger::throw_error(
         "AllegroFlare::GameConfigurations::Base::build_title_screen_menu_options",
         "Not implemented in the base class. This method must be implemented in the derived class"
      );
      std::vector<std::pair<std::string, std::string>> options = {
         { "Continue",          "continue_from_last_save" },       // TODO: If game session is saved and valid
         { "Load a Saved Game", "goto_load_a_saved_game_screen" }, // TODO: If game session is saved and valid,
                                                                   // and the game supports save slots
         { "Start New Game",    "start_new_game" },                // TODO: If the game session has not begun
         { "Achievements",      "goto_achievements_screen" },
         { "Settings",          "goto_settings_screen" },
         { "Version",           "goto_version_screen" },
         { "Credits",           "goto_credits_screen" },           // TODO: If game has been won
         { "Quit",              "quit" },
      };
      return options;


  - name: is_type
    type: bool
    parameters:
      - name: possible_type
        type: std::string
        default_argument: '""'
    body: |
      return (possible_type == get_type());


dependencies:


  - symbol: AllegroFlare::DialogTree::NodeBank
    headers: [ AllegroFlare/DialogTree/NodeBank.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::Levels::Base
    headers: [ AllegroFlare/Levels/Base.hpp ]
  - symbol: AllegroFlare::Achievement
    headers: [ AllegroFlare/Achievement.hpp ]
  - symbol: AllegroFlare::Elements::StoryboardPages::Base
    headers: [ AllegroFlare/Elements/StoryboardPages/Base.hpp ]
  - symbol: AllegroFlare::GameProgressAndStateInfos::Base
    headers: [ AllegroFlare/GameProgressAndStateInfos/Base.hpp ]
  - symbol: AllegroFlare::GameSession
    headers: [ AllegroFlare/GameSession.hpp ]


