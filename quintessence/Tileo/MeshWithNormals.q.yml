properties:


  - name: tileo_tile_vertex_allegro_vertex_declaration
    type: Tileo::TileoTileVertexAllegroVertexDeclaration
    init_with: ''

  - name: num_columns
    type: int
    init_with: 0
    constructor_arg: true
    getter: true

  - name: num_rows
    type: int
    init_with: 0
    constructor_arg: true
    getter: true

  - name: tile_width
    type: float
    init_with: 1.0f
    constructor_arg: true

  - name: tile_height
    type: float
    init_with: 1.0f
    constructor_arg: true

  - name: atlas
    type: Tileo::Atlas*
    init_with: nullptr
    constructor_arg: true

  - name: normal_atlas
    type: Tileo::Atlas*
    init_with: nullptr
    constructor_arg: true

  - name: tile_ids
    type: std::vector<int>
    init_with: ''

  - name: normal_tile_ids
    type: std::vector<int>
    init_with: ''

  - name: vertexes
    type: std::vector<TILEO_TILE_VERTEX>
    init_with: ''
    getter_ref: true

  - name: initialized
    type: bool
    init_with: false

  - name: destroyed
    type: bool
    init_with: false


functions:


  - name: initialize
    guards: [ (!initialized), (num_columns >= 0), (num_rows >= 0) ]
    body: |
      tileo_tile_vertex_allegro_vertex_declaration.initialize();
      resize(num_columns, num_rows);
      initialized = true;
      return;


  - name: destroy
    body: |
      // TODO: guards
      tileo_tile_vertex_allegro_vertex_declaration.destroy();
      destroyed = true;
      return;


  - name: obtain_vertex_declaration
    type: ALLEGRO_VERTEX_DECL*
    body: |
      return tileo_tile_vertex_allegro_vertex_declaration.get_vertex_declaration();


  - name: resize
    parameters:
      - name: num_columns
        type: int
        default_argument: 1
      - name: num_rows
        type: int
        default_argument: 1
    guards: [ (num_columns >= 0), (num_rows >= 0) ]
    body: |
      this->num_columns = num_columns;
      this->num_rows = num_rows;

      clear_and_reserve();
      place_vertexes_into_tile_mesh_shape();

      return;


  - name: set_tile
    type: bool
    parameters:
      - name: tile_x
        type: int
        default_argument: 0
      - name: tile_y
        type: int
        default_argument: 0
      - name: tile_index_num
        type: int
        default_argument: 0
    guards: [ initialized, atlas ]
    body: |
      if (tile_x < 0) return false;
      if (tile_x >= num_columns) return false;
      if (tile_y < 0) return false;
      if (tile_y >= num_rows) return false;

      tile_ids[tile_x + tile_y * num_columns] = tile_index_num;

      int atlas_bitmap_width = atlas->get_bitmap_width(); // <- TODO: consider revising scaling by atlas size
      int atlas_bitmap_height = atlas->get_bitmap_height();

      if (atlas_bitmap_width <= 0 || atlas_bitmap_height <= 0) throw std::runtime_error("jiopjojop");

      float u1, v1, u2, v2 = 0;
      if (!atlas->get_tile_uv(tile_index_num, &u1, &v1, &u2, &v2)) return false;
      u1 /= atlas_bitmap_width;
      v1 /= atlas_bitmap_height;
      u2 /= atlas_bitmap_width;
      v2 /= atlas_bitmap_height;
      if (!set_tile_uv(tile_x, tile_y, u1, v1, u2, v2)) return false;

      return true;
    

  - name: set_normal_tile
    type: bool
    parameters:
      - name: tile_x
        type: int
        default_argument: 0
      - name: tile_y
        type: int
        default_argument: 0
      - name: tile_index_num
        type: int
        default_argument: 0
    guards: [ initialized, normal_atlas ]
    body: |
      if (tile_x < 0) return false;
      if (tile_x >= num_columns) return false;
      if (tile_y < 0) return false;
      if (tile_y >= num_rows) return false;

      normal_tile_ids[tile_x + tile_y * num_columns] = tile_index_num;

      int normal_atlas_bitmap_width = normal_atlas->get_bitmap_width(); // <-- TODO: consider revising scaling by atlas
      int normal_atlas_bitmap_height = normal_atlas->get_bitmap_height();

      if (normal_atlas_bitmap_width <= 0 || normal_atlas_bitmap_height <= 0) throw std::runtime_error("asdfadfs");

      float u1, v1, u2, v2 = 0;
      if (!normal_atlas->get_tile_uv(tile_index_num, &u1, &v1, &u2, &v2)) return false;
      u1 /= normal_atlas_bitmap_width;
      v1 /= normal_atlas_bitmap_height;
      u2 /= normal_atlas_bitmap_width;
      v2 /= normal_atlas_bitmap_height;
      if (!set_normal_tile_uv(tile_x, tile_y, u1, v1, u2, v2)) return false;

      return true;
    

  - name: set_tile_uv
    type: bool
    private: true
    guards: [ initialized ]
    parameters:
      - name: tile_x
        type: int
        default_argument: 0
      - name: tile_y
        type: int
        default_argument: 0
      - name: u1
        type: float
        default_argument: 0.0f
      - name: v1
        type: float
        default_argument: 0.0f
      - name: u2
        type: float
        default_argument: 0.0f
      - name: v2
        type: float
        default_argument: 0.0f
    body: |
      if (tile_x < 0) return false;
      if (tile_x >= num_columns) return false;
      if (tile_y < 0) return false;
      if (tile_y >= num_rows) return false;

      int id_start = (tile_x + tile_y * num_columns) * 6;
      //int id_start = (tile_x * 6) * (tile_y * num_columns);

      if (id_start >= vertexes.size())
      {
         throw std::runtime_error("MeshWithNormals:set_tile_uv: unexpected assignment error");
      }

      int &i = id_start;
      vertexes[i+0].texture_u = u1;
      vertexes[i+0].texture_v = v1;
      vertexes[i+1].texture_u = u1;
      vertexes[i+1].texture_v = v2;
      vertexes[i+2].texture_u = u2;
      vertexes[i+2].texture_v = v2;
      vertexes[i+3].texture_u = u2;
      vertexes[i+3].texture_v = v2;
      vertexes[i+4].texture_u = u2;
      vertexes[i+4].texture_v = v1;
      vertexes[i+5].texture_u = u1;
      vertexes[i+5].texture_v = v1;
      return true;


  - name: set_normal_tile_uv
    type: bool
    private: true
    guards: [ initialized ]
    parameters:
      - name: tile_x
        type: int
        default_argument: 0
      - name: tile_y
        type: int
        default_argument: 0
      - name: u1
        type: float
        default_argument: 0.0f
      - name: v1
        type: float
        default_argument: 0.0f
      - name: u2
        type: float
        default_argument: 0.0f
      - name: v2
        type: float
        default_argument: 0.0f
    body: |
      if (tile_x < 0) return false;
      if (tile_x >= num_columns) return false;
      if (tile_y < 0) return false;
      if (tile_y >= num_rows) return false;

      int id_start = (tile_x + tile_y * num_columns) * 6;

      if (id_start >= vertexes.size())
      {
         throw std::runtime_error("MeshWithNormals:set_normal_tile_uv: unexpected assignment error");
      }

      int &i = id_start;
      vertexes[i+0].normal_u = u1;
      vertexes[i+0].normal_v = v1;
      vertexes[i+1].normal_u = u1;
      vertexes[i+1].normal_v = v2;
      vertexes[i+2].normal_u = u2;
      vertexes[i+2].normal_v = v2;
      vertexes[i+3].normal_u = u2;
      vertexes[i+3].normal_v = v2;
      vertexes[i+4].normal_u = u2;
      vertexes[i+4].normal_v = v1;
      vertexes[i+5].normal_u = u1;
      vertexes[i+5].normal_v = v1;
      return true;
 

  - name: place_vertexes_into_tile_mesh_shape
    private: true
    body: |
      // TODO: add test

      // place the vertexes to create a mesh of boxes for tiles
      int num_vertexes = num_columns*num_rows*6;
      for (int v=0; v<num_vertexes; v+=6)
      {
         int tile_num = v / 6;
         float x1 = (tile_num % num_columns);
         float y1 = (tile_num / num_columns);
         float x2 = x1 + 1;
         float y2 = y1 + 1;

         vertexes[v+0].x = x1;
         vertexes[v+0].y = y1;
         vertexes[v+1].x = x1;
         vertexes[v+1].y = y2;
         vertexes[v+2].x = x2;
         vertexes[v+2].y = y2;
         vertexes[v+3].x = x2;
         vertexes[v+3].y = y2;
         vertexes[v+4].x = x2;
         vertexes[v+4].y = y1;
         vertexes[v+5].x = x1;
         vertexes[v+5].y = y1;
      }

      // "scale" the vertexes to tile_width and tile_height, and set other default values
      for (int v=0; v<num_vertexes; v++)
      {
         vertexes[v].x *= tile_width;
         vertexes[v].y *= tile_height;
         vertexes[v].z = 0;
         vertexes[v].color = ALLEGRO_COLOR{1, 1, 1, 1};
      }

      return;


  - name: clear_and_reserve
    private: true
    body: |
      int num_elements = num_rows * num_columns;
      TILEO_TILE_VERTEX empty_vertex = Tileo::TileoTileVertexAllegroVertexDeclaration::build_empty_vertex();

      tile_ids.clear();
      normal_tile_ids.clear();
      vertexes.clear();

      tile_ids.resize(num_elements, 0);
      normal_tile_ids.resize(num_elements, 0);
      vertexes.resize(num_elements*6, empty_vertex);

      return;


dependencies:


  - symbol: Tileo::Atlas*
    headers: [ Tileo/Atlas.hpp ]
  - symbol: Tileo::TileoTileVertexAllegroVertexDeclaration
    headers: [ Tileo/TileoTileVertexAllegroVertexDeclaration.hpp ]
  - symbol: ALLEGRO_VERTEX_DECL*
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: std::vector<TILEO_TILE_VERTEX>
    headers: [ vector, Tileo/TileoTileVertex.hpp ]


