<!DOCTYPE html>
<head>
<style>
html
{
  background-color: #09090c;
  color: #dfdfdf;
}
*
{
  font-family: 'Arial';
  padding: 3px 20px;
}
table td
{
  padding: 3px 20px;
}
.property
{
  color: dodgerblue;
}
.private_property
{
  color: aliceblue;
}

.method
{
  color: orange;
}

.private_method
{
  color: pink;
}

.dependency
{
  color: #9f9fa1;
}

.component
{
  padding: 20 10 20 10;
  margin: 20 10 20 10;
  background-color: #1a1a1c;
}

.component h3
{
}
</style>
</head>
<body>
<h1>Table of Contents</h1>
<ul>
  <li><a href="#quintessence/AllegroFlare/AI/PromptTemplate.q.yml">quintessence/AllegroFlare/AI/PromptTemplate.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/AI/PromptTemplateYAMLLoader.q.yml">quintessence/AllegroFlare/AI/PromptTemplateYAMLLoader.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/AllegroContributorsList.q.yml">quintessence/AllegroFlare/AllegroContributorsList.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/AssetStudio/Asset.q.yml">quintessence/AllegroFlare/AssetStudio/Asset.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/AssetStudio/AssetImporter.q.yml">quintessence/AllegroFlare/AssetStudio/AssetImporter.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/AssetStudio/Database.q.yml">quintessence/AllegroFlare/AssetStudio/Database.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/AssetStudio/DatabaseCSVLoader.q.yml">quintessence/AllegroFlare/AssetStudio/DatabaseCSVLoader.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/AudioController.q.yml">quintessence/AllegroFlare/AudioController.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/AudioProcessing/AudioDataBlock.q.yml">quintessence/AllegroFlare/AudioProcessing/AudioDataBlock.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/AudioProcessing/AudioMixer.q.yml">quintessence/AllegroFlare/AudioProcessing/AudioMixer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/AudioProcessing/Filters/AllPass.q.yml">quintessence/AllegroFlare/AudioProcessing/Filters/AllPass.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/AudioProcessing/Filters/Delay.q.yml">quintessence/AllegroFlare/AudioProcessing/Filters/Delay.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/AudioRepositoryElement.q.yml">quintessence/AllegroFlare/AudioRepositoryElement.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/BackgroundFactory.q.yml">quintessence/AllegroFlare/BackgroundFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/BacktracingException.q.yml">quintessence/AllegroFlare/BacktracingException.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Bone3D.q.yml">quintessence/AllegroFlare/Bone3D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Bone3DGraphRenderer.q.yml">quintessence/AllegroFlare/Bone3DGraphRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/CSVParser.q.yml">quintessence/AllegroFlare/CSVParser.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Camera2D.q.yml">quintessence/AllegroFlare/Camera2D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/CameraControlStrategies2D/Base.q.yml">quintessence/AllegroFlare/CameraControlStrategies2D/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/CameraControlStrategies2D/HorizontalRail.q.yml">quintessence/AllegroFlare/CameraControlStrategies2D/HorizontalRail.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/CameraControlStrategies2D/SmoothSnap.q.yml">quintessence/AllegroFlare/CameraControlStrategies2D/SmoothSnap.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/CameraControlStrategies2D/SmoothSnapWithZoomEffect.q.yml">quintessence/AllegroFlare/CameraControlStrategies2D/SmoothSnapWithZoomEffect.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/CameraControlStrategies2D/Snap.q.yml">quintessence/AllegroFlare/CameraControlStrategies2D/Snap.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Clock.q.yml">quintessence/AllegroFlare/Clock.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/ClubCatt/Logo.q.yml">quintessence/AllegroFlare/ClubCatt/Logo.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/ColorKit.q.yml">quintessence/AllegroFlare/ColorKit.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DeploymentEnvironment.q.yml">quintessence/AllegroFlare/DeploymentEnvironment.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DesignSystems/DesignFocus.q.yml">quintessence/AllegroFlare/DesignSystems/DesignFocus.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DesignSystems/DesignPillar.q.yml">quintessence/AllegroFlare/DesignSystems/DesignPillar.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DesignSystems/DesignPillarDistribution.q.yml">quintessence/AllegroFlare/DesignSystems/DesignPillarDistribution.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DesignSystems/DesignPillarDistributor.q.yml">quintessence/AllegroFlare/DesignSystems/DesignPillarDistributor.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogSystem/ChapterIndex.q.yml">quintessence/AllegroFlare/DialogSystem/ChapterIndex.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogSystem/Chapters/Base.q.yml">quintessence/AllegroFlare/DialogSystem/Chapters/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogSystem/Chapters/Basic.q.yml">quintessence/AllegroFlare/DialogSystem/Chapters/Basic.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogSystem/CharacterFactory.q.yml">quintessence/AllegroFlare/DialogSystem/CharacterFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogSystem/CharacterRoster.q.yml">quintessence/AllegroFlare/DialogSystem/CharacterRoster.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogSystem/CharacterStagingLayouts/Base.q.yml">quintessence/AllegroFlare/DialogSystem/CharacterStagingLayouts/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogSystem/CharacterStagingLayouts/BasicCentered.q.yml">quintessence/AllegroFlare/DialogSystem/CharacterStagingLayouts/BasicCentered.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogSystem/CharacterStagingLayouts/Dynamic.q.yml">quintessence/AllegroFlare/DialogSystem/CharacterStagingLayouts/Dynamic.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogSystem/CharacterStagingLayouts/MultiModal.q.yml">quintessence/AllegroFlare/DialogSystem/CharacterStagingLayouts/MultiModal.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogSystem/Characters/Base.q.yml">quintessence/AllegroFlare/DialogSystem/Characters/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogSystem/Characters/Basic.q.yml">quintessence/AllegroFlare/DialogSystem/Characters/Basic.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogSystem/DialogEventDatas/CloseDialog.q.yml">quintessence/AllegroFlare/DialogSystem/DialogEventDatas/CloseDialog.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogSystem/DialogEventDatas/CreateYouGotAnItemDialog.q.yml">quintessence/AllegroFlare/DialogSystem/DialogEventDatas/CreateYouGotAnItemDialog.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogSystem/DialogEventDatas/CreateYouGotEvidenceDialog.q.yml">quintessence/AllegroFlare/DialogSystem/DialogEventDatas/CreateYouGotEvidenceDialog.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogSystem/DialogEventDatas/LoadDialogNodeBankFromFile.q.yml">quintessence/AllegroFlare/DialogSystem/DialogEventDatas/LoadDialogNodeBankFromFile.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogSystem/DialogEventDatas/SpawnDialogByName.q.yml">quintessence/AllegroFlare/DialogSystem/DialogEventDatas/SpawnDialogByName.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogSystem/DialogSystem.q.yml">quintessence/AllegroFlare/DialogSystem/DialogSystem.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogSystem/SceneIndex.q.yml">quintessence/AllegroFlare/DialogSystem/SceneIndex.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogSystem/Scenes/Base.q.yml">quintessence/AllegroFlare/DialogSystem/Scenes/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogSystem/Scenes/Basic.q.yml">quintessence/AllegroFlare/DialogSystem/Scenes/Basic.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogSystem/StagedCharacter/Dynamic.q.yml">quintessence/AllegroFlare/DialogSystem/StagedCharacter/Dynamic.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogSystemDrivers/Base.q.yml">quintessence/AllegroFlare/DialogSystemDrivers/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver.q.yml">quintessence/AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogTree/BasicScreenplayTextLoader.q.yml">quintessence/AllegroFlare/DialogTree/BasicScreenplayTextLoader.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogTree/NodeBank.q.yml">quintessence/AllegroFlare/DialogTree/NodeBank.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogTree/NodeBankFactory.q.yml">quintessence/AllegroFlare/DialogTree/NodeBankFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogTree/NodeBankInferencer.q.yml">quintessence/AllegroFlare/DialogTree/NodeBankInferencer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogTree/NodeOptions/Base.q.yml">quintessence/AllegroFlare/DialogTree/NodeOptions/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogTree/NodeOptions/ExitDialog.q.yml">quintessence/AllegroFlare/DialogTree/NodeOptions/ExitDialog.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogTree/NodeOptions/GoToNode.q.yml">quintessence/AllegroFlare/DialogTree/NodeOptions/GoToNode.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogTree/Nodes/Base.q.yml">quintessence/AllegroFlare/DialogTree/Nodes/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogTree/Nodes/ChapterTitle.q.yml">quintessence/AllegroFlare/DialogTree/Nodes/ChapterTitle.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogTree/Nodes/EmitGameEvent.q.yml">quintessence/AllegroFlare/DialogTree/Nodes/EmitGameEvent.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogTree/Nodes/ExitDialog.q.yml">quintessence/AllegroFlare/DialogTree/Nodes/ExitDialog.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogTree/Nodes/ExitProgram.q.yml">quintessence/AllegroFlare/DialogTree/Nodes/ExitProgram.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogTree/Nodes/MultipageWithOptions.q.yml">quintessence/AllegroFlare/DialogTree/Nodes/MultipageWithOptions.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogTree/Nodes/RawScriptLine.q.yml">quintessence/AllegroFlare/DialogTree/Nodes/RawScriptLine.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogTree/Nodes/Wait.q.yml">quintessence/AllegroFlare/DialogTree/Nodes/Wait.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogTree/Nodes/YouGotAnItemDialog.q.yml">quintessence/AllegroFlare/DialogTree/Nodes/YouGotAnItemDialog.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DialogTree/YAMLLoader.q.yml">quintessence/AllegroFlare/DialogTree/YAMLLoader.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DisplaySettingsInterfaces/Base.q.yml">quintessence/AllegroFlare/DisplaySettingsInterfaces/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DisplaySettingsInterfaces/Live.q.yml">quintessence/AllegroFlare/DisplaySettingsInterfaces/Live.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/AchievementsList.q.yml">quintessence/AllegroFlare/Elements/AchievementsList.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/AdvancingText.q.yml">quintessence/AllegroFlare/Elements/AdvancingText.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/AdvancingTextRenderer.q.yml">quintessence/AllegroFlare/Elements/AdvancingTextRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Backgrounds/Base.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Backgrounds/Basic3D.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/Basic3D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Backgrounds/ClearToColor.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/ClearToColor.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Backgrounds/IconPattern.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/IconPattern.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Backgrounds/Image.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/Image.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Backgrounds/Monoplex.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/Monoplex.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Backgrounds/None.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/None.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Backgrounds/Parallax.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/Parallax.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Backgrounds/ParallaxLayer.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/ParallaxLayer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Backgrounds/ScreenCapture.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/ScreenCapture.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Backgrounds/Video.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/Video.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Base.q.yml">quintessence/AllegroFlare/Elements/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Button.q.yml">quintessence/AllegroFlare/Elements/Button.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/ChapterSelect/Carousel.q.yml">quintessence/AllegroFlare/Elements/ChapterSelect/Carousel.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/ChapterSelect/CarouselElementRenderer.q.yml">quintessence/AllegroFlare/Elements/ChapterSelect/CarouselElementRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/Base.q.yml">quintessence/AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/ThumbnailWithLabelRenderer.q.yml">quintessence/AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/ThumbnailWithLabelRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/ThumbnailWithLabelUnlockableRenderer.q.yml">quintessence/AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/ThumbnailWithLabelUnlockableRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/ChapterSelect/CarouselElements/Base.q.yml">quintessence/AllegroFlare/Elements/ChapterSelect/CarouselElements/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/ChapterSelect/CarouselElements/ThumbnailWithLabel.q.yml">quintessence/AllegroFlare/Elements/ChapterSelect/CarouselElements/ThumbnailWithLabel.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/ChapterSelect/CarouselElements/ThumbnailWithLabelUnlockable.q.yml">quintessence/AllegroFlare/Elements/ChapterSelect/CarouselElements/ThumbnailWithLabelUnlockable.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/ChapterSelect/ChapterSelect.q.yml">quintessence/AllegroFlare/Elements/ChapterSelect/ChapterSelect.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/ChapterSelect/PaginationBar.q.yml">quintessence/AllegroFlare/Elements/ChapterSelect/PaginationBar.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/ChapterSelect/Screen.q.yml">quintessence/AllegroFlare/Elements/ChapterSelect/Screen.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxFactory.q.yml">quintessence/AllegroFlare/Elements/DialogBoxFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxFrame.q.yml">quintessence/AllegroFlare/Elements/DialogBoxFrame.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxNameTag.q.yml">quintessence/AllegroFlare/Elements/DialogBoxNameTag.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxRenderers/ChapterTitleRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderers/ChapterTitleRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxRenderers/CharacterFeatureRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderers/CharacterFeatureRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxRenderers/IntertitleRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderers/IntertitleRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxRenderers/TextMessages.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderers/TextMessages.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxStyles.q.yml">quintessence/AllegroFlare/Elements/DialogBoxStyles.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxes/Base.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxes/Basic.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/Basic.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxes/ChapterTitle.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/ChapterTitle.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxes/CharacterFeature.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/CharacterFeature.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxes/Choice.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/Choice.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxes/Intertitle.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/Intertitle.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxes/TextMessages.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/TextMessages.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxes/Wait.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/Wait.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxes/YouGotAnItem.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/YouGotAnItem.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxes/YouGotEvidence.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/YouGotEvidence.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogButton.q.yml">quintessence/AllegroFlare/Elements/DialogButton.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogRoll.q.yml">quintessence/AllegroFlare/Elements/DialogRoll.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogRollRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogRollRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/HealthBars/Basic.q.yml">quintessence/AllegroFlare/Elements/HealthBars/Basic.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/HealthBars/Classic.q.yml">quintessence/AllegroFlare/Elements/HealthBars/Classic.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/HealthBars/Hearts.q.yml">quintessence/AllegroFlare/Elements/HealthBars/Hearts.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/InputDeviceConfigurationList.q.yml">quintessence/AllegroFlare/Elements/InputDeviceConfigurationList.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/InputDevicesList.q.yml">quintessence/AllegroFlare/Elements/InputDevicesList.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Inventory.q.yml">quintessence/AllegroFlare/Elements/Inventory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/LevelSelect.q.yml">quintessence/AllegroFlare/Elements/LevelSelect.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/ListBox.q.yml">quintessence/AllegroFlare/Elements/ListBox.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/ListBoxRenderer.q.yml">quintessence/AllegroFlare/Elements/ListBoxRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/NinePatch.q.yml">quintessence/AllegroFlare/Elements/NinePatch.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/NotificationRenderer.q.yml">quintessence/AllegroFlare/Elements/NotificationRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked.q.yml">quintessence/AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Notifications/AchievementUnlocked.q.yml">quintessence/AllegroFlare/Elements/Notifications/AchievementUnlocked.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Notifications/Base.q.yml">quintessence/AllegroFlare/Elements/Notifications/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/NotificationsRenderer.q.yml">quintessence/AllegroFlare/Elements/NotificationsRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/PlayingCards/Card.q.yml">quintessence/AllegroFlare/Elements/PlayingCards/Card.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/PlayingCards/Deck.q.yml">quintessence/AllegroFlare/Elements/PlayingCards/Deck.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/PlayingCards/DeckFactory.q.yml">quintessence/AllegroFlare/Elements/PlayingCards/DeckFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/RollingCredits/RollingCredits.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/RollingCredits.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/RollingCredits/SectionFactory.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/SectionFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/Base.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/ColumnWithLabels.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/ColumnWithLabels.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/Header.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/Header.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/LegalText.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/LegalText.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/Multicolumn.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/Multicolumn.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/Text.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/Text.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/RollingCredits/Sections/Base.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/Sections/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/RollingCredits/Sections/ColumnWithLabels.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/Sections/ColumnWithLabels.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/RollingCredits/Sections/Header.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/Sections/Header.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/RollingCredits/Sections/LegalText.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/Sections/LegalText.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/RollingCredits/Sections/Multicolumn.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/Sections/Multicolumn.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/RollingCredits/Sections/Spacer.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/Sections/Spacer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/RollingCredits/Sections/Text.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/Sections/Text.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Score.q.yml">quintessence/AllegroFlare/Elements/Score.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Scrollbar.q.yml">quintessence/AllegroFlare/Elements/Scrollbar.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/SelectionCursorBox.q.yml">quintessence/AllegroFlare/Elements/SelectionCursorBox.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Stopwatch.q.yml">quintessence/AllegroFlare/Elements/Stopwatch.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Storyboard.q.yml">quintessence/AllegroFlare/Elements/Storyboard.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/StoryboardPages/AdvancingText.q.yml">quintessence/AllegroFlare/Elements/StoryboardPages/AdvancingText.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/StoryboardPages/Base.q.yml">quintessence/AllegroFlare/Elements/StoryboardPages/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/StoryboardPages/ClubCattLogo.q.yml">quintessence/AllegroFlare/Elements/StoryboardPages/ClubCattLogo.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/StoryboardPages/Image.q.yml">quintessence/AllegroFlare/Elements/StoryboardPages/Image.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/StoryboardPages/ImageWithAdvancingText.q.yml">quintessence/AllegroFlare/Elements/StoryboardPages/ImageWithAdvancingText.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/StoryboardPages/Text.q.yml">quintessence/AllegroFlare/Elements/StoryboardPages/Text.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Text.q.yml">quintessence/AllegroFlare/Elements/Text.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/TextMessageBubble.q.yml">quintessence/AllegroFlare/Elements/TextMessageBubble.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/UI/IntSpinner.q.yml">quintessence/AllegroFlare/Elements/UI/IntSpinner.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/UI/SliderToggle.q.yml">quintessence/AllegroFlare/Elements/UI/SliderToggle.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/WorldMapViewer.q.yml">quintessence/AllegroFlare/Elements/WorldMapViewer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/EncoderDecoders/Base62.q.yml">quintessence/AllegroFlare/EncoderDecoders/Base62.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/EventEmitter.q.yml">quintessence/AllegroFlare/EventEmitter.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/FlipSync.q.yml">quintessence/AllegroFlare/FlipSync.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/FrameAnimation/Animation.q.yml">quintessence/AllegroFlare/FrameAnimation/Animation.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/FrameAnimation/AsepriteSpriteSheetJSONLoader.q.yml">quintessence/AllegroFlare/FrameAnimation/AsepriteSpriteSheetJSONLoader.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/FrameAnimation/Book.q.yml">quintessence/AllegroFlare/FrameAnimation/Book.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/FrameAnimation/Frame.q.yml">quintessence/AllegroFlare/FrameAnimation/Frame.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/FrameAnimation/SpriteStripAssembler.q.yml">quintessence/AllegroFlare/FrameAnimation/SpriteStripAssembler.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GameConfigurations/Base.q.yml">quintessence/AllegroFlare/GameConfigurations/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GameConfigurations/Complete.q.yml">quintessence/AllegroFlare/GameConfigurations/Complete.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GameEvent.q.yml">quintessence/AllegroFlare/GameEvent.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GameEventDatas/AchievementUnlocked.q.yml">quintessence/AllegroFlare/GameEventDatas/AchievementUnlocked.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GameEventDatas/Base.q.yml">quintessence/AllegroFlare/GameEventDatas/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GameEventDatas/ScreenActivated.q.yml">quintessence/AllegroFlare/GameEventDatas/ScreenActivated.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GameEventDatas/String.q.yml">quintessence/AllegroFlare/GameEventDatas/String.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GameEventDatas/VirtualControllerAxisChangeEventData.q.yml">quintessence/AllegroFlare/GameEventDatas/VirtualControllerAxisChangeEventData.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GameEventDatas/VirtualControllerButtonPressedEventData.q.yml">quintessence/AllegroFlare/GameEventDatas/VirtualControllerButtonPressedEventData.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GameEventDatas/VirtualControllerButtonReleasedEventData.q.yml">quintessence/AllegroFlare/GameEventDatas/VirtualControllerButtonReleasedEventData.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GameProgressAndStateInfos/Base.q.yml">quintessence/AllegroFlare/GameProgressAndStateInfos/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GameSession.q.yml">quintessence/AllegroFlare/GameSession.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GameplayMechanics/Triggers/Base.q.yml">quintessence/AllegroFlare/GameplayMechanics/Triggers/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GameplayMechanics/Triggers/Basic.q.yml">quintessence/AllegroFlare/GameplayMechanics/Triggers/Basic.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Generators/LoremIpsumGenerator.q.yml">quintessence/AllegroFlare/Generators/LoremIpsumGenerator.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Generators/PersonNameGenerator.q.yml">quintessence/AllegroFlare/Generators/PersonNameGenerator.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GraphicsPipelines/Basic3D/Entity.q.yml">quintessence/AllegroFlare/GraphicsPipelines/Basic3D/Entity.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GraphicsPipelines/Basic3D/Scene.q.yml">quintessence/AllegroFlare/GraphicsPipelines/Basic3D/Scene.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Base.q.yml">quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Camera3D.q.yml">quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Camera3D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/DynamicModel3D.q.yml">quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/DynamicModel3D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticModel3D.q.yml">quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticModel3D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticMultitextureModel3D.q.yml">quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticMultitextureModel3D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityFactory.q.yml">quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityPool.q.yml">quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityPool.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityRenderFlags.q.yml">quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityRenderFlags.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer.q.yml">quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer.q.yml">quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/InputDevicesList.q.yml">quintessence/AllegroFlare/InputDevicesList.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/InputDiagrams/KeyboardKey.q.yml">quintessence/AllegroFlare/InputDiagrams/KeyboardKey.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/InputDiagrams/KeyboardKeyCombo.q.yml">quintessence/AllegroFlare/InputDiagrams/KeyboardKeyCombo.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/InputHints.q.yml">quintessence/AllegroFlare/InputHints.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Instrumentation/DisplayFlipMetric.q.yml">quintessence/AllegroFlare/Instrumentation/DisplayFlipMetric.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Instrumentation/DurationMeasurer.q.yml">quintessence/AllegroFlare/Instrumentation/DurationMeasurer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Instrumentation/Metric.q.yml">quintessence/AllegroFlare/Instrumentation/Metric.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Instrumentation/Metrics/Bool.q.yml">quintessence/AllegroFlare/Instrumentation/Metrics/Bool.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Instrumentation/Metrics/Double.q.yml">quintessence/AllegroFlare/Instrumentation/Metrics/Double.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Instrumentation/Metrics/TimePoint.q.yml">quintessence/AllegroFlare/Instrumentation/Metrics/TimePoint.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Instrumentation/PrimaryProcessEventMetric.q.yml">quintessence/AllegroFlare/Instrumentation/PrimaryProcessEventMetric.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Integrations/CameraProjectionChanges.q.yml">quintessence/AllegroFlare/Integrations/CameraProjectionChanges.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Integrations/Network.q.yml">quintessence/AllegroFlare/Integrations/Network.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/InventoryDictionary.q.yml">quintessence/AllegroFlare/InventoryDictionary.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/InventoryDictionaryItems/Base.q.yml">quintessence/AllegroFlare/InventoryDictionaryItems/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/InventoryDictionaryItems/ClassicItem.q.yml">quintessence/AllegroFlare/InventoryDictionaryItems/ClassicItem.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/InventoryDictionaryItems/WithAttributes.q.yml">quintessence/AllegroFlare/InventoryDictionaryItems/WithAttributes.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/InventoryIndex.q.yml">quintessence/AllegroFlare/InventoryIndex.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/InventoryIndexItem.q.yml">quintessence/AllegroFlare/InventoryIndexItem.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/LegalClauseGenerator.q.yml">quintessence/AllegroFlare/LegalClauseGenerator.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Levels/Base.q.yml">quintessence/AllegroFlare/Levels/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/LoadASavedGame/SaveSlotRenderer.q.yml">quintessence/AllegroFlare/LoadASavedGame/SaveSlotRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/LoadASavedGame/SaveSlotRenderers/Basic.q.yml">quintessence/AllegroFlare/LoadASavedGame/SaveSlotRenderers/Basic.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/LoadASavedGame/SaveSlotRenderers/Empty.q.yml">quintessence/AllegroFlare/LoadASavedGame/SaveSlotRenderers/Empty.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/LoadASavedGame/SaveSlots/Base.q.yml">quintessence/AllegroFlare/LoadASavedGame/SaveSlots/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/LoadASavedGame/SaveSlots/Basic.q.yml">quintessence/AllegroFlare/LoadASavedGame/SaveSlots/Basic.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/LoadASavedGame/SaveSlots/Empty.q.yml">quintessence/AllegroFlare/LoadASavedGame/SaveSlots/Empty.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/LoadASavedGame/Screen.q.yml">quintessence/AllegroFlare/LoadASavedGame/Screen.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Logger.q.yml">quintessence/AllegroFlare/Logger.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MotionComposer/MessageFactory.q.yml">quintessence/AllegroFlare/MotionComposer/MessageFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MotionComposer/MessageProcessor.q.yml">quintessence/AllegroFlare/MotionComposer/MessageProcessor.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MotionComposer/Messages/AddActor2D.q.yml">quintessence/AllegroFlare/MotionComposer/Messages/AddActor2D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MotionComposer/Messages/Base.q.yml">quintessence/AllegroFlare/MotionComposer/Messages/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MotionComposer/Messages/RunBuildProcess.q.yml">quintessence/AllegroFlare/MotionComposer/Messages/RunBuildProcess.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MotionComposer/Messages/SetPlayheadPosition.q.yml">quintessence/AllegroFlare/MotionComposer/Messages/SetPlayheadPosition.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MotionComposer/Messages/SetScript.q.yml">quintessence/AllegroFlare/MotionComposer/Messages/SetScript.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MotionComposer/TrackView.q.yml">quintessence/AllegroFlare/MotionComposer/TrackView.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MotionFX/Sparkles.q.yml">quintessence/AllegroFlare/MotionFX/Sparkles.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MotionFX/Sparkles2.q.yml">quintessence/AllegroFlare/MotionFX/Sparkles2.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MotionKit.q.yml">quintessence/AllegroFlare/MotionKit.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MultitextureModel3DObjLoader.q.yml">quintessence/AllegroFlare/MultitextureModel3DObjLoader.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MusicMesh/FontCharacterAtlasBuilder.q.yml">quintessence/AllegroFlare/MusicMesh/FontCharacterAtlasBuilder.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MusicMesh/MusicMesh.q.yml">quintessence/AllegroFlare/MusicMesh/MusicMesh.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MusicMesh/Stamp.q.yml">quintessence/AllegroFlare/MusicMesh/Stamp.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MusicNotation/AccidentalStacker.q.yml">quintessence/AllegroFlare/MusicNotation/AccidentalStacker.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MusicNotation/Beam.q.yml">quintessence/AllegroFlare/MusicNotation/Beam.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MusicNotation/BeamPositionCalculator.q.yml">quintessence/AllegroFlare/MusicNotation/BeamPositionCalculator.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MusicNotation/ChordDotPositionCalculator.q.yml">quintessence/AllegroFlare/MusicNotation/ChordDotPositionCalculator.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MusicNotation/ChordNoteheadPositionResolver.q.yml">quintessence/AllegroFlare/MusicNotation/ChordNoteheadPositionResolver.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MusicNotation/Parser/PitchTokenSorter.q.yml">quintessence/AllegroFlare/MusicNotation/Parser/PitchTokenSorter.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MusicNotation/RomanNumeralAnalysisSymbol.q.yml">quintessence/AllegroFlare/MusicNotation/RomanNumeralAnalysisSymbol.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MusicNotation/RomanNumeralAnalysisSymbolRenderer.q.yml">quintessence/AllegroFlare/MusicNotation/RomanNumeralAnalysisSymbolRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MusicNotation/TieRenderer.q.yml">quintessence/AllegroFlare/MusicNotation/TieRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Network2/Message.q.yml">quintessence/AllegroFlare/Network2/Message.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Network2/URLTokenizer.q.yml">quintessence/AllegroFlare/Network2/URLTokenizer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Notifications.q.yml">quintessence/AllegroFlare/Notifications.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/NotificationsFactory.q.yml">quintessence/AllegroFlare/NotificationsFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Obfuscator.q.yml">quintessence/AllegroFlare/Obfuscator.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Obfuscators/Rotate.q.yml">quintessence/AllegroFlare/Obfuscators/Rotate.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/PhysicalInputDeviceToVirtualControllerMapping.q.yml">quintessence/AllegroFlare/PhysicalInputDeviceToVirtualControllerMapping.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/PhysicalInputDeviceToVirtualControllerMappingFactory.q.yml">quintessence/AllegroFlare/PhysicalInputDeviceToVirtualControllerMappingFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/PhysicalInputDevices/Base.q.yml">quintessence/AllegroFlare/PhysicalInputDevices/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/PhysicalInputDevices/Joysticks/Base.q.yml">quintessence/AllegroFlare/PhysicalInputDevices/Joysticks/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/PhysicalInputDevices/Keyboard.q.yml">quintessence/AllegroFlare/PhysicalInputDevices/Keyboard.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Physics/AABB2D.q.yml">quintessence/AllegroFlare/Physics/AABB2D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Physics/AABB3D.q.yml">quintessence/AllegroFlare/Physics/AABB3D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Physics/Int2D.q.yml">quintessence/AllegroFlare/Physics/Int2D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Physics/TileMapCollisionStepper.q.yml">quintessence/AllegroFlare/Physics/TileMapCollisionStepper.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Physics/TileMapCollisionStepperCollisionInfo.q.yml">quintessence/AllegroFlare/Physics/TileMapCollisionStepperCollisionInfo.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Physics/TileMapCollisionStepperStepResult.q.yml">quintessence/AllegroFlare/Physics/TileMapCollisionStepperStepResult.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Player.q.yml">quintessence/AllegroFlare/Player.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/ProfilerRenderer.q.yml">quintessence/AllegroFlare/ProfilerRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/CubeShooter/Entity.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/Entity.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/CubeShooter/EntityFactory.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/EntityFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/CubeShooter/PlayerMovementControl.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/PlayerMovementControl.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/CubeShooter/Runner.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/Runner.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/CubeShooter/Screen.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/Screen.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/CubeShooter/Shaders/DepthDarken.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/Shaders/DepthDarken.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/CubeShooter/Shaders/Fog.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/Shaders/Fog.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/CubeShooter/Shaders/Multiply.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/Shaders/Multiply.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/Configuration.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Configuration.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/Cursor.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Cursor.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CloseDialog.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CloseDialog.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotAnItemDialog.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotAnItemDialog.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotEvidenceDialog.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotEvidenceDialog.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogSystem.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogSystem.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/EntityFactory.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/EntityFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/Room.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Room.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/RoomDictionary.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/RoomDictionary.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/RoomFactory.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/RoomFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/Screen.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Screen.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/Script.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Script.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectEvidence.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectEvidence.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectItem.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectItem.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/EnterRoom.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/EnterRoom.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/InitiateDialog.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/InitiateDialog.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/MindDive/Hud/Hud.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/Hud/Hud.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/MindDive/Hypersync.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/Hypersync.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/MindDive/MindDive.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/MindDive.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/MindDive/Tunnel.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/Tunnel.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/MindDive/TunnelMesh.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/TunnelMesh.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/MindDive/TunnelMeshFactory.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/TunnelMeshFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/MindDive/TunnelMeshSurferCollisionResolver.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/TunnelMeshSurferCollisionResolver.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/MindDive/TunnelMeshTMJDataLoader.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/TunnelMeshTMJDataLoader.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/MindDive/TunnelRenderer.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/TunnelRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/MindDive/TunnelTiles/Base.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/TunnelTiles/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/MindDive/TunnelTiles/Basic.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/TunnelTiles/Basic.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Base.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Boss.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Boss.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/BossZone.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/BossZone.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Doors/Basic2D.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Doors/Basic2D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Anchored.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Anchored.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/BackAndForthHorizontal.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/BackAndForthHorizontal.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FallOnTrackingRange.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FallOnTrackingRange.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Flapping.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Flapping.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FlappingWithRandomness.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FlappingWithRandomness.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/HoppingLeft.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/HoppingLeft.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveInDirection.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveInDirection.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveLeft.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveLeft.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveRight.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveRight.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/ReflectOffWalls.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/ReflectOffWalls.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/StayStill.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/StayStill.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Tracking.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Tracking.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/TileMaps/Basic2D.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/TileMaps/Basic2D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/EntityCollectionHelper.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/EntityCollectionHelper.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/EntityControlConnectors/Base.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/EntityControlConnectors/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/EntityControlConnectors/Basic2D.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/EntityControlConnectors/Basic2D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/MapDictionaryListing.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/MapDictionaryListing.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Screen.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Screen.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/TMJDataLoader.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/TMJDataLoader.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/TMJMeshLoader.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/TMJMeshLoader.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/TMJObjectLoader.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/TMJObjectLoader.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/TMJObjectLoaderObjectCustomProperties.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/TMJObjectLoaderObjectCustomProperties.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/TMJTileMeshLoader.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/TMJTileMeshLoader.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Solitare/Solitare.q.yml">quintessence/AllegroFlare/Prototypes/Solitare/Solitare.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/TileDrive/Hud/Hud.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/Hud/Hud.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/TileDrive/Screen.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/Screen.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMesh.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMesh.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshDictionaryRecord.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshDictionaryRecord.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshDriverCollisionResolver.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshDriverCollisionResolver.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshFactory.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshTMJDataLoader.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshTMJDataLoader.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/TileDrive/TileDrive.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/TileDrive.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/RenderSurfaces/Base.q.yml">quintessence/AllegroFlare/RenderSurfaces/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/RenderSurfaces/DisplayBackbuffer.q.yml">quintessence/AllegroFlare/RenderSurfaces/DisplayBackbuffer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/RenderSurfaces/DisplayBackbufferSubBitmap.q.yml">quintessence/AllegroFlare/RenderSurfaces/DisplayBackbufferSubBitmap.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/RouteEventDatas/ActivateScreenByIdentifier.q.yml">quintessence/AllegroFlare/RouteEventDatas/ActivateScreenByIdentifier.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/RouteEventDatas/Base.q.yml">quintessence/AllegroFlare/RouteEventDatas/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/RouteEventDatas/StartLevel.q.yml">quintessence/AllegroFlare/RouteEventDatas/StartLevel.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Routers/Base.q.yml">quintessence/AllegroFlare/Routers/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Routers/Standard.q.yml">quintessence/AllegroFlare/Routers/Standard.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Rulers.q.yml">quintessence/AllegroFlare/Rulers.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Runners/Base.q.yml">quintessence/AllegroFlare/Runners/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Runners/Complete.q.yml">quintessence/AllegroFlare/Runners/Complete.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/SceneGraph/Entities/Base.q.yml">quintessence/AllegroFlare/SceneGraph/Entities/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/SceneGraph/EntityPool.q.yml">quintessence/AllegroFlare/SceneGraph/EntityPool.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/ScreenCapture.q.yml">quintessence/AllegroFlare/ScreenCapture.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/Achievements.q.yml">quintessence/AllegroFlare/Screens/Achievements.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/CharacterNameInput.q.yml">quintessence/AllegroFlare/Screens/CharacterNameInput.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/DisplaySettings.q.yml">quintessence/AllegroFlare/Screens/DisplaySettings.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/GameOverScreen.q.yml">quintessence/AllegroFlare/Screens/GameOverScreen.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/GameWonScreen.q.yml">quintessence/AllegroFlare/Screens/GameWonScreen.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/Gameplay.q.yml">quintessence/AllegroFlare/Screens/Gameplay.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/InputDeviceConfiguration.q.yml">quintessence/AllegroFlare/Screens/InputDeviceConfiguration.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/LevelSelectScreen.q.yml">quintessence/AllegroFlare/Screens/LevelSelectScreen.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/PauseScreen.q.yml">quintessence/AllegroFlare/Screens/PauseScreen.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/RollingCredits.q.yml">quintessence/AllegroFlare/Screens/RollingCredits.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/SettingsScreen.q.yml">quintessence/AllegroFlare/Screens/SettingsScreen.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/Storyboard.q.yml">quintessence/AllegroFlare/Screens/Storyboard.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/Subscreen/Element.q.yml">quintessence/AllegroFlare/Screens/Subscreen/Element.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/Subscreen/PaneFactory.q.yml">quintessence/AllegroFlare/Screens/Subscreen/PaneFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/Subscreen/Panes/Airwing.q.yml">quintessence/AllegroFlare/Screens/Subscreen/Panes/Airwing.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/Subscreen/Panes/Base.q.yml">quintessence/AllegroFlare/Screens/Subscreen/Panes/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/Subscreen/Panes/Inventory.q.yml">quintessence/AllegroFlare/Screens/Subscreen/Panes/Inventory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/Subscreen/Screen.q.yml">quintessence/AllegroFlare/Screens/Subscreen/Screen.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/SubscreenFactory.q.yml">quintessence/AllegroFlare/Screens/SubscreenFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/TitleScreen.q.yml">quintessence/AllegroFlare/Screens/TitleScreen.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/Transition.q.yml">quintessence/AllegroFlare/Screens/Transition.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/Version.q.yml">quintessence/AllegroFlare/Screens/Version.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/WorldMapScreen.q.yml">quintessence/AllegroFlare/Screens/WorldMapScreen.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/ShaderSourcePoller.q.yml">quintessence/AllegroFlare/ShaderSourcePoller.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Shaders/AllegroDefault.q.yml">quintessence/AllegroFlare/Shaders/AllegroDefault.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Shaders/Base.q.yml">quintessence/AllegroFlare/Shaders/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Shaders/Cubemap.q.yml">quintessence/AllegroFlare/Shaders/Cubemap.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Shaders/FlatColor.q.yml">quintessence/AllegroFlare/Shaders/FlatColor.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Shaders/Multitexture.q.yml">quintessence/AllegroFlare/Shaders/Multitexture.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Shaders/PostProcessing/Blinds.q.yml">quintessence/AllegroFlare/Shaders/PostProcessing/Blinds.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Shaders/PostProcessing/DipToBlack.q.yml">quintessence/AllegroFlare/Shaders/PostProcessing/DipToBlack.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Shaders/PostProcessing/Wipe.q.yml">quintessence/AllegroFlare/Shaders/PostProcessing/Wipe.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/SoftwareKeyboard/KeyboardKey.q.yml">quintessence/AllegroFlare/SoftwareKeyboard/KeyboardKey.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/SoftwareKeyboard/SoftwareKeyboard.q.yml">quintessence/AllegroFlare/SoftwareKeyboard/SoftwareKeyboard.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Story/Characters/PersonalityDimension.q.yml">quintessence/AllegroFlare/Story/Characters/PersonalityDimension.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Story/Characters/PersonalityProfile.q.yml">quintessence/AllegroFlare/Story/Characters/PersonalityProfile.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Story/Characters/PersonalityProfileDimension.q.yml">quintessence/AllegroFlare/Story/Characters/PersonalityProfileDimension.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Story/Characters/PersonalityProfileFactory.q.yml">quintessence/AllegroFlare/Story/Characters/PersonalityProfileFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Story/Characters/PersonalityProfileMatrix.q.yml">quintessence/AllegroFlare/Story/Characters/PersonalityProfileMatrix.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Story/Characters/PersonalityProfileMatrixFactory.q.yml">quintessence/AllegroFlare/Story/Characters/PersonalityProfileMatrixFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/StoryboardFactory.q.yml">quintessence/AllegroFlare/StoryboardFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/StoryboardPageFactory.q.yml">quintessence/AllegroFlare/StoryboardPageFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/StringFormatValidator.q.yml">quintessence/AllegroFlare/StringFormatValidator.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/SyncOracle.q.yml">quintessence/AllegroFlare/SyncOracle.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/SystemInfo.q.yml">quintessence/AllegroFlare/SystemInfo.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TemplatedText.q.yml">quintessence/AllegroFlare/TemplatedText.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Testing/AllegroFlare/DisplaySettingsInterfaces/DisplayMock.q.yml">quintessence/AllegroFlare/Testing/AllegroFlare/DisplaySettingsInterfaces/DisplayMock.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Testing/GameConfigurations/Complete/SimpleConfiguration.q.yml">quintessence/AllegroFlare/Testing/GameConfigurations/Complete/SimpleConfiguration.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Testing/TemporaryDirectoryCreator.q.yml">quintessence/AllegroFlare/Testing/TemporaryDirectoryCreator.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Testing/TemporaryFilenameCreator.q.yml">quintessence/AllegroFlare/Testing/TemporaryFilenameCreator.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Testing/TestNameInference.q.yml">quintessence/AllegroFlare/Testing/TestNameInference.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Testing/WithAllegroFlareFrameworksFullFixture.q.yml">quintessence/AllegroFlare/Testing/WithAllegroFlareFrameworksFullFixture.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Testing/WithAllegroRenderingFixture.q.yml">quintessence/AllegroFlare/Testing/WithAllegroRenderingFixture.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/AutoTile/FilterMatrix.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/FilterMatrix.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/AutoTile/Filters/Base.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/Filters/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/AutoTile/Filters/Basic.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/Filters/Basic.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/AutoTile/Filters/BasicFloor.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/Filters/BasicFloor.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/AutoTile/Filters/BasicSolid.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/Filters/BasicSolid.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/AutoTile/Filters/Fill.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/Filters/Fill.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/AutoTile/Filters/FortyEightEdges.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/Filters/FortyEightEdges.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/AutoTile/Filters/MonolineBlobsHorizontal.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/Filters/MonolineBlobsHorizontal.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/AutoTile/Filters/SixteenEdges.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/Filters/SixteenEdges.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/Basic2D.q.yml">quintessence/AllegroFlare/TileMaps/Basic2D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/MultiMesh.q.yml">quintessence/AllegroFlare/TileMaps/MultiMesh.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/MultiMeshUV.q.yml">quintessence/AllegroFlare/TileMaps/MultiMeshUV.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/MultiMeshUVAtlas.q.yml">quintessence/AllegroFlare/TileMaps/MultiMeshUVAtlas.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/PrimMeshAtlas.q.yml">quintessence/AllegroFlare/TileMaps/PrimMeshAtlas.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/PrimMeshAtlasIndexRecord.q.yml">quintessence/AllegroFlare/TileMaps/PrimMeshAtlasIndexRecord.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/TileAtlasBuilder.q.yml">quintessence/AllegroFlare/TileMaps/TileAtlasBuilder.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/TileAtlasRepository.q.yml">quintessence/AllegroFlare/TileMaps/TileAtlasRepository.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/TileAtlasRepositoryRecord.q.yml">quintessence/AllegroFlare/TileMaps/TileAtlasRepositoryRecord.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/TileMesh.q.yml">quintessence/AllegroFlare/TileMaps/TileMesh.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Time.q.yml">quintessence/AllegroFlare/Time.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TimeStamper.q.yml">quintessence/AllegroFlare/TimeStamper.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Timeline/ActorFactory.q.yml">quintessence/AllegroFlare/Timeline/ActorFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TransitionFX/Base.q.yml">quintessence/AllegroFlare/TransitionFX/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/UnicodeFontViewer.q.yml">quintessence/AllegroFlare/UnicodeFontViewer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Useful3D/Triangle.q.yml">quintessence/AllegroFlare/Useful3D/Triangle.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Vec2B.q.yml">quintessence/AllegroFlare/Vec2B.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Vec2I.q.yml">quintessence/AllegroFlare/Vec2I.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Video.q.yml">quintessence/AllegroFlare/Video.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/VideoBin.q.yml">quintessence/AllegroFlare/VideoBin.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/VirtualController.q.yml">quintessence/AllegroFlare/VirtualController.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/VirtualControllers/Base.q.yml">quintessence/AllegroFlare/VirtualControllers/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/VirtualControllers/GenericController.q.yml">quintessence/AllegroFlare/VirtualControllers/GenericController.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/VirtualControlsProcessor.q.yml">quintessence/AllegroFlare/VirtualControlsProcessor.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/WorldMapRenderer.q.yml">quintessence/AllegroFlare/WorldMapRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/WorldMapRenderers/Basic.q.yml">quintessence/AllegroFlare/WorldMapRenderers/Basic.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/WorldMaps/Locations/Base.q.yml">quintessence/AllegroFlare/WorldMaps/Locations/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/WorldMaps/Locations/Basic.q.yml">quintessence/AllegroFlare/WorldMaps/Locations/Basic.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/WorldMaps/Locations/Player.q.yml">quintessence/AllegroFlare/WorldMaps/Locations/Player.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/WorldMaps/Maps/Base.q.yml">quintessence/AllegroFlare/WorldMaps/Maps/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/WorldMaps/Maps/Basic.q.yml">quintessence/AllegroFlare/WorldMaps/Maps/Basic.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/YAMLValidator.q.yml">quintessence/AllegroFlare/YAMLValidator.q.yml</a></li>
  <li><a href="#quintessence/BuildInfo.q.yml">quintessence/BuildInfo.q.yml</a></li>
  <li><a href="#quintessence/ReleaseInfo.q.yml">quintessence/ReleaseInfo.q.yml</a></li>
  <li><a href="#quintessence/Tileo/MeshWithNormals.q.yml">quintessence/Tileo/MeshWithNormals.q.yml</a></li>
  <li><a href="#quintessence/Tileo/Shaders/AllegroDefault.q.yml">quintessence/Tileo/Shaders/AllegroDefault.q.yml</a></li>
  <li><a href="#quintessence/Tileo/Shaders/Base.q.yml">quintessence/Tileo/Shaders/Base.q.yml</a></li>
  <li><a href="#quintessence/Tileo/Shaders/MeshWithNormals.q.yml">quintessence/Tileo/Shaders/MeshWithNormals.q.yml</a></li>
  <li><a href="#quintessence/Tileo/TMJDataLoader.q.yml">quintessence/Tileo/TMJDataLoader.q.yml</a></li>
  <li><a href="#quintessence/Tileo/TMJMeshLoader.q.yml">quintessence/Tileo/TMJMeshLoader.q.yml</a></li>
  <li><a href="#quintessence/Tileo/TileoTileVertexAllegroVertexDeclaration.q.yml">quintessence/Tileo/TileoTileVertexAllegroVertexDeclaration.q.yml</a></li>
  <li><a href="#quintessence/Wicked/CameraControlStrategies2D/Base.q.yml">quintessence/Wicked/CameraControlStrategies2D/Base.q.yml</a></li>
  <li><a href="#quintessence/Wicked/CameraControlStrategies2D/HorizontalRail.q.yml">quintessence/Wicked/CameraControlStrategies2D/HorizontalRail.q.yml</a></li>
  <li><a href="#quintessence/Wicked/CameraControlStrategies2D/SmoothSnap.q.yml">quintessence/Wicked/CameraControlStrategies2D/SmoothSnap.q.yml</a></li>
  <li><a href="#quintessence/Wicked/CameraControlStrategies2D/Snap.q.yml">quintessence/Wicked/CameraControlStrategies2D/Snap.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/Base.q.yml">quintessence/Wicked/Entities/Base.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/Basic2D.q.yml">quintessence/Wicked/Entities/Basic2D.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/Basic2DFactory.q.yml">quintessence/Wicked/Entities/Basic2DFactory.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/Basic3D.q.yml">quintessence/Wicked/Entities/Basic3D.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/CollectionHelper.q.yml">quintessence/Wicked/Entities/CollectionHelper.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/Doors/Basic2D.q.yml">quintessence/Wicked/Entities/Doors/Basic2D.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/Enemies/Base.q.yml">quintessence/Wicked/Entities/Enemies/Base.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/EnemyFactory.q.yml">quintessence/Wicked/Entities/EnemyFactory.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/MovementStrategies2D/Anchored.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/Anchored.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/MovementStrategies2D/BackAndForthHorizontal.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/BackAndForthHorizontal.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/MovementStrategies2D/Base.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/Base.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/MovementStrategies2D/FallOnTrackingRange.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/FallOnTrackingRange.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/MovementStrategies2D/Flapping.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/Flapping.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/MovementStrategies2D/FlappingWithRandomness.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/FlappingWithRandomness.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/MovementStrategies2D/HoppingLeft.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/HoppingLeft.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/MovementStrategies2D/MoveInDirection.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/MoveInDirection.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/MovementStrategies2D/MoveLeft.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/MoveLeft.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/MovementStrategies2D/MoveRight.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/MoveRight.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/MovementStrategies2D/ReflectOffWalls.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/ReflectOffWalls.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/MovementStrategies2D/StayStill.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/StayStill.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/MovementStrategies2D/Tracking.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/Tracking.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/Zones/Base2D.q.yml">quintessence/Wicked/Entities/Zones/Base2D.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/Zones/Base3D.q.yml">quintessence/Wicked/Entities/Zones/Base3D.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/Zones/Rectangle2D.q.yml">quintessence/Wicked/Entities/Zones/Rectangle2D.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/Zones/Rectangle3D.q.yml">quintessence/Wicked/Entities/Zones/Rectangle3D.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Hud.q.yml">quintessence/Wicked/Hud.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Physics/AABB2D.q.yml">quintessence/Wicked/Physics/AABB2D.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Physics/EntityZoneCollisionObserver.q.yml">quintessence/Wicked/Physics/EntityZoneCollisionObserver.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Physics/TileMapCollisionStepper.q.yml">quintessence/Wicked/Physics/TileMapCollisionStepper.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Weapons/Base.q.yml">quintessence/Wicked/Weapons/Base.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Weapons/DrawnBow.q.yml">quintessence/Wicked/Weapons/DrawnBow.q.yml</a></li>
  <li><a href="#quintessence/WickedDemos/ProgramRunner.q.yml">quintessence/WickedDemos/ProgramRunner.q.yml</a></li>
  <li><a href="#quintessence/WickedDemos/TileDemo.q.yml">quintessence/WickedDemos/TileDemo.q.yml</a></li>
  <li><a href="#quintessence/WickedDemos/TileMaps/Basic2D.q.yml">quintessence/WickedDemos/TileMaps/Basic2D.q.yml</a></li>
</ul>
<h1>Components</h1>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/AI/PromptTemplate.q.yml">quintessence/AllegroFlare/AI/PromptTemplate.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">template_content</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">insertion_variables</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>__replace</b>(std::string str=&quot;source string&quot;, std::string from=&quot;source&quot;, std::string to=&quot;result&quot;)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>generate_content</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/AI/PromptTemplateYAMLLoader.q.yml">quintessence/AllegroFlare/AI/PromptTemplateYAMLLoader.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">PROMPT_NODE_KEY</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">PARAMETERS_NODE_KEY</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">PARAMETER_NAME_NODE_KEY</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>load_yaml</b>(std::string yaml_as_string=&quot;[unset-yaml_as_string]&quot;, std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt; template_arguments={})</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
  <td class="method"><b>assemble_parameter_arguments</b>(std::vector&lt;std::string&gt; template_parameters={}, std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt; template_arguments={})</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AI::PromptTemplate&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AI/PromptTemplate.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::YAMLValidator&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/YAMLValidator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;YAML::Node&quot;, &quot;headers&quot;=&gt;[&quot;yaml-cpp/yaml.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;YAML::NodeType::value&quot;, &quot;headers&quot;=&gt;[&quot;yaml-cpp/yaml.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/AllegroContributorsList.q.yml">quintessence/AllegroFlare/AllegroContributorsList.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::vector&lt;std::string&gt;</td>
  <td class="method"><b>build_allegro_5_contributors_list</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/AssetStudio/Asset.q.yml">quintessence/AllegroFlare/AssetStudio/Asset.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">id</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">description</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">animation</td>
  <td class="property">AllegroFlare::FrameAnimation::Animation*</td>
</tr>
<tr>
  <td class="property">image_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">images_list</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">cell_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cell_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">align_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">align_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">align_in_container_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">align_in_container_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">anchor_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">anchor_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">asset_pack_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">intra_pack_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">categories</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">tags</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>has_single_source_image</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>has_multiple_source_images</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::Animation&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/Animation.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::Book&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/Book.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/AssetStudio/AssetImporter.q.yml">quintessence/AllegroFlare/AssetStudio/AssetImporter.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">asset_studio_database</td>
  <td class="property">AllegroFlare::AssetStudio::Database*</td>
</tr>
<tr>
  <td class="property">asset_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">source_directory</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">destination_directory</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">DEFAULT_SOURCE_DIRECTORY</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_DESTINATION_DIRECTORY</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>import</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>create_directories_to_filename</b>(std::string filename_with_path=&quot;[unset-create_directories]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::exists&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AssetStudio::Database&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AssetStudio/Database.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/AssetStudio/Database.q.yml">quintessence/AllegroFlare/AssetStudio/Database.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">global_assets</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::AssetStudio::Asset*&gt;</td>
</tr>
<tr>
  <td class="property">local_assets</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::AssetStudio::Asset*&gt;</td>
</tr>
<tr>
  <td class="property">global_identifier_prefix</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">using_global_identifier_prefix</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">DEFAULT_GLOBAL_IDENTIFIER_PREFIX</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_global_identifier_prefix</b>(std::string global_identifier_prefix=DEFAULT_GLOBAL_IDENTIFIER_PREFIX)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>remove_global_identifier_prefix</b>()</td>
</tr>
<tr>
  <td class="method">std::set&lt;std::string&gt;</td>
  <td class="method"><b>asset_identifiers</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>remove_global_identifier_prefixes</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>prefix_global_identifier_prefix_to_identifiers</b>(std::string prefix=&quot;[unset-prefix]&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>asset_exists</b>(std::string identifier=&quot;[unset-identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::AssetStudio::Asset*</td>
  <td class="method"><b>find_asset_by_identifier</b>(std::string identifier=&quot;[unset-identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>asset_exists_as_animation</b>(std::string identifier=&quot;[unset-identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::FrameAnimation::Animation*</td>
  <td class="method"><b>find_animation_by_identifier</b>(std::string identifier=&quot;[unset-identifier]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Errors&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Errors.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::Animation&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/Animation.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AssetStudio::Asset&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AssetStudio/Asset.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/AssetStudio/DatabaseCSVLoader.q.yml">quintessence/AllegroFlare/AssetStudio/DatabaseCSVLoader.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">assets_bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">csv_full_path</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">assets</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::AssetStudio::Asset*&gt;</td>
</tr>
<tr>
  <td class="property">sprite_sheets</td>
  <td class="property">std::map&lt;std::tuple&lt;std::string, int, int, int&gt;, AllegroFlare::FrameAnimation::SpriteSheet*&gt;</td>
</tr>
<tr>
  <td class="property">sprite_sheet_scale</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">loaded</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>get_initialized</b>()</td>
</tr>
<tr>
  <td class="method">std::map&lt;std::string, AllegroFlare::AssetStudio::Asset*&gt;</td>
  <td class="method"><b>get_assets</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>level_exists</b>(std::string level_identifier=&quot;[unset-level_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>toi</b>(std::string value=&quot;[unset-value]&quot;)</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>tof</b>(std::string value=&quot;[unset-value]&quot;)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::string&gt;</td>
  <td class="method"><b>comma_separated_quoted_strings_to_vector_of_strings</b>(std::string comma_separated_quoted_strings=&quot;[unset-comma_separated_quoted_strings]&quot;)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::string&gt;</td>
  <td class="method"><b>comma_separated_strings_to_vector_of_strings</b>(std::string comma_separated_strings=&quot;[unset-comma_separated_strings]&quot;)</td>
</tr>
<tr>
  <td class="method">std::pair&lt;bool, uint32_t&gt;</td>
  <td class="method"><b>str_to_playmode</b>(std::string playmode_string=&quot;[unset-playmode_string]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::AssetStudio::Asset*</td>
  <td class="method"><b>find_level</b>(std::string level_identifier=&quot;[unset-level_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>validate_key_and_return</b>(std::map&lt;std::string, std::string&gt;* extracted_row=nullptr, std::string key=&quot;[unset-key]&quot;)</td>
</tr>
<tr>
  <td class="private_method">AllegroFlare::FrameAnimation::SpriteSheet*</td>
  <td class="private_method"><b>create_sprite_sheet_from_individual_images</b>(std::vector&lt;std::string&gt; individual_frame_image_filenames={}, int cell_width=16, int cell_height=16, int _sprite_sheet_scale=2)</td>
</tr>
<tr>
  <td class="private_method">AllegroFlare::FrameAnimation::SpriteSheet*</td>
  <td class="private_method"><b>obtain_sprite_sheet</b>(std::string filename=&quot;[unset-filename]&quot;, int cell_width=16, int cell_height=16, int _sprite_sheet_scale=2)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::FrameAnimation::Frame&gt;</td>
  <td class="method"><b>build_n_frames</b>(uint32_t num_frames=1, uint32_t start_frame_num=0, float each_frame_duration=0.08f, float each_frame_align_x=0.0f, float each_frame_align_y=0.0f, float each_frame_align_in_container_x=0.0f, float each_frame_align_in_container_y=0.0f, float each_frame_anchor_x=0.0f, float each_frame_anchor_y=0.0f)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::FrameAnimation::Frame&gt;</td>
  <td class="method"><b>build_frames_from_hash</b>(std::string frame_data_hash=&quot;[unset-frame_data_hash]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load</b>()</td>
</tr>
<tr>
  <td class="private_method">std::vector&lt;std::string&gt;</td>
  <td class="private_method"><b>split</b>(std::string string=&quot;&quot;, char delimiter=&#39; &#39;)</td>
</tr>
<tr>
  <td class="private_method">std::vector&lt;std::string&gt;</td>
  <td class="private_method"><b>tokenize</b>(std::string str=&quot;&quot;, char delim=&#39;|&#39;)</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>trim</b>(std::string s=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CSVParser&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CSVParser.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::UsefulPHP&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/UsefulPHP.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;SurviveTheCity::CSVParser&quot;, &quot;headers&quot;=&gt;[&quot;SurviveTheCity/CSVParser.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AssetStudio::Asset&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AssetStudio/Asset.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::atoi&quot;, &quot;headers&quot;=&gt;[&quot;cstdlib&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stof&quot;, &quot;headers&quot;=&gt;[&quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::SpriteSheet&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/SpriteSheet.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::Frame&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/Frame.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::find_if&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::SpriteStripAssembler&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/SpriteStripAssembler.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::exists&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/AudioController.q.yml">quintessence/AllegroFlare/AudioController.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="private_property">sample_bin</td>
  <td class="private_property">AllegroFlare::SampleBin*</td>
</tr>
<tr>
  <td class="private_property">sound_effects_identifier_prefix</td>
  <td class="private_property">std::string</td>
</tr>
<tr>
  <td class="private_property">music_tracks_identifier_prefix</td>
  <td class="private_property">std::string</td>
</tr>
<tr>
  <td class="private_property">sound_effect_elements</td>
  <td class="private_property">std::map&lt;std::string, AllegroFlare::AudioRepositoryElement&gt;</td>
</tr>
<tr>
  <td class="private_property">music_track_elements</td>
  <td class="private_property">std::map&lt;std::string, AllegroFlare::AudioRepositoryElement&gt;</td>
</tr>
<tr>
  <td class="private_property">sound_effects</td>
  <td class="private_property">std::map&lt;std::string, AllegroFlare::Sound*&gt;</td>
</tr>
<tr>
  <td class="private_property">music_tracks</td>
  <td class="private_property">std::map&lt;std::string, AllegroFlare::Sound*&gt;</td>
</tr>
<tr>
  <td class="private_property">current_music_track_identifier</td>
  <td class="private_property">std::string</td>
</tr>
<tr>
  <td class="private_property">global_volume</td>
  <td class="private_property">float</td>
</tr>
<tr>
  <td class="private_property">output_loading_debug_to_cout</td>
  <td class="private_property">bool</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">music_tracks_loaded</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">sound_effects_loaded</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_and_load_sound_effect_elements</b>(std::map&lt;std::string, AllegroFlare::AudioRepositoryElement&gt; sound_effect_elements={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_and_load_music_track_elements</b>(std::map&lt;std::string, AllegroFlare::AudioRepositoryElement&gt; music_track_elements={})</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>load_sound_effects</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>load_music_tracks</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>destruct</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>destruct_all</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>destruct_all_sound_effects</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>destruct_all_music_tracks</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>stop_all</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>stop_all_music_tracks</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>stop_all_sound_effects</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_global_volume</b>(float volume=0.1)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>play_sound_effect</b>(std::string identifier=&quot;a-sound-effect-identifier-that-is-not-set&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>play_music_track</b>(std::string identifier=&quot;a-music-track-identifier-that-is-not-set&quot;)</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>sound_effect_element_exists</b>(std::string identifier=&quot;a-sound-effect-identifier-that-is-not-set&quot;)</td>
</tr>
<tr>
  <td class="private_method">AllegroFlare::Sound*</td>
  <td class="private_method"><b>find_sound_effect_sound_object_by_identifier</b>(std::string identifier=&quot;a-sound-effect-identifier-that-is-not-set&quot;)</td>
</tr>
<tr>
  <td class="private_method">AllegroFlare::AudioRepositoryElement</td>
  <td class="private_method"><b>find_sound_effect_element_by_identifier</b>(std::string identifier=&quot;a-sound-effect-identifier-that-is-not-set&quot;)</td>
</tr>
<tr>
  <td class="private_method">AllegroFlare::Sound*</td>
  <td class="private_method"><b>find_music_track_sound_object_by_identifier</b>(std::string identifier=&quot;a-music-track-identifier-that-is-not-set&quot;)</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>music_track_element_exists</b>(std::string identifier=&quot;a-music-track-identifier-that-is-not-set&quot;)</td>
</tr>
<tr>
  <td class="private_method">AllegroFlare::AudioRepositoryElement</td>
  <td class="private_method"><b>find_music_track_element_by_identifier</b>(std::string identifier=&quot;a-music-track-identifier-that-is-not-set&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>dump_to_cout</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TerminalColors&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TerminalColors.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SampleBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SampleBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SampleBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SampleBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AudioRepositoryElement&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AudioRepositoryElement.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, AllegroFlare::AudioRepositoryElement&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;, &quot;AllegroFlare/AudioRepositoryElement.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, AllegroFlare::Sound*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;, &quot;AllegroFlare/Sound.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Sound*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Sound.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_audio_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_acodec_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_acodec.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Sound&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Sound.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/AudioProcessing/AudioDataBlock.q.yml">quintessence/AllegroFlare/AudioProcessing/AudioDataBlock.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">block</td>
  <td class="property">std::vector&lt;float&gt;</td>
</tr>
<tr>
  <td class="property">sample_count</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">depth_type</td>
  <td class="property">ALLEGRO_AUDIO_DEPTH</td>
</tr>
<tr>
  <td class="property">depth_type_size</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">frequency</td>
  <td class="property">unsigned int</td>
</tr>
<tr>
  <td class="property">channel_configuration</td>
  <td class="property">ALLEGRO_CHANNEL_CONF</td>
</tr>
<tr>
  <td class="property">channel_count</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">CHANNEL_LEFT</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">CHANNEL_RIGHT</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">sample_head_position</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_sample_head_position_by</b>(std::size_t delta=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_sample_count</b>(std::size_t sample_count=2048, bool clear=false)</td>
</tr>
<tr>
  <td class="method">std::size_t</td>
  <td class="method"><b>get_block_size</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_sample_at_mono</b>(int sample_position=0, int channel_t=CHANNEL_LEFT)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_sample_at_mono</b>(int sample_position=0, int channel_t=CHANNEL_LEFT, float value=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_sample_at</b>(int sample_position=0, float left_channel_value=0.0f, float right_channel_value=0.0f)</td>
</tr>
<tr>
  <td class="method">std::pair&lt;float, float&gt;</td>
  <td class="method"><b>get_sample_at</b>(int sample_position=0)</td>
</tr>
<tr>
  <td class="private_method">int</td>
  <td class="private_method"><b>clamp_loop_sample_position</b>(int sample_position=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_MIXER&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_AUDIO_DEPTH&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_CHANNEL_CONF&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::size_t&quot;, &quot;headers&quot;=&gt;[&quot;cstddef&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/AudioProcessing/AudioMixer.q.yml">quintessence/AllegroFlare/AudioProcessing/AudioMixer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">parent_mixer</td>
  <td class="property">ALLEGRO_MIXER*</td>
</tr>
<tr>
  <td class="property">mixer</td>
  <td class="property">ALLEGRO_MIXER*</td>
</tr>
<tr>
  <td class="property">audio_depth</td>
  <td class="property">ALLEGRO_AUDIO_DEPTH</td>
</tr>
<tr>
  <td class="property">audio_depth_size</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">frequency</td>
  <td class="property">unsigned int</td>
</tr>
<tr>
  <td class="property">channel_configuration</td>
  <td class="property">ALLEGRO_CHANNEL_CONF</td>
</tr>
<tr>
  <td class="property">channel_count</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">ALLEGRO_MIXER*</td>
  <td class="method"><b>get_mixer</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>validate_configuration</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_postprocess_callback</b>(void (*callback)(void*, unsigned int, void*) /*callback*/=nullptr, void* user_data=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_audio_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_MIXER&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_AUDIO_DEPTH&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_CHANNEL_CONF&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::size_t&quot;, &quot;headers&quot;=&gt;[&quot;cstddef&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;callback&quot;}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/AudioProcessing/Filters/AllPass.q.yml">quintessence/AllegroFlare/AudioProcessing/Filters/AllPass.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">offset_sec</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">gain</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">wet</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">dry</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">mixer</td>
  <td class="property">AllegroFlare::AudioProcessing::AudioMixer</td>
</tr>
<tr>
  <td class="property">data_block</td>
  <td class="property">AllegroFlare::AudioProcessing::AudioDataBlock</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_offset_sec</b>(float offset_sec=1.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_gain</b>(float gain=1.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_wet</b>(float wet=1.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_dry</b>(float dry=1.0f)</td>
</tr>
<tr>
  <td class="method">ALLEGRO_MIXER*</td>
  <td class="method"><b>get_al_mixer</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>mixer_postprocess_callback</b>(void* buf=nullptr, unsigned int samples=0, void* data=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AudioProcessing::AudioDataBlock&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AudioProcessing/AudioDataBlock.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AudioProcessing::AudioMixer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AudioProcessing/AudioMixer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_MIXER&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/AudioProcessing/Filters/Delay.q.yml">quintessence/AllegroFlare/AudioProcessing/Filters/Delay.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">delay_sec</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">decay</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">mixer</td>
  <td class="property">AllegroFlare::AudioProcessing::AudioMixer</td>
</tr>
<tr>
  <td class="property">data_block</td>
  <td class="property">AllegroFlare::AudioProcessing::AudioDataBlock</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_delay_sec</b>(float delay_sec=1.0f)</td>
</tr>
<tr>
  <td class="method">ALLEGRO_MIXER*</td>
  <td class="method"><b>get_al_mixer</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>mixer_postprocess_callback</b>(void* buf=nullptr, unsigned int samples=0, void* data=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AudioProcessing::AudioDataBlock&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AudioProcessing/AudioDataBlock.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AudioProcessing::AudioMixer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AudioProcessing/AudioMixer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_MIXER&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/AudioRepositoryElement.q.yml">quintessence/AllegroFlare/AudioRepositoryElement.q.yml</h3>
    <h3>Overview</h3>
    <p>{"notes"=>["WARNING, the \"overplay_strategy\" is not validated when it is passed in via a constructor argument. This could lead to some unexpected consequences."]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">loop</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">overplay_strategy</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">volume</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">OVERPLAY_STRATEGY_IGNORE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">OVERPLAY_STRATEGY_RESTART</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_overplay_strategy</b>(std::string overplay_strategy=&quot;[unset-overplay_strategy]&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_valid_overplay_strategy</b>(std::string possibly_valid_overplay_strategy=&quot;[unset-possibly_valid_overplay_strategy]&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>overplay_strategy_is_ignore</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>overplay_strategy_is_restart</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/BackgroundFactory.q.yml">quintessence/AllegroFlare/BackgroundFactory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">AllegroFlare::Elements::Backgrounds::Monoplex*</td>
  <td class="method"><b>create_monoplex</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::Backgrounds::Image*</td>
  <td class="method"><b>create_image</b>(std::string image_identifier=&quot;[unset-default-image-identifer-for-background-factory]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::Backgrounds::Parallax*</td>
  <td class="method"><b>create_parallax</b>(std::vector&lt;AllegroFlare::Elements::Backgrounds::ParallaxLayer&gt; layers={}, float offset_x=0, float offset_y=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Image&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Image.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Monoplex&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Monoplex.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Parallax&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Parallax.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::ParallaxLayer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/ParallaxLayer.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/BacktracingException.q.yml">quintessence/AllegroFlare/BacktracingException.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["Remove \"message\" as a property and convert it to a passthrough"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">message</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>generate_stack_trace</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::runtime_error&quot;, &quot;headers&quot;=&gt;[&quot;stdexcept&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::StackTracer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/StackTracer.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Bone3D.q.yml">quintessence/AllegroFlare/Bone3D.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">children</td>
  <td class="property">std::vector&lt;AllegroFlare::Bone3D*&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>add_child</b>(AllegroFlare::Bone3D* bone={})</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;AllegroFlare::Bone3D*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Bone3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Bone3D*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Bone3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Bone3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Bone3D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Bone3DGraphRenderer.q.yml">quintessence/AllegroFlare/Bone3DGraphRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">root_bone</td>
  <td class="property">AllegroFlare::Bone3D*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_recursive</b>(AllegroFlare::Bone3D* bone=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Bone3D*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Bone3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_font_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::draw_3d_line&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful3D/Useful3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Bone3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Bone3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/CSVParser.q.yml">quintessence/AllegroFlare/CSVParser.q.yml</h3>
    <h3>Overview</h3>
    <p>{"note"=>["there is some design ambiguity between extract_rows_by_key, extract_rows_by_keys, and extract_all_rows. I'd like to remove extract_rows_by_keys at least becasue I don't want this class to become a query object. Consider alternatives and the possibility that extraction methods might not be moved somewhere else.", {"nice features might be"=>["In addition to \"assemble_column_headers\", could assign one column to be the key, which could be used to pull discreete records.  This might not be preferible, though, because it begins adding query features to this class."]}]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">raw_csv_content</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">parsed_content</td>
  <td class="property">std::vector&lt;std::vector&lt;std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">num_header_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">column_headers</td>
  <td class="property">std::map&lt;std::string, int&gt;</td>
</tr>
<tr>
  <td class="property">loaded</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">column_headers_assembled</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">parsed</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_raw_csv_content</b>(std::string raw_csv_content=&quot;[unset-raw_csv_content]&quot;)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>num_raw_rows</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>num_rows</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>num_records</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>num_columns</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::vector&lt;std::string&gt;&gt;</td>
  <td class="method"><b>get_parsed_content</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>parse</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::string&gt;</td>
  <td class="method"><b>parse_row</b>(std::string line=&quot;[unset-line]&quot;)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_num_header_rows</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_column_header_column_num_or_throw</b>(std::string column_header_name=&quot;[unset-column_header_name]&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>column_header_exists</b>(std::string column_header_name=&quot;[unset-column_header_name]&quot;)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::map&lt;std::string, std::string&gt;&gt;</td>
  <td class="method"><b>extract_all_rows</b>(std::string key=&quot;[unset-key]&quot;, std::string value=&quot;[unset-value]&quot;)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::map&lt;std::string, std::string&gt;&gt;</td>
  <td class="method"><b>extract_rows_by_key</b>(std::string key=&quot;[unset-key]&quot;, std::string value=&quot;[unset-value]&quot;)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::map&lt;std::string, std::string&gt;&gt;</td>
  <td class="method"><b>extract_rows_by_keys</b>(std::string key1=&quot;[unset-key1]&quot;, std::string value1=&quot;[unset-value1]&quot;, std::string key2=&quot;[unset-key2]&quot;, std::string value2=&quot;[unset-value2]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>assemble_column_headers</b>(int num_rows_of_column_headers=2)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::UsefulPHP&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/UsefulPHP.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Camera2D.q.yml">quintessence/AllegroFlare/Camera2D.q.yml</h3>
    <h3>Overview</h3>
    <p>{"notes"=>["Note that zoom is an additional property on Camera2D, however it could be modified to be a just a getter/setter that modifies/pulls from the scale property directly."]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">zoom</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">width_num_units</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">height_num_units</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">DEFAULT_WIDTH_NUM_UNITS</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">DEFAULT_HEIGHT_NUM_UNITS</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_zoom</b>(AllegroFlare::Vec2D zoom={1.0f, 1.0f})</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Vec2D</td>
  <td class="method"><b>get_inv_zoom</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>refresh_zoom_from_scale</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>setup_dimensional_projection</b>(ALLEGRO_BITMAP* bitmap=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>blend_with_other_camera</b>(AllegroFlare::Camera2D* camera_b=nullptr, float blend_factor=0.0f)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;tan&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/CameraControlStrategies2D/Base.q.yml">quintessence/AllegroFlare/CameraControlStrategies2D/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">camera</td>
  <td class="property">AllegroFlare::Camera2D*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/CameraControlStrategies2D/HorizontalRail.q.yml">quintessence/AllegroFlare/CameraControlStrategies2D/HorizontalRail.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity_to_follow</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">tracking_target_position_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">tracking_target_position_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CameraControlStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CameraControlStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/CameraControlStrategies2D/SmoothSnap.q.yml">quintessence/AllegroFlare/CameraControlStrategies2D/SmoothSnap.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">room_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">room_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">entity_to_follow</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">tracking_target_position_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">tracking_target_position_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CameraControlStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CameraControlStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/CameraControlStrategies2D/SmoothSnapWithZoomEffect.q.yml">quintessence/AllegroFlare/CameraControlStrategies2D/SmoothSnapWithZoomEffect.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">room_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">room_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">entity_to_follow</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">tracking_target_position_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">tracking_target_position_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CameraControlStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CameraControlStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fabs&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Useful&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/CameraControlStrategies2D/Snap.q.yml">quintessence/AllegroFlare/CameraControlStrategies2D/Snap.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity_to_follow</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CameraControlStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CameraControlStrategies2D/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Clock.q.yml">quintessence/AllegroFlare/Clock.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">float</td>
  <td class="method"><b>real_world_time_since</b>(float time_of_event=0.0f)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/ClubCatt/Logo.q.yml">quintessence/AllegroFlare/ClubCatt/Logo.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">model_bin</td>
  <td class="property">AllegroFlare::ModelBin*</td>
</tr>
<tr>
  <td class="property">model_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">cube_texture1_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">cube_texture2_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">camera</td>
  <td class="property">AllegroFlare::Camera3D</td>
</tr>
<tr>
  <td class="property">rotation_x_timeline</td>
  <td class="property">AllegroFlare::Timeline::Track</td>
</tr>
<tr>
  <td class="property">rotation_y_timeline</td>
  <td class="property">AllegroFlare::Timeline::Track</td>
</tr>
<tr>
  <td class="property">camera_spin_timeline</td>
  <td class="property">AllegroFlare::Timeline::Track</td>
</tr>
<tr>
  <td class="property">texture_swap_timeline</td>
  <td class="property">AllegroFlare::Timeline::Track</td>
</tr>
<tr>
  <td class="property">fade_out_timeline</td>
  <td class="property">AllegroFlare::Timeline::Track</td>
</tr>
<tr>
  <td class="property">end_marker_timeline</td>
  <td class="property">AllegroFlare::Timeline::Track</td>
</tr>
<tr>
  <td class="property">playback_speed_multiplier</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">playing</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">playing_started_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">clear_background_to_color</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">finished</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">on_finished_callback</td>
  <td class="property">std::function&lt;void(AllegroFlare::ClubCatt::Logo*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_finished_callback_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">destroyed</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_bitmap_bin</b>(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_model_bin</b>(AllegroFlare::ModelBin* model_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>destroy</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>reset</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>play</b>(float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>(float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw</b>(float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="method">ALLEGRO_BITMAP*</td>
  <td class="method"><b>get_render_surface</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>calc_local_time_now</b>(float time_now=al_get_time())</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_time&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timeline::Track&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timeline/Track.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ClubCatt::Logo&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ClubCatt/Logo.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/ColorKit.q.yml">quintessence/AllegroFlare/ColorKit.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>invert</b>(ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1})</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>fade</b>(ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1}, float amount=1.0f)</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>mix</b>(ALLEGRO_COLOR c1=ALLEGRO_COLOR{1, 1, 1, 1}, ALLEGRO_COLOR c2=ALLEGRO_COLOR{1, 1, 1, 1}, float scale=1.0f)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DeploymentEnvironment.q.yml">quintessence/AllegroFlare/DeploymentEnvironment.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">environment</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">current_working_directory_before_setup</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">working_directory_has_been_setup</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">ENVIRONMENT_UNDEF</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">ENVIRONMENT_TEST</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">ENVIRONMENT_DEVELOPMENT</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">ENVIRONMENT_DEMO</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">ENVIRONMENT_PRODUCTION</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_environment</b>(std::string environment=ENVIRONMENT_UNDEF)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_undefined</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_production</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_test</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_demo</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_development</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>environment_should_set_path_to_resources_path</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>setup_current_working_directory</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>restore_initial_working_directory</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>_is_valid</b>(std::string environment=&quot;[unset-environment]&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_valid</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_invalid</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_data_folder_path</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_PATH&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DesignSystems/DesignFocus.q.yml">quintessence/AllegroFlare/DesignSystems/DesignFocus.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">primary</td>
  <td class="property">AllegroFlare::DesignSystems::DesignPillar</td>
</tr>
<tr>
  <td class="property">secondary</td>
  <td class="property">AllegroFlare::DesignSystems::DesignPillar</td>
</tr>
<tr>
  <td class="property">tertiary</td>
  <td class="property">AllegroFlare::DesignSystems::DesignPillar</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DesignSystems::DesignPillar&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DesignSystems/DesignPillar.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DesignSystems/DesignPillar.q.yml">quintessence/AllegroFlare/DesignSystems/DesignPillar.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">name</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DesignSystems::DesignPillar&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DesignSystems/DesignPillar.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DesignSystems/DesignPillarDistribution.q.yml">quintessence/AllegroFlare/DesignSystems/DesignPillarDistribution.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">levels</td>
  <td class="property">AllegroFlare::DesignSystems::DesignFocus</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DesignSystems::DesignFocus&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DesignSystems/DesignFocus.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DesignSystems/DesignPillarDistributor.q.yml">quintessence/AllegroFlare/DesignSystems/DesignPillarDistributor.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">design_pillars</td>
  <td class="property">std::vector&lt;AllegroFlare::DesignSystems::DesignPillar&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::DesignSystems::DesignFocus&gt;</td>
  <td class="method"><b>build_distribution</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>select_not_of</b>(std::vector&lt;std::string&gt; existing_elements={}, std::vector&lt;std::string&gt; elements_not_to_select={})</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::string&gt;</td>
  <td class="method"><b>remove_element</b>(std::vector&lt;std::string&gt; elements={}, std::string element_to_remove=&quot;[unset-element]&quot;)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::string&gt;</td>
  <td class="method"><b>build_source_list</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Random&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Random.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DesignSystems::DesignFocus&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DesignSystems/DesignFocus.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DesignSystems::DesignPillar&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DesignSystems/DesignPillar.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogSystem/ChapterIndex.q.yml">quintessence/AllegroFlare/DialogSystem/ChapterIndex.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">chapters</td>
  <td class="property">tsl::ordered_map&lt;std::string, AllegroFlare::DialogSystem::Chapters::Base*&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">int</td>
  <td class="method"><b>num_chapters</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::string&gt;</td>
  <td class="method"><b>get_chapter_identifiers</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>add_chapter</b>(std::string identifier=&quot;[unset-identifier]&quot;, AllegroFlare::DialogSystem::Chapters::Base* chapter=nullptr)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>chapter_exists_by_identifier</b>(std::string identifier=&quot;[unset-identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::DialogSystem::Chapters::Base*</td>
  <td class="method"><b>find_chapter_by_identifier</b>(std::string identifier=&quot;[unset-identifier]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::Chapters::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/Chapters/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;tsl::ordered_map&quot;, &quot;headers&quot;=&gt;[&quot;lib/tsl/ordered_map.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogSystem/Chapters/Base.q.yml">quintessence/AllegroFlare/DialogSystem/Chapters/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogSystem/Chapters/Basic.q.yml">quintessence/AllegroFlare/DialogSystem/Chapters/Basic.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">title</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">chapter_select_image_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::Chapters::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/Chapters/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogSystem/CharacterFactory.q.yml">quintessence/AllegroFlare/DialogSystem/CharacterFactory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">AllegroFlare::DialogSystem::Characters::Basic*</td>
  <td class="method"><b>create_basic_character</b>(std::string display_name=&quot;[unset-display_name]&quot;, std::string feature_description=&quot;[unset-feature_description]&quot;, std::string avatar_thumbnail_identifier=&quot;[unset-avatar_thumbnail_identifier]&quot;, std::string avatar_portrait_identifier=&quot;[unset-avatar_portrait_identifier]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::Characters::Basic&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/Characters/Basic.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogSystem/CharacterRoster.q.yml">quintessence/AllegroFlare/DialogSystem/CharacterRoster.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">characters</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::DialogSystem::Characters::Base*&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">int</td>
  <td class="method"><b>num_characters</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::string&gt;</td>
  <td class="method"><b>get_character_names</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>add_character</b>(std::string name=&quot;[unset-name]&quot;, AllegroFlare::DialogSystem::Characters::Base* character=nullptr)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>character_exists_by_name</b>(std::string name=&quot;[unset-name]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::DialogSystem::Characters::Base*</td>
  <td class="method"><b>find_character_by_name</b>(std::string name=&quot;[unset-name]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::Characters::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/Characters/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogSystem/CharacterStagingLayouts/Base.q.yml">quintessence/AllegroFlare/DialogSystem/CharacterStagingLayouts/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_staged_character_expression</b>(std::string staged_character_identifier=&quot;[unset-staged_character_identifier]&quot;, std::string expression=&quot;[unset-expression]&quot;, float time_now=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>show_character</b>(std::string staged_character_identifier=&quot;[unset-staged_character_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>hide_all_characters</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>hide_characters_not_of</b>(std::string staged_character_identifier=&quot;[unset-staged_character_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>hide_character</b>(std::string staged_character_identifier=&quot;[unset-staged_character_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>enter_character</b>(std::string staged_character_identifier=&quot;[unset-staged_character_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>exit_character</b>(std::string staged_character_identifier=&quot;[unset-staged_character_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_speaking_character_bitmap</b>(ALLEGRO_BITMAP* speaking_character_bitmap=nullptr, float time_now=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>(float time_now=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>show</b>(float time_now=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>hide</b>(float time_now=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>clear</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogSystem/CharacterStagingLayouts/BasicCentered.q.yml">quintessence/AllegroFlare/DialogSystem/CharacterStagingLayouts/BasicCentered.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">speaking_character_bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">speaking_character_bitmap_changed_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">surface_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_speaking_character_bitmap</b>(ALLEGRO_BITMAP* speaking_character_bitmap=nullptr, float time_now=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>show</b>(float time_now=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>hide</b>(float time_now=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>clear</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>(float time_now=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::CharacterStagingLayouts::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/CharacterStagingLayouts/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogSystem/CharacterStagingLayouts/Dynamic.q.yml">quintessence/AllegroFlare/DialogSystem/CharacterStagingLayouts/Dynamic.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">staged_characters</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, AllegroFlare::DialogSystem::StagedCharacter::Dynamic&gt;&gt;</td>
</tr>
<tr>
  <td class="property">staged_character_expressions_db</td>
  <td class="property">std::map&lt;std::pair&lt;std::string, std::string&gt;, std::string&gt;</td>
</tr>
<tr>
  <td class="property">surface_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">hidden</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>(float time_now=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>show</b>(float time_now=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>hide</b>(float time_now=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>clear</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>num_staged_characters</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>staged_character_exists</b>(std::string staged_character_identifier=&quot;[unset-staged_character_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::DialogSystem::StagedCharacter::Dynamic*</td>
  <td class="method"><b>find_staged_character</b>(std::string staged_character_identifier=&quot;[unset-staged_character_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>staged_character_expression_exists</b>(std::string staged_character_identifier=&quot;[unset-staged_character_identifier]&quot;, std::string expression=&quot;[unset-expression]&quot;)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>find_staged_character_expression_bitmap_identifier</b>(std::string staged_character_identifier=&quot;[unset-staged_character_identifier]&quot;, std::string expression=&quot;[unset-expression]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>add_staged_character</b>(std::string staged_character_identifier=&quot;[unset-staged_character_identifier]&quot;, AllegroFlare::DialogSystem::StagedCharacter::Dynamic staged_character={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_staged_character_expression</b>(std::string staged_character_identifier=&quot;[unset-staged_character_identifier]&quot;, std::string expression=&quot;[unset-expression]&quot;, float time_now=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_staged_character_placement</b>(std::string staged_character_identifier=&quot;[unset-staged_character_identifier]&quot;, AllegroFlare::Placement3D placement={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_staged_character_to_front</b>(std::string staged_character_identifier=&quot;[unset-staged_character_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_staged_character_to_back</b>(std::string staged_character_identifier=&quot;[unset-staged_character_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_staged_character_forward</b>(std::string staged_character_identifier=&quot;[unset-staged_character_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_staged_character_backward</b>(std::string staged_character_identifier=&quot;[unset-staged_character_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>hide_characters_not_of</b>(std::string staged_character_identifier=&quot;[unset-staged_character_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>hide_all_characters</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>show_character</b>(std::string staged_character_identifier=&quot;[unset-staged_character_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>hide_character</b>(std::string staged_character_identifier=&quot;[unset-staged_character_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>enter_character</b>(std::string staged_character_identifier=&quot;[unset-staged_character_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>exit_character</b>(std::string staged_character_identifier=&quot;[unset-staged_character_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_speaking_character_bitmap</b>(ALLEGRO_BITMAP* speaking_character_bitmap=nullptr, float time_now=0.0f)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::CharacterStagingLayouts::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/CharacterStagingLayouts/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;tsl::ordered_map&quot;, &quot;headers&quot;=&gt;[&quot;lib/tsl/ordered_map.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::StagedCharacter::Dynamic&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/StagedCharacter/Dynamic.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogSystem/CharacterStagingLayouts/MultiModal.q.yml">quintessence/AllegroFlare/DialogSystem/CharacterStagingLayouts/MultiModal.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">speaking_character_bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">speaking_character_bitmap_changed_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">surface_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_staged_character_expression</b>(std::string staged_character_identifier=&quot;[unset-staged_character_identifier]&quot;, std::string expression=&quot;[unset-expression]&quot;, float time_now=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>__set_speaking_character_bitmap</b>(ALLEGRO_BITMAP* speaking_character_bitmap=nullptr, float time_now=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>(float time_now=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>show</b>(float time_now=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>hide</b>(float time_now=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>clear</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::CharacterStagingLayouts::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/CharacterStagingLayouts/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogSystem/Characters/Base.q.yml">quintessence/AllegroFlare/DialogSystem/Characters/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_display_name</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogSystem/Characters/Basic.q.yml">quintessence/AllegroFlare/DialogSystem/Characters/Basic.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">display_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">feature_description</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">avatar_thumbnail_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">avatar_portrait_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">expressions</td>
  <td class="property">std::map&lt;std::string, std::string&gt;</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_display_name</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>add_expression</b>(std::string expression_name=&quot;[unset-expression_name]&quot;, std::string image_identifier=&quot;[unset-image_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>remove_expression</b>(std::string expression_name=&quot;[unset-expression_name]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>clear_expressions</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>expression_exists</b>(std::string expression_name=&quot;[unset-expression_name]&quot;)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>find_expression</b>(std::string expression_name=&quot;[unset-expression_name]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::Characters::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/Characters/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogSystem/DialogEventDatas/CloseDialog.q.yml">quintessence/AllegroFlare/DialogSystem/DialogEventDatas/CloseDialog.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">property</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>property_is</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogSystem/DialogEventDatas/CreateYouGotAnItemDialog.q.yml">quintessence/AllegroFlare/DialogSystem/DialogEventDatas/CreateYouGotAnItemDialog.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">item_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">item_bitmap_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogSystem/DialogEventDatas/CreateYouGotEvidenceDialog.q.yml">quintessence/AllegroFlare/DialogSystem/DialogEventDatas/CreateYouGotEvidenceDialog.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">evidence_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">evidence_bitmap_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogSystem/DialogEventDatas/LoadDialogNodeBankFromFile.q.yml">quintessence/AllegroFlare/DialogSystem/DialogEventDatas/LoadDialogNodeBankFromFile.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">yaml_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogSystem/DialogEventDatas/SpawnDialogByName.q.yml">quintessence/AllegroFlare/DialogSystem/DialogEventDatas/SpawnDialogByName.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogSystem/DialogSystem.q.yml">quintessence/AllegroFlare/DialogSystem/DialogSystem.q.yml</h3>
    <h3>Overview</h3>
    <p>{"notes"=>[{"Consider this class mostly frozen for extending features, except in the following cases"=>["New standard dialog types and logic to handle them and/or spawn them", "Additional \"on_thing_that_happend\" callbacks to the driver.", "Some additional \"standard_dialog_box_*\" methods, for example to set the dialog box colors, frames, etc"]}, "Any additional features (emitting some consequential event, etc) would be handled in the driver"]}</p>    <p>{"todo"=>["Having different drivers would move us closer to switching dialogs in and out (maybe a push/pop mechanism)", "Right now there is no consequence on the driver when the dialog_node_bank is set. It's uncertain what events would need to occour."]}</p>    <p>{"leftover todos"=>["modify process_dialog_event to branch based on the ALLEGRO_FLARE_EVENT_DIALOG_* event", "remove ALLEGRO_FLARE_OPEN_DIALOG, etc from EventEmitter type events that are no longer used", "consider if you need to make GameEventDatas for each of the different types of events", "review overall the integrety of the system, Add lots of tests", "consider revising the arguments in \"activate_dialog_node_by_name_func\", and when/where the activation occurs in coordination with the assignment of the \"active_dialog_node\" and \"active_dialog_node_name\"", "consider that dialog node options in MultipageWithOptions are probably not be deleted properly"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">dialog_node_bank</td>
  <td class="property">AllegroFlare::DialogTree::NodeBank</td>
</tr>
<tr>
  <td class="property">selection_cursor_box</td>
  <td class="property">AllegroFlare::Elements::SelectionCursorBox</td>
</tr>
<tr>
  <td class="property">active_dialog_node</td>
  <td class="property">AllegroFlare::DialogTree::Nodes::Base*</td>
</tr>
<tr>
  <td class="property">active_dialog_node_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">active_dialog_box</td>
  <td class="property">AllegroFlare::Elements::DialogBoxes::Base*</td>
</tr>
<tr>
  <td class="property">driver</td>
  <td class="property">AllegroFlare::DialogSystemDrivers::Base*</td>
</tr>
<tr>
  <td class="property">switched_in</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">standard_dialog_box_font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">standard_dialog_box_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">standard_dialog_box_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">standard_dialog_box_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">standard_dialog_box_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">standard_dialog_box_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">DEFAULT_STANDARD_DIALOG_BOX_FONT_NAME</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_STANDARD_DIALOG_BOX_FONT_SIZE</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">DEFAULT_STANDARD_DIALOG_BOX_X</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">DEFAULT_STANDARD_DIALOG_BOX_Y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">DEFAULT_STANDARD_DIALOG_BOX_WIDTH</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">DEFAULT_STANDARD_DIALOG_BOX_HEIGHT</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_bitmap_bin</b>(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_font_bin</b>(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_event_emitter</b>(AllegroFlare::EventEmitter* event_emitter=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_driver</b>(AllegroFlare::DialogSystemDrivers::Base* driver=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>clear_and_reset</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_dialog_node_bank</b>(AllegroFlare::DialogTree::NodeBank dialog_node_bank={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load_dialog_node_bank_from_file</b>(std::string filename=&quot;[unset-filename]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>destroy</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>switch_in</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>switch_in_if_not</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>switch_out</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_EmitGameEvent_dialog_node</b>(AllegroFlare::DialogTree::Nodes::EmitGameEvent* node=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_RawScriptLine_dialog_node</b>(AllegroFlare::DialogTree::Nodes::RawScriptLine* node=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_Wait_dialog_node</b>(AllegroFlare::DialogTree::Nodes::Wait* node=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_ChapterTitle_dialog_node</b>(AllegroFlare::DialogTree::Nodes::ChapterTitle* node=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_ExitDialog_dialog_node</b>(AllegroFlare::DialogTree::Nodes::ExitDialog* node=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_ExitProgram_dialog_node</b>(AllegroFlare::DialogTree::Nodes::ExitProgram* node=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_YouGotAnItemDialog_dialog_node</b>(AllegroFlare::DialogTree::Nodes::YouGotAnItemDialog* node=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_MultipageWithOptions_dialog_node</b>(AllegroFlare::DialogTree::Nodes::MultipageWithOptions* node=nullptr, std::string node_identifier=&quot;[unset-node_identifier-for-MultipageWithOptions]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_dialog_node</b>(AllegroFlare::DialogTree::Nodes::Base* dialog_node=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_dialog_node_by_name</b>(std::string dialog_name=&quot;[unset-dialog_name]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>advance_MultipageWithOptions_dialog_node</b>(AllegroFlare::DialogTree::Nodes::MultipageWithOptions* node=nullptr, int cursor_position=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>dialog_advance</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>activate_dialog_option</b>(int selection_choice=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>spawn_basic_dialog</b>(std::string speaking_character=&quot;[unset-speaking_character]&quot;, std::vector&lt;std::string&gt; pages={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>spawn_intertitle_dialog</b>(std::string text=&quot;[unset-text]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>spawn_text_messages_dialog</b>(std::vector&lt;std::tuple&lt;std::string, std::string, float&gt;&gt; messages={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>spawn_wait_dialog</b>(float duration_seconds=1.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>spawn_chapter_title_dialog</b>(std::string title_text=&quot;[unset-title_text]&quot;, float duration_seconds=1.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>spawn_you_got_an_item_dialog</b>(std::string item_name=&quot;[unset-item_name]&quot;, std::string item_bitmap_identifier=&quot;[unset-item_bitmap_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>spawn_character_feature_dialog</b>(std::string character_name=&quot;[unset-character_name]&quot;, std::string character_description=&quot;[unset-character_description]&quot;, std::string character_image_identifier=&quot;[unset-character_image_identifier]&quot;, float duration_seconds=6.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>spawn_choice_dialog</b>(std::string speaking_character=&quot;[unset-speaking_character]&quot;, std::string prompt=&quot;[unset-prompt]&quot;, std::vector&lt;std::string&gt; options={}, int cursor_position_on_spawn=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>(float time_now=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>a_dialog_is_active</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>dialog_is_finished</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>shutdown</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_dialog_cursor_position_up</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_dialog_cursor_position_down</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>handle_raw_ALLEGRO_EVENT_that_is_dialog_event</b>(ALLEGRO_EVENT* ev=nullptr, AllegroFlare::GameEventDatas::Base* data=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::DialogSystem&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::DialogEventDatas::CloseDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/DialogEventDatas/CloseDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::YouGotEvidence&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/YouGotEvidence.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Choice&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Choice.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEvent&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Basic&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::YouGotAnItem&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/YouGotAnItem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::YouGotAnItem&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/YouGotAnItem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Wait&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Wait.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryDictionaryItems::WithAttributes&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryDictionaryItems/WithAttributes.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::DialogEventDatas::CreateYouGotAnItemDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/DialogEventDatas/CreateYouGotAnItemDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::DialogEventDatas::CreateYouGotEvidenceDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/DialogEventDatas/CreateYouGotEvidenceDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeBank&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeBank.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeOptions::GoToNode&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeOptions/GoToNode.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeOptions::ExitDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeOptions/ExitDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::MultipageWithOptions&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/MultipageWithOptions.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::YouGotAnItemDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/YouGotAnItemDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::SelectionCursorBox&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/SelectionCursorBox.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxRenderers::ChoiceRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::DialogEventDatas::SpawnDialogByName&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/DialogEventDatas/SpawnDialogByName.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::DialogEventDatas::LoadDialogNodeBankFromFile&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/DialogEventDatas/LoadDialogNodeBankFromFile.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::CharacterStagingLayouts::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/CharacterStagingLayouts/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::CharacterRoster&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/CharacterRoster.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::Characters::Basic&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/Characters/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::StringFormatValidator&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/StringFormatValidator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::BasicScreenplayTextLoader&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/BasicScreenplayTextLoader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::UsefulPHP&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/UsefulPHP.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::ExitDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/ExitDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::ExitProgram&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/ExitProgram.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::ChapterTitle&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/ChapterTitle.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::RawScriptLine&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/RawScriptLine.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::EmitGameEvent&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/EmitGameEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogRoll&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogRoll.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::Wait&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/Wait.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystemDrivers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystemDrivers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::CharacterFeature&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/CharacterFeature.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogSystem/SceneIndex.q.yml">quintessence/AllegroFlare/DialogSystem/SceneIndex.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">scenes</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::DialogSystem::Scenes::Base*&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">int</td>
  <td class="method"><b>num_scenes</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::string&gt;</td>
  <td class="method"><b>get_scene_names</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>add_scene</b>(std::string name=&quot;[unset-name]&quot;, AllegroFlare::DialogSystem::Scenes::Base* scene=nullptr)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>scene_exists_by_name</b>(std::string name=&quot;[unset-name]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::DialogSystem::Scenes::Base*</td>
  <td class="method"><b>find_scene_by_name</b>(std::string name=&quot;[unset-name]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::Scenes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/Scenes/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogSystem/Scenes/Base.q.yml">quintessence/AllegroFlare/DialogSystem/Scenes/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogSystem/Scenes/Basic.q.yml">quintessence/AllegroFlare/DialogSystem/Scenes/Basic.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">location_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">background_image_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">ambience_sound_effect_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::Scenes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/Scenes/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogSystem/StagedCharacter/Dynamic.q.yml">quintessence/AllegroFlare/DialogSystem/StagedCharacter/Dynamic.q.yml</h3>
    <h3>Overview</h3>
    <p>{"TODO"=>["have state initialization be a little more clear, should start with STATE_UNDEF and require init"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">expression</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">placement</td>
  <td class="property">AllegroFlare::Placement3D</td>
</tr>
<tr>
  <td class="property">expression_bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">opacity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">state</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">state_is_busy</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">state_changed_at</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_visible</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_hidden</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>enter</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>exit</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>show</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>hide</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>set_state</b>(uint32_t state=STATE_UNDEF, bool override_if_busy=false)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>update_state</b>(float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_valid_state</b>(uint32_t state=STATE_UNDEF)</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>is_state</b>(uint32_t possible_state=STATE_UNDEF)</td>
</tr>
<tr>
  <td class="private_method">float</td>
  <td class="private_method"><b>infer_current_state_age</b>(float time_now=al_get_time())</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogSystemDrivers/Base.q.yml">quintessence/AllegroFlare/DialogSystemDrivers/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_switch_in</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_switch_out</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>on_load_node_bank_from_file</b>(std::string filename=&quot;[unset-filename]&quot;, AllegroFlare::DialogTree::NodeBank* node_bank_to_load_into=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_before_spawn_basic_dialog</b>(std::string speaking_character_identifier=&quot;[unset-speaking_character_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_before_spawn_choice_dialog</b>(std::string speaking_character_identifier=&quot;[unset-speaking_character_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>enter_character</b>(std::string character_identifier=&quot;[unset-character_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>exit_character</b>(std::string character_identifier=&quot;[unset-character_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_raw_script_line_activate</b>(AllegroFlare::DialogSystem::DialogSystem* dialog_system=nullptr, std::string activating_node_name=&quot;[unset-activating_node_name]&quot;, AllegroFlare::DialogTree::Nodes::Base* activating_node=nullptr, void* user_data=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_raw_script_line_finished</b>(AllegroFlare::DialogSystem::DialogSystem* dialog_system=nullptr, AllegroFlare::Elements::DialogBoxes::Base* active_dialog_box=nullptr, AllegroFlare::DialogTree::Nodes::Base* active_dialog_node=nullptr)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>on_activate_dialog_node_type_unhandled</b>(AllegroFlare::DialogSystem::DialogSystem* dialog_system=nullptr, AllegroFlare::DialogTree::Nodes::Base* active_dialog_node=nullptr)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>decorate_speaking_character_name</b>(std::string speaking_character_identifier=&quot;[unset-speaking_character_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::DialogSystem&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ForwardDeclarations/AllegroFlare/DialogSystem/DialogSystem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeBank&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeBank.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver.q.yml">quintessence/AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todo"=>["consider guarding against bitmap_bin being assigned after init", "consider ownership cycle of \"active_character_staging_layout\"", "consider owning \"character_roster\" and loading from a file", "remove \"exposed\" on properties, move the properties back up towards the top of the list"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">dialog_roll</td>
  <td class="property">AllegroFlare::Elements::DialogRoll</td>
</tr>
<tr>
  <td class="property">handle_activate_dialog_from_raw_script_line_func</td>
  <td class="property">std::function&lt;bool( AllegroFlare::DialogSystem::DialogSystem*, std::string, AllegroFlare::DialogTree::Nodes::Base*, void*) &gt;</td>
</tr>
<tr>
  <td class="property">handle_activate_dialog_from_raw_script_line_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">handle_finished_dialog_from_raw_script_line_func</td>
  <td class="property">std::function&lt;bool(AllegroFlare::DialogSystem::DialogSystem*, AllegroFlare::Elements::DialogBoxes::Base*, AllegroFlare::DialogTree::Nodes::Base*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">handle_finished_dialog_from_raw_script_line_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">handle_load_node_bank_from_file_func</td>
  <td class="property">std::function&lt;bool(std::string, AllegroFlare::DialogTree::NodeBank*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">handle_load_node_bank_from_file_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">handle_decorate_speaking_character_name_func</td>
  <td class="property">std::function&lt;std::string(AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver*, std::string, void*)&gt;</td>
</tr>
<tr>
  <td class="property">handle_decorate_speaking_character_name_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">active_character_staging_layout</td>
  <td class="property">AllegroFlare::DialogSystem::CharacterStagingLayouts::Base*</td>
</tr>
<tr>
  <td class="property">character_roster</td>
  <td class="property">AllegroFlare::DialogSystem::CharacterRoster*</td>
</tr>
<tr>
  <td class="property">scene_index</td>
  <td class="property">AllegroFlare::DialogSystem::SceneIndex*</td>
</tr>
<tr>
  <td class="property">chapter_index</td>
  <td class="property">AllegroFlare::DialogSystem::ChapterIndex*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>destroy</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_switch_in</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_switch_out</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>on_load_node_bank_from_file</b>(std::string filename=&quot;[unset-filename]&quot;, AllegroFlare::DialogTree::NodeBank* node_bank_to_load_into=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_before_spawn_basic_dialog</b>(std::string speaking_character_identifier=&quot;[unset-speaking_character_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_before_spawn_choice_dialog</b>(std::string speaking_character_identifier=&quot;[unset-speaking_character_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_raw_script_line_activate</b>(AllegroFlare::DialogSystem::DialogSystem* dialog_system=nullptr, std::string activating_node_name=&quot;[unset-activating_node_name]&quot;, AllegroFlare::DialogTree::Nodes::Base* activating_node=nullptr, void* user_data=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_raw_script_line_finished</b>(AllegroFlare::DialogSystem::DialogSystem* dialog_system=nullptr, AllegroFlare::Elements::DialogBoxes::Base* active_dialog_box=nullptr, AllegroFlare::DialogTree::Nodes::Base* active_dialog_node=nullptr)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>on_activate_dialog_node_type_unhandled</b>(AllegroFlare::DialogSystem::DialogSystem* dialog_system=nullptr, AllegroFlare::DialogTree::Nodes::Base* active_dialog_node=nullptr)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>decorate_speaking_character_name</b>(std::string speaking_character_identifier=&quot;[unset-speaking_character_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::DialogSystem::Characters::Basic*</td>
  <td class="method"><b>find_character_by_identifier_as_Basic</b>(std::string character_identifier=&quot;[unset-character_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_speaking_character</b>(std::string speaking_character_identifier=&quot;[unset-speaking_character_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>enter_character</b>(std::string character_identifier=&quot;[unset-character_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>exit_character</b>(std::string character_identifier=&quot;[unset-character_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_speaking_character_expression</b>(std::string speaking_character_identifier=&quot;[unset-speaking_character_identifier]&quot;, std::string speaking_character_expression=&quot;[unset-speaking_character_expression]&quot;)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>lookup_speaking_character_avatar</b>(std::string speaking_character_identifier=&quot;[unset-speaking_character_identifier]&quot;, std::string speaking_character_expression=&quot;[unset-speaking_character_expression]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>append_to_dialog_roll</b>(std::string speaking_character=&quot;[unset-speaking_character]&quot;, std::string dialog=&quot;[unset-dialog]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::DialogSystem&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/DialogSystem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystemDrivers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystemDrivers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::DialogSystem&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::DialogEventDatas::CloseDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/DialogEventDatas/CloseDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::YouGotEvidence&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/YouGotEvidence.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Choice&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Choice.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEvent&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Basic&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::YouGotAnItem&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/YouGotAnItem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::YouGotAnItem&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/YouGotAnItem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryDictionaryItems::WithAttributes&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryDictionaryItems/WithAttributes.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::DialogEventDatas::CreateYouGotAnItemDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/DialogEventDatas/CreateYouGotAnItemDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::DialogEventDatas::CreateYouGotEvidenceDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/DialogEventDatas/CreateYouGotEvidenceDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeBank&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeBank.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::exists&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeOptions::GoToNode&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeOptions/GoToNode.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeOptions::ExitDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeOptions/ExitDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::MultipageWithOptions&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/MultipageWithOptions.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::SelectionCursorBox&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/SelectionCursorBox.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxRenderers::ChoiceRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::DialogEventDatas::SpawnDialogByName&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/DialogEventDatas/SpawnDialogByName.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::DialogEventDatas::LoadDialogNodeBankFromFile&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/DialogEventDatas/LoadDialogNodeBankFromFile.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::CharacterStagingLayouts::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/CharacterStagingLayouts/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::CharacterRoster&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/CharacterRoster.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::SceneIndex&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/SceneIndex.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::ChapterIndex&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/ChapterIndex.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::Characters::Basic&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/Characters/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::StringFormatValidator&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/StringFormatValidator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::BasicScreenplayTextLoader&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/BasicScreenplayTextLoader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::UsefulPHP&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/UsefulPHP.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::ExitDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/ExitDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::ExitProgram&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/ExitProgram.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogRoll&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogRoll.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::Wait&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/Wait.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::ChapterTitle&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/ChapterTitle.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystemDrivers::BasicCharacterDialogDriver&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogTree/BasicScreenplayTextLoader.q.yml">quintessence/AllegroFlare/DialogTree/BasicScreenplayTextLoader.q.yml</h3>
    <h3>Overview</h3>
    <p>{"overview"=>"Formatting is relatively simple:\n  - All \"chunks\" are consecutive lines of text. Chunks are separated by two newlines.\n  - If there are two lines, the top line is the dialog speaker, and the bottom is their line of dialog\n  - If there is only one line, it's a type of command instruction or note or reference.\n  - If there is more than one line, the first line is the speaker and the last line is the dialog. Intermediate\n    lines are ignored (for now)\n"}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">node_bank</td>
  <td class="property">AllegroFlare::DialogTree::NodeBank</td>
</tr>
<tr>
  <td class="property">loaded</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_text</b>(std::string text=&quot;[unset-text]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::DialogTree::NodeBank</td>
  <td class="method"><b>get_node_bank</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load_file</b>(std::string filename=&quot;[unset-filename]&quot;)</td>
</tr>
<tr>
  <td class="method">const AllegroFlare::DialogTree::NodeBank&amp;</td>
  <td class="method"><b>load</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::DialogTree::NodeOptions::GoToNode*</td>
  <td class="method"><b>create_GoToNode_option</b>(std::string node_target_name=&quot;[unset-node_target_name]&quot;)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::string&gt;</td>
  <td class="method"><b>split</b>(std::string input=&quot;[unset-input]&quot;, std::string delimiter=&quot;__&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeBank&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeBank.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::MultipageWithOptions&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/MultipageWithOptions.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeOptions::GoToNode&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeOptions/GoToNode.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::ExitDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/ExitDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::UsefulPHP&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/UsefulPHP.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogTree/NodeBank.q.yml">quintessence/AllegroFlare/DialogTree/NodeBank.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">nodes</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::DialogTree::Nodes::Base*&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">uint32_t</td>
  <td class="method"><b>num_nodes</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>add_node</b>(std::string name=&quot;[unset-name]&quot;, AllegroFlare::DialogTree::Nodes::Base* node=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>replace_node</b>(std::string name=&quot;[unset-name]&quot;, AllegroFlare::DialogTree::Nodes::Base* node=nullptr)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>node_exists_by_name</b>(std::string name=&quot;[unset-name]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::DialogTree::Nodes::Base*</td>
  <td class="method"><b>find_node_by_name</b>(std::string name=&quot;[unset-name]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>delete_all_nodes_and_clear</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>merge</b>(AllegroFlare::DialogTree::NodeBank* other_node_bank=nullptr)</td>
</tr>
<tr>
  <td class="method">std::set&lt;std::string&gt;</td>
  <td class="method"><b>find_shared_node_names</b>(AllegroFlare::DialogTree::NodeBank* other_node_bank=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeBank&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogTree/NodeBankFactory.q.yml">quintessence/AllegroFlare/DialogTree/NodeBankFactory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">AllegroFlare::DialogTree::NodeBank</td>
  <td class="method"><b>build_common_system_dialogs_node_bank</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystemDrivers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystemDrivers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeBank&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeBank.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::MultipageWithOptions&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/MultipageWithOptions.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::ExitDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/ExitDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::ExitProgram&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/ExitProgram.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::Wait&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/Wait.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeOptions::GoToNode&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeOptions/GoToNode.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeOptions::ExitDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeOptions/ExitDialog.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogTree/NodeBankInferencer.q.yml">quintessence/AllegroFlare/DialogTree/NodeBankInferencer.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["Sort out parameters/arguments needed for unrecognized_node_type_callback_func"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">node_bank</td>
  <td class="property">AllegroFlare::DialogTree::NodeBank*</td>
</tr>
<tr>
  <td class="property">unrecognized_node_type_callback_func</td>
  <td class="property">std::function&lt;bool()&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::vector&lt;std::string&gt;</td>
  <td class="method"><b>obtain_list_of_speaking_characters</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>character_names_are_present</b>(std::vector&lt;std::string&gt; character_names_that_must_be_present={})</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::string&gt;</td>
  <td class="method"><b>find_missing_character_names</b>(std::vector&lt;std::string&gt; character_names_that_must_be_present={})</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::string&gt;</td>
  <td class="method"><b>make_unique_and_retain_ordering</b>(std::vector&lt;std::string&gt; list={})</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeBank&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeBank.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::MultipageWithOptions&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/MultipageWithOptions.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::ExitDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/ExitDialog.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogTree/NodeOptions/Base.q.yml">quintessence/AllegroFlare/DialogTree/NodeOptions/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogTree/NodeOptions/ExitDialog.q.yml">quintessence/AllegroFlare/DialogTree/NodeOptions/ExitDialog.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeOptions::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeOptions/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogTree/NodeOptions/GoToNode.q.yml">quintessence/AllegroFlare/DialogTree/NodeOptions/GoToNode.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">target_node_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeOptions::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeOptions/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogTree/Nodes/Base.q.yml">quintessence/AllegroFlare/DialogTree/Nodes/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Time&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Time.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogTree/Nodes/ChapterTitle.q.yml">quintessence/AllegroFlare/DialogTree/Nodes/ChapterTitle.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">title_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">duration</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">next_node_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">DEFAULT_DURATION</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogTree/Nodes/EmitGameEvent.q.yml">quintessence/AllegroFlare/DialogTree/Nodes/EmitGameEvent.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">game_event_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">immediate_next_node_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogTree/Nodes/ExitDialog.q.yml">quintessence/AllegroFlare/DialogTree/Nodes/ExitDialog.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogTree/Nodes/ExitProgram.q.yml">quintessence/AllegroFlare/DialogTree/Nodes/ExitProgram.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogTree/Nodes/MultipageWithOptions.q.yml">quintessence/AllegroFlare/DialogTree/Nodes/MultipageWithOptions.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["Consider renaming this to MultipageWithOptionsDialog"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">speaker</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">pages</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">options</td>
  <td class="property">std::vector&lt;std::tuple&lt;std::string, AllegroFlare::DialogTree::NodeOptions::Base*, AllegroFlare::BitFlags&lt;uint32_t&gt;&gt;&gt;</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::tuple&lt;std::string, AllegroFlare::DialogTree::NodeOptions::Base*, AllegroFlare::BitFlags&lt;uint32_t&gt;&gt;</td>
  <td class="method"><b>get_option_num</b>(int option_num=0)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::string&gt;</td>
  <td class="method"><b>build_options_as_text</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>num_pages</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>num_options</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>has_options</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>has_no_options</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>option_is_selectable</b>(int option_num=0)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>infer_cursor_position_on_spawn</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitFlags&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitFlags.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeOptions::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeOptions/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger::throw_error&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogTree/Nodes/RawScriptLine.q.yml">quintessence/AllegroFlare/DialogTree/Nodes/RawScriptLine.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">line</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">line_number</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">next_line_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogTree/Nodes/Wait.q.yml">quintessence/AllegroFlare/DialogTree/Nodes/Wait.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">duration_sec</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">next_node_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogTree/Nodes/YouGotAnItemDialog.q.yml">quintessence/AllegroFlare/DialogTree/Nodes/YouGotAnItemDialog.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">item_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">item_bitmap_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DialogTree/YAMLLoader.q.yml">quintessence/AllegroFlare/DialogTree/YAMLLoader.q.yml</h3>
    <h3>Overview</h3>
    <p>{"notes"=>[{"header"=>"Schema", "body_markdown"=>"```yaml\n- speaker:\n  pages:\n    - \"Foobar, boobaz!\"\n    - \"Donkin, Dankin!\"\n  options:\n    - type: go_to_node\n      data:\n        - \n```\n"}, {"header"=>"Validations", "body_markdown"=>"- must have 'speaker'\n- must have 'pages'\n- optional 'options'\n- speaker must not be blank\n- pages must not be empty\n- pages must be array\n- each pages element must be scalar\n- each pages element must not be blank or whitespace\n- options must be array\n- each option element must have 'type'\n- each option element must have 'data'\n- any `go_to_node` type should point to an existing node name\n- any dangling nodes (ones not reached by `go_to_node`) should output a warning on load\n"}]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">node_bank</td>
  <td class="property">AllegroFlare::DialogTree::NodeBank</td>
</tr>
<tr>
  <td class="property">NAME_KEY</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">SPEAKER_KEY</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">PAGES_KEY</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">OPTIONS_KEY</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">TEXT_KEY</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">TYPE_KEY</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DATA_KEY</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">OPTION_TYPE_GO_TO_NODE_KEY</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">OPTION_TYPE_EXIT_DIALOG_KEY</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">OPTION_DATA_TARGET_NODE_NAME_KEY</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">MULTIPAGE_WITH_OPTIONS_KEY</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">loaded</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">AllegroFlare::DialogTree::NodeBank</td>
  <td class="method"><b>get_node_bank</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load_file</b>(std::string filename=&quot;[unset-filename]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load</b>(std::string yaml_as_string=&quot;[unset-yaml_as_string]&quot;)</td>
</tr>
<tr>
  <td class="method">std::pair&lt;std::string, AllegroFlare::DialogTree::Nodes::MultipageWithOptions*&gt;</td>
  <td class="method"><b>parse_and_create_MultipageWithOptions_node</b>(YAML::Node* node_ptr=nullptr)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::DialogTree::NodeOptions::Base*</td>
  <td class="method"><b>parse_and_create_result_option</b>(std::string type=&quot;[unset-type]&quot;, YAML::Node* data_node_ptr=nullptr)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::DialogTree::NodeOptions::ExitDialog*</td>
  <td class="method"><b>parse_and_create_ExitDialog_option</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::DialogTree::NodeOptions::GoToNode*</td>
  <td class="method"><b>parse_and_create_GoToNode_option</b>(YAML::Node* data_node_ptr=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::make_pair&quot;, &quot;headers&quot;=&gt;[&quot;utility&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::YAMLValidator&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/YAMLValidator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeOptions::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeOptions/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeOptions::ExitDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeOptions/ExitDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeOptions::GoToNode&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeOptions/GoToNode.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;YAML::Node&quot;, &quot;headers&quot;=&gt;[&quot;yaml-cpp/yaml.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeBank&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeBank.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::php::file_get_contents&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/UsefulPHP.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::MultipageWithOptions&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/MultipageWithOptions.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitFlags&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitFlags.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DisplaySettingsInterfaces/Base.q.yml">quintessence/AllegroFlare/DisplaySettingsInterfaces/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_fullscreen</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>deactivate_fullscreen</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>toggle_fullscreen</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_fullscreen</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_window_size</b>(int width=1920, int height=1080)</td>
</tr>
<tr>
  <td class="method">std::pair&lt;int, int&gt;</td>
  <td class="method"><b>get_window_size</b>()</td>
</tr>
<tr>
  <td class="method">std::pair&lt;int, int&gt;</td>
  <td class="method"><b>get_display_size</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>manually_mark_screensaver_as_inhibited</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>enable_inhibit_screensaver</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>disable_inhibit_screensaver</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>toggle_inhibit_screensaver</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_screensaver_inhibited</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>hide_mouse_cursor</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>show_mouse_cursor</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>toggle_hide_mouse_cursor</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_mouse_cursor_hidden</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DisplaySettingsInterfaces/Live.q.yml">quintessence/AllegroFlare/DisplaySettingsInterfaces/Live.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">display</td>
  <td class="property">ALLEGRO_DISPLAY*</td>
</tr>
<tr>
  <td class="property">windowed_mode_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">windowed_mode_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">screensaver_inhibited</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">mouse_cursor_hidden</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>hide_mouse_cursor</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>show_mouse_cursor</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>toggle_hide_mouse_cursor</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_mouse_cursor_hidden</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_fullscreen</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>deactivate_fullscreen</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>toggle_fullscreen</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_fullscreen</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_window_size</b>(int width=1920, int height=1080)</td>
</tr>
<tr>
  <td class="method">std::pair&lt;int, int&gt;</td>
  <td class="method"><b>get_window_size</b>()</td>
</tr>
<tr>
  <td class="method">std::pair&lt;int, int&gt;</td>
  <td class="method"><b>get_display_size</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>manually_mark_screensaver_as_inhibited</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>enable_inhibit_screensaver</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>disable_inhibit_screensaver</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>toggle_inhibit_screensaver</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_screensaver_inhibited</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DisplaySettingsInterfaces::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DisplaySettingsInterfaces/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/AchievementsList.q.yml">quintessence/AllegroFlare/Elements/AchievementsList.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">achievements</td>
  <td class="property">std::vector&lt;std::tuple&lt;std::string, std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">achievements_box_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">achievements_box_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">surface_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">scrollbar_position</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">box_gutter_y</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_scrollbar_position</b>(float distance_y=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_scrollbar_position</b>(float scrollbar_position=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_scrollbar_position_to_max</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_scrollbar_max_position</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>scrollbar_is_autohidden_because_list_contents_is_smaller_than_the_container</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::tuple&lt;std::string, std::string, std::string&gt;&gt;</td>
  <td class="method"><b>build_placeholder_achievements</b>()</td>
</tr>
<tr>
  <td class="private_method">int</td>
  <td class="private_method"><b>count_num_achievements_completed</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_header_title_backfill</b>()</td>
</tr>
<tr>
  <td class="private_method">int</td>
  <td class="private_method"><b>count_num_achievements</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>build_achievements_count_string</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_achievements_list_title_text_and_completed_title_text</b>()</td>
</tr>
<tr>
  <td class="private_method">float</td>
  <td class="private_method"><b>infer_container_height</b>()</td>
</tr>
<tr>
  <td class="private_method">float</td>
  <td class="private_method"><b>infer_container_contents_height</b>()</td>
</tr>
<tr>
  <td class="private_method">float</td>
  <td class="private_method"><b>infer_container_scroll_range</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>limit_scrollbar_position</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_achievements_list_items_and_scrollbar</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_achievement_box</b>(float x=0.0f, float y=0.0f, std::string status=&quot;[unset-status]&quot;, std::string title=&quot;[unset-title]&quot;, std::string description=&quot;[unset-description]&quot;)</td>
</tr>
<tr>
  <td class="private_method">int32_t</td>
  <td class="private_method"><b>infer_icon_character_by_status</b>(std::string status=&quot;[unset-status]&quot;)</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_COLOR</td>
  <td class="private_method"><b>infer_icon_color_by_status</b>(std::string status=&quot;[unset-status]&quot;, ALLEGRO_COLOR icon_locked_color=ALLEGRO_COLOR{1, 1, 1, 1}, ALLEGRO_COLOR icon_hidden_color=ALLEGRO_COLOR{1, 1, 1, 1}, ALLEGRO_COLOR icon_achieved_color=ALLEGRO_COLOR{1, 1, 1, 1})</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>filter_item_title_through_status</b>(std::string title=&quot;[unset-title]&quot;, std::string status=&quot;[unset-status]&quot;)</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>filter_item_description_through_status</b>(std::string description=&quot;[unset-title]&quot;, std::string status=&quot;[unset-status]&quot;)</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_title_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_item_title_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_item_description_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_icon_font</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_unicode_character</b>(ALLEGRO_FONT* font=nullptr, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1}, int x=0, int y=0, uint32_t icon=61444, int flags=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::tuple&lt;std::string, std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;tuple&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Scrollbar&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Scrollbar.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min, std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/AdvancingText.q.yml">quintessence/AllegroFlare/Elements/AdvancingText.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["consider if al_is_system_installed() could be removed and/or a \"current_time\" or \"age\" could be passed in"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">revealed_characters_count</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">reveal_started_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">reveal_ended_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">reveal_rate_characters_per_second</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">all_characters_are_revealed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">DEFAULT_REVEAL_RATE_CHARACTERS_PER_SECOND</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">MIN_REVEAL_RATE_CHARACTERS_PER_SECOND</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>start</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_reveal_rate_characters_per_second</b>(float reveal_rate_characters_per_second=DEFAULT_REVEAL_RATE_CHARACTERS_PER_SECOND)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>reveal_all_characters</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>generate_revealed_text</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min, std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/AdvancingTextRenderer.q.yml">quintessence/AllegroFlare/Elements/AdvancingTextRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">revealed_characters_count</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">line_height_multiplier</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">line_height_padding</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>generate_revealed_text</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_multiline_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min, std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Backgrounds/Base.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/Base.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["It's not clear what \"show\" and \"hide\" are used for. It might conflict in purpose with \"activate()\" and \"deactivate()\""]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>deactivate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>show</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>hide</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Backgrounds/Basic3D.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/Basic3D.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">model_bin</td>
  <td class="property">AllegroFlare::ModelBin*</td>
</tr>
<tr>
  <td class="property">scene</td>
  <td class="property">AllegroFlare::GraphicsPipelines::Basic3D::Scene</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">AllegroFlare::GraphicsPipelines::Basic3D::Scene&amp;</td>
  <td class="method"><b>get_scene_ref</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::Basic3D::Scene&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/Basic3D/Scene.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Backgrounds/ClearToColor.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/ClearToColor.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">clear_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Backgrounds/IconPattern.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/IconPattern.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">background_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">icon_a</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">icon_b</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">font_awesome_font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">time</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_unicode_character</b>(ALLEGRO_FONT* font=nullptr, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1}, int32_t icon=61444, int flags=0, float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="method">ALLEGRO_FONT*</td>
  <td class="method"><b>obtain_font_awesome_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;sin&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Backgrounds/Image.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/Image.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["Allow setting a custom placement for the image. Right now it's centered in the middle with a scale of 1.0"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">image_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_BITMAP*</td>
  <td class="private_method"><b>obtain_background_bitmap</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Backgrounds/Monoplex.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/Monoplex.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">monoplex_1_counter</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">monoplex_2_counter</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">monoplex_3_counter</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;sin&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Backgrounds/None.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/None.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Backgrounds/Parallax.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/Parallax.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["Consider if it would be a better design to pass in a bitmap_bin and reference the images by identifier."]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">layers</td>
  <td class="property">std::vector&lt;AllegroFlare::Elements::Backgrounds::ParallaxLayer&gt;</td>
</tr>
<tr>
  <td class="property">offset_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">offset_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::draw_offset_textured_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;AllegroFlare::Elements::Backgrounds::ParallaxLayer&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Elements/Backgrounds/ParallaxLayer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::ParallaxLayer&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Elements/Backgrounds/ParallaxLayer.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Backgrounds/ParallaxLayer.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/ParallaxLayer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">anchor_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">anchor_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">offset_rate</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Backgrounds/ScreenCapture.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/ScreenCapture.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">inv_scale</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">capture</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">DEFAULT_INV_SCALE</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_inv_scale</b>(int inv_scale=DEFAULT_INV_SCALE)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>destroy</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>refresh_capture</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ScreenCapture&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ScreenCapture.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Backgrounds/Video.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/Video.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["Currently there seems to be a bug that the video needs to be \"started\" before a frame can be obtained.  Even if al_is_video_playing(video) returns true, al_get_video_frame(video) will crash if the video has not been started. To solve this temporarily, a flag \"video_is_playing\" is unsed in this class, but should eventually be removed."]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">video_bin</td>
  <td class="property">AllegroFlare::VideoBin*</td>
</tr>
<tr>
  <td class="property">video_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">surface_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">video_is_playing</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">VIDEO_FIT_STRATEGY_STRETCH_TO_FIT</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_video_bin</b>(AllegroFlare::VideoBin* video_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_video_identifier</b>(std::string video_identifier=&quot;[unset-video_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>deactivate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_VIDEO*</td>
  <td class="private_method"><b>obtain_video</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VIDEO&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VideoBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VideoBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Base.q.yml">quintessence/AllegroFlare/Elements/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">placement</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ElementID&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ElementID.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Button.q.yml">quintessence/AllegroFlare/Elements/Button.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["Consider renaming \"core_color\" to something, like, less intense"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">text_font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">text_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">core_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">started_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">padding_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">padding_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">alignment_strategy</td>
  <td class="property">AllegroFlare::Elements::Button::Alignments</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_font_bin</b>(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_box_width</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_box_height</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>align_to_center</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>align_to_right_centered</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Placement2D</td>
  <td class="method"><b>build_button_placement_based_on_alignment_strategy</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_age</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_button_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_ttf_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_ttf.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min, std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Interpolators::&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Clock&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Clock.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Button::Alignments&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/ChapterSelect/Carousel.q.yml">quintessence/AllegroFlare/Elements/ChapterSelect/Carousel.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">elements</td>
  <td class="property">std::vector&lt;AllegroFlare::Elements::ChapterSelect::CarouselElements::Base*&gt;</td>
</tr>
<tr>
  <td class="property">rotate_carousel_sound_effect_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">element_font_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">element_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">focused_element_position</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">element_dimensions</td>
  <td class="property">std::map&lt;AllegroFlare::Elements::ChapterSelect::CarouselElements::Base*, std::tuple&lt;float, float, float, float&gt;&gt;</td>
</tr>
<tr>
  <td class="property">element_dimensions_refreshed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">camera</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">camera_target</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">DEFAULT_FONT_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_FONT_SIZE</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_elements</b>(std::vector&lt;AllegroFlare::Elements::ChapterSelect::CarouselElements::Base*&gt; elements={})</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_num_elements</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::ChapterSelect::CarouselElements::Base*</td>
  <td class="method"><b>get_element_at_focused_element_position</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>rotate_carousel_left</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>rotate_carousel_right</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>reposition_camera_position_to_focused_element</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update_camera_position</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_element_x_position_for</b>(int position=0)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::ChapterSelect::CarouselElements::Base*</td>
  <td class="method"><b>get_element_at_position</b>(int position=0)</td>
</tr>
<tr>
  <td class="method">std::tuple&lt;float, float, float, float&gt;</td>
  <td class="method"><b>get_element_dimensions_at_position</b>(int position=0)</td>
</tr>
<tr>
  <td class="method">std::tuple&lt;float, float, float, float&gt;</td>
  <td class="method"><b>get_element_dimensions</b>(AllegroFlare::Elements::ChapterSelect::CarouselElements::Base* element=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>refresh_element_dimensions</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>emit_rotation_sound_effect</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::ChapterSelect::CarouselElements::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/ChapterSelect/CarouselElements/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::ChapterSelect::CarouselElementRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/ChapterSelect/CarouselElementRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/ChapterSelect/CarouselElementRenderer.q.yml">quintessence/AllegroFlare/Elements/ChapterSelect/CarouselElementRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">element_font_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">element_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">DEFAULT_FONT_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_FONT_SIZE</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>(AllegroFlare::Elements::ChapterSelect::CarouselElements::Base* element=nullptr)</td>
</tr>
<tr>
  <td class="method">std::pair&lt;float, float&gt;</td>
  <td class="method"><b>calculate_dimensions</b>(AllegroFlare::Elements::ChapterSelect::CarouselElements::Base* element=nullptr)</td>
</tr>
<tr>
  <td class="method">std::pair&lt;float, float&gt;</td>
  <td class="method"><b>render_or_calculate_dimensions</b>(AllegroFlare::Elements::ChapterSelect::CarouselElements::Base* element=nullptr, bool only_calculate_dimensions=false)</td>
</tr>
<tr>
  <td class="method">std::pair&lt;float, float&gt;</td>
  <td class="method"><b>render_or_calculate_dimensions_for__ThumbnailWithLabel</b>(AllegroFlare::Elements::ChapterSelect::CarouselElements::ThumbnailWithLabel* element=nullptr, bool only_calculate_dimensions=false)</td>
</tr>
<tr>
  <td class="method">std::pair&lt;float, float&gt;</td>
  <td class="method"><b>render_or_calculate_dimensions_for__ThumbnailWithLabelUnlockable</b>(AllegroFlare::Elements::ChapterSelect::CarouselElements::ThumbnailWithLabelUnlockable* element=nullptr, bool only_calculate_dimensions=false)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::ChapterSelect::CarouselElements::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/ChapterSelect/CarouselElements/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::ChapterSelect::CarouselElements::ThumbnailWithLabel&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/ChapterSelect/CarouselElements/ThumbnailWithLabel.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::ChapterSelect::CarouselElementRenderers::ThumbnailWithLabelRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/ThumbnailWithLabelRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::ChapterSelect::CarouselElements::ThumbnailWithLabelUnlockable&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/ChapterSelect/CarouselElements/ThumbnailWithLabelUnlockable.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::ChapterSelect::CarouselElementRenderers::ThumbnailWithLabelUnlockableRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/ThumbnailWithLabelUnlockableRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/Base.q.yml">quintessence/AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/ThumbnailWithLabelRenderer.q.yml">quintessence/AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/ThumbnailWithLabelRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">thumbnail_image_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">label_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">padding_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">padding_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">label_y_gutter</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>calculate_width</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>calculate_height</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>calculate_label_text_line_height</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_BITMAP*</td>
  <td class="private_method"><b>obtain_thumbnail_image</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_label_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::ChapterSelect::CarouselElementRenderers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/ThumbnailWithLabelUnlockableRenderer.q.yml">quintessence/AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/ThumbnailWithLabelUnlockableRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">thumbnail_image_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">label_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">locked_thumbnail_image_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">locked_label_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">is_unlocked</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">font_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">padding_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">padding_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">label_y_gutter</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">DEFAULT_FONT_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_FONT_SIZE</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>calculate_width</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>calculate_height</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>calculate_label_text_line_height</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_BITMAP*</td>
  <td class="private_method"><b>obtain_thumbnail_image</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_label_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::ChapterSelect::CarouselElementRenderers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/ChapterSelect/CarouselElements/Base.q.yml">quintessence/AllegroFlare/Elements/ChapterSelect/CarouselElements/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">float</td>
  <td class="method"><b>calculate_width</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>calculate_height</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/ChapterSelect/CarouselElements/ThumbnailWithLabel.q.yml">quintessence/AllegroFlare/Elements/ChapterSelect/CarouselElements/ThumbnailWithLabel.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">label_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::ChapterSelect::CarouselElements::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/ChapterSelect/CarouselElements/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/ChapterSelect/CarouselElements/ThumbnailWithLabelUnlockable.q.yml">quintessence/AllegroFlare/Elements/ChapterSelect/CarouselElements/ThumbnailWithLabelUnlockable.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">value</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">bitmap_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">label_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">locked_bitmap_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">locked_label_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">is_unlocked</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::ChapterSelect::CarouselElements::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/ChapterSelect/CarouselElements/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/ChapterSelect/ChapterSelect.q.yml">quintessence/AllegroFlare/Elements/ChapterSelect/ChapterSelect.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">carousel</td>
  <td class="property">AllegroFlare::Elements::ChapterSelect::Carousel</td>
</tr>
<tr>
  <td class="property">pagination_bar</td>
  <td class="property">AllegroFlare::Elements::ChapterSelect::PaginationBar</td>
</tr>
<tr>
  <td class="property">title_font_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">title_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">DEFAULT_TITLE_FONT_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_TITLE_FONT_SIZE</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">DEFAULT_CAROUSEL_ELEMENT_FONT_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_CAROUSEL_ELEMENT_FONT_SIZE</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">DEFAULT_CAROUSEL_SOUND_EFFECT_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_event_emitter</b>(AllegroFlare::EventEmitter* event_emitter=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_bitmap_bin</b>(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_font_bin</b>(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_rotate_carousel_sound_effect_identifier</b>(std::string rotate_carousel_sound_effect_identifier=DEFAULT_CAROUSEL_SOUND_EFFECT_IDENTIFIER)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_carousel_element_font_identifier</b>(std::string carousel_element_font_identifier=DEFAULT_CAROUSEL_ELEMENT_FONT_IDENTIFIER)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_carousel_element_font_size</b>(int carousel_element_font_size=DEFAULT_CAROUSEL_ELEMENT_FONT_SIZE)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_carousel_elements</b>(std::vector&lt;AllegroFlare::Elements::ChapterSelect::CarouselElements::Base*&gt; carousel_elements={})</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>has_elements</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>has_no_elements</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::ChapterSelect::CarouselElements::Base*</td>
  <td class="method"><b>get_focused_carousel_element</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>rotate_carousel_right</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>rotate_carousel_left</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_pagination_bar_elements</b>(std::vector&lt;bool&gt; elements={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_pagination_bar_element_at</b>(int position=0, bool value=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_title_text</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>refresh_pagination_bar_elements</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>refresh_cursor_position_on_pagination_bar</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_title_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::ChapterSelect::Carousel&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/ChapterSelect/Carousel.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::ChapterSelect::PaginationBar&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/ChapterSelect/PaginationBar.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::ChapterSelect::CarouselElements::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/ChapterSelect/CarouselElements/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/ChapterSelect/PaginationBar.q.yml">quintessence/AllegroFlare/Elements/ChapterSelect/PaginationBar.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">elements</td>
  <td class="property">std::vector&lt;bool&gt;</td>
</tr>
<tr>
  <td class="property">cursor_position</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">fill_color_reached</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">fill_color_unreached</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">cursor_stroke_line_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">cursor_stroke_line_thickness</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">bar_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">bar_spacing</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">bar_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">bar_stroke_thickness</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_element_at</b>(int position=0, bool value=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>fit_placement_width_and_height</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>calculate_width</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_num_elements</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/ChapterSelect/Screen.q.yml">quintessence/AllegroFlare/Elements/ChapterSelect/Screen.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">chapter_select_element</td>
  <td class="property">AllegroFlare::Elements::ChapterSelect::ChapterSelect</td>
</tr>
<tr>
  <td class="property">background</td>
  <td class="property">AllegroFlare::Elements::Backgrounds::Base*</td>
</tr>
<tr>
  <td class="property">on_menu_choice_callback_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Elements::ChapterSelect::Screen*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_menu_choice_callback_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">on_exit_screen_callback_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Elements::ChapterSelect::Screen*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_exit_screen_callback_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">select_menu_sound_effect_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">failed_select_menu_sound_effect_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">DEFAULT_ROTATE_CAROUSEL_SOUND_EFFECT_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_SELECT_MENU_SOUND_EFFECT_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_FAILED_SELECT_MENU_SOUND_EFFECT_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_event_emitter</b>(AllegroFlare::EventEmitter* event_emitter=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_bitmap_bin</b>(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_font_bin</b>(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_title_font_identifier</b>(std::string title_font_identifier=AllegroFlare::Elements::ChapterSelect::ChapterSelect::DEFAULT_TITLE_FONT_IDENTIFIER)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_title_font_size</b>(int title_font_size=AllegroFlare::Elements::ChapterSelect::ChapterSelect::DEFAULT_TITLE_FONT_SIZE)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_carousel_element_font_identifier</b>(std::string carousel_element_font_identifier=AllegroFlare::Elements::ChapterSelect::ChapterSelect::DEFAULT_CAROUSEL_ELEMENT_FONT_IDENTIFIER)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_carousel_element_font_size</b>(int carousel_element_font_size=AllegroFlare::Elements::ChapterSelect::ChapterSelect::DEFAULT_CAROUSEL_ELEMENT_FONT_SIZE)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_rotate_carousel_sound_effect_identifier</b>(std::string rotate_carousel_sound_effect_identifier=DEFAULT_ROTATE_CAROUSEL_SOUND_EFFECT_IDENTIFIER)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_elements</b>(std::vector&lt;AllegroFlare::Elements::ChapterSelect::CarouselElements::Base*&gt; elements={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_pagination_bar_elements</b>(std::vector&lt;bool&gt; elements={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_deactivate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::ChapterSelect::CarouselElements::Base*</td>
  <td class="method"><b>get_focused_carousel_element</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>current_focused_carousel_element_can_be_selected</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_menu_option</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>select_menu_option</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>exit_screen</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_timer_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_up_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_down_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>emit_select_menu_sound_effect</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>emit_failed_select_menu_sound_effect</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_axis_change_func</b>(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_processing_user_input</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::ChapterSelect::ChapterSelect&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/ChapterSelect/ChapterSelect.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::ChapterSelect::CarouselElements::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/ChapterSelect/CarouselElements/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::ChapterSelect::CarouselElements::ThumbnailWithLabelUnlockable&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/ChapterSelect/CarouselElements/ThumbnailWithLabelUnlockable.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::GenericController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/GenericController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::ChapterSelect::Screen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/ChapterSelect/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxFactory.q.yml">quintessence/AllegroFlare/Elements/DialogBoxFactory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">AllegroFlare::Elements::DialogBoxes::Basic</td>
  <td class="method"><b>build_basic_test_dialog</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::DialogBoxes::Basic*</td>
  <td class="method"><b>create_basic_test_dialog</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::DialogBoxes::Basic</td>
  <td class="method"><b>build_basic_dialog</b>(std::string speaking_character=&quot;[unset-speaking_character]&quot;, std::vector&lt;std::string&gt; pages={})</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::DialogBoxes::Basic*</td>
  <td class="method"><b>create_basic_dialog</b>(std::string speaking_character=&quot;[unset-speaking_character]&quot;, std::vector&lt;std::string&gt; pages={})</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::DialogBoxes::Intertitle*</td>
  <td class="method"><b>create_intertitle_dialog</b>(std::string text=&quot;[unset-text]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::DialogBoxes::TextMessages*</td>
  <td class="method"><b>create_text_messages_dialog</b>(std::vector&lt;std::tuple&lt;std::string, std::string, float&gt;&gt; messages={})</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::DialogBoxes::Choice*</td>
  <td class="method"><b>create_choice_dialog</b>(std::string speaking_character=&quot;[unset-speaking_character]&quot;, std::string prompt=&quot;[unset-prompt]&quot;, std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt; options={}, int cursor_position_on_spawn=0)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::DialogBoxes::YouGotAnItem*</td>
  <td class="method"><b>create_you_got_an_item_dialog</b>(std::string item_name=&quot;[unset-item_name]&quot;, std::string item_bitmap_identifier=&quot;[unset-item-bitmap_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::DialogBoxes::YouGotEvidence*</td>
  <td class="method"><b>create_you_got_new_evidence_dialog</b>(std::string evidence_name=&quot;[unset-evidence_name]&quot;, std::string evidence_bitmap_identifier=&quot;[unset-evidence_bitmap_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::DialogBoxes::ChapterTitle*</td>
  <td class="method"><b>create_chapter_title_dialog</b>(std::string title_text=&quot;[unset-title_text]&quot;, float duration_seconds=6.0f)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::DialogBoxes::CharacterFeature*</td>
  <td class="method"><b>create_character_feature_dialog</b>(std::string character_name=&quot;[unset-character_name]&quot;, std::string character_description=&quot;[unset-character_description]&quot;, std::string character_image_identifier=&quot;[unset-character_image_identifier]&quot;, float duration_seconds=1.0f)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::DialogBoxes::Wait*</td>
  <td class="method"><b>create_wait_dialog</b>(float duration_seconds=1.0f)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_time&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Basic&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Choice&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Choice.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::YouGotAnItem&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/YouGotAnItem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::YouGotEvidence&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/YouGotEvidence.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Wait&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Wait.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::ChapterTitle&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/ChapterTitle.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::CharacterFeature&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/CharacterFeature.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::TextMessages&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/TextMessages.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Intertitle&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Intertitle.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxFrame.q.yml">quintessence/AllegroFlare/Elements/DialogBoxFrame.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">backfill_opacity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">backfill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">border_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">opacity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">roundness</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">border_thickness</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">DEFAULT_BACKFILL_COLOR</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">DEFAULT_BORDER_COLOR</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::color::color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_current_display&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxNameTag.q.yml">quintessence/AllegroFlare/Elements/DialogBoxNameTag.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_text</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_dialog_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_current_display&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxFrame&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxFrame.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">dialog_box</td>
  <td class="property">AllegroFlare::Elements::DialogBoxes::Base*</td>
</tr>
<tr>
  <td class="property">selection_cursor_box</td>
  <td class="property">AllegroFlare::Elements::SelectionCursorBox*</td>
</tr>
<tr>
  <td class="property">standard_dialog_box_font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">standard_dialog_box_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">standard_dialog_box_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">standard_dialog_box_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">standard_dialog_box_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">standard_dialog_box_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">DEFAULT_STANDARD_DIALOG_BOX_X</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">DEFAULT_STANDARD_DIALOG_BOX_Y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">DEFAULT_STANDARD_DIALOG_BOX_WIDTH</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">DEFAULT_STANDARD_DIALOG_BOX_HEIGHT</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>deps</b>(int _ignore=AllegroFlare::Elements::DialogBoxStyles::DEFAULT_FONT_SIZE)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_current_display&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxFrame&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxFrame.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::YouGotEvidence&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/YouGotEvidence.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Wait&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Wait.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxRenderers::ChoiceRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxRenderers::YouGotAnItemRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxRenderers::YouGotEvidenceRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxRenderers::BasicRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Basic&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Choice&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Choice.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::YouGotAnItem&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/YouGotAnItem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::ChapterTitle&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/ChapterTitle.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::CharacterFeature&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/CharacterFeature.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::TextMessages&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/TextMessages.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Intertitle&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Intertitle.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::SelectionCursorBox&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/SelectionCursorBox.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxRenderers::ChapterTitleRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxRenderers/ChapterTitleRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxRenderers::CharacterFeatureRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxRenderers/CharacterFeatureRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxRenderers::TextMessages&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxRenderers/TextMessages.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxRenderers::IntertitleRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxRenderers/IntertitleRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxStyles&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxStyles.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">current_page_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_padding_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">text_padding_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">num_revealed_characters</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">is_finished</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">page_is_finished</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">page_finished_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">at_last_page</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">age</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">showing_speaking_character_name</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">speaking_character_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">DEFAULT_FONT_NAME</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_FONT_SIZE</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>render_frame</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>render_text</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>render_speaking_character_name_tag</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>render_button</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_choices_with_cursor_and_current_selection</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_special_state_empty_text</b>(float width=1, float height=1)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_speaking_character_name</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_styled_revealed_text</b>(float max_width=1, std::string text=&quot;[unset-text]&quot;, int num_revealed_characters=999)</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>concat_text</b>(std::string source_text=&quot;&quot;, int length=0)</td>
</tr>
<tr>
  <td class="private_method">std::vector&lt;std::string&gt;</td>
  <td class="private_method"><b>obtain_choice_dialog_box_option_labels</b>()</td>
</tr>
<tr>
  <td class="private_method">int</td>
  <td class="private_method"><b>obtain_choice_dialog_box_cursor_position</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_dialog_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_current_display&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxFrame&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxFrame.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogButton&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogButton.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Interpolators::&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::SelectionCursorBox&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/SelectionCursorBox.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::ListBoxRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/ListBoxRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxNameTag&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxNameTag.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxRenderers/ChapterTitleRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderers/ChapterTitleRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">title_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">age</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">duration</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">DEFAULT_FONT_NAME</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_FONT_SIZE</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Interpolators&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxRenderers/CharacterFeatureRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderers/CharacterFeatureRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">character_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">description</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">character_image_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">duration</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">age</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">character_name_font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">character_name_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">description_font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">description_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">DEFAULT_CHARACTER_NAME_FONT_NAME</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_CHARACTER_NAME_FONT_SIZE</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">DEFAULT_DESCRIPTION_FONT_NAME</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_DESCRIPTION_FONT_SIZE</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">DEFAULT_DURATION</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_character_name_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_description_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_BITMAP*</td>
  <td class="private_method"><b>obtain_character_image</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Interpolators&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">choice_dialog_box</td>
  <td class="property">AllegroFlare::Elements::DialogBoxes::Choice*</td>
</tr>
<tr>
  <td class="property">selection_cursor_box</td>
  <td class="property">AllegroFlare::Elements::SelectionCursorBox*</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_padding_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">text_padding_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">num_revealed_characters</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">is_finished</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">page_is_finished</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">page_finished_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">at_last_page</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">age</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">showing_speaking_character_name</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">speaking_character_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">DEFAULT_FONT_NAME</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_FONT_SIZE</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>render_frame</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>render_text</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_speaking_character_name_tag</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">std::tuple&lt;float, float, float, float&gt;</td>
  <td class="method"><b>calculate_dimensions_of_current_selection</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>helper__reposition_selection_cursor_box_dimensions_to</b>(AllegroFlare::Elements::SelectionCursorBox* selection_cursor_box=nullptr, std::tuple&lt;float, float, float, float&gt; dimensions={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>helper__set_selection_cursor_box_dimensions_to</b>(AllegroFlare::Elements::SelectionCursorBox* selection_cursor_box=nullptr, std::tuple&lt;float, float, float, float&gt; dimensions={})</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_left_indent</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::ListBoxRenderer</td>
  <td class="method"><b>build_list_box_renderer</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_choices_with_cursor_and_current_selection</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_special_state_empty_text</b>(float width=1, float height=1)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_styled_revealed_text</b>(float max_width=1, std::string text=&quot;[unset-text]&quot;, int num_revealed_characters=999)</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>concat_text</b>(std::string source_text=&quot;&quot;, int length=0)</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_choice_dialog_box_prompt</b>()</td>
</tr>
<tr>
  <td class="private_method">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
  <td class="private_method"><b>obtain_choice_dialog_box_options</b>()</td>
</tr>
<tr>
  <td class="private_method">std::vector&lt;std::string&gt;</td>
  <td class="private_method"><b>obtain_choice_dialog_box_option_labels</b>()</td>
</tr>
<tr>
  <td class="private_method">int</td>
  <td class="private_method"><b>obtain_choice_dialog_box_cursor_position</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_dialog_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_current_display&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxFrame&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxFrame.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogButton&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogButton.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Interpolators::&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::SelectionCursorBox&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/SelectionCursorBox.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::ListBoxRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/ListBoxRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Choice&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Choice.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ColorKit&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ColorKit.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxNameTag&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxNameTag.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxRenderers/IntertitleRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderers/IntertitleRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">revealed_characters_count</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surface_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">top_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">left_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">right_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">bottom_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">line_height_multiplier</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">line_height_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">DEFAULT_FONT_NAME</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_FONT_SIZE</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>generate_revealed_text</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_gradient_prim</b>(float y1=0, float y2=0, ALLEGRO_COLOR top_color=ALLEGRO_COLOR{0, 0, 0, 0}, ALLEGRO_COLOR bottom_color=ALLEGRO_COLOR{0, 0, 0, 0.7})</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>all_characters_are_revealed</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_next_button_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_multiline_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VERTEX[4]&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::build_vertex&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxRenderers/TextMessages.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderers/TextMessages.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todo"=>["rename this to TextMessagesRenderer"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">messages</td>
  <td class="property">std::vector&lt;std::tuple&lt;std::string, std::string, float&gt;&gt;</td>
</tr>
<tr>
  <td class="property">age</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">phone_screen_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">phone_screen_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">draw_background_fill</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>build_sanitized_age</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::TextMessageBubble&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/TextMessageBubble.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">item_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">item_bitmap_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">age</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_live_reveal_counter</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_notification_text_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_item_name_text_font</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>opaquify</b>(ALLEGRO_COLOR color={0,0,0,0})</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxFrame&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxFrame.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Interpolators::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Interpolators::&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">evidence_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">evidence_bitmap_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">age</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">DEFAULT_WIDTH</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">DEFAULT_HEIGHT</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_live_reveal_counter</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_notification_text_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_evidence_name_text_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_evidence_description_font</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>opaquify</b>(ALLEGRO_COLOR color={0,0,0,0})</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxFrame&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxFrame.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Interpolators::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Interpolators::&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxStyles.q.yml">quintessence/AllegroFlare/Elements/DialogBoxStyles.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">DEFAULT_FONT_NAME</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_FONT_SIZE</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxes/Base.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/Base.q.yml</h3>
    <h3>Overview</h3>
    <p>{"notes"=>["\"created_at\" could be thought of as essentially \"started_at\""]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">created_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">finished</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>start</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>advance</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>ready_to_auto_advance</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>move_cursor_position_up</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>move_cursor_position_down</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_age</b>(float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_time&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxes/Basic.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/Basic.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["update TYPE and use correct naming in"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">pages</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">speaking_character</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">current_page_num</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_revealed_characters</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">finished_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">page_finished</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">page_finished_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>start</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>has_speaking_character</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>advance</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_pages</b>(std::vector&lt;std::string&gt; pages={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>reset</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_current_page_text</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_current_page_num_chars</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>next_page</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>reset_current_page_counters</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>num_pages</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>has_no_pages</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>at_last_page</b>()</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>current_page_is_valid</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>reveal_all_characters</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>all_characters_are_revealed</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_time&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxes/ChapterTitle.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/ChapterTitle.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">title_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">duration</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>ready_to_auto_advance</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxes/CharacterFeature.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/CharacterFeature.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">character_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">description</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">character_image_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">duration</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">DEFAULT_DURATION</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>advance</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxes/Choice.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/Choice.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">prompt</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">options</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">speaking_character</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">advancing_text</td>
  <td class="property">AllegroFlare::Elements::AdvancingText</td>
</tr>
<tr>
  <td class="property">breakout_list_box</td>
  <td class="property">AllegroFlare::Elements::ListBox</td>
</tr>
<tr>
  <td class="property">breakout_list_box_active</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">cursor_active</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>start</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>advance</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>has_speaking_character</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_prompt</b>(std::string prompt=&quot;[unset-prompt]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_options</b>(std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt; options={})</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>reveal_breakout_list_box</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_breakout_list_box_age</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_prompt_full_text</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_prompt_revealed_text</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
  <td class="method"><b>get_options</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::string&gt;</td>
  <td class="method"><b>get_options_labels</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_current_selection_text</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_current_selection_value</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>move_cursor_position_down</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>move_cursor_position_up</b>()</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>has_valid_cursor_position</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_cursor_position</b>(int cursor_position=0)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_cursor_position</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::AdvancingText&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/AdvancingText.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::ListBox&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/ListBox.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxes/Intertitle.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/Intertitle.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["This should be converted to having multiple pages"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">revealed_characters_count</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">all_characters_revealed_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">wait_duration_after_all_characters_are_revealed</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>start</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>advance</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>generate_revealed_text</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>reveal_all_characters</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>all_characters_are_revealed</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_multiline_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min, std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxes/TextMessages.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/TextMessages.q.yml</h3>
    <h3>Overview</h3>
    <p>{"notes"=>["messages contains three elements, <0> the sender name, <1> the message text, <2> the time the message was sent", "Any sender name that is not SELF is likely to be rendered as a left-side dialog bubble, with SELF on the right. This could vary depending on what renderer is used"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">messages</td>
  <td class="property">std::vector&lt;std::tuple&lt;std::string, std::string, float&gt;&gt;</td>
</tr>
<tr>
  <td class="property">SELF</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>advance</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxes/Wait.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/Wait.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">duration</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">started_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>ready_to_auto_advance</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_time&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxes/YouGotAnItem.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/YouGotAnItem.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">item_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">item_bitmap_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>start</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>advance</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_time&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxes/YouGotEvidence.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/YouGotEvidence.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">evidence_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">evidence_bitmap_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>start</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>advance</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_time&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogButton.q.yml">quintessence/AllegroFlare/Elements/DialogButton.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">text_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">started_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">at_last_advance</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_button_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_ttf_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_ttf.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min, std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Basic&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Interpolators::&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogRoll.q.yml">quintessence/AllegroFlare/Elements/DialogRoll.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">log</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">SPEAKER_INTERNAL</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>append_log</b>(std::string speaker=&quot;[unset-speaker]&quot;, std::string text=&quot;[unset-text]&quot;, float time=0.0f)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;char*&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogRollRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogRollRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">roll</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">gutter_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">gutter_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">speaker_name_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">dialog_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">internal_dialog_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_internal_dialog_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogRoll&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogRoll.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogRoll*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogRoll.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/HealthBars/Basic.q.yml">quintessence/AllegroFlare/Elements/HealthBars/Basic.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">value</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">max</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">fill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">backfill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">bar_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">bar_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">min_render_threshold</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/HealthBars/Classic.q.yml">quintessence/AllegroFlare/Elements/HealthBars/Classic.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">max</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">value</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">fill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">empty_box_outline_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">bar_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">bar_spacing</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">bar_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">bar_stroke_thickness</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>fit_placement_width_and_height</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>calculate_width</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/HealthBars/Hearts.q.yml">quintessence/AllegroFlare/Elements/HealthBars/Hearts.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">max</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">value</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">fill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">empty_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">outline_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">heart_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">heart_spacing</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">drawing_outline</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">font_awesome_solid_font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_awesome_outline_font_name</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_unicode_character</b>(ALLEGRO_FONT* font=nullptr, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1}, int32_t icon=61444, int flags=0, float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font_awesome_solid_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font_awesome_outline_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontAwesome&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontAwesome.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;int32_t&quot;, &quot;headers&quot;=&gt;[&quot;cstdint&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/InputDeviceConfigurationList.q.yml">quintessence/AllegroFlare/Elements/InputDeviceConfigurationList.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["Consider adding a \"start configuration\" step-by-step process", "Add visual feedback on changed mapping", "Reposition cursor to mapped button when waiting for button input"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">player_num</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">physical_input_device</td>
  <td class="property">AllegroFlare::PhysicalInputDevices::Base*</td>
</tr>
<tr>
  <td class="property">joystick_configuration_mapping</td>
  <td class="property">std::vector&lt;std::tuple&lt;std::string, uint32_t&gt;&gt;</td>
</tr>
<tr>
  <td class="property">list_item_box_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">list_item_box_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">surface_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cursor_pos</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">selection_cursor_box</td>
  <td class="property">AllegroFlare::Elements::SelectionCursorBox</td>
</tr>
<tr>
  <td class="property">scrollbar_position</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">scrollbar_position_destination</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">scrollbar_reposition_multiplier</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">scrollbar_movement_mode</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">box_gutter_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">state</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">state_is_busy</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">state_changed_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">STATE_UNDEF</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">STATE_MOVING_CURSOR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">STATE_AWAITING_USER_INPUT_ON_OPTION</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">SCROLLBAR_MOVEMENT_NONE</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">SCROLLBAR_MOVEMENT_FOLLOW_PROPORTIONAL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">DEFAULT_SCROLLBAR_REPOSITION_MULTIPLIER</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_joystick_configuration_mapping</b>(std::vector&lt;std::tuple&lt;std::string, uint32_t&gt;&gt; joystick_configuration_mapping={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_physical_input_device</b>(AllegroFlare::PhysicalInputDevices::Base* physical_input_device=nullptr)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>move_cursor_up</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>move_cursor_down</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>move_selection_cursor_box_to_current_cursor_location</b>()</td>
</tr>
<tr>
  <td class="private_method">AllegroFlare::Vec2D</td>
  <td class="private_method"><b>build_selection_cursor_box_position_of_current_cursor_pos</b>()</td>
</tr>
<tr>
  <td class="private_method">float</td>
  <td class="private_method"><b>build_scrollbar_position_at_current_cursor_pos</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>submit_mapping_on_currently_selected_option</b>(uint32_t button_num=0)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>select_current_option_for_remapping</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>abort_current_option_for_remapping</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_scrollbar_position</b>(float distance_y=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_scrollbar_position</b>(float scrollbar_position=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_scrollbar_reposition_multiplier</b>(float scrollbar_reposition_multiplier=DEFAULT_SCROLLBAR_REPOSITION_MULTIPLIER)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_scrollbar_position_to_max</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_scrollbar_max_position</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>scrollbar_is_autohidden_because_list_contents_is_smaller_than_the_container</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::tuple&lt;std::string, uint32_t&gt;&gt;</td>
  <td class="method"><b>build_placeholder_joystick_configuration_mapping</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_header_title_backfill</b>()</td>
</tr>
<tr>
  <td class="private_method">int</td>
  <td class="private_method"><b>count_num_joystick_configuration_mapping</b>()</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>joystick_configuration_mapping_is_empty</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_joystick_configuration_mapping_list_title_text</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>build_heading_label</b>()</td>
</tr>
<tr>
  <td class="private_method">float</td>
  <td class="private_method"><b>infer_container_height</b>()</td>
</tr>
<tr>
  <td class="private_method">float</td>
  <td class="private_method"><b>infer_container_contents_height</b>()</td>
</tr>
<tr>
  <td class="private_method">float</td>
  <td class="private_method"><b>infer_list_item_height</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_list_item_spacing_y</b>()</td>
</tr>
<tr>
  <td class="private_method">float</td>
  <td class="private_method"><b>infer_container_scroll_range</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>limit_scrollbar_position</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>scrollbar_movement_mode_is_follow_proportional</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_joystick_configuration_mapping_list_items_and_scrollbar</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_waiting_user_input_for_remap</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_joystick_configuration_item_box</b>(float x=0.0f, float y=0.0f, std::string action_name=&quot;[unset-title]&quot;, std::string mapped_button_name=&quot;[unset-description]&quot;)</td>
</tr>
<tr>
  <td class="private_method">int32_t</td>
  <td class="private_method"><b>infer_icon_character_by_status</b>(std::string status=&quot;[unset-status]&quot;)</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_COLOR</td>
  <td class="private_method"><b>infer_icon_color_by_status</b>(std::string status=&quot;[unset-status]&quot;, ALLEGRO_COLOR icon_locked_color=ALLEGRO_COLOR{1, 1, 1, 1}, ALLEGRO_COLOR icon_hidden_color=ALLEGRO_COLOR{1, 1, 1, 1}, ALLEGRO_COLOR icon_achieved_color=ALLEGRO_COLOR{1, 1, 1, 1})</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>filter_item_title_through_status</b>(std::string title=&quot;[unset-title]&quot;, std::string status=&quot;[unset-status]&quot;)</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>filter_item_description_through_status</b>(std::string description=&quot;[unset-title]&quot;, std::string status=&quot;[unset-status]&quot;)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>set_state</b>(uint32_t state=STATE_UNDEF, bool override_if_busy=false)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_valid_state</b>(uint32_t state=STATE_UNDEF)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_state</b>(uint32_t possible_state=STATE_UNDEF)</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_current_state_age</b>(float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_title_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_item_title_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_empty_state_text_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_item_description_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_icon_font</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_unicode_character</b>(ALLEGRO_FONT* font=nullptr, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1}, int x=0, int y=0, uint32_t icon=61444, int flags=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::SelectionCursorBox&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/SelectionCursorBox.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Scrollbar&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Scrollbar.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min, std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::PhysicalInputDevices::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/PhysicalInputDevices/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/InputDevicesList.q.yml">quintessence/AllegroFlare/Elements/InputDevicesList.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">input_devices</td>
  <td class="property">std::vector&lt;std::tuple&lt;AllegroFlare::PhysicalInputDevices::Base*, uint32_t, std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">list_item_box_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">list_item_box_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">surface_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cursor_pos</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">selection_cursor_box</td>
  <td class="property">AllegroFlare::Elements::SelectionCursorBox</td>
</tr>
<tr>
  <td class="property">selection_cursor_button</td>
  <td class="property">AllegroFlare::Elements::Button</td>
</tr>
<tr>
  <td class="property">scrollbar_position</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">scrollbar_position_destination</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">scrollbar_movement_mode</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">box_gutter_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">scrollbar_reposition_multiplier</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">SCROLLBAR_MOVEMENT_NONE</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">SCROLLBAR_MOVEMENT_FOLLOW_PROPORTIONAL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">DEFAULT_SCROLLBAR_REPOSITION_MULTIPLIER</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_input_devices</b>(std::vector&lt;std::tuple&lt;AllegroFlare::PhysicalInputDevices::Base*, uint32_t, std::string, std::string&gt;&gt; input_devices={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>move_cursor_up</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>move_cursor_down</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>move_selection_cursor_box_to_current_cursor_location</b>()</td>
</tr>
<tr>
  <td class="private_method">AllegroFlare::Vec2D</td>
  <td class="private_method"><b>build_selection_cursor_box_position_of_current_cursor_pos</b>()</td>
</tr>
<tr>
  <td class="private_method">AllegroFlare::Vec2D</td>
  <td class="private_method"><b>build_selection_cursor_button_position_of_current_cursor_pos</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_list_item_spacing_y</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>scrollbar_movement_mode_is_follow_proportional</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_scrollbar_position</b>(float distance_y=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_scrollbar_position</b>(float scrollbar_position=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_scrollbar_position_to_max</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_scrollbar_max_position</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>scrollbar_is_autohidden_because_list_contents_is_smaller_than_the_container</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>list_contents_is_smaller_than_the_container</b>()</td>
</tr>
<tr>
  <td class="private_method">float</td>
  <td class="private_method"><b>build_scrollbar_position_at_current_cursor_pos</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::tuple&lt;AllegroFlare::PhysicalInputDevices::Base*, uint32_t, std::string, std::string&gt;&gt;</td>
  <td class="method"><b>build_placeholder_input_devices</b>()</td>
</tr>
<tr>
  <td class="private_method">int</td>
  <td class="private_method"><b>count_num_input_devices_connected</b>()</td>
</tr>
<tr>
  <td class="private_method">int</td>
  <td class="private_method"><b>count_num_input_devices_disconnected</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_header_title_backfill</b>()</td>
</tr>
<tr>
  <td class="private_method">int</td>
  <td class="private_method"><b>count_num_input_devices</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>build_input_devices_count_string</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_input_devices_list_title_text_and_completed_title_text</b>()</td>
</tr>
<tr>
  <td class="private_method">float</td>
  <td class="private_method"><b>infer_container_height</b>()</td>
</tr>
<tr>
  <td class="private_method">float</td>
  <td class="private_method"><b>infer_list_item_y_spacing</b>()</td>
</tr>
<tr>
  <td class="private_method">float</td>
  <td class="private_method"><b>infer_container_contents_height_for_n_elements</b>(int num_elements=0)</td>
</tr>
<tr>
  <td class="private_method">float</td>
  <td class="private_method"><b>infer_container_contents_height</b>()</td>
</tr>
<tr>
  <td class="private_method">float</td>
  <td class="private_method"><b>infer_container_scroll_range</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>limit_scrollbar_position</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_scrollarea_contents</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_input_devices_list_items_and_scrollbar</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_input_device_box</b>(float x=0.0f, float y=0.0f, AllegroFlare::PhysicalInputDevices::Base* physical_input_device=nullptr, uint32_t connection_status=CONNECTION_STATUS_UNDEFINED, std::string title=&quot;[unset-title]&quot;, std::string device_id=&quot;[unset-device_id]&quot;)</td>
</tr>
<tr>
  <td class="private_method">int32_t</td>
  <td class="private_method"><b>infer_icon_character_for_physical_input_device</b>(AllegroFlare::PhysicalInputDevices::Base* physical_input_device=nullptr)</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_COLOR</td>
  <td class="private_method"><b>infer_icon_color_by_connection_status</b>(uint32_t connection_status=CONNECTION_STATUS_UNDEFINED, ALLEGRO_COLOR icon_locked_color=ALLEGRO_COLOR{1, 1, 1, 1}, ALLEGRO_COLOR icon_hidden_color=ALLEGRO_COLOR{1, 1, 1, 1}, ALLEGRO_COLOR icon_achieved_color=ALLEGRO_COLOR{1, 1, 1, 1})</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>current_selected_item_is_connected</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>filter_item_title_through_connection_status</b>(std::string title=&quot;[unset-title]&quot;, uint32_t connection_status=CONNECTION_STATUS_UNDEFINED)</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>build_item_description</b>(std::string device_id=&quot;&quot;, uint32_t connection_status=CONNECTION_STATUS_UNDEFINED)</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_title_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_item_title_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_item_description_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_icon_font</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_unicode_character</b>(ALLEGRO_FONT* font=nullptr, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1}, int x=0, int y=0, uint32_t icon=61444, int flags=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Scrollbar&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Scrollbar.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min, std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::PhysicalInputDevices::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/PhysicalInputDevices/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::PhysicalInputDevices::Keyboard&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/PhysicalInputDevices/Keyboard.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::PhysicalInputDevices::Joysticks::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/PhysicalInputDevices/Joysticks/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;connection_status_t&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::SelectionCursorBox&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/SelectionCursorBox.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Button&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Button.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Inventory.q.yml">quintessence/AllegroFlare/Elements/Inventory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">af_inventory</td>
  <td class="property">AllegroFlare::Inventory*</td>
</tr>
<tr>
  <td class="property">inventory_index</td>
  <td class="property">AllegroFlare::InventoryIndex*</td>
</tr>
<tr>
  <td class="property">inventory_dictionary</td>
  <td class="property">AllegroFlare::InventoryDictionary*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">place</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">cursor_x</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cursor_y</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">active</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">details_reveal_counter</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">details_num_revealed_characters</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">reveal_counter</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">item_in_details_pane</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">item_in_details_pane_set_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">inventory_items_left_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">inventory_items_top_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">inventory_items_box_size_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">inventory_items_box_size_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">inventory_items_box_gutter_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">inventory_items_box_gutter_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cursor_move_sound_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">show_background</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">show_backframe</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">show_title_text</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">draw_details_pane_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Elements::Inventory*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">draw_details_pane_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">draw_inventory_item_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Elements::Inventory*, float, float, int, int, int, void*)&gt;</td>
</tr>
<tr>
  <td class="property">draw_inventory_item_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">render_selectable_items_before_details_pane</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">inventory_show_sound_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">inventory_hide_sound_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">sound_is_disabled</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>deactivate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>refresh</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>show</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>hide</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>toggle_show_hide</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_up</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_down</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_left</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_right</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>calc_details_header_reveal_x_offset</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>calc_details_header_reveal_color</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>disable_sound</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>enable_sound</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_sound_disabled</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_sound_enabled</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_num_columns</b>(int num_columns=1)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_num_rows</b>(int num_rows=1)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>set_details_pane</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_COLOR</td>
  <td class="private_method"><b>opaquify</b>(ALLEGRO_COLOR color={0,0,0,0})</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_COLOR</td>
  <td class="private_method"><b>change_a</b>(ALLEGRO_COLOR color={0,0,0,0}, float alpha=1.0f)</td>
</tr>
<tr>
  <td class="private_method">float</td>
  <td class="private_method"><b>inv_reveal_counter</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_selectable_items</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_background</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_backframe</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_title_text</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_inventory_items</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_inventory_boxes</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_details_item_name</b>(float x=0, float y=0, ALLEGRO_FONT* font=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_details_item_description</b>(float x=0, float y=0, float width=1, ALLEGRO_FONT* font=nullptr)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_details_pane</b>()</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>has_valid_size</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_item_selection_cursor</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_inventory_box</b>(float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_inventory_item</b>(float x=0.0f, float y=0.0f, int item=0)</td>
</tr>
<tr>
  <td class="method">std::tuple&lt;std::string, std::string, std::string&gt;</td>
  <td class="method"><b>get_item_definition</b>(int index=0)</td>
</tr>
<tr>
  <td class="method">ALLEGRO_FONT*</td>
  <td class="method"><b>obtain_title_font</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_FONT*</td>
  <td class="method"><b>obtain_description_font</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_FONT*</td>
  <td class="method"><b>obtain_item_name_font</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_FONT*</td>
  <td class="method"><b>obtain_details_header_font</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_item_boxes_width</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_item_boxes_height</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>play_move_cursor_sound</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>play_hide_inventory_sound</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>play_show_inventory_sound</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>play_sound</b>(std::string sound_identifier=&quot;[unset-play_sound]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::InventoryIndex*</td>
  <td class="method"><b>create_placeholder_inventory_index</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>concat_text</b>(std::string source_text=&quot;&quot;, int length=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;X&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;, &quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Inventory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Inventory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryIndex&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryIndex.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryDictionary&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryDictionary.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Inventory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Inventory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::function&quot;, &quot;headers&quot;=&gt;[&quot;functional&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/LevelSelect.q.yml">quintessence/AllegroFlare/Elements/LevelSelect.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["Make dimension setters (set_selection_box_width, set_selection_box_spacing_y, etc) explicit and require diminensions > 0", "Make row, column size setters (set_num_columns, set_num_rows, etc) explicit and require size > 0", "Output a warning when the number of levels is greater than the number of selection boxes"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">levels_list</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">on_menu_choice_callback_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Elements::LevelSelect*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_menu_choice_callback_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">place</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">cursor_x</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cursor_y</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">selection_box_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">selection_box_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">selection_box_spacing_x</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">selection_box_spacing_y</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">ignore_on_invalid_selection</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="private_method">ALLEGRO_COLOR</td>
  <td class="private_method"><b>opaquify</b>(ALLEGRO_COLOR color={0,0,0,0})</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_COLOR</td>
  <td class="private_method"><b>change_a</b>(ALLEGRO_COLOR color={0,0,0,0}, float alpha=1.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_backfill_and_frame</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_level_select_title_text</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_level_select_boxes_and_cursor</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_up</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_down</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_left</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_right</b>()</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>has_valid_size</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>list_is_empty</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_selection_cursor</b>(float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_level_list_item_box</b>(float x=0.0f, float y=0.0f, float w=1.0f, float h=1.0f, std::string label=&quot;[unlabeled]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_selected_menu_option</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>infer_current_menu_option_value</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>infer_cursor_position</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>cursor_selection_is_valid</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_title_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_level_label_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;X&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;, &quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_SELECT_LEVEL&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::LevelSelect&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/LevelSelect.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/ListBox.q.yml">quintessence/AllegroFlare/Elements/ListBox.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">items</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">created_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cursor_position</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">wrap_at_edges</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_items</b>(std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt; items={})</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::string&gt;</td>
  <td class="method"><b>get_item_labels</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>num_items</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>has_valid_currently_selected_item</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_currently_selected_item_label</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_currently_selected_item_value</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_age</b>(float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_cursor_position</b>(int cursor_position=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_up</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_down</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_time&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/ListBoxRenderer.q.yml">quintessence/AllegroFlare/Elements/ListBoxRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">list_items</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">cursor_position</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">age</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_padding_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">text_padding_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">text_color_selected</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">text_color_not_selected</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">frame_backfill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">frame_border_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">selection_frame_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">DEFAULT_FONT_NAME</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_FONT_SIZE</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">DEFAULT_SELECTION_COLOR</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">DEFAULT_TEXT_NOT_SELECTED_COLOR</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">float</td>
  <td class="method"><b>calculate_y_displacement_from_time</b>(float time=0.0f, float max_displacement=10.0f)</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>calculate_curved_time</b>(float time=0.0f)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_frame</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>calculate_list_item_max_width</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>calculate_line_height</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>calculate_item_spacing_padding</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>calculate_content_width</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>calculate_content_height</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_height_to_fit_content</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_width_to_fit_content_or_max_and_min</b>(float max=800.0f, float min=240.0f)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_frame_raw</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_choices_with_cursor_and_current_selection</b>()</td>
</tr>
<tr>
  <td class="method">std::tuple&lt;float, float, float, float&gt;</td>
  <td class="method"><b>calculate_dimensions_for_list_item_at_position</b>(int list_item_position=0)</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>multiline_text_draw_callback</b>(int line_number=0, const char* line=nullptr, int size=0, void* extra=nullptr)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;float&gt;</td>
  <td class="method"><b>calculate_line_widths</b>(ALLEGRO_FONT* font=nullptr, float max_width=0.0f, std::string text=&quot;[unset-text]&quot;)</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>calculate_DEFAULT_BACKFILL_COLOR</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_COLOR</td>
  <td class="method"><b>calculate_DEFAULT_BORDER_COLOR</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_text_font</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>concat_text</b>(std::string source_text=&quot;&quot;, int length=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxFrame&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxFrame.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::SelectionCursorBox&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/SelectionCursorBox.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ColorKit&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ColorKit.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Interpolators::&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/NinePatch.q.yml">quintessence/AllegroFlare/Elements/NinePatch.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">source_texture</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">left_column_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">center_column_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">right_column_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">top_row_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">middle_row_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">bottom_row_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">a_uv</td>
  <td class="property">std::tuple&lt;float, float, float, float&gt;</td>
</tr>
<tr>
  <td class="property">b_uv</td>
  <td class="property">std::tuple&lt;float, float, float, float&gt;</td>
</tr>
<tr>
  <td class="property">c_uv</td>
  <td class="property">std::tuple&lt;float, float, float, float&gt;</td>
</tr>
<tr>
  <td class="property">d_uv</td>
  <td class="property">std::tuple&lt;float, float, float, float&gt;</td>
</tr>
<tr>
  <td class="property">e_uv</td>
  <td class="property">std::tuple&lt;float, float, float, float&gt;</td>
</tr>
<tr>
  <td class="property">f_uv</td>
  <td class="property">std::tuple&lt;float, float, float, float&gt;</td>
</tr>
<tr>
  <td class="property">g_uv</td>
  <td class="property">std::tuple&lt;float, float, float, float&gt;</td>
</tr>
<tr>
  <td class="property">h_uv</td>
  <td class="property">std::tuple&lt;float, float, float, float&gt;</td>
</tr>
<tr>
  <td class="property">i_uv</td>
  <td class="property">std::tuple&lt;float, float, float, float&gt;</td>
</tr>
<tr>
  <td class="property">mesh</td>
  <td class="property">std::vector&lt;ALLEGRO_VERTEX&gt;</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::vector&lt;ALLEGRO_VERTEX&gt;</td>
  <td class="method"><b>get_mesh</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>build_mesh</b>()</td>
</tr>
<tr>
  <td class="private_method">std::vector&lt;ALLEGRO_VERTEX&gt;</td>
  <td class="private_method"><b>build_vertices_for_rect</b>(float x=0.0f, float y=0.0f, float w=0.0f, float h=0.0f, float u1=0.0f, float v1=0.0f, float u2=1.0f, float v2=1.0f)</td>
</tr>
<tr>
  <td class="private_method">std::vector&lt;ALLEGRO_VERTEX&gt;</td>
  <td class="private_method"><b>build_vertices_for_rect2</b>(float x=0.0f, float y=0.0f, float w=0.0f, float h=0.0f, std::tuple&lt;float, float, float, float&gt; uv={ 0, 0, 0, 0 })</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VERTEX&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/NotificationRenderer.q.yml">quintessence/AllegroFlare/Elements/NotificationRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">notification</td>
  <td class="property">AllegroFlare::Elements::Notifications::Base*</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_box</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Notifications::Base*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Notifications/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::NotificationRenderers::AchievementUnlocked&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Notifications::AchievementUnlocked&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Notifications/AchievementUnlocked.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Notifications::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Notifications/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked.q.yml">quintessence/AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">created_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">name</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_achievement_box</b>(std::string title=&quot;[unset-title]&quot;, std::string description=&quot;[unset-description]&quot;)</td>
</tr>
<tr>
  <td class="private_method">int32_t</td>
  <td class="private_method"><b>infer_icon_character_by_status</b>(std::string status=&quot;[unset-status]&quot;)</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_COLOR</td>
  <td class="private_method"><b>infer_icon_color_by_status</b>(std::string status=&quot;[unset-status]&quot;, ALLEGRO_COLOR icon_locked_color=ALLEGRO_COLOR{1, 1, 1, 1}, ALLEGRO_COLOR icon_hidden_color=ALLEGRO_COLOR{1, 1, 1, 1}, ALLEGRO_COLOR icon_achieved_color=ALLEGRO_COLOR{1, 1, 1, 1})</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_item_title_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_item_description_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_icon_font</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_unicode_character</b>(ALLEGRO_FONT* font=nullptr, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1}, int x=0, int y=0, uint32_t icon=61444, int flags=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MotionFX::Sparkles2&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MotionFX/Sparkles2.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Notifications/AchievementUnlocked.q.yml">quintessence/AllegroFlare/Elements/Notifications/AchievementUnlocked.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">name</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Notifications::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Notifications/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Notifications/Base.q.yml">quintessence/AllegroFlare/Elements/Notifications/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">created_at</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_age</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::vector&lt;std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_time&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/NotificationsRenderer.q.yml">quintessence/AllegroFlare/Elements/NotificationsRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">notifications</td>
  <td class="property">std::vector&lt;AllegroFlare::Elements::Notifications::Base*&gt;</td>
</tr>
<tr>
  <td class="property">surface_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">notification_box_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">notification_box_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">notification_vertical_gutter</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::NotificationRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/NotificationRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Notifications::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Notifications/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/PlayingCards/Card.q.yml">quintessence/AllegroFlare/Elements/PlayingCards/Card.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">value</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">suit</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/PlayingCards/Deck.q.yml">quintessence/AllegroFlare/Elements/PlayingCards/Deck.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">cards</td>
  <td class="property">std::vector&lt;AllegroFlare::Elements::PlayingCards::Card&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>put_card_on_top</b>(AllegroFlare::Elements::PlayingCards::Card card={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>shuffle</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::PlayingCards::Card</td>
  <td class="method"><b>draw_card</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>empty</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>clear</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>num_cards</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;AllegroFlare::Elements::PlayingCards::Card&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Elements/PlayingCards/Card.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::PlayingCards::Card&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Elements/PlayingCards/Card.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::shuffle&quot;, &quot;headers&quot;=&gt;[&quot;random&quot;, &quot;algorithm&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/PlayingCards/DeckFactory.q.yml">quintessence/AllegroFlare/Elements/PlayingCards/DeckFactory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">AllegroFlare::Elements::PlayingCards::Deck</td>
  <td class="method"><b>generate_standard_52_card_deck</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::PlayingCards::Deck&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/PlayingCards/Deck.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/RollingCredits/RollingCredits.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/RollingCredits.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">sections</td>
  <td class="property">std::vector&lt;AllegroFlare::Elements::RollingCredits::Sections::Base*&gt;</td>
</tr>
<tr>
  <td class="property">surface_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y_offset</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">section_separator_margin</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height_calculated</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_sections</b>(std::vector&lt;AllegroFlare::Elements::RollingCredits::Sections::Base*&gt; sections={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>append_section</b>(AllegroFlare::Elements::RollingCredits::Sections::Base* section=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>append_sections</b>(std::vector&lt;AllegroFlare::Elements::RollingCredits::Sections::Base*&gt; sections_to_append={})</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>calculate_height</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>render_or_calculate_height</b>(bool only_calculate_height_dont_render=false)</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Header&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Header.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::SectionRenderers::Header&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/SectionRenderers/Header.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::ColumnWithLabels&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/ColumnWithLabels.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::SectionRenderers::ColumnWithLabels&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/SectionRenderers/ColumnWithLabels.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Text&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Text.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::SectionRenderers::Text&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/SectionRenderers/Text.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::SectionRenderers::LegalText&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/SectionRenderers/LegalText.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::LegalText&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/LegalText.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Spacer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Spacer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::SectionRenderers::Multicolumn&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/SectionRenderers/Multicolumn.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Multicolumn&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Multicolumn.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/RollingCredits/SectionFactory.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/SectionFactory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">spacer_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">section_spacer_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">DEFAULT_SPACER_WIDTH</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">DEFAULT_SECTION_SPACER_WIDTH</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_spacer_width</b>(int spacer_width=DEFAULT_SPACER_WIDTH)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_section_spacer_width</b>(int section_spacer_width=DEFAULT_SECTION_SPACER_WIDTH)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::RollingCredits::Sections::ColumnWithLabels*</td>
  <td class="method"><b>create_column_with_labels</b>(std::vector&lt;std::tuple&lt;std::string, std::string&gt;&gt; elements={})</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::RollingCredits::Sections::Header*</td>
  <td class="method"><b>create_header</b>(std::string text={})</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::RollingCredits::Sections::Text*</td>
  <td class="method"><b>create_text</b>(std::string text={}, std::string alignment=AllegroFlare::Elements::RollingCredits::Sections::Text::ALIGN_LEFT)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::RollingCredits::Sections::Spacer*</td>
  <td class="method"><b>create_spacer</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::RollingCredits::Sections::Spacer*</td>
  <td class="method"><b>create_section_spacer</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::RollingCredits::Sections::Multicolumn*</td>
  <td class="method"><b>create_allegro5_contributors_list</b>(int num_columns=3)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Elements::RollingCredits::Sections::Base*&gt;</td>
  <td class="method"><b>create_standard_disclaimers_text</b>(std::string company_name=&quot;this company&quot;, std::vector&lt;std::string&gt; non_endorced_software_and_software_company_names={})</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Header&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Header.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::ColumnWithLabels&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/ColumnWithLabels.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Text&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Text.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::LegalText&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/LegalText.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Spacer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Spacer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Multicolumn&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Multicolumn.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AllegroContributorsList&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AllegroContributorsList.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::LegalClauseGenerator&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/LegalClauseGenerator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/Base.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">float</td>
  <td class="method"><b>render</b>(bool only_calculate_height_dont_render=false)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::vector&lt;std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/ColumnWithLabels.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/ColumnWithLabels.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">elements</td>
  <td class="property">std::vector&lt;std::tuple&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">gutter_width</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">float</td>
  <td class="method"><b>render</b>(bool only_calculate_height_dont_render=false)</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::SectionRenderers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/SectionRenderers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::tuple&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;tuple&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/Header.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/Header.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">float</td>
  <td class="method"><b>render</b>(bool only_calculate_height_dont_render=false)</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::SectionRenderers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/SectionRenderers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/LegalText.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/LegalText.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">alignment</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">max_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">_multiline_text_line_number</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">float</td>
  <td class="method"><b>render</b>(bool only_calculate_height_dont_render=false)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>multiline_text_draw_callback</b>(int line_num=0, const char* line=nullptr, int size=0, void* extra=nullptr)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>count_num_lines_will_render</b>(ALLEGRO_FONT* font=nullptr, float max_width=0.0f, std::string text=&quot;[unset-text]&quot;)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_al_alignment</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_x_offset_by_alignment</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::SectionRenderers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/SectionRenderers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Text&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Text.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/Multicolumn.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/Multicolumn.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">elements</td>
  <td class="property">std::vector&lt;std::vector&lt;std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">element_alignment</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">gutter_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">draw_debugging_guides</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_element_alignment</b>(std::string element_alignment=&quot;[unset-element_alignment]&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>valid_element_alignment</b>(std::string element_alignment=&quot;[unset-element_alignment]&quot;)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>infer_al_text_alignment</b>(std::string element_alignment=&quot;[unset-element_alignment]&quot;)</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_text_alignment_x_offset</b>(std::string element_alignment=&quot;[unset-element_alignment]&quot;)</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>render</b>(bool only_calculate_height_dont_render=false)</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::SectionRenderers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/SectionRenderers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_line&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::max_element&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Useful&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/Text.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/Text.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">alignment</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">max_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">_multiline_text_line_number</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">float</td>
  <td class="method"><b>render</b>(bool only_calculate_height_dont_render=false)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>multiline_text_draw_callback</b>(int line_num=0, const char* line=nullptr, int size=0, void* extra=nullptr)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>count_num_lines_will_render</b>(ALLEGRO_FONT* font=nullptr, float max_width=0.0f, std::string text=&quot;[unset-text]&quot;)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_al_alignment</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_x_offset_by_alignment</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::SectionRenderers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/SectionRenderers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Text&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Text.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/RollingCredits/Sections/Base.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/Sections/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::vector&lt;std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/RollingCredits/Sections/ColumnWithLabels.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/Sections/ColumnWithLabels.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">elements</td>
  <td class="property">std::vector&lt;std::tuple&lt;std::string, std::string&gt;&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::tuple&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;tuple&quot;, &quot;string&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/RollingCredits/Sections/Header.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/Sections/Header.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/RollingCredits/Sections/LegalText.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/Sections/LegalText.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">alignment</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">ALIGN_LEFT</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">ALIGN_RIGHT</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">ALIGN_CENTER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/RollingCredits/Sections/Multicolumn.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/Sections/Multicolumn.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">elements</td>
  <td class="property">std::vector&lt;std::vector&lt;std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::vector&lt;std::vector&lt;std::string&gt;&gt;</td>
  <td class="method"><b>split_into_columns</b>(std::vector&lt;std::string&gt; names={}, int num_columns=3)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/RollingCredits/Sections/Spacer.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/Sections/Spacer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">height_px</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_height_px</b>(int height_px=100)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/RollingCredits/Sections/Text.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/Sections/Text.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">alignment</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">ALIGN_LEFT</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">ALIGN_RIGHT</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">ALIGN_CENTER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Score.q.yml">quintessence/AllegroFlare/Elements/Score.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">score</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_score_str</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::setfill&quot;, &quot;headers&quot;=&gt;[&quot;iomanip&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Scrollbar.q.yml">quintessence/AllegroFlare/Elements/Scrollbar.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">position</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">bar_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">handle_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">handle_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">rail_thickness</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">handle_thickness</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/SelectionCursorBox.q.yml">quintessence/AllegroFlare/Elements/SelectionCursorBox.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">position</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">position_destination</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">size</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">size_destination</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">padding</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">core_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">roundness</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">thickness</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">reposition_multiplier</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">last_repositioned_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">DEFAULT_CURSOR_REPOSITION_MULTIPLIER</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>reposition_to</b>(float x=0.0f, float y=0.0f, float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>resize_to</b>(float x=0.0f, float y=0.0f, float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_position</b>(float x=0.0f, float y=0.0f, float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_position_quietly</b>(float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_size</b>(float x=0.0f, float y=0.0f, float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_size_quietly</b>(float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_padding</b>(float padding_x=0.0f, float padding_y=0.0f, float time_now=0 /* this arg currently not used */)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>update_last_repositioned_at</b>(float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_COLOR</td>
  <td class="private_method"><b>build_cursor_color</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_cursor_rectangle</b>(float x=0.0f, float y=0.0f, float w=0.0f, float h=0.0f, float padding_x=0.0f, float padding_y=0.0f)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_cursor</b>()</td>
</tr>
<tr>
  <td class="private_method">float</td>
  <td class="private_method"><b>infer_cursor_change_age</b>(float time_now=al_get_time())</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Stopwatch.q.yml">quintessence/AllegroFlare/Elements/Stopwatch.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">timer</td>
  <td class="property">AllegroFlare::Timer*</td>
</tr>
<tr>
  <td class="property">font_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">DEFAULT_FONT_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_FONT_SIZE</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>fit_placement_width_and_height_to_stopwatch</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>build_ellapsed_time_str</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TimerFormatter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TimerFormatter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Storyboard.q.yml">quintessence/AllegroFlare/Elements/Storyboard.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">pages</td>
  <td class="property">std::vector&lt;AllegroFlare::Elements::StoryboardPages::Base *&gt;</td>
</tr>
<tr>
  <td class="property">background</td>
  <td class="property">AllegroFlare::Elements::Backgrounds::Base*</td>
</tr>
<tr>
  <td class="property">button_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">current_page_num</td>
  <td class="property">intptr_t</td>
</tr>
<tr>
  <td class="property">can_advance_to_next_page</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">can_advance_started_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">finished</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>reset</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>permit_advancing_page</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>deny_advancing_page</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>advance</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>advance_page</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>render_next_button</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>infer_has_no_pages</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>infer_at_last_page</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>infer_at_or_past_last_page</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>infer_at_last_advance</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::StoryboardPages::Base*</td>
  <td class="method"><b>infer_current_page</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_next_button_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_multiline_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min, std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator::&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/StoryboardPages/AdvancingText.q.yml">quintessence/AllegroFlare/Elements/StoryboardPages/AdvancingText.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">top_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">left_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">right_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">line_height_multiplier</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">line_height_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">revealed_characters_count</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">all_characters_revealed_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">wait_duration_after_all_characters_are_revealed</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">DEFAULT_FONT_NAME</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_FONT_SIZE</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>start</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>advance</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>generate_revealed_text</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>reveal_all_characters</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>all_characters_are_revealed</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_next_button_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_multiline_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min, std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/StoryboardPages/Base.q.yml">quintessence/AllegroFlare/Elements/StoryboardPages/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">finished</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>start</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>advance</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/StoryboardPages/ClubCattLogo.q.yml">quintessence/AllegroFlare/Elements/StoryboardPages/ClubCattLogo.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">model_bin</td>
  <td class="property">AllegroFlare::ModelBin*</td>
</tr>
<tr>
  <td class="property">clubcatt_logo</td>
  <td class="property">AllegroFlare::ClubCatt::Logo</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>disable_clearing_background_color</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>start</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>advance</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ClubCatt::Logo&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ClubCatt/Logo.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/StoryboardPages/Image.q.yml">quintessence/AllegroFlare/Elements/StoryboardPages/Image.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">reveal_style</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">duration_to_advance_sec</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">started_at</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>start</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>advance</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_age</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>modify_params_for_hide</b>(AllegroFlare::Placement2D* place=nullptr, ALLEGRO_COLOR* color=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>modify_params_for_reveal</b>(AllegroFlare::Placement2D* place=nullptr, ALLEGRO_COLOR* color=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min, std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator::&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator::&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/StoryboardPages/ImageWithAdvancingText.q.yml">quintessence/AllegroFlare/Elements/StoryboardPages/ImageWithAdvancingText.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["Replace advancing text logic with Elements/AdvancingText (so that a different text reveal speed can be used)", "Rework the concept of \"reveal_image\" setting \"image_fade_in_duration_sec\" to 0.0f, and \"start\" setting it back"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">image_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">image_placement</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">top_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">left_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">right_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">line_height_multiplier</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">line_height_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">image_fade_in_duration_sec</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">revealed_characters_count</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">started_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">all_characters_revealed_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">wait_duration_after_all_characters_are_revealed</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">DEFAULT_FONT_NAME</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_FONT_SIZE</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>start</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>advance</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>generate_revealed_text</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>reveal_all_characters</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>reveal_image</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>all_characters_are_revealed</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_age</b>(float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_next_button_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_time&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_multiline_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min, std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MotionKit&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MotionKit.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/StoryboardPages/Text.q.yml">quintessence/AllegroFlare/Elements/StoryboardPages/Text.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">top_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">left_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">right_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">line_height_multiplier</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">line_height_padding</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>start</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>advance</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_multiline_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Text.q.yml">quintessence/AllegroFlare/Elements/Text.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">DEFAULT_FONT_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_FONT_SIZE</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>fit_placement_width_and_height_to_text</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/TextMessageBubble.q.yml">quintessence/AllegroFlare/Elements/TextMessageBubble.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">callout_on_left</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_text_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_multiline_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/UI/IntSpinner.q.yml">quintessence/AllegroFlare/Elements/UI/IntSpinner.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">number</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">state</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">state_is_busy</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">state_changed_at</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_centered_text</b>(std::string text=&quot;[unset-text]&quot;, float x=1920/2, float y=1080/3, ALLEGRO_COLOR text_color=ALLEGRO_COLOR{0.0, 0.0, 0.0, 1.0}, float _font_size=-34)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_triangle_right</b>(float x=0.0f, float y=0.0f, float width=0.0f, float height=0.0f, ALLEGRO_COLOR color=ALLEGRO_COLOR{0.0f, 0.0f, 0.0f, 0.0f})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_triangle_up</b>(float x=0.0f, float y=0.0f, float width=0.0f, float height=0.0f, ALLEGRO_COLOR color=ALLEGRO_COLOR{0.0f, 0.0f, 0.0f, 0.0f})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_triangle_down</b>(float x=0.0f, float y=0.0f, float width=0.0f, float height=0.0f, ALLEGRO_COLOR color=ALLEGRO_COLOR{0.0f, 0.0f, 0.0f, 0.0f})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_state</b>(uint32_t state=STATE_UNDEF, bool override_if_busy=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update_state</b>(float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_valid_state</b>(uint32_t state=STATE_UNDEF)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_state</b>(uint32_t possible_state=STATE_UNDEF)</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_current_state_age</b>(float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>(float _font_size=-34)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/UI/SliderToggle.q.yml">quintessence/AllegroFlare/Elements/UI/SliderToggle.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">onoff</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">on_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">off_text</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_pill</b>(std::string text=&quot;[unset-text]&quot;, float x=1920/2, float y=1080/3, float w=140, float h=60, ALLEGRO_COLOR box_color=ALLEGRO_COLOR{1.0, 1.0, 1.0, 1.0}, ALLEGRO_COLOR text_color=ALLEGRO_COLOR{0.0, 0.0, 0.0, 1.0}, float _font_size=-34)</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>(float _font_size=-34)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/WorldMapViewer.q.yml">quintessence/AllegroFlare/Elements/WorldMapViewer.q.yml</h3>
    <h3>Overview</h3>
    <p>{"This component is useful for things like"=>["Overworld Map e.g. Mario World", "World Map a-la Zelda tears of kingdom", "World Map a-la LA Noir", "Level Map a-la Super Metroid", "Possibly the World Map in MegaMan"]}</p>    <p>The component does come with a correlated Screen, but can also be inserted into other screens such as a quest log or similar. Any screen that has a map view could theoretically use this component.</p>    <p>{"todos"=>["Consider mid-state changes like pausing/unpausing while the cursor is repositioning, should it snap to the destination? etc?"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">map_view_place</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">map</td>
  <td class="property">AllegroFlare::WorldMaps::Maps::Basic*</td>
</tr>
<tr>
  <td class="property">map_placement</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">current_page_index_num</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">document_camera</td>
  <td class="property">AllegroFlare::Camera2D</td>
</tr>
<tr>
  <td class="property">cursor</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">target_cursor</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">cursor_size</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cursor_edge_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cursor_velocity_magnitude_axis_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cursor_velocity_magnitude_axis_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cursor_max_velocity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">document_camera_target_zoom</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">document_camera_zoom_levels</td>
  <td class="property">std::vector&lt;float&gt;</td>
</tr>
<tr>
  <td class="property">document_camera_zoom_level_cursor</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">wrap_zoom</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">camera_velocity_magnitude_axis_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">camera_velocity_magnitude_axis_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">camera_range_x1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">camera_range_y1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">camera_range_x2</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">camera_range_y2</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">camera_max_velocity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">state</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">state_is_busy</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">state_changed_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">DEFAULT_CAMERA_RANGE_X1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">DEFAULT_CAMERA_RANGE_X2</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">DEFAULT_CAMERA_RANGE_Y1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">DEFAULT_CAMERA_RANGE_Y2</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_bitmap_bin</b>(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_font_bin</b>(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>fit_and_position_map</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>fit_camera_range_to_map_dimensions</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>reset</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>reset_document_camera</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>reset_document_camera_range_to_defaults</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_switch_in</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_switch_out</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>cursor_control_is_user</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>step_zoom_in</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>step_zoom_out</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_camera_moving_up</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_camera_moving_down</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>unset_camera_moving_vertical</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_camera_moving_left</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_camera_moving_right</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>unset_camera_moving_horizontal</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>unset_camera_moving</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_cursor_moving_up</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_cursor_moving_down</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>unset_cursor_moving_vertical</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_cursor_moving_left</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_cursor_moving_right</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>unset_cursor_moving_horizontal</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>unset_cursor_moving</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_map</b>(AllegroFlare::WorldMaps::Maps::Basic* map=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>snap_cursor_to_origin_or_primary_point_of_interest</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>snap_cursor_to_coordinate</b>(float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_to_coordinate</b>(float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_to_location</b>(std::string location_id=&quot;[unset-location_id]&quot;)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>render_map</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_cursor</b>(float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>infer_no_pages_are_present</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">std::pair&lt;bool, std::string&gt;</td>
  <td class="method"><b>infer_focused_location_label</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>render_page_numbers</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>render_coordinates</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_zoom_scale</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_empty_state</b>(AllegroFlare::FontBin* font_bin=nullptr, std::string placeholder_text=&quot;Empty&quot;)</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>calc_zoom_position_relative_min_max</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_state</b>(uint32_t state=STATE_UNDEF, bool override_if_busy=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update_state</b>(float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_valid_state</b>(uint32_t state=STATE_UNDEF)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_state</b>(uint32_t possible_state=STATE_UNDEF)</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_current_state_age</b>(float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_small_ui_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;CatDetective::Chronicle::Panes::Base&quot;, &quot;headers&quot;=&gt;[&quot;CatDetective/Chronicle/Panes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_font_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_ttf_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_ttf.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;CatDetective::Chronicle::Panes::CrimeSummaryPage&quot;, &quot;headers&quot;=&gt;[&quot;CatDetective/Chronicle/Panes/CrimeSummaryPage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Random&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Random.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::minmax_element&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::clamp&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::WorldMaps::Maps::Basic&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/WorldMaps/Maps/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::WorldMapRenderers::Basic&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/WorldMapRenderers/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::WorldMaps::Locations::Basic&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/WorldMaps/Locations/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::WorldMaps::Locations::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/WorldMaps/Locations/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::abs&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/EncoderDecoders/Base62.q.yml">quintessence/AllegroFlare/EncoderDecoders/Base62.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">CHARACTERS_LOWERCASE_FIRST</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>encode</b>(int value=0, std::size_t zerofill_count=0)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>decode</b>(std::string value=&quot;0&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::size_t&quot;, &quot;headers&quot;=&gt;[&quot;cstddef&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/EventEmitter.q.yml">quintessence/AllegroFlare/EventEmitter.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_source</td>
  <td class="property">ALLEGRO_EVENT_SOURCE</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_event</b>(uint32_t type=0, intptr_t data1=0, intptr_t data2=0, intptr_t data3=0, intptr_t data4=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_router_event</b>(uint32_t router_event=0, AllegroFlare::RouteEventDatas::Base* route_event_data=nullptr, float time_now=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_event_to_toggle_fullscreen</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_event_to_enable_fullscreen</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_event_to_disable_fullscreen</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_event_to_set_display_size</b>(int width=1920, int height=1080)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_dialog_open_event</b>(std::string dialog_node_name_to_open=&quot;[unset-dialog_node_name_to_open]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_screen_activated_event</b>(std::string screen_identifier=&quot;[unset-screen_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_activate_dialog_node_by_name_event</b>(std::string dialog_node_name_to_activate=&quot;[unset-dialog_node_name_to_activate]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_load_dialog_file</b>(std::string dialog_yaml_filename_to_load=&quot;[unset-dialog_yaml_filename_to_load]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>destroy_dialog_open_event_data</b>(ALLEGRO_USER_EVENT* user_event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_dialog_advance_event</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_dialog_close_event</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_dialog_switched_in_event</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_dialog_switched_out_event</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_switch_screen_event</b>(std::string screen_identifier_to_switch_to=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_exit_game_event</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_show_input_hints_bar_event</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_hide_input_hints_bar_event</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_set_input_hints_bar_event</b>(std::vector&lt;std::string&gt; tokens={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_set_input_hints_bar_text_opacity_event</b>(float opacity=1.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_set_input_hints_bar_backfill_opacity_event</b>(float opacity=0.35f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_set_input_hints_bar_height_event</b>(float height=60.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_set_shader_target_for_hotloading_event</b>(AllegroFlare::Shaders::Base* shader=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_poll_hotload_shader_source_for_change_event</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_hotload_shader_source_event</b>(std::string vertex_shader_source=&quot;[unset-vertex_shader_source]&quot;, std::string fragment_shader_source=&quot;[unset-fragment_shader_source]&quot;, AllegroFlare::Shaders::Base* shader=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_unlock_achievement_event</b>(std::string achievement_name=&quot;[unset-achievement_name]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_achievement_unlocked_game_event</b>(std::string achievement_name=&quot;[unset-achievement_name]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_post_unlocked_achievement_notification_event</b>(std::string achievement_name=&quot;[unset-achievement_name]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_play_sound_effect_event</b>(std::string sound_effect_identifier=&quot;[unset-sound-effect-identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_play_music_track_event</b>(std::string music_track_identifier=&quot;[unset-music-track-identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_stop_all_music_tracks_event</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_game_event</b>(AllegroFlare::GameEvent game_event={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_offset_primary_timer_event</b>(int microseconds=(16667 / 10))</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>TODO</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_USER_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_ROUTER&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_TOGGLE_FULLSCREEN&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_ENABLE_FULLSCREEN&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_DISABLE_FULLSCREEN&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_POLL_HOTLOAD_SHADER_SOURCE_FOR_CHANGE&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_SET_SHADER_TARGET_FOR_HOTLOADING&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_HOTLOAD_SHADER_SOURCE&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_POST_ACHIEVEMENT_UNLOCKED_NOTIFICATION&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_SHOW_INPUT_HINTS_BAR&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_HIDE_INPUT_HINTS_BAR&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR_TEXT_OPACITY&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR_BACKFILL_OPACITY&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_STOP_ALL_MUSIC_TRACKS&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR_HEIGHT&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_UNLOCK_ACHIEVEMENT&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT_SOURCE&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_EXIT_GAME&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_SWITCH_SCREEN&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_OFFSET_PRIMARY_TIMER&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEvent&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::RouteEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/RouteEventDatas/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::DialogEventDatas::SpawnDialogByName&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/DialogEventDatas/SpawnDialogByName.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogSystem::DialogEventDatas::LoadDialogNodeBankFromFile&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogSystem/DialogEventDatas/LoadDialogNodeBankFromFile.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::ScreenActivated&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/ScreenActivated.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::AchievementUnlocked&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/AchievementUnlocked.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/FlipSync.q.yml">quintessence/AllegroFlare/FlipSync.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">currently_capturing_flip_sync</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">flip_metrics</td>
  <td class="property">std::vector&lt;std::pair&lt;double, double&gt;&gt;</td>
</tr>
<tr>
  <td class="property">size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">head</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_size</b>(int size=64*4)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>start_flip_capture</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>end_flip_capture</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>head_delta</b>(int delta=0)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;double&gt;</td>
  <td class="method"><b>get_last_n_capture_durations</b>(int count=64)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/FrameAnimation/Animation.q.yml">quintessence/AllegroFlare/FrameAnimation/Animation.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["Currently, frame 0 id is a \"dead\" frame, and is skipped over when. This should be updated to have a better mechanism, including an option to display the dead frame.  Also, some animations will intermittently flash the 0 frame. I'm not sure what the cause is but it needs to be looked into. Probably \"empty\" frame ids shoudl be returned as -1 and checked accordingly.", "Add PLAYMODE_FORWARD_ONCE_AND_HOLD_LAST_FRAME"]}</p>    <p>{"body_markdown"=>"## Terminology\n- cell:          an individual image from the sprite_sheet\n- frame:         an individual AllegroFlare::FrameAnimation::Frame* from the frames in this animation\n- frame_num:     the sequential number of a frame in an animation, starting with 0\n                 (excluding any looping or ping-ponging)\n- frame_bitmap:  the bitmap image from the frame. A combination of the sprite sheet index num from the frame\n                 and a lookup on the sprite sheet.\n- num_frames:    the number of frames in the animation (excluding any looping or ping-ponging)\n- sprite_sheet_cell_index_num:   the index of the bitmap in the sprite_sheet (was previously named \"frame_id\")\n## Notes"}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">sprite_sheet</td>
  <td class="property">AllegroFlare::FrameAnimation::SpriteSheet*</td>
</tr>
<tr>
  <td class="property">name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">frames</td>
  <td class="property">std::vector&lt;AllegroFlare::FrameAnimation::Frame&gt;</td>
</tr>
<tr>
  <td class="property">playmode</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">playspeed_multiplier</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">playhead</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">finished</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">finished_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>start</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>reset</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_playspeed_multiplier</b>(float playspeed_multiplier=1.0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_num_frames</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_BITMAP*</td>
  <td class="method"><b>get_frame_bitmap_at_time</b>(float time=0.0f)</td>
</tr>
<tr>
  <td class="method">ALLEGRO_BITMAP*</td>
  <td class="method"><b>get_frame_bitmap_now</b>()</td>
</tr>
<tr>
  <td class="method">std::pair&lt;bool, std::tuple&lt;float, float, float, float, float, float&gt;&gt;</td>
  <td class="method"><b>get_frame_alignment_and_anchors_now</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_BITMAP*</td>
  <td class="method"><b>get_frame_alignment_and_anchors_at_time</b>(float time=0.0f)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_sprite_sheet_cell_index_num_now</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_frame_num_now</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_BITMAP*</td>
  <td class="method"><b>get_bitmap_at_frame_num</b>(int frame_num=0)</td>
</tr>
<tr>
  <td class="method">std::tuple&lt;float, float, float, float&gt;</td>
  <td class="method"><b>get_alignment_and_anchors_at_frame_num</b>(int frame_num=0)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::FrameAnimation::Frame*</td>
  <td class="method"><b>get_frame_at</b>(float time=0.0f)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_frame_num_at</b>(float time=0.0f)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_sprite_sheet_cell_index_num_at</b>(float time=0.0f)</td>
</tr>
<tr>
  <td class="private_method">std::tuple&lt;AllegroFlare::FrameAnimation::Frame*, int, int&gt;</td>
  <td class="private_method"><b>get_frame_info_at</b>(float time=0.0f)</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>calculate_duration</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::Frame&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/Frame.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::SpriteSheet&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/SpriteSheet.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/FrameAnimation/AsepriteSpriteSheetJSONLoader.q.yml">quintessence/AllegroFlare/FrameAnimation/AsepriteSpriteSheetJSONLoader.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["Replace the filename default value with an \"unset\" value"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">sprite_sheet</td>
  <td class="property">AllegroFlare::FrameAnimation::SpriteSheet*</td>
</tr>
<tr>
  <td class="property">load_tag_names_ending_in_bang_char_with_looping_playmode</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">discard_last_bang_char_in_tag_names</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">PLAY_ONCE_BANG_CHAR</td>
  <td class="property">char</td>
</tr>
<tr>
  <td class="property">PLAY_ONCE_AND_HOLD_LAST_FRAME_BANG_CHAR</td>
  <td class="property">char</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::map&lt;std::string, AllegroFlare::FrameAnimation::Animation&gt;</td>
  <td class="method"><b>load</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::FrameAnimation::Frame&gt;</td>
  <td class="method"><b>_build_animation_frames_for</b>(uint32_t start_frame=0, uint32_t end_frame=0, std::map&lt;int, int&gt; frame_data={})</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>ends_in_play_once_bang_char</b>(std::string str=&quot;[unset-str]&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>ends_in_play_once_and_hold_bang_char</b>(std::string str=&quot;[unset-str]&quot;)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>strip_appended_bang_char</b>(std::string str=&quot;[unset-str]&quot;)</td>
</tr>
<tr>
  <td class="method">uint32_t</td>
  <td class="method"><b>_get_playmode_from_direction</b>(std::string direction=&quot;[unset-direction]&quot;, bool playmode_is_looped=true, bool hold_last_frame=false)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::UsefulPHP&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/UsefulPHP.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;nlohmann::json&quot;, &quot;headers&quot;=&gt;[&quot;lib/nlohmann/json.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Errors&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Errors.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::Animation&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/Animation.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::Frame&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/Frame.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::SpriteSheet&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/SpriteSheet.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::Errors&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/Errors.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/FrameAnimation/Book.q.yml">quintessence/AllegroFlare/FrameAnimation/Book.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["move \"sprite_sheet_scale\" property to be listed after \"sprite_sheet_cell_width\" and \"sprite_sheet_cell_height\""]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">png_source_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">json_source_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">sprite_sheet_scale</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">sprite_sheet_cell_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">sprite_sheet_cell_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">sprite_sheet</td>
  <td class="property">AllegroFlare::FrameAnimation::SpriteSheet*</td>
</tr>
<tr>
  <td class="property">dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::FrameAnimation::Animation&gt;</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_png_source_filename</b>(std::string png_source_filename=&quot;[unset-png_source_filename]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_json_source_filename</b>(std::string json_source_filename=&quot;[unset-json_source_filename]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_sprite_sheet_scale</b>(int sprite_sheet_scale=5)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_sprite_sheet_cell_width</b>(int sprite_sheet_cell_width=48)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_sprite_sheet_cell_height</b>(int sprite_sheet_cell_height=48)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::FrameAnimation::SpriteSheet*</td>
  <td class="method"><b>get_sprite_sheet</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_BITMAP*</td>
  <td class="method"><b>get_still_frame</b>(std::string tag_name=&quot;[unset-tag_name]&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>animation_exists</b>(std::string name=&quot;[unset-name]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::FrameAnimation::Animation</td>
  <td class="method"><b>find_animation_by_name</b>(std::string name=&quot;[unset-name]&quot;)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>_build_placeholder_dictionary</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::Animation&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/Animation.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::SpriteSheet&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/SpriteSheet.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Errors&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Errors.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::UsefulPHP&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/UsefulPHP.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::AsepriteSpriteSheetJSONLoader&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/AsepriteSpriteSheetJSONLoader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::Animation&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/Animation.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/FrameAnimation/Frame.q.yml">quintessence/AllegroFlare/FrameAnimation/Frame.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">index</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">duration</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">align_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">align_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">align_in_container_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">align_in_container_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">anchor_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">anchor_y</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/FrameAnimation/SpriteStripAssembler.q.yml">quintessence/AllegroFlare/FrameAnimation/SpriteStripAssembler.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmaps</td>
  <td class="property">std::vector&lt;ALLEGRO_BITMAP*&gt;</td>
</tr>
<tr>
  <td class="property">sprite_strip</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">cell_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cell_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">assembled</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>get_initialized</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_BITMAP*</td>
  <td class="method"><b>get_sprite_strip</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_cell_width</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_cell_height</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>assemble</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GameConfigurations/Base.q.yml">quintessence/AllegroFlare/GameConfigurations/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">AllegroFlare::Levels::Base*</td>
  <td class="method"><b>load_level_by_identifier</b>(std::string level_identifier=&quot;[unset-level_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
  <td class="method"><b>build_level_list_for_level_select_screen_by_identifier</b>(std::string identifier=&quot;[unset-identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::DialogTree::NodeBank</td>
  <td class="method"><b>build_dialog_bank_by_identifier</b>(std::string identifier=&quot;[unset-identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeBank&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeBank.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Levels::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Levels/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Achievement&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Achievement.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GameConfigurations/Complete.q.yml">quintessence/AllegroFlare/GameConfigurations/Complete.q.yml</h3>
    <h3>Overview</h3>
    <p>{"notes"=>["this Complete class actually acts as a base class, but it's not clear and might appear to be final derived from GameConfigurations/Base. I'm not sure how to resolve this if it will require a renaming or what.", "This Complete class is intended to be paired with the Runners/Complete class"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">runner</td>
  <td class="property">AllegroFlare::Runners::Complete*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>app_icon_1024_filename</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>app_title</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>title_screen_title</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>primary_display_icon_filename</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>handle_game_event</b>(AllegroFlare::GameEvent* game_event=nullptr)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Levels::Base*</td>
  <td class="method"><b>load_level_by_identifier</b>(std::string level_identifier=&quot;[unset-level_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
  <td class="method"><b>build_level_list_for_level_select_screen_by_identifier</b>(std::string identifier=&quot;[unset-identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::DialogTree::NodeBank</td>
  <td class="method"><b>build_dialog_bank_by_identifier</b>(std::string identifier=&quot;[unset-identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::tuple&lt;std::string, AllegroFlare::Achievement*, bool, bool&gt;&gt;</td>
  <td class="method"><b>build_achievements</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Elements::StoryboardPages::Base *&gt;</td>
  <td class="method"><b>create_intro_logos_storyboard_pages</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::Backgrounds::Base*</td>
  <td class="method"><b>create_shared_background</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::Backgrounds::Base*</td>
  <td class="method"><b>create_shared_foreground</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Elements::StoryboardPages::Base *&gt;</td>
  <td class="method"><b>create_new_game_intro_storyboard_pages</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Screens::Gameplay*</td>
  <td class="method"><b>create_primary_gameplay_screen</b>(AllegroFlare::Runners::Complete* runner=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>handle_primary_gameplay_screen_finished</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>handle_arbitrary_storyboard_screen_finished</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Elements::StoryboardPages::Base *&gt;</td>
  <td class="method"><b>create_arbitrary_storyboard_pages_by_identifier</b>(std::string identifier=&quot;[unset-identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Elements::StoryboardPages::Base *&gt;</td>
  <td class="method"><b>create_intro_storyboard_pages</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::LoadASavedGame::SaveSlots::Base*&gt;</td>
  <td class="method"><b>build_save_slots_for_load_a_saved_game_screen</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load_game_progress_and_state_info_into_universe</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>save_game_progress_and_state_info</b>(AllegroFlare::GameSession* game_session=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load_game_progress_and_state_info</b>(AllegroFlare::GameSession* game_session=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>setup_new_game_progress_and_state_info</b>(AllegroFlare::GameSession* game_session=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load_last_played_session_or_start_new</b>(AllegroFlare::GameSession* game_session=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load_audio_controller</b>(AllegroFlare::AudioController* audio_controller=nullptr)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
  <td class="method"><b>build_title_screen_menu_options</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>build_copyright_text</b>(ReleaseInfo* release_info=nullptr)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Elements::RollingCredits::Sections::Base*&gt;</td>
  <td class="method"><b>build_rolling_credits_sections</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeBank&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeBank.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Levels::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Levels/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Achievement&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Achievement.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameProgressAndStateInfos::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameProgressAndStateInfos/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameSession&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameSession.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::SectionFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/SectionFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::LoadASavedGame::SaveSlots::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/LoadASavedGame/SaveSlots/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ReleaseInfo&quot;, &quot;headers&quot;=&gt;[&quot;ReleaseInfo.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::ClearToColor&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/ClearToColor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::None&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/None.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEvent&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::ScreenActivated&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/ScreenActivated.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TemplatedText&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TemplatedText.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::UnicodeCharacters&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/UnicodeCharacters.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::AchievementUnlocked&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/AchievementUnlocked.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Gameplay&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Gameplay.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Runners::Complete&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Runners/Complete.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AudioController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AudioController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ForwardDeclarations::AllegroFlare::Runners::Complete&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ForwardDeclarations/AllegroFlare/Runners/Complete.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ForwardDeclarations::AllegroFlare::GameConfigurations::Complete&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ForwardDeclarations/AllegroFlare/GameConfigurations/Complete.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GameEvent.q.yml">quintessence/AllegroFlare/GameEvent.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">data</td>
  <td class="property">AllegroFlare::GameEventDatas::Base*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;[unset-possible_type]&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>data_is_type</b>(std::string data_possible_type=&quot;[unset-data_possible_type]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GameEventDatas/AchievementUnlocked.q.yml">quintessence/AllegroFlare/GameEventDatas/AchievementUnlocked.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">achievement_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">NAME</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GameEventDatas/Base.q.yml">quintessence/AllegroFlare/GameEventDatas/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GameEventDatas/ScreenActivated.q.yml">quintessence/AllegroFlare/GameEventDatas/ScreenActivated.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">screen_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">NAME</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GameEventDatas/String.q.yml">quintessence/AllegroFlare/GameEventDatas/String.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">string</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GameEventDatas/VirtualControllerAxisChangeEventData.q.yml">quintessence/AllegroFlare/GameEventDatas/VirtualControllerAxisChangeEventData.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">player</td>
  <td class="property">AllegroFlare::Player*</td>
</tr>
<tr>
  <td class="property">virtual_controller</td>
  <td class="property">AllegroFlare::VirtualControllers::Base*</td>
</tr>
<tr>
  <td class="property">virtual_controller_stick</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">virtual_controller_axis</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">virtual_controller_position</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GameEventDatas/VirtualControllerButtonPressedEventData.q.yml">quintessence/AllegroFlare/GameEventDatas/VirtualControllerButtonPressedEventData.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["consider adding \"is_repeat\""]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">player</td>
  <td class="property">AllegroFlare::Player*</td>
</tr>
<tr>
  <td class="property">virtual_controller</td>
  <td class="property">AllegroFlare::VirtualControllers::Base*</td>
</tr>
<tr>
  <td class="property">virtual_controller_button_num</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GameEventDatas/VirtualControllerButtonReleasedEventData.q.yml">quintessence/AllegroFlare/GameEventDatas/VirtualControllerButtonReleasedEventData.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["consider adding \"is_repeat\""]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">player</td>
  <td class="property">AllegroFlare::Player*</td>
</tr>
<tr>
  <td class="property">virtual_controller</td>
  <td class="property">AllegroFlare::VirtualControllers::Base*</td>
</tr>
<tr>
  <td class="property">virtual_controller_button_num</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GameProgressAndStateInfos/Base.q.yml">quintessence/AllegroFlare/GameProgressAndStateInfos/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>export_to_string</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>import_from_string</b>(std::string data_string=&quot;[unset-data_string]&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GameSession.q.yml">quintessence/AllegroFlare/GameSession.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">started_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">ended_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">active</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">game_progress_and_state_info</td>
  <td class="property">AllegroFlare::GameProgressAndStateInfos::Base*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>start_session</b>(float started_at=al_get_time())</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>end_session</b>(float ended_at=al_get_time())</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_active</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_time&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameProgressAndStateInfos::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameProgressAndStateInfos/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GameplayMechanics/Triggers/Base.q.yml">quintessence/AllegroFlare/GameplayMechanics/Triggers/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">triggered</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>trigger</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>reset</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>on_trigger</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>on_reset</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GameplayMechanics/Triggers/Basic.q.yml">quintessence/AllegroFlare/GameplayMechanics/Triggers/Basic.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>on_trigger</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>on_reset</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameplayMechanics::Triggers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameplayMechanics/Triggers/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Generators/LoremIpsumGenerator.q.yml">quintessence/AllegroFlare/Generators/LoremIpsumGenerator.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">source_text</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>generate_characters</b>(int num_characters=1)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>generate_characters_about</b>(int num_characters=1)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>generate_words</b>(int num_words=1)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>generate_sentences</b>(int num_sentences=1)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>generate_paragraphs</b>(int num_paragraphs=1)</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>generate_source_text</b>()</td>
</tr>
<tr>
  <td class="private_method">std::vector&lt;std::string&gt;</td>
  <td class="private_method"><b>split</b>(std::string text=&quot;&quot;, char delimiter=&#39; &#39;)</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>join</b>(std::vector&lt;std::string&gt; tokens={}, std::string delimiter=&quot;, &quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::php::str_replace&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/UsefulPHP.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Generators/PersonNameGenerator.q.yml">quintessence/AllegroFlare/Generators/PersonNameGenerator.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">random</td>
  <td class="property">AllegroFlare::Random</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">victorian_boy_names</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">victorian_girl_names</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">double_consecutive_t_names</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">next_boy_name_index</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">next_girl_name_index</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">double_consecutive_t_name_index</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>randomize</b>(uint32_t seed=(uint32_t)time(0))</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>generate_boy_name</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>generate_girl_name</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>generate_double_consecutive_t_name</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::string&gt;</td>
  <td class="method"><b>build_double_consecutive_t_name_list</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::string&gt;</td>
  <td class="method"><b>build_victorian_boy_name_list</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::string&gt;</td>
  <td class="method"><b>build_victorian_girl_name_list</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Random&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Random.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GraphicsPipelines/Basic3D/Entity.q.yml">quintessence/AllegroFlare/GraphicsPipelines/Basic3D/Entity.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">model</td>
  <td class="property">AllegroFlare::Model3D*</td>
</tr>
<tr>
  <td class="property">texture</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">placement</td>
  <td class="property">AllegroFlare::Placement3D</td>
</tr>
<tr>
  <td class="property">model_obj_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">model_texture_filename</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Model3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Model3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GraphicsPipelines/Basic3D/Scene.q.yml">quintessence/AllegroFlare/GraphicsPipelines/Basic3D/Scene.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">model_bin</td>
  <td class="property">AllegroFlare::ModelBin*</td>
</tr>
<tr>
  <td class="property">camera</td>
  <td class="property">AllegroFlare::Camera3D</td>
</tr>
<tr>
  <td class="property">entities</td>
  <td class="property">std::vector&lt;AllegroFlare::GraphicsPipelines::Basic3D::Entity&gt;</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::GraphicsPipelines::Basic3D::Entity&gt;</td>
  <td class="method"><b>get_entities_ref</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>add_entity</b>(std::string obj_identifier=&quot;[unset-obj_identifier]&quot;, std::string texture_bitmap_identifier=&quot;[unset-texture_bitmap_identifier]&quot;, AllegroFlare::Vec3D position=AllegroFlare::Vec3D({ 0, 0, 0 }), AllegroFlare::Vec3D rotation=AllegroFlare::Vec3D({ 0, 0, 0 }))</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::Basic3D::Entity&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/Basic3D/Entity.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Base.q.yml">quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ElementID&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ElementID.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Camera3D.q.yml">quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Camera3D.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">camera_3d</td>
  <td class="property">AllegroFlare::Camera3D</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera3D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/DynamicModel3D.q.yml">quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/DynamicModel3D.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">model_3d</td>
  <td class="property">AllegroFlare::Model3D*</td>
</tr>
<tr>
  <td class="property">model_3d_texture</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">placement</td>
  <td class="property">AllegroFlare::Placement3D</td>
</tr>
<tr>
  <td class="property">velocity</td>
  <td class="property">AllegroFlare::Placement3D</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SceneGraph::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SceneGraph/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Model3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Model3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticModel3D.q.yml">quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticModel3D.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">model_3d</td>
  <td class="property">AllegroFlare::Model3D*</td>
</tr>
<tr>
  <td class="property">model_3d_texture</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">placement</td>
  <td class="property">AllegroFlare::Placement3D</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Model3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Model3D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticMultitextureModel3D.q.yml">quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticMultitextureModel3D.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">multitexture_model_3d</td>
  <td class="property">AllegroFlare::MultitextureModel3D*</td>
</tr>
<tr>
  <td class="property">multitexture_model_3d_texture_1</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">multitexture_model_3d_texture_2</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">placement</td>
  <td class="property">AllegroFlare::Placement3D</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MultitextureModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MultitextureModel3D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityFactory.q.yml">quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityFactory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">model_bin</td>
  <td class="property">AllegroFlare::ModelBin*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Camera3D*</td>
  <td class="method"><b>create_camera_3d</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticModel3D*</td>
  <td class="method"><b>create_static_model_3d</b>(std::string model_identifier=&quot;[unset-model_identifier]&quot;, std::string model_texture_identifier=&quot;[unset-model_texture_identifier]&quot;, AllegroFlare::Placement3D placement={})</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Camera3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Camera3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticModel3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityPool.q.yml">quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityPool.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity_pool</td>
  <td class="property">std::unordered_set&lt;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base*&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">int</td>
  <td class="method"><b>num_elements</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>add</b>(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base* entity=nullptr)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>add</b>(std::vector&lt;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base*&gt; entities=)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>remove</b>(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base* entity=nullptr)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>remove</b>(std::vector&lt;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base*&gt; entities={})</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>exists</b>(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base* entity=nullptr)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base*</td>
  <td class="method"><b>find_with_attribute</b>(std::string attribute=&quot;[unset-attribute]&quot;)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base*&gt;</td>
  <td class="method"><b>find_all_with_attribute</b>(std::string attribute=&quot;[unset-attribute]&quot;)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base*&gt;</td>
  <td class="method"><b>select_A</b>(std::string attribute=&quot;[unset-attribute]&quot;)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base*&gt;</td>
  <td class="method"><b>select_B</b>(std::vector&lt;std::string&gt; attributes={})</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base*&gt;</td>
  <td class="method"><b>select_C</b>(std::string attribute=&quot;[unset-attribute]&quot;, std::string parameter=&quot;[unset-parameter]&quot;)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base*&gt;</td>
  <td class="method"><b>select_D</b>(std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt; attribute_param_pairs={})</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base*&gt;</td>
  <td class="method"><b>select_E</b>(std::string attribute=&quot;[unset-attribute]&quot;, std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt; attribute_param_pairs={})</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base*&gt;</td>
  <td class="method"><b>select_F</b>(std::vector&lt;std::string&gt; attributes={}, std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt; attribute_param_pairs={})</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::find&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::unordered_set&quot;, &quot;headers&quot;=&gt;[&quot;unordered_set&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityRenderFlags.q.yml">quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityRenderFlags.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">RENDER_WITH_SKYBOX</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DO_NOT_RENDER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DOES_NOT_CAST_SHADOWS</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer.q.yml">quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">cubemap_shader</td>
  <td class="property">AllegroFlare::Shaders::Cubemap*</td>
</tr>
<tr>
  <td class="property">multitexture_shader</td>
  <td class="property">AllegroFlare::Shaders::Multitexture*</td>
</tr>
<tr>
  <td class="property">entity_pool</td>
  <td class="property">AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityPool*</td>
</tr>
<tr>
  <td class="property">shadow_depth_map_renderer</td>
  <td class="property">AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::ShadowDepthMapRenderer*</td>
</tr>
<tr>
  <td class="property">depth_pass</td>
  <td class="property">AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::ShadowDepthMapRenderer*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::MultitextureModel3D*</td>
  <td class="method"><b>get_multitexture_model_3d</b>(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base* entity=nullptr)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Model3D*</td>
  <td class="method"><b>get_model_3d</b>(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base* entity=nullptr)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Placement3D*</td>
  <td class="method"><b>get_placement_3d</b>(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base* entity=nullptr)</td>
</tr>
<tr>
  <td class="method">ALLEGRO_BITMAP*</td>
  <td class="method"><b>get_texture</b>(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base* entity=nullptr)</td>
</tr>
<tr>
  <td class="method">ALLEGRO_BITMAP*</td>
  <td class="method"><b>get_texture_2</b>(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base* entity=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Model3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Model3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityPool&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityPool.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Camera3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Camera3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticModel3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/DynamicModel3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticMultitextureModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticMultitextureModel3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MultitextureModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MultitextureModel3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Cubemap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Cubemap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Multitexture&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Multitexture.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityRenderFlags&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityRenderFlags.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::ShadowDepthMapRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer.q.yml">quintessence/AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity_pool</td>
  <td class="property">AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityPool*</td>
</tr>
<tr>
  <td class="property">depth_map_shader</td>
  <td class="property">AllegroFlare::Shaders::Base*</td>
</tr>
<tr>
  <td class="property">casting_light</td>
  <td class="property">AllegroFlare::Camera3D</td>
</tr>
<tr>
  <td class="property">render_surface</td>
  <td class="property">AllegroFlare::RenderSurfaces::Bitmap</td>
</tr>
<tr>
  <td class="property">render_surface_is_setup</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">ALLEGRO_BITMAP*</td>
  <td class="method"><b>get_result_surface_bitmap</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>setup_result_surface_bitmap</b>(int width=1920, int height=1080)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>init_shader</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>init_camera_defaults</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>destroy</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>setup_projection_on_render_surface</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::MultitextureModel3D*</td>
  <td class="method"><b>get_multitexture_model_3d</b>(AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base* entity=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_multitexture_model_3d</b>(AllegroFlare::MultitextureModel3D* multitexture_model_3d=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;glEnable&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_opengl.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::EntityPool&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityPool.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Errors&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Errors.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::php&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/UsefulPHP.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_TRANSFORM&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticModel3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::DynamicModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/DynamicModel3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AllegroUnstable&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AllegroUnstable.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::RenderSurfaces::Bitmap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/RenderSurfaces/Bitmap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GraphicsPipelines::DynamicEntityPipeline::Entities::StaticMultitextureModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticMultitextureModel3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MultitextureModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MultitextureModel3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ALLEGRO_VERTEX_WITH_TWO_UVS_AND_NORMAL&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ALLEGRO_VERTEX_WITH_TWO_UVS_AND_NORMAL.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/InputDevicesList.q.yml">quintessence/AllegroFlare/InputDevicesList.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["See the project doc for more information here:\nhttps://docs.google.com/document/d/1GMvB4Ex9XFBOjacQ54L93_z8cmq_hkWfrs5h7xkG8wY/edit#bookmark=id.o5wl3b3fkgj\n", "Initialization appears to deadlock in certain circumstances. See https://github.com/liballeg/allegro5/pull/1423\n"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">devices</td>
  <td class="property">std::vector&lt;AllegroFlare::PhysicalInputDevices::Base*&gt;</td>
</tr>
<tr>
  <td class="property">updated_at</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>num_devices</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>num_keyboard_devices</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>num_joystick_devices</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>num_connected_devices</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>num_disconnected_devices</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>all_devices_are_connected</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::PhysicalInputDevices::Base*&gt;</td>
  <td class="method"><b>get_connected_joysticks</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::PhysicalInputDevices::Base*&gt;</td>
  <td class="method"><b>get_disconnected_joysticks</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>num_connected_joysticks</b>()</td>
</tr>
<tr>
  <td class="private_method">AllegroFlare::PhysicalInputDevices::Joysticks::Base*</td>
  <td class="private_method"><b>find_joystick_device_by_al_joystick</b>(ALLEGRO_JOYSTICK* al_joystick=nullptr)</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>joystick_device_exists_with_al_joystick</b>(ALLEGRO_JOYSTICK* al_joystick=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>handle_reconfigured_joystick</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::PhysicalInputDevices::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/PhysicalInputDevices/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::PhysicalInputDevices::Keyboard&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/PhysicalInputDevices/Keyboard.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::PhysicalInputDevices::Joysticks::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/PhysicalInputDevices/Joysticks/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_JOYSTICK&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::set_difference&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/InputDiagrams/KeyboardKey.q.yml">quintessence/AllegroFlare/InputDiagrams/KeyboardKey.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">keyboard_key_str</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">keyboard_key_box_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">keyboard_key_box_min_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_keyboard_key_box_height</b>(float keyboard_key_box_height=42)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>render</b>(bool calculate_width_only_and_do_not_draw=false)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>calculate_width</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>guarantee_even_number</b>(int potentially_odd_number=0)</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_font_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_ttf_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_ttf.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/InputDiagrams/KeyboardKeyCombo.q.yml">quintessence/AllegroFlare/InputDiagrams/KeyboardKeyCombo.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">keyboard_combo_tokens</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">keyboard_key_font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">keyboard_key_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">keyboard_key_box_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">keyboard_key_box_min_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">token_SPACE_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">token_SPACER_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">token_SEPARATOR_width</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_keyboard_key_box_height</b>(float keyboard_key_box_height=42)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>render</b>(bool calculate_width_only_and_do_not_draw=false)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>calculate_width</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>guarantee_even_number</b>(int potentially_odd_number=0)</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_font_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_ttf_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_ttf.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InputDiagrams::KeyboardKey&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InputDiagrams/KeyboardKey.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/InputHints.q.yml">quintessence/AllegroFlare/InputHints.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">input_hints_tokens</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">keyboard_key_combo_tokens</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">bar_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">backfill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">surface_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_backfill_bar</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_keyboard_key_combo_tokens</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_inputs_hints_tokens</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
  <td class="method"><b>build_placeholder_input_hints_tokens</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_font_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_ttf_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_ttf.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InputDiagrams::KeyboardKeyCombo&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InputDiagrams/KeyboardKeyCombo.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Instrumentation/DisplayFlipMetric.q.yml">quintessence/AllegroFlare/Instrumentation/DisplayFlipMetric.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">start_time</td>
  <td class="property">double</td>
</tr>
<tr>
  <td class="property">end_time</td>
  <td class="property">double</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">double</td>
  <td class="method"><b>get_duration</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Instrumentation/DurationMeasurer.q.yml">quintessence/AllegroFlare/Instrumentation/DurationMeasurer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">metrics</td>
  <td class="property">std::vector&lt;double&gt;</td>
</tr>
<tr>
  <td class="property">size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">head</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initial_time_measurement</td>
  <td class="property">std::chrono::steady_clock::time_point</td>
</tr>
<tr>
  <td class="property">is_measuring</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_size</b>(int size=64*4)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>start_capture</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>end_capture</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>head_delta</b>(int delta=0)</td>
</tr>
<tr>
  <td class="method">double</td>
  <td class="method"><b>average_of_last_n_metrics</b>(int count=64)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;double&gt;</td>
  <td class="method"><b>get_last_n_metrics</b>(int count=64)</td>
</tr>
<tr>
  <td class="method">double</td>
  <td class="method"><b>get_last_metric</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::chrono::steady_clock::time_point&quot;, &quot;headers&quot;=&gt;[&quot;chrono&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Instrumentation/Metric.q.yml">quintessence/AllegroFlare/Instrumentation/Metric.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">metrics</td>
  <td class="property">std::vector&lt;double&gt;</td>
</tr>
<tr>
  <td class="property">size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">head</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_size</b>(int size=64*4)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>capture</b>(double metric=0.0)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>head_delta</b>(int delta=0)</td>
</tr>
<tr>
  <td class="method">double</td>
  <td class="method"><b>average_of_last_n_metrics</b>(int count=64)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;double&gt;</td>
  <td class="method"><b>get_last_n_metrics</b>(int count=64)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Instrumentation/Metrics/Bool.q.yml">quintessence/AllegroFlare/Instrumentation/Metrics/Bool.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">metrics</td>
  <td class="property">std::vector&lt;bool&gt;</td>
</tr>
<tr>
  <td class="property">size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">head</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_size</b>(int size=64*4)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>capture</b>(bool metric=false)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>head_delta</b>(int delta=0)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;bool&gt;</td>
  <td class="method"><b>get_last_n_metrics</b>(int count=64)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Instrumentation/Metrics/Double.q.yml">quintessence/AllegroFlare/Instrumentation/Metrics/Double.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">metrics</td>
  <td class="property">std::vector&lt;double&gt;</td>
</tr>
<tr>
  <td class="property">size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">head</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_size</b>(int size=64*4)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>capture</b>(double metric=0.0)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>head_delta</b>(int delta=0)</td>
</tr>
<tr>
  <td class="method">double</td>
  <td class="method"><b>average_of_last_n_metrics</b>(int count=64)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;double&gt;</td>
  <td class="method"><b>get_last_n_metrics</b>(int count=64)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Instrumentation/Metrics/TimePoint.q.yml">quintessence/AllegroFlare/Instrumentation/Metrics/TimePoint.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">metrics</td>
  <td class="property">std::vector&lt;std::chrono::steady_clock::time_point&gt;</td>
</tr>
<tr>
  <td class="property">size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">head</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_size</b>(int size=64*4)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>capture</b>(std::chrono::steady_clock::time_point metric=std::chrono::steady_clock::time_point())</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>head_delta</b>(int delta=0)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::chrono::steady_clock::time_point&gt;</td>
  <td class="method"><b>get_last_n_metrics</b>(int count=64)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::chrono::steady_clock::time_point&quot;, &quot;headers&quot;=&gt;[&quot;chrono&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Instrumentation/PrimaryProcessEventMetric.q.yml">quintessence/AllegroFlare/Instrumentation/PrimaryProcessEventMetric.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_type</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">event_time</td>
  <td class="property">double</td>
</tr>
<tr>
  <td class="property">processing_start_time</td>
  <td class="property">double</td>
</tr>
<tr>
  <td class="property">processing_end_time</td>
  <td class="property">double</td>
</tr>
<tr>
  <td class="property">primary_timer_events_dropped</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">al_flip_display_start_time</td>
  <td class="property">double</td>
</tr>
<tr>
  <td class="property">al_flip_display_end_time</td>
  <td class="property">double</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">double</td>
  <td class="method"><b>get_duration</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Integrations/CameraProjectionChanges.q.yml">quintessence/AllegroFlare/Integrations/CameraProjectionChanges.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">framework</td>
  <td class="property">AllegroFlare::Frameworks::Full</td>
</tr>
<tr>
  <td class="property">platforming_2d_screen</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Screen</td>
</tr>
<tr>
  <td class="property">tile_drive_screen</td>
  <td class="property">AllegroFlare::Prototypes::TileDrive::Screen</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>callback</b>(ALLEGRO_EVENT* event=nullptr, void* user_data=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>run</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize_tile_drive</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize_platforming_2d</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Frameworks::Full&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Frameworks/Full.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Screen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::TileDrive::Screen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/TileDrive/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2DFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Integrations/Network.q.yml">quintessence/AllegroFlare/Integrations/Network.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">global_abort</td>
  <td class="property">std::atomic&lt;bool&gt;</td>
</tr>
<tr>
  <td class="property">TEST_HOST_NAME</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TEST_PORT_NUM</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">captured_callback_messages</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::atomic&lt;bool&gt;*</td>
  <td class="method"><b>get_global_abort_ptr</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>SetUp</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>TearDown</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>run_server_blocking</b>(std::atomic&lt;bool&gt;* global_abort=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>run_client_blocking</b>(std::atomic&lt;bool&gt;* global_abort=nullptr, std::vector&lt;std::string&gt;* messages_queue=nullptr, std::mutex* messages_queue_mutex=nullptr, void (*callback)(std::string, void*)=nullptr, void* callback_data=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>simple_capture_callback</b>(std::string message=&quot;[unset-message]&quot;, void* data=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;void*&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::mutex*&quot;, &quot;headers&quot;=&gt;[&quot;mutex&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::atomic&lt;bool&gt;&quot;, &quot;headers&quot;=&gt;[&quot;atomic&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::atomic&lt;bool&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;atomic&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:testing::Test&quot;, &quot;headers&quot;=&gt;[&quot;gtest/gtest.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Network2::Client&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Network2/Client.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Network2::Server&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Network2/Server.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;(void (*callback)(std::string))&quot;, &quot;headers&quot;=&gt;[&quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::atomic&quot;, &quot;headers&quot;=&gt;[&quot;atomic&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::mutex&quot;, &quot;headers&quot;=&gt;[&quot;mutex&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/InventoryDictionary.q.yml">quintessence/AllegroFlare/InventoryDictionary.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">dictionary</td>
  <td class="property">std::map&lt;int, AllegroFlare::InventoryDictionaryItems::Base*&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">int</td>
  <td class="method"><b>size</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>exists</b>(int id=0)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::InventoryDictionaryItems::Base*</td>
  <td class="method"><b>at</b>(int id=0)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::InventoryDictionary</td>
  <td class="method"><b>build_placeholder_inventory_dictionary</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryDictionary&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryDictionary.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryIndexItem&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryIndexItem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryDictionaryItems::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryDictionaryItems/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryDictionaryItems::ClassicItem&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryDictionaryItems/ClassicItem.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/InventoryDictionaryItems/Base.q.yml">quintessence/AllegroFlare/InventoryDictionaryItems/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/InventoryDictionaryItems/ClassicItem.q.yml">quintessence/AllegroFlare/InventoryDictionaryItems/ClassicItem.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">title</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">bitmap_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">description</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::tuple&lt;std::string, std::string, std::string&gt;</td>
  <td class="method"><b>to_tuple</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryDictionaryItems::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryDictionaryItems/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/InventoryDictionaryItems/WithAttributes.q.yml">quintessence/AllegroFlare/InventoryDictionaryItems/WithAttributes.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryDictionaryItems::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryDictionaryItems/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Attributes&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Attributes.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/InventoryIndex.q.yml">quintessence/AllegroFlare/InventoryIndex.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">index</td>
  <td class="property">std::map&lt;int, AllegroFlare::InventoryIndexItem&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">int</td>
  <td class="method"><b>size</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>exists</b>(int id=0)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::InventoryIndexItem</td>
  <td class="method"><b>at</b>(int id=0)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::InventoryIndex</td>
  <td class="method"><b>build_placeholder_inventory_index</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;int, AllegroFlare::InventoryIndexItem&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;AllegroFlare/InventoryIndexItem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryIndex&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryIndex.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryIndexItem&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryIndexItem.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/InventoryIndexItem.q.yml">quintessence/AllegroFlare/InventoryIndexItem.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">title</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">bitmap_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">description</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::tuple&lt;std::string, std::string, std::string&gt;</td>
  <td class="method"><b>to_tuple</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::tuple&lt;std::string, std::string, std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;tuple&quot;, &quot;string&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/LegalClauseGenerator.q.yml">quintessence/AllegroFlare/LegalClauseGenerator.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>generate_persons_resemblance_disclaimer</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>generate_views_and_opinions_disclaimer</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>generate_no_mistreatment_of_animals_disclaimer</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>generate_as_is_without_warranty_disclaimer</b>(bool in_upcase=true)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>generate_as_is_without_warranty_for_use_disclaimer</b>(bool in_upcase=true)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>generate_company_non_endorcement_disclaimer</b>(std::string company_name=&quot;[unset-company_name]&quot;, std::vector&lt;std::string&gt; referenced_software_and_software_company_names={})</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>join</b>(std::vector&lt;std::string&gt; tokens={}, std::string delimiter=&quot;, &quot;, bool use_and=false)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>upcase</b>(std::string text=&quot;[unset-text]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Levels/Base.q.yml">quintessence/AllegroFlare/Levels/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/LoadASavedGame/SaveSlotRenderer.q.yml">quintessence/AllegroFlare/LoadASavedGame/SaveSlotRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">slot_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">slot_height</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>(AllegroFlare::LoadASavedGame::SaveSlots::Base* save_slot=nullptr, float x=1920/2, float y=1080/8)</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::LoadASavedGame::SaveSlots::Basic&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/LoadASavedGame/SaveSlots/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::LoadASavedGame::SaveSlots::Empty&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/LoadASavedGame/SaveSlots/Empty.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::LoadASavedGame::SaveSlotRenderers::Basic&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/LoadASavedGame/SaveSlotRenderers/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::LoadASavedGame::SaveSlotRenderers::Empty&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/LoadASavedGame/SaveSlotRenderers/Empty.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::LoadASavedGame::SaveSlots::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/LoadASavedGame/SaveSlots/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/LoadASavedGame/SaveSlotRenderers/Basic.q.yml">quintessence/AllegroFlare/LoadASavedGame/SaveSlotRenderers/Basic.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">save_name</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/LoadASavedGame/SaveSlotRenderers/Empty.q.yml">quintessence/AllegroFlare/LoadASavedGame/SaveSlotRenderers/Empty.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/LoadASavedGame/SaveSlots/Base.q.yml">quintessence/AllegroFlare/LoadASavedGame/SaveSlots/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/LoadASavedGame/SaveSlots/Basic.q.yml">quintessence/AllegroFlare/LoadASavedGame/SaveSlots/Basic.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">save_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::LoadASavedGame::SaveSlots::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/LoadASavedGame/SaveSlots/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/LoadASavedGame/SaveSlots/Empty.q.yml">quintessence/AllegroFlare/LoadASavedGame/SaveSlots/Empty.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">property</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>property_is</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::LoadASavedGame::SaveSlots::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/LoadASavedGame/SaveSlots/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/LoadASavedGame/Screen.q.yml">quintessence/AllegroFlare/LoadASavedGame/Screen.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["add a technique to clear a save slot (after confirmation dialog)"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">model_bin</td>
  <td class="property">AllegroFlare::ModelBin*</td>
</tr>
<tr>
  <td class="property">save_slots</td>
  <td class="property">std::vector&lt;AllegroFlare::LoadASavedGame::SaveSlots::Base*&gt;</td>
</tr>
<tr>
  <td class="property">cursor_position</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">on_menu_choice_callback_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::LoadASavedGame::Screen*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_menu_choice_callback_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">on_erase_focused_save_slot_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::LoadASavedGame::Screen*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_erase_focused_save_slot_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">on_exit_callback_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::LoadASavedGame::Screen*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_exit_callback_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_event_emitter</b>(AllegroFlare::EventEmitter* event_emitter=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_bitmap_bin</b>(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_font_bin</b>(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_model_bin</b>(AllegroFlare::ModelBin* model_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_save_slots</b>(std::vector&lt;AllegroFlare::LoadASavedGame::SaveSlots::Base*&gt; save_slots={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_deactivate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_up</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_down</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>exit_screen</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_current_focused_menu_option</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>erase_current_focused_save_slot</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>select_current_focused_menu_option</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_title</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_save_slots</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_timer_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>key_char_func</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_down_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_axis_change_func</b>(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_heading_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_text_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::LoadASavedGame::Screen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/LoadASavedGame/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::LoadASavedGame::SaveSlots::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/LoadASavedGame/SaveSlots/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::LoadASavedGame::SaveSlotRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/LoadASavedGame/SaveSlotRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Logger.q.yml">quintessence/AllegroFlare/Logger.q.yml</h3>
    <h3>Overview</h3>
    <p>["todos", ["consider removing \"static\" attribute from \"once_emitter_warnings\", and all other remaining ones as well"]]</p>    <p>["internal", "Below is a code example showing variadic arguments in C++ using std::format (will be available in C++20.\nSee: https://codereview.stackexchange.com/questions/269425/implementing-stdformat\n\ntemplate<typename T>\nvoid format_helper(std::ostringstream& oss, std::string_view& str, const T& value)\n{\n    std::size_t openBracket = str.find('{');\n    if (openBracket == std::string::npos) { return; }\n    std::size_t closeBracket = str.find('}', openBracket + 1);\n    if (closeBracket == std::string::npos) { return; }\n    oss << str.substr(0, openBracket) << value;\n    str = str.substr(closeBracket + 1);\n}\n\ntemplate<typename... Targs>\nstd::string format(std::string_view str, Targs...args)\n{\n    std::ostringstream oss;\n    (format_helper(oss, str, args),...);\n    oss << str;\n    return oss.str();\n}\n"]</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">once_emitted_warnings</td>
  <td class="property">std::set&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">log_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">log_file</td>
  <td class="property">std::ofstream</td>
</tr>
<tr>
  <td class="property">log_file_initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">instrumentation_log_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">instrumentation_log_file</td>
  <td class="property">std::ofstream</td>
</tr>
<tr>
  <td class="property">instrumentation_log_file_initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">instance</td>
  <td class="property">AllegroFlare::Logger*</td>
</tr>
<tr>
  <td class="property">DEFAULT_INSTRUMENTATION_LOG_FILENAME</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_LOG_FILENAME</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_instance</b>(AllegroFlare::Logger* instance_to_use=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>clear_instance</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>has_instance</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_log_filename</b>(std::string log_filename=DEFAULT_LOG_FILENAME)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize_log_file</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>close_log_file</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_instrumentation_log_filename</b>(std::string instrumentation_log_filename=DEFAULT_INSTRUMENTATION_LOG_FILENAME)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize_instrumentation_log_file</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>close_instrumentation_log_file</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>outstream_instrumentation_metric</b>(AllegroFlare::Instrumentation::PrimaryProcessEventMetric* metric=nullptr)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>build_error_message</b>(std::string from=&quot;[unset-from]&quot;, std::string message=&quot;[unset-message]&quot;)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>build_guard_error_message</b>(std::string from=&quot;[unset-from]&quot;, std::string guard_statement=&quot;[unset-guard_statement]&quot;)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>build_warning_message</b>(std::string from=&quot;[unset-from]&quot;, std::string message=&quot;[unset-message]&quot;, bool is_warn_once=false)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>build_not_included_message</b>(std::string element_not_present=&quot;[unset-missing_element]&quot;, std::vector&lt;std::string&gt; valid_elements={})</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>build_unimplemented_for_base_class_message</b>(std::string from=&quot;[unset-from]&quot;)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>build_info_message</b>(std::string from=&quot;[unset-from]&quot;, std::string message=&quot;[unset-message]&quot;)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>build_unhandled_case_message</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>throw_missing_file_error</b>(std::string from=&quot;[unset-from]&quot;, std::string filename=&quot;[unset-filename]&quot;, std::string filetype=&quot;[unset-filetype]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>throw_unimplemented_for_base_class_error</b>(std::string from=&quot;[unset-from]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>info_from</b>(std::string from=&quot;[unset-from]&quot;, std::string message=&quot;[unset-message]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>warn_from</b>(std::string from=&quot;[unset-from]&quot;, std::string message=&quot;[unset-message]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>warn_from_once</b>(std::string from=&quot;[unset-from]&quot;, std::string message=&quot;[unset-message]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>throw_error</b>(std::string from=&quot;[unset-from]&quot;, std::string message=&quot;[unset-message]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>error_from</b>(std::string from=&quot;[unset-from]&quot;, std::string message=&quot;[unset-message]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>throw_unhandled_case</b>(std::string from=&quot;[unset-from]&quot;, std::string unhandled_case=&quot;[unset-unhandled_case]&quot;)</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>join</b>(std::vector&lt;std::string&gt; tokens={}, std::string delimiter=&quot;, &quot;)</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>quote_and_escape_inner_quotes</b>(std::string subject=&quot;[unset-subject]&quot;)</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>replace</b>(std::string subject=&quot;[unset-subject]&quot;, std::string search=&quot;[unset-search]&quot;, std::string replace=&quot;[unset-replace]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ConsoleColors&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ConsoleColors.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Instrumentation::PrimaryProcessEventMetric&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Instrumentation/PrimaryProcessEventMetric.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MotionComposer/MessageFactory.q.yml">quintessence/AllegroFlare/MotionComposer/MessageFactory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>build_set_playhead_position_message_json</b>(float position=0.0f)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>build_toggle_playback_message_json</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>build_clear_message_json</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>build_run_build_process_message_json</b>(std::string platform=&quot;[unset-platform]&quot;, std::string source_release_zip_url=&quot;[unset-source_release_zip_url]&quot;, std::string name_of_source_release_folder=&quot;[unset-name_of_source_release_folder]&quot;)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>build_add_actor2d_with_script_message_json</b>(std::string identifier=&quot;[unset-identifier]&quot;, std::string bitmap_identifier=&quot;[unset-bitmap_identifier]&quot;, std::string script=&quot;[unset-script]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MotionComposer::Messages::Clear&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MotionComposer/Messages/Clear.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::JSONLoaders::MotionComposer::Messages::Clear&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/JSONLoaders/MotionComposer/Messages/Clear.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MotionComposer::Messages::AddActor2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MotionComposer/Messages/AddActor2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::JSONLoaders::AllegroFlare::MotionComposer::Messages::AddActor2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/JSONLoaders/AllegroFlare/MotionComposer/Messages/AddActor2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MotionComposer::Messages::TogglePlayback&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MotionComposer/Messages/TogglePlayback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::JSONLoaders::MotionComposer::Messages::TogglePlayback&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/JSONLoaders/MotionComposer/Messages/TogglePlayback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MotionComposer::Messages::SetPlayheadPosition*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MotionComposer/Messages/SetPlayheadPosition.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::JSONLoaders::MotionComposer::Messages::SetPlayheadPosition&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/JSONLoaders/MotionComposer/Messages/SetPlayheadPosition.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::JSONLoaders::MotionComposer::Messages::RunBuildProcess&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/JSONLoaders/MotionComposer/Messages/RunBuildProcess.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;nlohmann::json&quot;, &quot;headers&quot;=&gt;[&quot;lib/nlohmann/json.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MotionComposer/MessageProcessor.q.yml">quintessence/AllegroFlare/MotionComposer/MessageProcessor.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">messages_json</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">messages</td>
  <td class="property">std::vector&lt;AllegroFlare::MotionComposer::Messages::Base*&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>push_one</b>(std::string message_json_as_string=&quot;{}&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::MotionComposer::Messages::Base*</td>
  <td class="method"><b>get_one_message_and_pop</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>convert_one</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>process_one</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::MotionComposer::Messages::Base*</td>
  <td class="method"><b>build_message_from_json</b>(std::string json_as_string=&quot;{}&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;nlohmann::json&quot;, &quot;headers&quot;=&gt;[&quot;lib/nlohmann/json.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::JSONLoaders::MotionComposer::Messages::SetPlayheadPosition&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/JSONLoaders/MotionComposer/Messages/SetPlayheadPosition.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::JSONLoaders::MotionComposer::Messages::TogglePlayback&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/JSONLoaders/MotionComposer/Messages/TogglePlayback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::JSONLoaders::MotionComposer::Messages::Clear&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/JSONLoaders/MotionComposer/Messages/Clear.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::JSONLoaders::AllegroFlare::MotionComposer::Messages::AddActor2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/JSONLoaders/AllegroFlare/MotionComposer/Messages/AddActor2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MotionComposer::Messages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MotionComposer/Messages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::JSONLoaders::MotionComposer::Messages::RunBuildProcess&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/JSONLoaders/MotionComposer/Messages/RunBuildProcess.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MotionComposer/Messages/AddActor2D.q.yml">quintessence/AllegroFlare/MotionComposer/Messages/AddActor2D.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">bitmap_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">script</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MotionComposer::Messages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MotionComposer/Messages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timeline::Actor2D*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timeline/Actor2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MotionComposer/Messages/Base.q.yml">quintessence/AllegroFlare/MotionComposer/Messages/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::vector&lt;std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MotionComposer/Messages/RunBuildProcess.q.yml">quintessence/AllegroFlare/MotionComposer/Messages/RunBuildProcess.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">platform</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">source_release_zip_url</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">name_of_source_release_folder</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MotionComposer::Messages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MotionComposer/Messages/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MotionComposer/Messages/SetPlayheadPosition.q.yml">quintessence/AllegroFlare/MotionComposer/Messages/SetPlayheadPosition.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">position</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MotionComposer::Messages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MotionComposer/Messages/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MotionComposer/Messages/SetScript.q.yml">quintessence/AllegroFlare/MotionComposer/Messages/SetScript.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">script_lines</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MotionComposer::Messages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MotionComposer/Messages/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MotionComposer/TrackView.q.yml">quintessence/AllegroFlare/MotionComposer/TrackView.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">track</td>
  <td class="property">AllegroFlare::Timeline::Track*</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">value_min</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">value_max</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">selection_cursor_x</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">icon_font_size</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_selected_node_icon</b>(float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_node_icon</b>(float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_centered_unicode_character</b>(ALLEGRO_FONT* font=nullptr, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1}, int x=0, int y=0, uint32_t icon=61445, int flags=0)</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_icon_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_bigger_icon_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_track_values_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timeline::Track*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timeline/Track.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timeline::Track&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timeline/Track.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color::&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MotionFX/Sparkles.q.yml">quintessence/AllegroFlare/MotionFX/Sparkles.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">particles</td>
  <td class="property">std::vector&lt;std::tuple&lt;float, float, float, ALLEGRO_COLOR&gt;&gt;</td>
</tr>
<tr>
  <td class="property">created_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">main_star_placement</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>is_finished</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_age</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_icon_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_mini_icon_font</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_centered_unicode_character</b>(ALLEGRO_FONT* font=nullptr, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1}, int x=0, int y=0, uint32_t icon=61445, int flags=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color::Gold&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::tuple&lt;float, float, float, ALLEGRO_COLOR&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;tuple&quot;, &quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;sin&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;cos&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MotionFX/Sparkles2.q.yml">quintessence/AllegroFlare/MotionFX/Sparkles2.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">time</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">scale</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">actor_manager</td>
  <td class="property">AllegroFlare::Timeline::ActorManager</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::string&gt;</td>
  <td class="method"><b>build_friend_star_script_lines</b>(float rotation=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_BITMAP*</td>
  <td class="private_method"><b>obtain_star_bitmap</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timeline::ActorManager&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timeline/ActorManager.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timeline::Actors::Actor2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timeline/Actors/Actor2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Interpolators::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Interpolators::&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MotionKit.q.yml">quintessence/AllegroFlare/MotionKit.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">float</td>
  <td class="method"><b>normalize_age</b>(float start_time=0.0f, float end_time=0.0f, float time_now=0.0f)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>strobe</b>(float start_time=0.0f, float time_now=0.0f, float strobes_per_second=10.0f)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>smooth_strobe</b>(float start_time=0.0f, float time_now=0.0f, float strobes_per_second=10.0f)</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>age</b>(float start_time=0.0f, float end_time=0.0f)</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>interpolate</b>(float start_value=0.0f, float end_value=0.0f, float normalized_float=0.0f)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MultitextureModel3DObjLoader.q.yml">quintessence/AllegroFlare/MultitextureModel3DObjLoader.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">model</td>
  <td class="property">AllegroFlare::MultitextureModel3D*</td>
</tr>
<tr>
  <td class="property">base_obj_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">obj_filename_with_uv2_coordinates</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">scale</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>load</b>()</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>load_obj</b>(AllegroFlare::MultitextureModel3D* model=nullptr, std::string filename=&quot;[unset-obj_filename]&quot;, float scale=1.0f)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;CONSOLE_COLOR_RED&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ConsoleColor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;CONSOLE_COLOR_DEFAULT&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ConsoleColor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_fopen&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MultitextureModel3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MultitextureModel3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MusicMesh/FontCharacterAtlasBuilder.q.yml">quintessence/AllegroFlare/MusicMesh/FontCharacterAtlasBuilder.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">font_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">UNICODE_RANGE_START</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">row_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">column_width</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>todo</b>()</td>
</tr>
<tr>
  <td class="method">std::pair&lt;AllegroFlare::Vec2D, AllegroFlare::Vec2D&gt;</td>
  <td class="method"><b>get_uv_for_index</b>(uint32_t unicode_index=0)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>infer_font_descent</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_BITMAP*</td>
  <td class="method"><b>create</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_unicode_character</b>(ALLEGRO_FONT* font=nullptr, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1}, uint32_t icon=61444, int flags=0, float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_unicode_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_ui_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_ui_font_mini</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>as_hex</b>(uint32_t value=0, int zero_fill_width=6)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>as_int</b>(uint32_t value=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::setfill&quot;, &quot;headers&quot;=&gt;[&quot;iomanip&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MusicMesh/MusicMesh.q.yml">quintessence/AllegroFlare/MusicMesh/MusicMesh.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">stamps</td>
  <td class="property">std::vector&lt;AllegroFlare::MusicMesh::Stamp&gt;</td>
</tr>
<tr>
  <td class="property">next_id</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">multi_mesh</td>
  <td class="property">AllegroFlare::TileMaps::MultiMesh</td>
</tr>
<tr>
  <td class="property">multi_mesh_uv_atlas</td>
  <td class="property">AllegroFlare::TileMaps::MultiMeshUVAtlas</td>
</tr>
<tr>
  <td class="property">font_character_atlas_builder</td>
  <td class="property">AllegroFlare::MusicMesh::FontCharacterAtlasBuilder</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>add_music_symbol</b>(float x=0, float y=0, uint32_t music_symbol_to_stamp=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>remove_stamp_at</b>(int index_of_stamp=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MusicMesh::Stamp&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MusicMesh/Stamp.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::MultiMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/MultiMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::MultiMeshUVAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/MultiMeshUVAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MusicMesh::FontCharacterAtlasBuilder&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MusicMesh/FontCharacterAtlasBuilder.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MusicMesh/Stamp.q.yml">quintessence/AllegroFlare/MusicMesh/Stamp.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">id</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">multi_mesh_id</td>
  <td class="property">uint32_t</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>reassign_multi_mesh_id</b>(uint32_t new_multi_mesh_id=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MusicNotation/AccidentalStacker.q.yml">quintessence/AllegroFlare/MusicNotation/AccidentalStacker.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">pitches</td>
  <td class="property">std::vector&lt;AllegroFlare::MusicNotation::Parser::PitchToken&gt;</td>
</tr>
<tr>
  <td class="property">stack</td>
  <td class="property">std::vector&lt;std::pair&lt;AllegroFlare::MusicNotation::AccidentalStacker::AccidentalType, std::pair&lt;int, int&gt;&gt;&gt;</td>
</tr>
<tr>
  <td class="property">solved</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_pitches</b>(const std::vector&lt;AllegroFlare::MusicNotation::Parser::PitchToken&gt;&amp; pitches={})</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::pair&lt;AllegroFlare::MusicNotation::AccidentalStacker::AccidentalType, std::pair&lt;int, int&gt;&gt;&gt;</td>
  <td class="method"><b>get_stack</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>calculate_num_columns</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>solve_one_from_top</b>(int column_to_place_on=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>solve_one_from_bottom</b>(int column_to_place_on=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>solve</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>can_fit</b>(int current_column=0, int target_column=0)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>collapse_column_into_previous</b>(int target_column=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>integrate_fitable_columns</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::MusicNotation::AccidentalStacker::AccidentalType</td>
  <td class="method"><b>find_accidental_type_by_weight</b>(int accidental_weight=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MusicNotation::AccidentalStacker::AccidentalType&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MusicNotation::Parser::PitchToken&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MusicNotation/Parser/PitchToken.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::reverse&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MusicNotation::Parser::PitchTokenSorter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MusicNotation/Parser/PitchTokenSorter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::numeric_limits&quot;, &quot;headers&quot;=&gt;[&quot;limits&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MusicNotation/Beam.q.yml">quintessence/AllegroFlare/MusicNotation/Beam.q.yml</h3>
    <h3>Overview</h3>
    <p>{"notes"=>[{"Decent reference"=>"https://sites.coloradocollege.edu/musicengraving/engraving-convention/beams-and-flags/#:~:text=Thickness%20of%20beams%20depends%20on,the%20space%20between%20staff%20lines.&text=When%20to%20UseIn%20General%3A,ends%20on%20the%20same%20note."}, {"Another good reference"=>"https://www.oscarvandillen.com/outline_of_basic_music_theory/musical_notation/"}, {"Another reference"=>"https://makemusic.zendesk.com/hc/en-us/community/posts/115000710208-Beams-over-rests"}]}</p>    <p>{"todos"=>["Replace the two demonstrations of secondary beams by using the \"secondary_beams\" property"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">staff_line_distance</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">start_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">start_staff_pos</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">start_alignment</td>
  <td class="property">Beam::Alignment</td>
</tr>
<tr>
  <td class="property">end_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">end_staff_pos</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">end_alignment</td>
  <td class="property">Beam::Alignment</td>
</tr>
<tr>
  <td class="property">color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">secondary_beams</td>
  <td class="property">std::vector&lt;std::tuple&lt;int, float, float&gt;&gt;</td>
</tr>
<tr>
  <td class="property">render_with_debugging_visuals</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">float</td>
  <td class="method"><b>calculate_beam_thickness</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_beam</b>(float top_x1=0.0f, float top_y1=0.0f, float top_x2=0.0f, float top_y2=0.0f, ALLEGRO_COLOR _color=ALLEGRO_COLOR{1, 1, 1, 1})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_secondary_beam</b>(float primary_beam_top_x1=0.0f, float primary_beam_top_y1=0.0f, float primary_beam_top_x2=0.0f, float primary_beam_top_y2=0.0f, float x1_normalized=0.0f, float x2_normalized=1.0f, int vertical_position=0, ALLEGRO_COLOR _color=ALLEGRO_COLOR{1, 1, 1, 1})</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>alignment_vertical_offset_for</b>(Beam::Alignment alignment=Beam::Alignment::UNDEFINED)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Beam::Alignment&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MusicNotation/BeamPositionCalculator.q.yml">quintessence/AllegroFlare/MusicNotation/BeamPositionCalculator.q.yml</h3>
    <h3>Overview</h3>
    <p>{"notes"=>["Positive staff positions are up, negative down. Think of it as pitches going up or down on a staff."]}</p>    <p>{"todos"=>["validate that notehead_staff_positions are ordered by first elements", "find more elegant way to validate interior min/max values"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">notehead_staff_positions</td>
  <td class="property">std::vector&lt;std::pair&lt;float, int&gt;&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">BeamPositionCalculator::StemDirection</td>
  <td class="method"><b>infer_preferred_stem_direction</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_first_staff_position</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_last_staff_position</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_min_staff_position</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_max_staff_position</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_min_interior_staff_position</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_max_interior_staff_position</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;BeamPositionCalculator::StemDirection&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min_element&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MusicNotation/ChordDotPositionCalculator.q.yml">quintessence/AllegroFlare/MusicNotation/ChordDotPositionCalculator.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">pitches</td>
  <td class="property">std::vector&lt;AllegroFlare::MusicNotation::Parser::PitchToken&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::set&lt;int&gt;</td>
  <td class="method"><b>calculate_dot_staff_positions</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MusicNotation::Parser::PitchToken&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MusicNotation/Parser/PitchToken.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MusicNotation::Parser::PitchTokenSorter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MusicNotation/Parser/PitchTokenSorter.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MusicNotation/ChordNoteheadPositionResolver.q.yml">quintessence/AllegroFlare/MusicNotation/ChordNoteheadPositionResolver.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">pitches</td>
  <td class="property">std::vector&lt;AllegroFlare::MusicNotation::Parser::PitchToken&gt;</td>
</tr>
<tr>
  <td class="property">positions</td>
  <td class="property">std::vector&lt;std::pair&lt;int, AllegroFlare::MusicNotation::ChordNoteheadPositionResolver::PositionType&gt;&gt;</td>
</tr>
<tr>
  <td class="property">seconds_exist</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">solved</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_pitches</b>(const std::vector&lt;AllegroFlare::MusicNotation::Parser::PitchToken&gt;&amp; pitches={})</td>
</tr>
<tr>
  <td class="method">const std::vector&lt;std::pair&lt;int, AllegroFlare::MusicNotation::ChordNoteheadPositionResolver::PositionType&gt;&gt;&amp;</td>
  <td class="method"><b>get_positions</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>get_seconds_exist</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>lowest_staff_position_on_position_type</b>(AllegroFlare::MusicNotation::ChordNoteheadPositionResolver::PositionType position_type=AllegroFlare::MusicNotation::ChordNoteheadPositionResolver::PositionType::UNDEFINED)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>highest_staff_position_on_position_type</b>(AllegroFlare::MusicNotation::ChordNoteheadPositionResolver::PositionType position_type=AllegroFlare::MusicNotation::ChordNoteheadPositionResolver::PositionType::UNDEFINED)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>lowest_staff_position_on_right_column</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>highest_staff_position_on_right_column</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>lowest_staff_position_on_left_column</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>highest_staff_position_on_left_column</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>lowest_staff_position_on_stemside_column</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>highest_staff_position_on_stemside_column</b>()</td>
</tr>
<tr>
  <td class="method">const std::vector&lt;std::pair&lt;int, AllegroFlare::MusicNotation::ChordNoteheadPositionResolver::PositionType&gt;&gt;&amp;</td>
  <td class="method"><b>noteheads_exist_on_both_sides</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>solve</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MusicNotation::Parser::PitchToken&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MusicNotation/Parser/PitchToken.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MusicNotation::ChordNoteheadPositionResolver::PositionType&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MusicNotation::Parser::PitchTokenSorter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MusicNotation/Parser/PitchTokenSorter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::numeric_limits&quot;, &quot;headers&quot;=&gt;[&quot;limits&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MusicNotation/Parser/PitchTokenSorter.q.yml">quintessence/AllegroFlare/MusicNotation/Parser/PitchTokenSorter.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">pitches</td>
  <td class="property">std::vector&lt;AllegroFlare::MusicNotation::Parser::PitchToken&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::MusicNotation::Parser::PitchToken&gt;</td>
  <td class="method"><b>sort_unique_descending</b>()</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>custom_comparison_for_pitch_tokens</b>(const AllegroFlare::MusicNotation::Parser::PitchToken&amp; token1=AllegroFlare::MusicNotation::Parser::PitchToken(), const AllegroFlare::MusicNotation::Parser::PitchToken&amp; token2=AllegroFlare::MusicNotation::Parser::PitchToken())</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MusicNotation::Parser::PitchToken&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MusicNotation/Parser/PitchToken.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::reverse&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MusicNotation/RomanNumeralAnalysisSymbol.q.yml">quintessence/AllegroFlare/MusicNotation/RomanNumeralAnalysisSymbol.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">scale_degree</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">accidental</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">chord_quality</td>
  <td class="property">RomanNumeralAnalysisSymbol::ChordQuality</td>
</tr>
<tr>
  <td class="property">extensions</td>
  <td class="property">std::vector&lt;std::pair&lt;int, int&gt;&gt;</td>
</tr>
<tr>
  <td class="property">inversion</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::vector&lt;std::pair&lt;int, int&gt;&gt;</td>
  <td class="method"><b>calculate_root_position_figured_bass_notes_with_extensions</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>infer_roman_numeral_string</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;RomanNumeralAnalysisSymbol::ChordQuality&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::rotate&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MusicNotation/RomanNumeralAnalysisSymbolRenderer.q.yml">quintessence/AllegroFlare/MusicNotation/RomanNumeralAnalysisSymbolRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">symbol</td>
  <td class="property">AllegroFlare::MusicNotation::RomanNumeralAnalysisSymbol*</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">primary_symbol_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">inversion_number_font_size</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_FONT*</td>
  <td class="method"><b>obtain_primary_symbol_font</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_FONT*</td>
  <td class="method"><b>obtain_inversion_number_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MusicNotation::RomanNumeralAnalysisSymbol&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MusicNotation/RomanNumeralAnalysisSymbol.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MusicNotation/TieRenderer.q.yml">quintessence/AllegroFlare/MusicNotation/TieRenderer.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["make length setters explicit and require a positive number", "investigate if there is an issue when (length == 0)", "use \"narrow_line_thickness\" and \"thick_line_thickness\"", "consider validating that thick_line_thickness cannot be thinner than narrow_line_thickness"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">start_point</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">length</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">narrow_line_thickness</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">thick_line_thickness</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>render_arc</b>(AllegroFlare::Vec2D start_point={}, float length=20, float height=20, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1}, float line_thickness=1.0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_spline&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Network2/Message.q.yml">quintessence/AllegroFlare/Network2/Message.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">HEADER_LENGTH</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">MAX_BODY_LENGTH</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">MAGIC_HEADER_CHUNK</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">data</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">body_length</td>
  <td class="property">std::size_t</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>todo</b>()</td>
</tr>
<tr>
  <td class="method">char*</td>
  <td class="method"><b>data_ptr</b>()</td>
</tr>
<tr>
  <td class="method">char*</td>
  <td class="method"><b>body_ptr</b>()</td>
</tr>
<tr>
  <td class="method">std::size_t</td>
  <td class="method"><b>length</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_body_length</b>(std::size_t new_length=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_body</b>(std::string content=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_header</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_body</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::string&gt;</td>
  <td class="method"><b>decode_header_and_validate</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::string&gt;</td>
  <td class="method"><b>validate_body_hash</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>encode_header</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>first_4_chars_hash_of</b>(std::string string_to_hash=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>body_size_base62</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>decode_body_size_chunk</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>extract_nth_header_chunk</b>(int position=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>ignore</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;chat_message&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Network2/inc/chat_message.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;char*&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::size_t&quot;, &quot;headers&quot;=&gt;[&quot;cstddef&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EncoderDecoders::Base62&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EncoderDecoders/Base62.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SHA2&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SHA2.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Network2/URLTokenizer.q.yml">quintessence/AllegroFlare/Network2/URLTokenizer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">full_url</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>extract_port</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>extract_host</b>()</td>
</tr>
<tr>
  <td class="method">std::pair&lt;std::string, std::string&gt;</td>
  <td class="method"><b>split_tokens</b>()</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>has_min_length</b>(std::string string=&quot;&quot;, int min=0)</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>fits_max_length</b>(std::string string=&quot;&quot;, int max=0)</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>only_numerical_characters</b>(std::string string=&quot;&quot;)</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>trim</b>(std::string s=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::invalid_argument&quot;, &quot;headers&quot;=&gt;[&quot;stdexcept&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::find_if&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Notifications.q.yml">quintessence/AllegroFlare/Notifications.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">notifications</td>
  <td class="property">std::vector&lt;AllegroFlare::Elements::Notifications::Base*&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">int</td>
  <td class="method"><b>size</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>add</b>(AllegroFlare::Elements::Notifications::Base* notification=nullptr)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Elements::Notifications::Base*&gt;</td>
  <td class="method"><b>select_all_order_by_created_at_desc</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Elements::Notifications::Base*&gt;</td>
  <td class="method"><b>select_created_at_since_order_by_created_at</b>(float min_created_at=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>destroy_all</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>sort_by_created_at_desc_func</b>(AllegroFlare::Elements::Notifications::Base* a=nullptr, AllegroFlare::Elements::Notifications::Base* b=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;AllegroFlare::Elements::Notifications::Base*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Elements/Notifications/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Notifications::Base*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Notifications/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Notifications::Base&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Elements/Notifications/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::sort&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::copy_if&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/NotificationsFactory.q.yml">quintessence/AllegroFlare/NotificationsFactory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">AllegroFlare::Elements::Notifications::AchievementUnlocked*</td>
  <td class="method"><b>create_achievement_unlocked_notification</b>(std::string achievement_name=&quot;[unset-achievement_name]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Notifications::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Notifications/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Notifications::AchievementUnlocked&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Notifications/AchievementUnlocked.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Notifications::AchievementUnlocked*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Notifications/AchievementUnlocked.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Obfuscator.q.yml">quintessence/AllegroFlare/Obfuscator.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">rotator_engine</td>
  <td class="property">AllegroFlare::Obfuscators::Rotate</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>encode</b>(std::string text=&quot;[unset-text]&quot;)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>decode</b>(std::string text=&quot;[unset-text]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Obfuscators::Rotate&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Obfuscators/Rotate.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Obfuscators/Rotate.q.yml">quintessence/AllegroFlare/Obfuscators/Rotate.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">rotation_set</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">rotation</td>
  <td class="property">std::size_t</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>rotation_set_contains_unique_characters</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>encode</b>(std::string text=&quot;[unset-text]&quot;)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>decode</b>(std::string text=&quot;[unset-text]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/PhysicalInputDeviceToVirtualControllerMapping.q.yml">quintessence/AllegroFlare/PhysicalInputDeviceToVirtualControllerMapping.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">player</td>
  <td class="property">AllegroFlare::Player*</td>
</tr>
<tr>
  <td class="property">physical_input_device</td>
  <td class="property">AllegroFlare::PhysicalInputDevices::Base*</td>
</tr>
<tr>
  <td class="property">virtual_controller</td>
  <td class="property">AllegroFlare::VirtualControllers::Base*</td>
</tr>
<tr>
  <td class="property">mapping</td>
  <td class="property">std::map&lt;int, int&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_multiple_mappings</b>(std::vector&lt;std::pair&lt;int, int&gt;&gt; mappings={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_mapping</b>(uint32_t physical_input_button_id=0, uint32_t virtual_input_button_id=0)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>mapping_exists_on_physical_device_button</b>(uint32_t physical_input_button_id=0)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>physical_input_device_is_keyboard</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_mapping</b>(uint32_t physical_input_button_id=0)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>mapping_exists_on_virtual_controller_button</b>(uint32_t virtual_controller_button_id=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::PhysicalInputDevices::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/PhysicalInputDevices/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/PhysicalInputDeviceToVirtualControllerMappingFactory.q.yml">quintessence/AllegroFlare/PhysicalInputDeviceToVirtualControllerMappingFactory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">AllegroFlare::PhysicalInputDeviceToVirtualControllerMapping</td>
  <td class="method"><b>create_single_player_keyboard_mapping_from_scratch</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::PhysicalInputDeviceToVirtualControllerMapping&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/PhysicalInputDeviceToVirtualControllerMapping.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::PhysicalInputDevices::Keyboard&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/PhysicalInputDevices/Keyboard.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::GenericController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/GenericController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_KEY_&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/PhysicalInputDevices/Base.q.yml">quintessence/AllegroFlare/PhysicalInputDevices/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">connected</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">connected_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_connected</b>(bool connected=false)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_keyboard</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_joystick</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_time&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/PhysicalInputDevices/Joysticks/Base.q.yml">quintessence/AllegroFlare/PhysicalInputDevices/Joysticks/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">al_joystick</td>
  <td class="property">ALLEGRO_JOYSTICK*</td>
</tr>
<tr>
  <td class="property">name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">buttons</td>
  <td class="property">std::map&lt;uint32_t, std::string&gt;</td>
</tr>
<tr>
  <td class="property">has_been_setup</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_al_joystick</b>(ALLEGRO_JOYSTICK* al_joystick=nullptr)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_name</b>()</td>
</tr>
<tr>
  <td class="method">std::map&lt;uint32_t, std::string&gt;</td>
  <td class="method"><b>get_buttons</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>setup</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_joystick</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_using_al_joystick</b>(ALLEGRO_JOYSTICK* possibly_same_al_joystick=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::PhysicalInputDevices::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/PhysicalInputDevices/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_JOYSTICK&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/PhysicalInputDevices/Keyboard.q.yml">quintessence/AllegroFlare/PhysicalInputDevices/Keyboard.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_keyboard</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::PhysicalInputDevices::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/PhysicalInputDevices/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Physics/AABB2D.q.yml">quintessence/AllegroFlare/Physics/AABB2D.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">w</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">h</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">velocity_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">velocity_y</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_left_edge</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_right_edge</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_top_edge</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_bottom_edge</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_left_edge</b>(float x=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_right_edge</b>(float x=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_top_edge</b>(float y=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_bottom_edge</b>(float y=0.0f)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>collides</b>(AllegroFlare::Physics::AABB2D* other=nullptr, AllegroFlare::Vec2D self_offset=AllegroFlare::Vec2D(), AllegroFlare::Vec2D other_offset=AllegroFlare::Vec2D())</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::AABB2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/AABB2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Physics/AABB3D.q.yml">quintessence/AllegroFlare/Physics/AABB3D.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">min</td>
  <td class="property">AllegroFlare::Vec3D</td>
</tr>
<tr>
  <td class="property">max</td>
  <td class="property">AllegroFlare::Vec3D</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>expand</b>(float amount=0.0f)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>collides</b>(AllegroFlare::Physics::AABB3D* other=nullptr, AllegroFlare::Vec3D self_offset=AllegroFlare::Vec3D(), AllegroFlare::Vec3D other_offset=AllegroFlare::Vec3D())</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>collides_with_point</b>(AllegroFlare::Vec3D point=AllegroFlare::Vec3D(), AllegroFlare::Vec3D self_offset=AllegroFlare::Vec3D(), AllegroFlare::Vec3D other_offset=AllegroFlare::Vec3D())</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw</b>(ALLEGRO_COLOR color=ALLEGRO_COLOR{1.0f, 1.0f, 0.0f, 1.0f}, AllegroFlare::Vec3D offset=AllegroFlare::Vec3D())</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::AABB3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/AABB3D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Physics/Int2D.q.yml">quintessence/AllegroFlare/Physics/Int2D.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">x</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>rotate</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Physics/TileMapCollisionStepper.q.yml">quintessence/AllegroFlare/Physics/TileMapCollisionStepper.q.yml</h3>
    <h3>Overview</h3>
    <p>Note that the "reposition_offset" at small values can have floating-point calculation issues when paired with larger aabb2d x or y values.  As an example, if a player collides against an x edge at 2064.0f, and the "reposition_offset" is 0.0001f, then the result repositiond x value will *still* be 2064.0f due to floating point errors. For now, the "reposition_offset" is set to 0.01f.</p>    <p>Note that the "reposition_offset" is used in the step calculation, the "adjacent_to_*" methods, and the "get_tile_coords_below_*_foot" methods</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">collision_tile_map</td>
  <td class="property">AllegroFlare::TileMaps::TileMap&lt;int&gt;*</td>
</tr>
<tr>
  <td class="property">aabb2d</td>
  <td class="property">AllegroFlare::Physics::AABB2D*</td>
</tr>
<tr>
  <td class="property">tile_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">tile_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">reposition_offset</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">DEFAULT_REPOSITION_OFFSET</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Physics::TileMapCollisionStepperCollisionInfo&gt;</td>
  <td class="method"><b>step</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>adjacent_to_bottom_edge</b>(float tile_width=16.0f, float tile_height=16.0f)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>adjacent_to_right_edge</b>(float tile_width=16.0f, float tile_height=16.0f)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>adjacent_to_top_edge</b>(float tile_width=16.0f, float tile_height=16.0f)</td>
</tr>
<tr>
  <td class="method">std::pair&lt;int, int&gt;</td>
  <td class="method"><b>get_tile_coords_below_left_foot</b>(float x=0.0f, float y=0.0f, float height=1.0f)</td>
</tr>
<tr>
  <td class="method">std::pair&lt;int, int&gt;</td>
  <td class="method"><b>get_tile_coords_below_right_foot</b>(float x=0.0f, float y=0.0f, float width=1.0f, float height=1.0f)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>adjacent_to_left_edge</b>(float tile_width=16.0f, float tile_height=16.0f)</td>
</tr>
<tr>
  <td class="private_method">std::vector&lt;AllegroFlare::Physics::Int2D&gt;</td>
  <td class="private_method"><b>get_next_collided_tile_coords_1d</b>(float x=0.0f, float y=0.0f, float velocity=0.0f, float depth_of_body=1.0f, float length_of_edge=1.0f, float tile_length_n=1.0f, float tile_length_m=1.0f)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Physics::TileMapCollisionStepperCollisionInfo&gt;</td>
  <td class="method"><b>get_stepped_tile_collisions</b>(float x=0.0f, float y=0.0f, float velocity_x=0.0f, float velocity_y=0.0f, float width=1.0f, float height=1.0f, float tile_width=1.0f, float tile_height=1.0f)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Physics::TileMapCollisionStepperCollisionInfo&gt;</td>
  <td class="method"><b>calculate_difference_info</b>(std::vector&lt;AllegroFlare::Physics::Int2D&gt; now_tiles={}, std::vector&lt;AllegroFlare::Physics::Int2D&gt; next_tiles={}, float velocity_x=0.0f, float velocity_y=0.0f)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Physics::Int2D&gt;</td>
  <td class="method"><b>tiles_within_aabb2d</b>(AllegroFlare::Physics::AABB2D aabb2d={})</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Physics::Int2D&gt;</td>
  <td class="method"><b>tiles_within</b>(float x=0.0f, float y=0.0f, float width=1.0f, float height=1.0f, float tile_width=1.0f, float tile_height=1.0f)</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>tiles_have_equal_coordinates</b>(AllegroFlare::Physics::Int2D a={0, 0}, AllegroFlare::Physics::Int2D b={0, 0})</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>world_coords_to_tile_coords</b>(float world_pos=0.0f, float tile_length=1.0f)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>world_x_coords_to_tile_coords_x</b>(float world_pos_x=0.0f)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>world_y_coords_to_tile_coords_y</b>(float world_pos_y=0.0f)</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_tile_left_edge</b>(float tile_x=0.0f, float tile_width=16.0f)</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_tile_right_edge</b>(float tile_x=0.0f, float tile_width=16.0f)</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_tile_top_edge</b>(float tile_y=0.0f, float tile_height=16.0f)</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_tile_bottom_edge</b>(float tile_y=0.0f, float tile_height=16.0f)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::AABB2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/AABB2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;AllegroFlare::Physics::Int2D&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Physics/Int2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::pair&lt;int, int&gt;&quot;, &quot;headers&quot;=&gt;[&quot;utility&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::Int2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/Int2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::TileMapCollisionStepperCollisionInfo&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/TileMapCollisionStepperCollisionInfo.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Physics/TileMapCollisionStepperCollisionInfo.q.yml">quintessence/AllegroFlare/Physics/TileMapCollisionStepperCollisionInfo.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["Sort member variables into a better order. Note that the constructor argument order may be a thing in the callers."]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">collided_tile_coordinate</td>
  <td class="property">AllegroFlare::Physics::Int2D</td>
</tr>
<tr>
  <td class="property">tile_value</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">collision_velocity_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">collision_velocity_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">stopped_by_this_collision</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">event</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">collided_against_block_edge</td>
  <td class="property">AllegroFlare::Physics::TileMapCollisionStepperCollisionInfo::CollidingBlockEdge</td>
</tr>
<tr>
  <td class="property">EVENT_UNDEFINED</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">EVENT_ENTERED</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">EVENT_EXITED</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">EVENT_COLLIDED_AGAINST</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">EVENT_STAYED_ON</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_tile_value</b>(int tile_value=-999)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_event</b>(int event=EVENT_UNDEFINED)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>infer_is_a_ground_land</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>infer_is_a_horizontal_wall_collide</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>infer_is_a_vertical_wall_collide</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>build_event_name</b>(int event=0)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>collided_block_edge_is_left_edge</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>collided_block_edge_is_right_edge</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>collided_block_edge_is_top_edge</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>collided_block_edge_is_bottom_edge</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>build_collided_block_edge_name</b>(AllegroFlare::Physics::TileMapCollisionStepperCollisionInfo::CollidingBlockEdge event=CollidingBlockEdge::EDGE_UNDEFINED)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::Int2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/Int2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::TileMapCollisionStepperCollisionInfo::CollidingBlockEdge&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/TileMapCollisionStepperCollisionInfo.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Physics/TileMapCollisionStepperStepResult.q.yml">quintessence/AllegroFlare/Physics/TileMapCollisionStepperStepResult.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">subject_position_before</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">subject_velocity_before</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">subject_position_after</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">subject_velocity_after</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">collisions</td>
  <td class="property">std::vector&lt;AllegroFlare::Physics::TileMapCollisionStepperCollisionInfo&gt;</td>
</tr>
<tr>
  <td class="property">subject_was_stopped_by_collision</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>subject_entered_tile_value</b>(int tile_value=0)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>subject_is_still_on_or_was_previously_on_tile_value</b>(int tile_value=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::TileMapCollisionStepperCollisionInfo&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/TileMapCollisionStepperCollisionInfo.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Player.q.yml">quintessence/AllegroFlare/Player.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">id</td>
  <td class="property">uint32_t</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/ProfilerRenderer.q.yml">quintessence/AllegroFlare/ProfilerRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">timers</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Timer&gt;*</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timer.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/CubeShooter/Entity.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/Entity.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">placement</td>
  <td class="property">AllegroFlare::Placement3D</td>
</tr>
<tr>
  <td class="property">velocity</td>
  <td class="property">AllegroFlare::Placement3D</td>
</tr>
<tr>
  <td class="property">model_3d</td>
  <td class="property">AllegroFlare::Model3D*</td>
</tr>
<tr>
  <td class="property">created_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">min_bounding_box_coordinates</td>
  <td class="property">AllegroFlare::Vec3D</td>
</tr>
<tr>
  <td class="property">max_bounding_box_coordinates</td>
  <td class="property">AllegroFlare::Vec3D</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_age</b>(float time_now=0.0f)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>has_attribute</b>(std::string attribute=&quot;[attribute]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_attribute</b>(std::string attribute=&quot;[attribute]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>unset_attribute</b>(std::string attribute=&quot;[attribute]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Model3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Model3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ElementID&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ElementID.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/CubeShooter/EntityFactory.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/EntityFactory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">scene_root</td>
  <td class="property">AllegroFlare::ElementID*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">model_bin</td>
  <td class="property">AllegroFlare::ModelBin*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Prototypes::CubeShooter::Entity*</td>
  <td class="method"><b>add_cube</b>(float x=0.0f, float y=0.0f, float z=0.0f)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Prototypes::CubeShooter::Entity*</td>
  <td class="method"><b>add_player_bullet</b>(float x=0.0f, float y=0.0f, float z=0.0f)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Prototypes::CubeShooter::Entity*</td>
  <td class="method"><b>add_player_ship</b>(float x=0.0f, float y=0.0f, float z=0.0f)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Prototypes::CubeShooter::Entity*</td>
  <td class="method"><b>add_world_mesh</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::CubeShooter::Entity&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/CubeShooter/Entity.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ElementID&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ElementID.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/CubeShooter/PlayerMovementControl.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/PlayerMovementControl.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">player_controlled_entity</td>
  <td class="property">AllegroFlare::Prototypes::CubeShooter::Entity*</td>
</tr>
<tr>
  <td class="property">position</td>
  <td class="property">AllegroFlare::Vec3D*</td>
</tr>
<tr>
  <td class="property">velocity</td>
  <td class="property">AllegroFlare::Vec3D*</td>
</tr>
<tr>
  <td class="property">max_velocity_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">max_velocity_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">acceleration</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">thruster_max_velocity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">thruster_acceleration_force</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">thruster_active</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">moving_up</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">moving_down</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">moving_left</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">moving_right</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">firing_blaster</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">blaster_fired_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">blaster_refire_rate</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">blaster_fired_on_last_update</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">max_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">min_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">max_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">min_y</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_player_controlled_entity</b>(AllegroFlare::Prototypes::CubeShooter::Entity* player_controlled_entity=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>(float time_now=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::CubeShooter::Entity&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/CubeShooter/Entity.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/CubeShooter/Runner.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/Runner.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">mode</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">framework</td>
  <td class="property">AllegroFlare::Frameworks::Full*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">sample_bin</td>
  <td class="property">AllegroFlare::SampleBin*</td>
</tr>
<tr>
  <td class="property">model_bin</td>
  <td class="property">AllegroFlare::ModelBin*</td>
</tr>
<tr>
  <td class="property">cube_shooter_screen</td>
  <td class="property">AllegroFlare::Prototypes::CubeShooter::Screen</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">EVENT_ACTIVATE_CUBE_SHOOTER_SCREEN</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">MODE_TEST</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">MODE_PRODUCTION</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">MODE_DEVELOPMENT</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">std::map&lt;std::string, std::function&lt;void()&gt;&gt;</td>
  <td class="method"><b>event_map</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>game_event_func</b>(AllegroFlare::GameEvent* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>RUN</b>(std::string mode=&quot;production&quot;, bool disable_escape_key_will_shutdown=false)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_test_mode</b>(std::string mode=&quot;[unset-mode]&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_development_mode</b>(std::string mode=&quot;[unset-mode]&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_production_mode</b>(std::string mode=&quot;[unset-mode]&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>in_development_mode</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>in_production_mode</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>in_test_mode</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_valid_mode</b>(std::string mode=&quot;[unset-mode]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Frameworks::Full&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Frameworks/Full.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SampleBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SampleBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEvent&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::CubeShooter::Screen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/CubeShooter/Screen.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/CubeShooter/Screen.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/Screen.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">sample_bin</td>
  <td class="property">AllegroFlare::SampleBin*</td>
</tr>
<tr>
  <td class="property">model_bin</td>
  <td class="property">AllegroFlare::ModelBin*</td>
</tr>
<tr>
  <td class="property">scene_root</td>
  <td class="property">AllegroFlare::ElementID</td>
</tr>
<tr>
  <td class="property">entity_factory</td>
  <td class="property">AllegroFlare::Prototypes::CubeShooter::EntityFactory</td>
</tr>
<tr>
  <td class="property">player_controlled_entity</td>
  <td class="property">AllegroFlare::Prototypes::CubeShooter::Entity*</td>
</tr>
<tr>
  <td class="property">player_movement_control</td>
  <td class="property">AllegroFlare::Prototypes::CubeShooter::PlayerMovementControl</td>
</tr>
<tr>
  <td class="property">camera</td>
  <td class="property">AllegroFlare::Camera3D</td>
</tr>
<tr>
  <td class="property">shader</td>
  <td class="property">AllegroFlare::Shaders::Base*</td>
</tr>
<tr>
  <td class="property">multiply_shader</td>
  <td class="property">AllegroFlare::Prototypes::CubeShooter::Shaders::Multiply</td>
</tr>
<tr>
  <td class="property">fog_shader</td>
  <td class="property">AllegroFlare::Prototypes::CubeShooter::Shaders::Fog</td>
</tr>
<tr>
  <td class="property">depth_darken_shader</td>
  <td class="property">AllegroFlare::Prototypes::CubeShooter::Shaders::DepthDarken</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_event_emitter</b>(AllegroFlare::EventEmitter* event_emitter=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_bitmap_bin</b>(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_font_bin</b>(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_sample_bin</b>(AllegroFlare::SampleBin* sample_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_model_bin</b>(AllegroFlare::ModelBin* model_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load_level</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_deactivate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>collides</b>(AllegroFlare::Prototypes::CubeShooter::Entity* entity_a=nullptr, AllegroFlare::Prototypes::CubeShooter::Entity* entity_b=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_crosshair</b>(AllegroFlare::Vec3D position=)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_timer_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>key_down_func</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>key_up_func</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SampleBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SampleBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::CubeShooter::Entity&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/CubeShooter/Entity.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::CubeShooter::EntityFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/CubeShooter/EntityFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::CubeShooter::PlayerMovementControl&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/CubeShooter/PlayerMovementControl.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ElementID&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ElementID.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Useful&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::CubeShooter::Shaders::DepthDarken&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/CubeShooter/Shaders/DepthDarken.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::CubeShooter::Shaders::Multiply&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/CubeShooter/Shaders/Multiply.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::CubeShooter::Shaders::Fog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/CubeShooter/Shaders/Fog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/CubeShooter/Shaders/DepthDarken.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/Shaders/DepthDarken.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">torch_type</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_torch_type</b>(int type=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_torch_on</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_torch_off</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>deactivate</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_vertex_source</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_fragment_source</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/CubeShooter/Shaders/Fog.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/Shaders/Fog.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">tint</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">tint_intensity</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>set_values_to_activated_shader</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_vertex_source</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_fragment_source</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/CubeShooter/Shaders/Multiply.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/Shaders/Multiply.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">tint</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">tint_intensity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">pulse_created_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">time_now</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">far_plane</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>set_values_to_activated_shader</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_vertex_source</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_fragment_source</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/Configuration.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Configuration.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">inventory_index</td>
  <td class="property">AllegroFlare::InventoryIndex</td>
</tr>
<tr>
  <td class="property">af_inventory</td>
  <td class="property">AllegroFlare::Inventory</td>
</tr>
<tr>
  <td class="property">flags</td>
  <td class="property">AllegroFlare::Inventory</td>
</tr>
<tr>
  <td class="property">entity_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;</td>
</tr>
<tr>
  <td class="property">room_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Room*&gt;</td>
</tr>
<tr>
  <td class="property">entity_room_associations</td>
  <td class="property">std::map&lt;std::string, std::string&gt;</td>
</tr>
<tr>
  <td class="property">script_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Script&gt;</td>
</tr>
<tr>
  <td class="property">starting_room_identifier</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Inventory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Inventory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryIndex&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryIndex.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Room&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Room.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Script&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Script.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">AllegroFlare::Prototypes::FixedRoom2D::Configuration</td>
  <td class="method"><b>load_original_gametest_default</b>(AllegroFlare::BitmapBin* bitmap_bin=nullptr, AllegroFlare::FontBin* font_bin=nullptr, AllegroFlare::EventEmitter* event_emitter=nullptr, AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper* entity_collection_helper=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::RoomFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/RoomFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Configuration&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Configuration.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">source_configuration</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::Configuration*</td>
</tr>
<tr>
  <td class="property">destination_inventory_index</td>
  <td class="property">AllegroFlare::InventoryIndex*</td>
</tr>
<tr>
  <td class="property">destination_af_inventory</td>
  <td class="property">AllegroFlare::Inventory*</td>
</tr>
<tr>
  <td class="property">destination_flags</td>
  <td class="property">AllegroFlare::Inventory*</td>
</tr>
<tr>
  <td class="property">destination_entity_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;*</td>
</tr>
<tr>
  <td class="property">destination_room_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Room*&gt;*</td>
</tr>
<tr>
  <td class="property">destination_entity_room_associations</td>
  <td class="property">std::map&lt;std::string, std::string&gt;*</td>
</tr>
<tr>
  <td class="property">destination_script_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Script&gt;*</td>
</tr>
<tr>
  <td class="property">destination_starting_room_identifier</td>
  <td class="property">std::string*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>load_from_source_configuration</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::RoomFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/RoomFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Inventory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Inventory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryIndex&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryIndex.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Configuration&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Configuration.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Room&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Room.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Script&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Script.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/Cursor.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Cursor.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">icon_offset_placement</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">info_text_offset_placement</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">info_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">info_text_flags</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">icon_character_num</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">cursor_last_set_at</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move</b>(float distance_x=0.0f, float distance_y=0.0f)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>clamp</b>(float min_x=0.0f, float min_y=0.0f, float max_x=1920.0f, float max_y=1080.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_to</b>(float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>clear_info_text</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_cursor_to_pointer</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_cursor_to_grab</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_unicode_character</b>(ALLEGRO_FONT* font=nullptr, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1}, uint32_t icon=61444, int flags=0)</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_cursor_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_info_text_font</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_cursor</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_info_text</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CloseDialog.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CloseDialog.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">dialog</td>
  <td class="property">AllegroFlare::Elements::DialogBoxes::Base*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotAnItemDialog.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotAnItemDialog.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">item_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">item_bitmap_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotEvidenceDialog.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotEvidenceDialog.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">evidence_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">evidence_bitmap_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogSystem.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogSystem.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">active_dialog</td>
  <td class="property">AllegroFlare::Elements::DialogBoxes::Base*</td>
</tr>
<tr>
  <td class="property">standard_dialog_box_font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">standard_dialog_box_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">DEFAULT_STANDARD_DIALOG_BOX_FONT_NAME</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_STANDARD_DIALOG_BOX_FONT_SIZE</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_bitmap_bin</b>(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_font_bin</b>(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_event_emitter</b>(AllegroFlare::EventEmitter* event_emitter=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>a_dialog_is_active</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>process_dialog_event</b>(AllegroFlare::GameEventDatas::Base* game_event_data=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_dialog_switch_in_event</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_dialog_switch_out_event</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>spawn_basic_dialog</b>(std::vector&lt;std::string&gt; pages={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>spawn_you_got_an_item_dialog</b>(std::string item_name=&quot;[unset-item_name]&quot;, std::string item_bitmap_identifier=&quot;[unset-item_bitmap_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>spawn_you_got_new_evidence_dialog</b>(std::string evidence_name=&quot;[unset-evidence_name]&quot;, std::string evidence_bitmap_identifier=&quot;[unset-evidence_bitmap_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>dialog_advance</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>dialog_cursor_up</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>dialog_cursor_down</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>dialog_is_finished</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>shutdown_dialog</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_up</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_down</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EventNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::DialogEventDatas::CloseDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CloseDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::YouGotEvidence&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/YouGotEvidence.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEvent&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Basic&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::YouGotAnItem&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/YouGotAnItem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::YouGotAnItem&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/YouGotAnItem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryDictionaryItems::WithAttributes&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryDictionaryItems/WithAttributes.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::DialogEventDatas::CreateYouGotAnItemDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotAnItemDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::DialogEventDatas::CreateYouGotEvidenceDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotEvidenceDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">placement</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">on_cursor_interact_script_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">cursor_is_over</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">cursor_entered_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cursor_exited_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cursor_insights_are_hidden</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">show_hover_as_hue_change</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">hidden</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_cursor_enter</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_cursor_leave</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ElementID&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ElementID.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;*</td>
</tr>
<tr>
  <td class="property">entity_room_associations</td>
  <td class="property">std::map&lt;std::string, std::string&gt;*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;</td>
  <td class="method"><b>select_all_in_room_ordered_by_id</b>(std::string room_name=&quot;[unset-room_name]&quot;)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;</td>
  <td class="method"><b>select_all</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>find_dictionary_name_of_entity_that_cursor_is_now_over</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>find_entity_by_dictionary_name</b>(std::string dictionary_listing_name=nullptr)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;</td>
  <td class="method"><b>order_by_id</b>(std::vector&lt;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt; entities_to_order={})</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;</td>
  <td class="method"><b>get_entities_by_entity_names</b>(std::vector&lt;std::string&gt; entity_dictionary_names={})</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::string&gt;</td>
  <td class="method"><b>select_all_entity_names_in_room_name</b>(std::string room_name=&quot;[unset-room_name]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;int, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;string&quot;, &quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, std::string&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/EntityFactory.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/EntityFactory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*</td>
  <td class="method"><b>create_chair_entity</b>(float x=1920/2, float y=1080/2)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*</td>
  <td class="method"><b>create_entity</b>(std::string bitmap_image_identifier=&quot;[unset-bitmap_identifier]&quot;, float x=1920/2, float y=1080/2, float scale=1.0f, std::string name=&quot;[unset-name]&quot;, std::string on_interact_script_name=&quot;[unset-on_interact_script_name]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*</td>
  <td class="method"><b>create_entity_bmp</b>(ALLEGRO_BITMAP* bitmap=nullptr, float x=0, float y=0, float scale=1.0f, std::string name=&quot;[unset-name]&quot;, std::string on_interact_script_name=&quot;[unset-on_interact_script_name]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">inventory_index</td>
  <td class="property">AllegroFlare::InventoryIndex</td>
</tr>
<tr>
  <td class="property">af_inventory</td>
  <td class="property">AllegroFlare::Inventory</td>
</tr>
<tr>
  <td class="property">flags</td>
  <td class="property">AllegroFlare::Inventory</td>
</tr>
<tr>
  <td class="property">entity_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;</td>
</tr>
<tr>
  <td class="property">room_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Room*&gt;</td>
</tr>
<tr>
  <td class="property">entity_room_associations</td>
  <td class="property">std::map&lt;std::string, std::string&gt;</td>
</tr>
<tr>
  <td class="property">script_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Script&gt;</td>
</tr>
<tr>
  <td class="property">script_runner</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::ScriptRunner</td>
</tr>
<tr>
  <td class="property">entity_collection_helper</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper</td>
</tr>
<tr>
  <td class="property">cursor</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::Cursor</td>
</tr>
<tr>
  <td class="property">starting_room_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">current_room</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::Room*</td>
</tr>
<tr>
  <td class="property">room_shader</td>
  <td class="property">AllegroFlare::Shaders::Base*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">dialog_system</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::DialogSystem</td>
</tr>
<tr>
  <td class="property">paused</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">subscribed_to_game_event_names</td>
  <td class="property">std::set&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">standard_dialog_box_font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">standard_dialog_box_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">DEFAULT_STANDARD_DIALOG_BOX_FONT_NAME</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_STANDARD_DIALOG_BOX_FONT_SIZE</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_font_bin</b>(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">std::set&lt;std::string&gt;</td>
  <td class="method"><b>get_subscribed_to_game_event_names</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_subscribed_to_game_event_name</b>(std::string game_event_name=&quot;[unset-game_event_name]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>load_configuration</b>(AllegroFlare::Prototypes::FixedRoom2D::Configuration configuration={})</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>enter_start_room</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>load_gametest_configuration</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>enter_room</b>(std::string room_name=&quot;[unset-room_name]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>unhover_any_and_all_entities</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_current_room_dictionary_name</b>(AllegroFlare::Prototypes::FixedRoom2D::Room* room=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_void_room</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>process_subscribed_to_game_event</b>(AllegroFlare::GameEvent* game_event=nullptr)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>process_interaction_event</b>(AllegroFlare::GameEventDatas::Base* game_event_data=nullptr)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>process_script_event</b>(AllegroFlare::GameEventDatas::Base* game_event_data=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_entities_in_current_room</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;</td>
  <td class="method"><b>get_entities_in_current_room</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_dictionary_name_of_current_room</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>suspend_all_rooms</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>resume_all_rooms</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>pause_game</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>unpause_game</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>dialog_cursor_up</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>dialog_cursor_down</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>dialog_is_finished</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_primary_action</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>interact_with_item_under_cursor</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>emit_interaction_event</b>(std::string item_dictionary_name=&quot;[unset-item_dictionary_name]&quot;, float cursor_x=0.0, float cursor_y=0.0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_close_current_active_dialog_event</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_up</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_down</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_left</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_right</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor</b>(float distance_x=0.0, float distance_y=0.0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_within_room</b>(float distance_x=0.0, float distance_y=0.0, std::vector&lt;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt; entities_in_this_room={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>reset_cursor_to_default</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Cursor&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Cursor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptRunner&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::InteractionEventData&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Inventory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Inventory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::InitiateDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/InitiateDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectItem&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectItem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::EnterRoom&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/EnterRoom.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::RoomFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/RoomFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Inventory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Inventory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryIndex&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryIndex.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ConfigurationLoader&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ConfigurationFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Configuration&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Configuration.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AudioController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AudioController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEvent&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Room&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Room.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Script&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Script.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color::&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EventNames::&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::DialogEventDatas::CloseDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CloseDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryDictionaryItems::WithAttributes&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryDictionaryItems/WithAttributes.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::DialogSystem&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/DialogSystem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EventNames::INTERACTION_EVENT_NAME&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EventNames.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">item_interacted_with</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">cursor_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cursor_y</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/Room.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Room.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["Cursor should not be in this \"room\", and should instead be contained by the FixedRoom2D/Screen.  Disclaimer, Any logic that seems to be confused is probably a mid-refactoring to move the cursor out of the room."]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">min_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">min_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">max_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">max_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">suspended</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">suspended_at</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>suspend</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>resume</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>show</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>hide</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_time&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Cursor&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Cursor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::RoomDictionary&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/RoomDictionary.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptRunner&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::InteractionEventData&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EventNames::INTERACTION_EVENT_NAME&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color::&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/RoomDictionary.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/RoomDictionary.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>run</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/RoomFactory.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/RoomFactory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">entity_collection_helper</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">AllegroFlare::Prototypes::FixedRoom2D::Room*</td>
  <td class="method"><b>create_room</b>(float width=(1920-200), float height=(1080-200))</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Room*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Room.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;, &quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, std::string&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Room&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Room.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/Screen.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Screen.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">fixed_room_2d</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::FixedRoom2D</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">game_event_name_to_emit_on_exit</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">game_event_name_to_emit_to_open_chronicle</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">DEFAULT_EVENT_NAME_ON_EXIT</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_EVENT_NAME_TO_OPEN_CHRONICLE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_bitmap_bin</b>(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_font_bin</b>(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_event_emitter</b>(AllegroFlare::EventEmitter* event_emitter=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load_gametest_configuration</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load_configuration</b>(AllegroFlare::Prototypes::FixedRoom2D::Configuration configuration={})</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>enter_start_room</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>game_event_func</b>(AllegroFlare::GameEvent* game_event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_deactivate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_timer_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>mouse_axes_func</b>(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>mouse_down_func</b>(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>key_char_func</b>(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_event_to_exit</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_event_to_open_chronicle</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>emit_event_to_set_input_hints</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>emit_event_to_set_input_hints_bar_to_inventory_controls</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>emit_event_to_set_input_hints_bar_to_room_controls</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::RoomDictionary&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/RoomDictionary.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::FixedRoom2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEvent*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EventNames::INTERACTION_EVENT_NAME&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::InteractionEventData*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AudioController*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AudioController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Configuration&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Configuration.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AudioController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AudioController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEvent&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEvent.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/Script.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Script.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">lines</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">current_line_num</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">markers_index</td>
  <td class="property">std::map&lt;std::string, int&gt;</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">finished</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_current_line_text</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>goto_next_line</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>goto_marker</b>(std::string identifier=&quot;[unset-marker-to-goto]&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>goto_line_num</b>(int line_num=0)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>at_last_line</b>()</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>at_valid_line</b>()</td>
</tr>
<tr>
  <td class="private_method">int</td>
  <td class="private_method"><b>infer_current_line_index_num</b>()</td>
</tr>
<tr>
  <td class="method">std::pair&lt;std::string, std::string&gt;</td>
  <td class="method"><b>parse_command_and_argument</b>(std::string script_line={})</td>
</tr>
<tr>
  <td class="method">std::map&lt;std::string, int&gt;</td>
  <td class="method"><b>build_markers_index</b>(std::vector&lt;std::string&gt; script_lines={})</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_valid_command_string</b>(std::string command=&quot;[unset-command]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::pair&lt;std::string, std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::php::trim&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/UsefulPHP.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, int&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectEvidence.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectEvidence.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">evidence_dictionary_name_to_collect</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectItem.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectItem.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">item_dictionary_name_to_collect</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/EnterRoom.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/EnterRoom.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">room_dictionary_name_to_enter</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/InitiateDialog.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/InitiateDialog.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">dialog_pages</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">script_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Script&gt;*</td>
</tr>
<tr>
  <td class="property">current_internally_running_script</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::Script</td>
</tr>
<tr>
  <td class="property">bool_eval_func</td>
  <td class="property">std::function&lt;bool(std::string, AllegroFlare::Prototypes::FixedRoom2D::ScriptRunner*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">bool_eval_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">script_freshly_loaded_via_OPEN_SCRIPT</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">paused_for_dialog_to_finish</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">debug_output</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>load_script_by_dictionary_name</b>(std::string script_dictionary_name=&quot;[unset-script_dictionary_name]&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>load_script_lines</b>(std::vector&lt;std::string&gt; script_lines={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>play_or_resume</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>default_bool_eval_func</b>(std::string expression=&quot;[unset-expression]&quot;, AllegroFlare::Prototypes::FixedRoom2D::ScriptRunner* script_runner=nullptr, void* user_data=nullptr)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>parse_and_run_line</b>(std::string raw_script_line=&quot;[empty-script-line]&quot;, int line_num=0, bool auto_assume_uncommanded_line_is_dialog=true)</td>
</tr>
<tr>
  <td class="method">std::pair&lt;std::string, std::string&gt;</td>
  <td class="method"><b>parse_command_and_argument</b>(std::string script_line={})</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>emit_script_event</b>(AllegroFlare::GameEventDatas::Base* event_data=nullptr)</td>
</tr>
<tr>
  <td class="private_method">std::vector&lt;std::string&gt;</td>
  <td class="private_method"><b>split</b>(std::string string=&quot;&quot;, char delimiter=&#39; &#39;)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::string&gt;</td>
  <td class="method"><b>tokenize</b>(std::string str=&quot;&quot;, char delim=&#39;|&#39;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>assert_min_token_count</b>(std::vector&lt;std::string&gt; tokens={}, int min=0)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>assert_token_count_eq</b>(std::vector&lt;std::string&gt; tokens={}, int value=0)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>assert_odd_token_count</b>(std::vector&lt;std::string&gt; tokens={}, int min=0)</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>trim</b>(std::string s=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Script&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Script.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EventNames::SCRIPT_EVENT_NAME&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::InitiateDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/InitiateDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectItem&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectItem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectEvidence&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectEvidence.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::EnterRoom&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/EnterRoom.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Inventory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Inventory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Inventory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Inventory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Script&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Script.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptRunner&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::function&quot;, &quot;headers&quot;=&gt;[&quot;functional&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::find_if&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/MindDive/Hud/Hud.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/Hud/Hud.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">timer</td>
  <td class="property">AllegroFlare::Timer*</td>
</tr>
<tr>
  <td class="property">slate_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">slate_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">backbuffer_sub_bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">camera</td>
  <td class="property">AllegroFlare::Camera2D</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>show_win_slate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>show_die_slate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>show_ready_slate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>clear_slate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>render_stopwatch</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>render_slate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Stopwatch&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Stopwatch.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/MindDive/Hypersync.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/Hypersync.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">song_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">song_bpm</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">timer</td>
  <td class="property">AllegroFlare::Timer</td>
</tr>
<tr>
  <td class="property">audio_stream</td>
  <td class="property">ALLEGRO_AUDIO_STREAM*</td>
</tr>
<tr>
  <td class="property">audio_voice</td>
  <td class="property">ALLEGRO_VOICE*</td>
</tr>
<tr>
  <td class="property">audio_mixer</td>
  <td class="property">ALLEGRO_MIXER*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">stream_is_attached</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">MIN_SONG_BPM</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">latency_sec</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>TODO</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_song_filename</b>(std::string song_filename=&quot;[unset-song-filename.ogg]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_song_bpm</b>(float song_bpm=0.0f)</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_timer_seconds</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_timer_milliseconds</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_timer_microseconds</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_beat_num</b>(float seconds=0.0f)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_measure_num</b>(float seconds=0.0f)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>build_beat_clock_str</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>start</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>destruct</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT_QUEUE&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_AUDIO_STREAM&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VOICE&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_MIXER&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_acodec_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_acodec.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/MindDive/MindDive.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/MindDive.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">sample_bin</td>
  <td class="property">AllegroFlare::SampleBin*</td>
</tr>
<tr>
  <td class="property">current_tunnel_mesh</td>
  <td class="property">AllegroFlare::Prototypes::MindDive::TunnelMesh*</td>
</tr>
<tr>
  <td class="property">hypersync</td>
  <td class="property">AllegroFlare::Prototypes::MindDive::Hypersync</td>
</tr>
<tr>
  <td class="property">surfer_position</td>
  <td class="property">AllegroFlare::Vec3D</td>
</tr>
<tr>
  <td class="property">surfer_velocity</td>
  <td class="property">AllegroFlare::Vec3D</td>
</tr>
<tr>
  <td class="property">surfer_accelerator_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">surfer_break_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">timer</td>
  <td class="property">AllegroFlare::Timer</td>
</tr>
<tr>
  <td class="property">camera</td>
  <td class="property">AllegroFlare::Camera3D</td>
</tr>
<tr>
  <td class="property">hud</td>
  <td class="property">AllegroFlare::Prototypes::MindDive::Hud::Hud</td>
</tr>
<tr>
  <td class="property">state</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surfer_attached_to_playhead_track</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">STATE_RACING</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">STATE_WON</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">STATE_PLAYER_DIED</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">STATE_WAITING_START</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">debug_metronome_sound</td>
  <td class="property">AllegroFlare::Sound*</td>
</tr>
<tr>
  <td class="property">music_started_at</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_bitmap_bin</b>(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_sample_bin</b>(AllegroFlare::SampleBin* sample_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_font_bin</b>(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>start_timer</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>pause_timer</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>reset_timer</b>()</td>
</tr>
<tr>
  <td class="private_method">float</td>
  <td class="private_method"><b>calculate_current_tunnel_mesh_height</b>()</td>
</tr>
<tr>
  <td class="private_method">float</td>
  <td class="private_method"><b>calculate_current_tunnel_mesh_tile_depth</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>reset</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>start_racing</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>attach_surfer_to_playhead_track</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>stop_racing_due_to_death</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>surfer_move_right</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>surfer_move_left</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>surfer_press_accelerator</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>surfer_unpress_accelerator</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>surfer_press_break</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>surfer_unpress_break</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>surfer_stop</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>surfer_move_horizontal_none</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_tunnel</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_hud</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_surfer</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>evaluate_surfer_past_goal</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>play_around_with_collision_step_result</b>(AllegroFlare::Physics::TileMapCollisionStepperStepResult* step_result=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_audio_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_acodec_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_acodec.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::MindDive::TunnelMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/MindDive/TunnelMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Useful&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Stopwatch&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Stopwatch.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;sin&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;glCullFace&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_opengl.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::MindDive::TunnelMeshFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/MindDive/TunnelMeshFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::MindDive::Hud::Hud&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/MindDive/Hud/Hud.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::MindDive::TunnelMeshSurferCollisionResolver&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/MindDive/TunnelMeshSurferCollisionResolver.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::TileMapCollisionStepperStepResult&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/TileMapCollisionStepperStepResult.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Sound&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Sound.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SampleBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SampleBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::MindDive::Hypersync&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/MindDive/Hypersync.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/MindDive/Tunnel.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/Tunnel.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">tile_map</td>
  <td class="property">AllegroFlare::TileMaps::TileMap&lt;AllegroFlare::Prototypes::MindDive::TunnelTiles::Base*&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>fill</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::MindDive::TunnelTiles::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/MindDive/TunnelTiles/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/MindDive/TunnelMesh.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/TunnelMesh.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">atlas</td>
  <td class="property">AllegroFlare::TileMaps::PrimMeshAtlas</td>
</tr>
<tr>
  <td class="property">prim_mesh</td>
  <td class="property">AllegroFlare::TileMaps::PrimMesh</td>
</tr>
<tr>
  <td class="property">collision_tile_map</td>
  <td class="property">AllegroFlare::TileMaps::TileMap&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">atlas_bitmap_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">atlas_bitmap_tile_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">atlas_bitmap_tile_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_atlas_configuration</b>(std::string atlas_bitmap_filename=&quot;[unset-atlas_bitmap_filename]&quot;, int atlas_bitmap_tile_width=1, int atlas_bitmap_tile_height=1)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>resize</b>(int num_columns=1, int num_rows=1)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>rescale_tile_dimensions_to</b>(float tile_width=1, float tile_height=1)</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_real_width</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_real_height</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>obtain_tile_width</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>obtain_tile_height</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>obtain_num_rows</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>obtain_num_columns</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>random_fill</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Random&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Random.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_image_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMesh.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/MindDive/TunnelMeshFactory.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/TunnelMeshFactory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">AllegroFlare::Prototypes::MindDive::TunnelMesh*</td>
  <td class="method"><b>create_classic_random</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Prototypes::MindDive::TunnelMesh*</td>
  <td class="method"><b>create_random_with_walls</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Prototypes::MindDive::TunnelMesh*</td>
  <td class="method"><b>create_from_tmj</b>(std::string tmj_filename=&quot;unset-tmj_filename.tmj&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>random_fill_from</b>(AllegroFlare::Prototypes::MindDive::TunnelMesh* tunnel_mesh=nullptr, std::vector&lt;std::pair&lt;int, int&gt;&gt; inclusion_list={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>random_sparce_placement</b>(AllegroFlare::Prototypes::MindDive::TunnelMesh* tunnel_mesh=nullptr, std::vector&lt;std::pair&lt;int, int&gt;&gt; inclusion_list={}, int one_in_chance=2)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>random_fill_excluding</b>(AllegroFlare::Prototypes::MindDive::TunnelMesh* tunnel_mesh=nullptr, std::set&lt;int&gt; exclusion_list={})</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::MindDive::TunnelMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/MindDive/TunnelMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Random&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Random.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::MindDive::TunnelMeshTMJDataLoader&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/MindDive/TunnelMeshTMJDataLoader.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/MindDive/TunnelMeshSurferCollisionResolver.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/TunnelMeshSurferCollisionResolver.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">tunnel_mesh</td>
  <td class="property">AllegroFlare::Prototypes::MindDive::TunnelMesh*</td>
</tr>
<tr>
  <td class="property">surfer_position</td>
  <td class="property">AllegroFlare::Vec3D*</td>
</tr>
<tr>
  <td class="property">surfer_velocity</td>
  <td class="property">AllegroFlare::Vec3D*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>resolve_classic</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Physics::TileMapCollisionStepperStepResult</td>
  <td class="method"><b>resolve_basic</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Physics::TileMapCollisionStepperStepResult</td>
  <td class="method"><b>resolve</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::MindDive::TunnelMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/MindDive/TunnelMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::TileMapCollisionStepper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/TileMapCollisionStepper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::TileMapCollisionStepperStepResult&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/TileMapCollisionStepperStepResult.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/MindDive/TunnelMeshTMJDataLoader.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/TunnelMeshTMJDataLoader.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">layer_num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">layer_num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">layer_tile_data</td>
  <td class="property">std::vector&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">loaded</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_num_columns</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_num_rows</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_tile_width</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_tile_height</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_layer_num_columns</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_layer_num_rows</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;int&gt;</td>
  <td class="method"><b>get_layer_tile_data</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>load</b>()</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>file_exists</b>(std::string filename=&quot;[unset-filename]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::ifstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;nlohmann::json&quot;, &quot;headers&quot;=&gt;[&quot;lib/nlohmann/json.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::exists&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/MindDive/TunnelRenderer.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/TunnelRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">tunnel_mesh</td>
  <td class="property">AllegroFlare::Prototypes::MindDive::TunnelMesh*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::MindDive::TunnelMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/MindDive/TunnelMesh.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/MindDive/TunnelTiles/Base.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/TunnelTiles/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/MindDive/TunnelTiles/Basic.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/TunnelTiles/Basic.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::MindDive::TunnelTiles::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/MindDive/TunnelTiles/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Base.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Base.q.yml</h3>
    <h3>Overview</h3>
    <p>IMPORTANT - "parent" is being passed in here, but it shadows "parent" on ElementID.</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">parent</td>
  <td class="property">AllegroFlare::ElementID*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ElementID&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ElementID.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["Rename \"place\" to \"placement\". Add a placeholder getter and getter ref with depreciation warning.", "Consider if \"render_order_group\", or \"render_order_z\" should be outside of the object, held in the container"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">placement</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">render_order_group</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">render_order_z</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">velocity</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">bitmap_placement</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">bitmap_alignment_strategy</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">bitmap_flip_h</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">bitmap_blend_mode</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D::BlendMode</td>
</tr>
<tr>
  <td class="property">shader</td>
  <td class="property">AllegroFlare::Shaders::Base*</td>
</tr>
<tr>
  <td class="property">movement_strategy</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base*</td>
</tr>
<tr>
  <td class="property">asset_studio_database</td>
  <td class="property">AllegroFlare::AssetStudio::Database*</td>
</tr>
<tr>
  <td class="property">animation_book</td>
  <td class="property">AllegroFlare::FrameAnimation::Book*</td>
</tr>
<tr>
  <td class="property">animation</td>
  <td class="property">AllegroFlare::FrameAnimation::Animation</td>
</tr>
<tr>
  <td class="property">draw_debug</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">debug_box_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float&amp;</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float&amp;</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float&amp;</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float&amp;</td>
</tr>
<tr>
  <td class="property">vx</td>
  <td class="property">float&amp;</td>
</tr>
<tr>
  <td class="property">vy</td>
  <td class="property">float&amp;</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">AllegroFlare::Placement2D&amp;</td>
  <td class="method"><b>get_place_ref</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_bitmap_alignment_strategy</b>(std::string bitmap_alignment_strategy=&quot;[unset-bitmap_alignment_strategy]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>refresh_bitmap_to_current_animation_frame</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>refresh_bitmap_alignment_and_anchors_to_animation_frame</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_collides_with_player</b>(AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* player_controlled_entity=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_enter_collision_with_player</b>(AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* player_controlled_entity=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_hold_collision_with_player</b>(AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* player_controlled_entity=nullptr, float duration=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_exit_collision_with_player</b>(AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* player_controlled_entity=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_hold_non_collision_with_player</b>(AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* player_controlled_entity=nullptr, float duration=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_collision_update</b>(AllegroFlare::Vec2D previous_placement_position={}, AllegroFlare::Vec2D previous_velocity_position={}, AllegroFlare::Vec2D new_placement_position={}, AllegroFlare::Vec2D new_velocity_position={}, std::vector&lt;AllegroFlare::Physics::TileMapCollisionStepperCollisionInfo&gt;* collision_step_result={}, bool top_edge_is_currently_adjacent_to_wall=false, bool right_edge_is_currently_adjacent_to_wall=false, bool bottom_edge_is_currently_adjacent_to_wall=false, bool left_edge_is_currently_adjacent_to_wall=false)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>set_blending_mode_if_not_normal</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>restore_blending_mode</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_shader</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>deactivate_shader</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>fit_to_bitmap</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>disable_bitmap_alignment_strategy</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>assign_alignment_strategy_values</b>(AllegroFlare::Placement2D* parent_placement=nullptr, ALLEGRO_BITMAP* bitmap=nullptr, float* bitmap_x=nullptr, float* bitmap_y=nullptr, float* bitmap_align_x=nullptr, float* bitmap_align_y=nullptr, std::string bitmap_alignment_strategy=&quot;centered&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_animation_playback_rate</b>(float multiplier=1.0f)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>get_animation_finished</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_current_animation_frame_num</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_animation</b>(std::string animation_name=&quot;[unset-animation_name]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/EntityFlagNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::TileMapCollisionStepperCollisionInfo&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/TileMapCollisionStepperCollisionInfo.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::Animation&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/Animation.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::Book&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/Book.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D::BlendMode&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AssetStudio::Database&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AssetStudio/Database.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">animation_book</td>
  <td class="property">AllegroFlare::FrameAnimation::Book*</td>
</tr>
<tr>
  <td class="property">tile_atlas_repository</td>
  <td class="property">AllegroFlare::TileMaps::TileAtlasRepository*</td>
</tr>
<tr>
  <td class="property">init_entities_drawing_debug</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">enemy_debug_box_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">player_collectable_box_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">goalpost_box_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
  <td class="method"><b>create_from_bitmap_filename</b>(std::string map_name=&quot;[map-name-not-set]&quot;, std::string bitmap_filename=&quot;bitmap-filename-that-has-not-been-set.png&quot;, std::string bitmap_alignment_strategy=&quot;centered&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
  <td class="method"><b>create_for_aabb2d</b>(std::string map_name=&quot;[map-name-not-set]&quot;, float width=(16.0f-1.0f), float height=(16.0f-1.0f))</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Prototypes::Platforming2D::Entities::FrameAnimated2D*</td>
  <td class="method"><b>create_frame_animated</b>(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f, float w=0.0f, float h=0.0f, std::string initial_animation_name=&quot;[unset-initial_animation_name]&quot;, std::string bitmap_alignment_strategy=&quot;centered&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
  <td class="method"><b>create_player_projectile</b>(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f, float width=(8.0f-1.0f), float height=(8.0f-1.0f), AllegroFlare::vec2d vector=AllegroFlare::vec2d(0.0f, 1.0f), float magnitude=1.0f)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
  <td class="method"><b>create_player_emitted_damage_zone</b>(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f, float width=16.0f, float height=16.0f, AllegroFlare::vec2d align=AllegroFlare::vec2d(0.5f, 0.5f))</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Prototypes::Platforming2D::Entities::Enemies::Base*</td>
  <td class="method"><b>create_enemy</b>(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f, float width=(16.0f-1.0f), float height=(16.0f-1.0f))</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Prototypes::Platforming2D::Entities::Enemies::Base*</td>
  <td class="method"><b>create_enemy_move_left</b>(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f, float width=(16.0f-1.0f), float height=(16.0f-1.0f))</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Prototypes::Platforming2D::Entities::Enemies::Base*</td>
  <td class="method"><b>create_tracking_enemy</b>(std::string map_name=&quot;[map-name-not-set]&quot;, AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* tracked_entity=nullptr, float x=0.0f, float y=0.0f, float width=(16.0f-1.0f), float height=(16.0f-1.0f))</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Prototypes::Platforming2D::Entities::Enemies::Base*</td>
  <td class="method"><b>create_flapping_enemy</b>(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f, float width=(16.0f-1.0f), float height=(16.0f-1.0f), float target_elevation=0.0f, float flap_strength=1.0f, float flap_recovery_rate=0.1f)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
  <td class="method"><b>create_collectable</b>(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
  <td class="method"><b>create_door</b>(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f, std::string target_map_name=&quot;[unset-target-map-name]&quot;, float target_spawn_x=0.0f, float target_spawn_y=0.0f)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
  <td class="method"><b>create_game_event_door</b>(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f, std::string game_event_name_to_emit=&quot;[unset-game_event_name_to_emit]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
  <td class="method"><b>create_goalpost</b>(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Prototypes::Platforming2D::Entities::TileMaps::Basic2D*</td>
  <td class="method"><b>create_tile_map</b>(std::string map_name=&quot;[map-name-not-set]&quot;, std::string map_json_filename=&quot;[a-map-tmj-filename-that-is-not-set]&quot;, std::string tile_atlas_bitmap_identifier=&quot;[unset-tile_atlas_bitmap_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>create_entities_from_map__tmj_obj_loader_callback_func</b>(std::string object_type=&quot;[unset-object_type]&quot;, float x=0.0f, float y=0.0f, float width=0.0f, float height=0.0f, int id=0, std::string name=&quot;[unset-name]&quot;, std::string object_layer_name=&quot;[unset-object_layer_name]&quot;, AllegroFlare::Prototypes::Platforming2D::TMJObjectLoaderObjectCustomProperties custom_properties={}, void* data=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>create_entities_from_map__tmj_obj_loader_with_callback_provided_func</b>(std::string object_type=&quot;[unset-object_type]&quot;, float x=0.0f, float y=0.0f, float width=0.0f, float height=0.0f, int id=0, std::string name=&quot;[unset-name]&quot;, std::string object_layer_name=&quot;[unset-object_layer_name]&quot;, AllegroFlare::Prototypes::Platforming2D::TMJObjectLoaderObjectCustomProperties custom_properties={}, void* data=nullptr)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*&gt;</td>
  <td class="method"><b>create_entities_from_map</b>(std::string map_tmj_filename=&quot;[unset-map_tmj_filename]&quot;, std::string map_name=&quot;[unset-map_name]&quot;, std::function&lt;void( std::string, float, float, float, float, int, std::string, std::string, std::string, AllegroFlare::Prototypes::Platforming2D::TMJObjectLoaderObjectCustomProperties, std::vector&lt;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*&gt;*, AllegroFlare::Prototypes::Platforming2D::Entities::Basic2DFactory*, void*) &gt; callback={}, void* callback_data=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::MoveLeft&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveLeft.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::MoveRight&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveRight.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::StayStill&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/StayStill.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::BackAndForthHorizontal&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/BackAndForthHorizontal.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::HoppingLeft&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/HoppingLeft.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Tracking&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Tracking.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::FallOnTrackingRange&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FallOnTrackingRange.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::ReflectOffWalls&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/ReflectOffWalls.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::MoveInDirection&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveInDirection.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Flapping&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Flapping.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::FlappingWithRandomness&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FlappingWithRandomness.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/EntityFlagNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Doors::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Doors/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::TileMaps::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/TileMaps/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::TMJTileMeshLoader&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/TMJTileMeshLoader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Enemies::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Enemies/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::Book&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/Book.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::FrameAnimated2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/FrameAnimated2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::TMJObjectLoader&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/TMJObjectLoader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::TMJObjectLoaderObjectCustomProperties&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/TMJObjectLoaderObjectCustomProperties.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2DFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileAtlasRepository&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileAtlasRepository.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Boss.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Boss.q.yml</h3>
    <h3>Overview</h3>
    <p>{"notes"=>["Review Platforming2D/Bosses.md in documentation for a comprehensive overview of how to use this class."]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">on_death_begin_callback</td>
  <td class="property">std::function&lt;void(AllegroFlare::Prototypes::Platforming2D::Entities::Boss*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_death_begin_callback_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">on_death_end_callback</td>
  <td class="property">std::function&lt;void(AllegroFlare::Prototypes::Platforming2D::Entities::Boss*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_death_end_callback_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_health_bar_value</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_health_bar_max_value</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>call_on_death_begin_callback</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>call_on_death_end_callback</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Boss&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Boss.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/BossZone.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/BossZone.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["consider renaming to BossArea"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">boss</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Boss*</td>
</tr>
<tr>
  <td class="property">boss_is_defeated</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Boss&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Boss.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Doors/Basic2D.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Doors/Basic2D.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">game_event_name_to_emit</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">target_map_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">target_spawn_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">target_spawn_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">is_locked</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Anchored.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Anchored.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">anchor</td>
  <td class="property">AllegroFlare::vec2d</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/BackAndForthHorizontal.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/BackAndForthHorizontal.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">timer</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">travel_speed</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">travel_duration</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">direction_of_travel_is_left</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_collision_update</b>(AllegroFlare::Vec2D previous_place_position={}, AllegroFlare::Vec2D previous_velocity_position={}, AllegroFlare::Vec2D new_place_position={}, AllegroFlare::Vec2D new_velocity_position={}, std::vector&lt;AllegroFlare::Physics::TileMapCollisionStepperCollisionInfo&gt;* collision_step_result={}, bool top_edge_is_currently_adjacent_to_wall=false, bool right_edge_is_currently_adjacent_to_wall=false, bool bottom_edge_is_currently_adjacent_to_wall=false, bool left_edge_is_currently_adjacent_to_wall=false)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::TileMapCollisionStepperCollisionInfo&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/TileMapCollisionStepperCollisionInfo.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FallOnTrackingRange.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FallOnTrackingRange.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">tracked_entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">range_radius</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">triggered</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Flapping.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Flapping.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">target_elevation</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">flap_strength</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">flap_recovery_rate</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">flap_recovery_counter</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">can_flap</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>update_flapability_status</b>()</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>decide_to_flap</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>flap</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FlappingWithRandomness.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FlappingWithRandomness.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">target_elevation</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">flap_strength</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">flap_recovery_rate</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">flap_recovery_counter</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">can_flap</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">random</td>
  <td class="property">AllegroFlare::Random</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_random_seed</b>(uint32_t random_seed=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>flap</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>update_flapability_status</b>()</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>decide_to_flap</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Random&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Random.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/EntityFlagNames.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/HoppingLeft.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/HoppingLeft.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">jump_force</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">speed</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">landing_delay</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">timer</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/EntityFlagNames.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveInDirection.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveInDirection.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">direction</td>
  <td class="property">AllegroFlare::vec2d</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveLeft.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveLeft.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">speed</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveRight.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveRight.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">speed</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/ReflectOffWalls.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/ReflectOffWalls.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">speed</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">moving_right</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">moving_down</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/EntityFlagNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/StayStill.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/StayStill.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Tracking.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Tracking.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">tracked_entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">speed</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/TileMaps/Basic2D.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/TileMaps/Basic2D.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">tile_atlas</td>
  <td class="property">AllegroFlare::TileMaps::PrimMeshAtlas*</td>
</tr>
<tr>
  <td class="property">terrain_tile_mesh</td>
  <td class="property">AllegroFlare::TileMaps::TileMesh*</td>
</tr>
<tr>
  <td class="property">shader_for_terrain_tile_mesh</td>
  <td class="property">AllegroFlare::Shaders::Base*</td>
</tr>
<tr>
  <td class="property">background_tile_mesh</td>
  <td class="property">AllegroFlare::TileMaps::TileMesh*</td>
</tr>
<tr>
  <td class="property">shader_for_background_tile_mesh</td>
  <td class="property">AllegroFlare::Shaders::Base*</td>
</tr>
<tr>
  <td class="property">foreground_tile_mesh</td>
  <td class="property">AllegroFlare::TileMaps::TileMesh*</td>
</tr>
<tr>
  <td class="property">shader_for_foreground_tile_mesh</td>
  <td class="property">AllegroFlare::Shaders::Base*</td>
</tr>
<tr>
  <td class="property">collision_tile_map</td>
  <td class="property">AllegroFlare::TileMaps::TileMap&lt;int&gt;*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>destroy</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/EntityCollectionHelper.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/EntityCollectionHelper.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entities</td>
  <td class="property">std::vector&lt;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*&gt;*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*&gt;</td>
  <td class="method"><b>select_collectable_by_player</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*&gt;</td>
  <td class="method"><b>select_collectable_by_player_on_map</b>(std::string on_map_name=&quot;[on-map-name-not-set]&quot;)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*&gt;</td>
  <td class="method"><b>select_collides_with_player</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*&gt;</td>
  <td class="method"><b>select_interactable_by_player</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*&gt;</td>
  <td class="method"><b>select_all_interactable_by_player_currently_colliding_with_player</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*&gt;</td>
  <td class="method"><b>select_goalposts</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*&gt;</td>
  <td class="method"><b>select_save_points</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*&gt;</td>
  <td class="method"><b>select_boss_zones</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*&gt;</td>
  <td class="method"><b>select_doors</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
  <td class="method"><b>find_first_entity_by_tmj_object_name</b>(std::string tmj_object_name=&quot;[unset-tmj_object_name]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
  <td class="method"><b>find_entity_by_tmj_object_id</b>(int tmj_object_id=-1)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
  <td class="method"><b>find_entity_by_tmj_object_id_on_map_name</b>(int tmj_object_id=-1, std::string map_name=&quot;[unset-map_name]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Prototypes::Platforming2D::Entities::Doors::Basic2D*</td>
  <td class="method"><b>find_door_by_tmj_object_id</b>(int tmj_object_id=0)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Prototypes::Platforming2D::Entities::Doors::Basic2D*</td>
  <td class="method"><b>find_door_by_target_door_name</b>(std::string target_door_name=&quot;[unset-target_door_name]&quot;)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*&gt;</td>
  <td class="method"><b>select_on_map</b>(std::string on_map_name=&quot;[on-map-name-not-set]&quot;)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*&gt;</td>
  <td class="method"><b>select_on_map_y_sorted</b>(std::string on_map_name=&quot;[on-map-name-not-set]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Prototypes::Platforming2D::Entities::TileMaps::Basic2D*</td>
  <td class="method"><b>find_map_by_name</b>(std::string map_name=&quot;[find-map-name-not-set]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/EntityFlagNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::TileMaps::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/TileMaps/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Doors::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Doors/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/EntityControlConnectors/Base.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/EntityControlConnectors/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update_player_controls_on_player_controlled_entity</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>key_down_func</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>key_up_func</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/EntityControlConnectors/Basic2D.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/EntityControlConnectors/Basic2D.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">basic_2d_entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">right_pressed</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">left_pressed</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update_player_controls_on_player_controlled_entity</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>key_down_func</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>key_up_func</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>attempt_jump</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::EntityControlConnectors::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/EntityControlConnectors/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/EntityFlagNames.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/MapDictionaryListing.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/MapDictionaryListing.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">tmj_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">tile_atlas_bitmap_identifier</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Screen.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Screen.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["Test the usage of \"create_entities_from_map_callback\" and \"create_entities_from_map_callback_user_data\" when loading a TMJ file.", "Attention needs to be brought to \"gameplay_suspended\" managing (This could be used during a game pause, some active dialog, an opened inventory screen, a transition, etc.).  The consequences of a paused state remains unevaluated. Some concerns include... - some entities may rely on real-world clocks to update their states - user controls may become backlogged, need to be cleared or recaptured at unsuspend - other things not considered - possible re-collisions on unpause - audio (pausing in-environment and in-game sound effects) - animations should pause, animations could be on real-world clocks", "Figure out when \"last_activated_save_point\" should be cleared (on level_load?)"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">data_folder_path</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">tile_atlas_repository</td>
  <td class="property">AllegroFlare::TileMaps::TileAtlasRepository</td>
</tr>
<tr>
  <td class="property">currently_active_map</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::TileMaps::Basic2D*</td>
</tr>
<tr>
  <td class="property">currently_active_map_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">current_boss_zone</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::BossZone*</td>
</tr>
<tr>
  <td class="property">in_boss_zone</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">entity_pool</td>
  <td class="property">std::vector&lt;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*&gt;</td>
</tr>
<tr>
  <td class="property">map_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::Platforming2D::MapDictionaryListing&gt;</td>
</tr>
<tr>
  <td class="property">gravity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">gravity_reversed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">camera</td>
  <td class="property">AllegroFlare::Camera2D</td>
</tr>
<tr>
  <td class="property">camera_baseline_zoom</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">player_controlled_entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">last_activated_save_point</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">show_terrain_tile_mesh</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">show_background_tile_mesh</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">show_foreground_tile_mesh</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">show_collision_tile_map</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">show_visual_hint_on_suspended_gameplay</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">entity_control_connector</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::EntityControlConnectors::Base*</td>
</tr>
<tr>
  <td class="property">collision_stepper</td>
  <td class="property">AllegroFlare::Physics::TileMapCollisionStepper</td>
</tr>
<tr>
  <td class="property">camera_control_strategy</td>
  <td class="property">AllegroFlare::CameraControlStrategies2D::Base*</td>
</tr>
<tr>
  <td class="property">create_entities_from_map_callback</td>
  <td class="property">std::function&lt;void( std::string, float, float, float, float, int, std::string, std::string, std::string, AllegroFlare::Prototypes::Platforming2D::TMJObjectLoaderObjectCustomProperties, std::vector&lt;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*&gt;*, AllegroFlare::Prototypes::Platforming2D::Entities::Basic2DFactory*, void*) &gt;</td>
</tr>
<tr>
  <td class="property">create_entities_from_map_callback_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">show_debugging_info</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">maps_loaded</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_DATA_FOLDER_PATH</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>clear</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_currently_active_map</b>(std::string name=&quot;[unset-current-map-name-to-use]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_player_controlled_entity</b>(AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* entity=nullptr, bool also_set_as_camera_tracked_object=true, bool also_setup_a_basic2d_entity_control_connector=true)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_camera_control_strategy</b>(AllegroFlare::CameraControlStrategies2D::Base* camera_control_strategy=nullptr)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Prototypes::Platforming2D::Entities::TileMaps::Basic2D*</td>
  <td class="method"><b>find_map_by_name</b>(std::string name=&quot;[unset-map-name]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_deactivate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_map_dictionary</b>(std::map&lt;std::string, AllegroFlare::Prototypes::Platforming2D::MapDictionaryListing&gt; map_dictionary={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load_maps_in_dictionary</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>post_process_loaded_maps</b>(std::vector&lt;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*&gt;* entity_pool=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize_camera_control</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>initialize_camera</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>add_entity_to_pool</b>(AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* entity=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>player_emit_projectile</b>(float magnitude=3.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>reverse_gravity</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_entity_environment_collision_step</b>(AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* entity=nullptr, std::vector&lt;AllegroFlare::Physics::TileMapCollisionStepperCollisionInfo&gt;* collision_step_results=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update_entities</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>check_and_respond_if_player_death</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>cleanup_entities_flagged_for_deletion</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>position_entity_bottom_most_edge</b>(AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* entity=nullptr, std::string map_name=&quot;[unset-map_name]&quot;, float x=0.0f, float y=0.0f, float y_offset=0.01f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_enter_door</b>(AllegroFlare::Prototypes::Platforming2D::Entities::Doors::Basic2D* door=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>reposition_player_controlled_entity_to_door_destination</b>(AllegroFlare::Prototypes::Platforming2D::Entities::Doors::Basic2D* door=nullptr)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>check_player_collisions_with_doors</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>on_player_controlled_entity_collision_with_entity</b>(AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* player_controlled_entity=nullptr, AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* entity=nullptr)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>on_enter_player_controlled_entity_collision_with_entity</b>(AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* player_controlled_entity=nullptr, AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* entity=nullptr)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>on_exit_player_controlled_entity_collision_with_entity</b>(AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* player_controlled_entity=nullptr, AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* entity=nullptr)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>on_hold_player_controlled_entity_collision_with_entity</b>(AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* player_controlled_entity=nullptr, AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* entity=nullptr, float duration=0.0f)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>on_hold_player_controlled_entity_non_collision_with_entity</b>(AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* player_controlled_entity=nullptr, AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* entity=nullptr, float duration=0.0f)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>on_player_controlled_entity_collision_with_interactable</b>(AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* player_controlled_entity=nullptr, AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* entity=nullptr)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>on_enter_player_controlled_entity_collision_with_interactable</b>(AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* player_controlled_entity=nullptr, AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* entity=nullptr)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>on_exit_player_controlled_entity_collision_with_interactable</b>(AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* player_controlled_entity=nullptr, AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* entity=nullptr)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>on_hold_player_controlled_entity_collision_with_interactable</b>(AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* player_controlled_entity=nullptr, AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* entity=nullptr, float duration=0.0f)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>on_hold_player_controlled_entity_non_collision_with_interactable</b>(AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* player_controlled_entity=nullptr, AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* entity=nullptr, float duration=0.0f)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>update_player_collisions_with_COLLIDES_WITH_PLAYER</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>spawn_player_emitted_damage_zone</b>(std::string map_name=&quot;[unset-map_name]&quot;, float x=0.0f, float y=0.0f, float width=16.0f, float height=16.0f)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>update_player_collisions_with_collectables</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>update_entity_collisions_with_damage_zones</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>update_player_collisions_with_save_points</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>update_player_collisions_with_interactables</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_enter_boss_zone</b>(AllegroFlare::Prototypes::Platforming2D::Entities::BossZone* boss_zone=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_exit_boss_zone</b>(AllegroFlare::Prototypes::Platforming2D::Entities::BossZone* boss_zone=nullptr)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>update_player_collisions_with_boss_zones</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update_player_collisions_with_goalposts</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_entities_sorted_by_render_order</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_hud</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw__before_background_tile_mesh_render_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw__before_terrain_tile_mesh_render_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw__before_foreground_tile_mesh_render_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_debugging</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>toggle_show_collision_tile_map</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>toggle_show_terrain_tile_mesh</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_update_func</b>(double time_now=0.0, double delta_time=0.0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_render_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>key_char_func</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>key_up_func</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>key_down_func</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_down_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_up_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_axis_change_func</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>user_event_func</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_collision_tile_map</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::TileMaps::PrimMeshAtlas*</td>
  <td class="method"><b>get_tile_atlas</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::TileMaps::TileMesh*</td>
  <td class="method"><b>get_terrain_tile_mesh</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::TileMaps::TileMesh*</td>
  <td class="method"><b>get_background_tile_mesh</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>background_tile_mesh_exists</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::TileMaps::TileMesh*</td>
  <td class="method"><b>get_foreground_tile_mesh</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>foreground_tile_mesh_exists</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::TileMaps::TileMap&lt;int&gt;*</td>
  <td class="method"><b>get_collision_tile_map</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*&gt;</td>
  <td class="method"><b>get_current_map_entities</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_FONT*</td>
  <td class="method"><b>obtain_debug_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::fixed&quot;, &quot;headers&quot;=&gt;[&quot;iomanip&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;int, int&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControlsProcessor&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControlsProcessor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2DFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Frameworks::Full&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Frameworks/Full.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::TileMapCollisionStepper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/TileMapCollisionStepper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::AABB2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/AABB2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/EntityFlagNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CameraControlStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CameraControlStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CameraControlStrategies2D::Snap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CameraControlStrategies2D/Snap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CameraControlStrategies2D::SmoothSnap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CameraControlStrategies2D/SmoothSnap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CameraControlStrategies2D::SmoothSnapWithZoomEffect&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CameraControlStrategies2D/SmoothSnapWithZoomEffect.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CameraControlStrategies2D::HorizontalRail&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CameraControlStrategies2D/HorizontalRail.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::EntityCollectionHelper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/EntityCollectionHelper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::TileMaps::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/TileMaps/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Doors::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Doors/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::find&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;tan&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Display&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Display.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::GenericController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/GenericController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Gameplay&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Gameplay.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::EntityControlConnectors::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/EntityControlConnectors/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::EntityControlConnectors::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/EntityControlConnectors/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::TMJObjectLoaderObjectCustomProperties&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/TMJObjectLoaderObjectCustomProperties.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::MapDictionaryListing&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/MapDictionaryListing.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::numeric_limits&quot;, &quot;headers&quot;=&gt;[&quot;limits&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::TileMapCollisionStepperCollisionInfo&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/TileMapCollisionStepperCollisionInfo.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::BossZone&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/BossZone.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileAtlasRepository&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileAtlasRepository.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/TMJDataLoader.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/TMJDataLoader.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["Move the \"normalize_tile_data_from_tilesets\" functionality out of this class and make it the responsibility of the user to do this. The TMJDataLoader class should only load data from the TMJ file and make it available as data accessible from the class."]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">layer_num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">layer_num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">layer_tile_data</td>
  <td class="property">std::vector&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">foreground_tilelayer_exists</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">foreground_tilelayer_num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">foreground_tilelayer_num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">foreground_tilelayer_tile_data</td>
  <td class="property">std::vector&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">background_tilelayer_exists</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">background_tilelayer_num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">background_tilelayer_num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">background_tilelayer_tile_data</td>
  <td class="property">std::vector&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">collision_layer_num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">collision_layer_num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">collision_layer_tile_data</td>
  <td class="property">std::vector&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">normalize_tile_data_from_tilesets</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">reduce_any_non_zero_collision_layer_data_to_1</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">loaded</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_num_columns</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_num_rows</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_tile_width</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_tile_height</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_layer_num_columns</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_layer_num_rows</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;int&gt;</td>
  <td class="method"><b>get_layer_tile_data</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>get_foreground_tilelayer_exists</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_foreground_tilelayer_num_columns</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_foreground_tilelayer_num_rows</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;int&gt;</td>
  <td class="method"><b>get_foreground_tilelayer_tile_data</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>get_background_tilelayer_exists</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_background_tilelayer_num_columns</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_background_tilelayer_num_rows</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;int&gt;</td>
  <td class="method"><b>get_background_tilelayer_tile_data</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_collision_layer_num_columns</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_collision_layer_num_rows</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;int&gt;</td>
  <td class="method"><b>get_collision_layer_tile_data</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>load</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;int&gt;</td>
  <td class="method"><b>normalize_tile_data_to_tilesets_firstgids</b>(std::vector&lt;int&gt; data={}, std::set&lt;int&gt; tilesets_firstgids={})</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>file_exists</b>(std::string filename=&quot;[unset-filename]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::ifstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;nlohmann::json&quot;, &quot;headers&quot;=&gt;[&quot;lib/nlohmann/json.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::exists&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::StringFormatValidator&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/StringFormatValidator.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/TMJMeshLoader.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/TMJMeshLoader.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["Resolve hard-coded hack to fix tiled tile 0 to be transparent", "Move more of the logic for building the mesh from the TMJDataLoader into this class, for example the \"terrain_override\" layer could be composited here instead."]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">tmj_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">tile_atlas_bitmap_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">tile_atlas_tile_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_atlas_tile_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_atlas</td>
  <td class="property">AllegroFlare::TileMaps::PrimMeshAtlas*</td>
</tr>
<tr>
  <td class="property">mesh</td>
  <td class="property">AllegroFlare::TileMaps::PrimMesh*</td>
</tr>
<tr>
  <td class="property">background_mesh</td>
  <td class="property">AllegroFlare::TileMaps::PrimMesh*</td>
</tr>
<tr>
  <td class="property">foreground_mesh</td>
  <td class="property">AllegroFlare::TileMaps::PrimMesh*</td>
</tr>
<tr>
  <td class="property">collision_tile_map</td>
  <td class="property">AllegroFlare::TileMaps::TileMap&lt;int&gt;*</td>
</tr>
<tr>
  <td class="property">loaded</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">AllegroFlare::TileMaps::PrimMeshAtlas*</td>
  <td class="method"><b>get_tile_atlas</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::TileMaps::PrimMesh*</td>
  <td class="method"><b>get_mesh</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::TileMaps::PrimMesh*</td>
  <td class="method"><b>get_background_mesh</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::TileMaps::PrimMesh*</td>
  <td class="method"><b>get_foreground_mesh</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::TileMaps::TileMap&lt;int&gt;*</td>
  <td class="method"><b>get_collision_tile_map</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>load</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ifstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;nlohmann::json&quot;, &quot;headers&quot;=&gt;[&quot;lib/nlohmann/json.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileAtlasBuilder&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileAtlasBuilder.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::TMJDataLoader&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/TMJDataLoader.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/TMJObjectLoader.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/TMJObjectLoader.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">object_parsed_callback</td>
  <td class="property">std::function&lt;void(std::string, float, float, float, float, int, std::string, std::string, AllegroFlare::Prototypes::Platforming2D::TMJObjectLoaderObjectCustomProperties, void*)&gt;</td>
</tr>
<tr>
  <td class="property">object_parsed_callback_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">loaded</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load</b>()</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>file_exists</b>(std::string filename=&quot;[unset-filename]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;nlohmann::json&quot;, &quot;headers&quot;=&gt;[&quot;lib/nlohmann/json.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::exists&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::ifstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::function&quot;, &quot;headers&quot;=&gt;[&quot;functional&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::TMJObjectLoaderObjectCustomProperties&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/TMJObjectLoaderObjectCustomProperties.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/TMJObjectLoaderObjectCustomProperties.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/TMJObjectLoaderObjectCustomProperties.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">string_properties</td>
  <td class="property">std::map&lt;std::string, std::string&gt;</td>
</tr>
<tr>
  <td class="property">bool_properties</td>
  <td class="property">std::map&lt;std::string, bool&gt;</td>
</tr>
<tr>
  <td class="property">int_properties</td>
  <td class="property">std::map&lt;std::string, int&gt;</td>
</tr>
<tr>
  <td class="property">float_properties</td>
  <td class="property">std::map&lt;std::string, float&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_keys_in_list</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>clear</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>add_string</b>(std::string name=&quot;[unset-name]&quot;, std::string value=&quot;[unset-value]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>add_bool</b>(std::string name=&quot;[unset-name]&quot;, bool value=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>add_float</b>(std::string name=&quot;[unset-name]&quot;, float value=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>add_int</b>(std::string name=&quot;[unset-name]&quot;, int value=0)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_string</b>(std::string name=&quot;[unset-name]&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>get_bool</b>(std::string name=&quot;[unset-name]&quot;)</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_float</b>(std::string name=&quot;[unset-name]&quot;)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_int</b>(std::string name=&quot;[unset-name]&quot;)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_type</b>(std::string name=&quot;[unset-name]&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>exists</b>(std::string name=&quot;[unset-name]&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_float</b>(std::string name=&quot;[unset-name]&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_bool</b>(std::string name=&quot;[unset-name]&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_int</b>(std::string name=&quot;[unset-name]&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_string</b>(std::string name=&quot;[unset-name]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/TMJTileMeshLoader.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/TMJTileMeshLoader.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["Resolve hard-coded hack to fix tiled tile 0 to be transparent", "Move more of the logic for building the mesh from the TMJDataLoader into this class, for example the \"terrain_override\" layer could be composited here instead."]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">tmj_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">tile_atlas_bitmap_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">tile_atlas_tile_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_atlas_tile_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_atlas</td>
  <td class="property">AllegroFlare::TileMaps::PrimMeshAtlas*</td>
</tr>
<tr>
  <td class="property">terrain_mesh</td>
  <td class="property">AllegroFlare::TileMaps::TileMesh*</td>
</tr>
<tr>
  <td class="property">background_mesh</td>
  <td class="property">AllegroFlare::TileMaps::TileMesh*</td>
</tr>
<tr>
  <td class="property">foreground_mesh</td>
  <td class="property">AllegroFlare::TileMaps::TileMesh*</td>
</tr>
<tr>
  <td class="property">collision_tile_map</td>
  <td class="property">AllegroFlare::TileMaps::TileMap&lt;int&gt;*</td>
</tr>
<tr>
  <td class="property">loaded</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_bitmap_bin</b>(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_tmj_filename</b>(std::string tmj_filename=&quot;[unset-tmj_filename]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_tile_atlas_bitmap_identifier</b>(std::string tile_atlas_bitmap_identifier=&quot;[unset-tile_atlas_bitmap_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::TileMaps::PrimMeshAtlas*</td>
  <td class="method"><b>get_tile_atlas</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::TileMaps::TileMesh*</td>
  <td class="method"><b>get_terrain_mesh</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::TileMaps::TileMesh*</td>
  <td class="method"><b>get_background_mesh</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::TileMaps::TileMesh*</td>
  <td class="method"><b>get_foreground_mesh</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::TileMaps::TileMap&lt;int&gt;*</td>
  <td class="method"><b>get_collision_tile_map</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>load</b>()</td>
</tr>
<tr>
  <td class="method">std::tuple&lt;bool, bool, bool, bool, int&gt;</td>
  <td class="method"><b>extract_tmj_tile_flip_properties</b>(uint32_t tmj_tile_value=0)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::TileMaps::TileMesh*</td>
  <td class="method"><b>create_mesh</b>(AllegroFlare::TileMaps::PrimMeshAtlas* tile_atlas=nullptr, int num_columns=0, int num_rows=0, int tile_width=16, int tile_height=16, std::vector&lt;int&gt; tile_data={}, bool filter_out_flipped_tile_numbers=false)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;nlohmann::json&quot;, &quot;headers&quot;=&gt;[&quot;lib/nlohmann/json.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileAtlasBuilder&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileAtlasBuilder.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::TMJDataLoader&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/TMJDataLoader.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Solitare/Solitare.q.yml">quintessence/AllegroFlare/Prototypes/Solitare/Solitare.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">stock</td>
  <td class="property">AllegroFlare::Elements::PlayingCards::Deck</td>
</tr>
<tr>
  <td class="property">waste</td>
  <td class="property">AllegroFlare::Elements::PlayingCards::Deck</td>
</tr>
<tr>
  <td class="property">tableau</td>
  <td class="property">std::vector&lt;std::vector&lt;std::tuple&lt;bool, AllegroFlare::Elements::PlayingCards::Card&gt;&gt;&gt;</td>
</tr>
<tr>
  <td class="property">foundations</td>
  <td class="property">std::vector&lt;std::vector&lt;AllegroFlare::Elements::PlayingCards::Deck&gt;&gt;</td>
</tr>
<tr>
  <td class="property">state</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>start</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>flip_topmost_card_on_tableau_column_to_face_up</b>(int tableau_column_num=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>place_top_stock_card_on_waste</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>place_top_waste_card_on_foundation</b>(int foundation_index_num=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>replenish_stock_with_waste</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cards_from_tableau_column_to_other_tableau_column</b>(int source_tableau_column_num=0, int destination_tableau_column_num=0, int num_cards_from_topmost_card=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_topmost_tableau_column_card_to_foundation</b>(int tableau_column_num=0)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>deal_cards</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>set_state_playing</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>check_game_win_or_lose</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>set_state_game_won</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>set_state_game_lost</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>stock_num_cards</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::PlayingCards::Card&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/PlayingCards/Card.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::PlayingCards::Deck&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/PlayingCards/Deck.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::PlayingCards::DeckFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/PlayingCards/DeckFactory.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/TileDrive/Hud/Hud.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/Hud/Hud.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">slate_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">slate_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">backbuffer_sub_bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">camera</td>
  <td class="property">AllegroFlare::Camera2D</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>show_win_slate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>show_die_slate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>show_ready_slate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>clear_slate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>render_slate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Stopwatch&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Stopwatch.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/TileDrive/Screen.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/Screen.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">sample_bin</td>
  <td class="property">AllegroFlare::SampleBin*</td>
</tr>
<tr>
  <td class="property">tile_drive</td>
  <td class="property">AllegroFlare::Prototypes::TileDrive::TileDrive</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_bitmap_bin</b>(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_sample_bin</b>(AllegroFlare::SampleBin* sample_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_font_bin</b>(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_event_emitter</b>(AllegroFlare::EventEmitter* event_emitter=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_maps_folder</b>(std::string maps_folder=&quot;[unset-maps_folder-arg]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_terrain_mesh_dictionary</b>(std::map&lt;std::string, AllegroFlare::Prototypes::TileDrive::TerrainMeshDictionaryRecord&gt; terrain_mesh_dictionary={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_current_map_identifier</b>(std::string current_map_identifier=&quot;[unset-current_map_identifier-arg]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_collision_stepper_step_result_callback</b>(std::function&lt;void(AllegroFlare::Physics::TileMapCollisionStepperStepResult*,AllegroFlare::Prototypes::TileDrive::TileDrive*,void*)&gt; collision_stepper_step_result_callback={}, void* collision_stepper_step_result_callback_user_data=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_timer_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>key_down_func</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>key_up_func</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SampleBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SampleBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::TileDrive::TileDrive&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/TileDrive/TileDrive.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::TileDrive::TerrainMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/TileDrive/TerrainMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::function&quot;, &quot;headers&quot;=&gt;[&quot;functional&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::TileMapCollisionStepperStepResult&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/TileMapCollisionStepperStepResult.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::TileDrive::TerrainMeshDictionaryRecord&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/TileDrive/TerrainMeshDictionaryRecord.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMesh.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMesh.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">atlas</td>
  <td class="property">AllegroFlare::TileMaps::PrimMeshAtlas</td>
</tr>
<tr>
  <td class="property">prim_mesh</td>
  <td class="property">AllegroFlare::TileMaps::PrimMesh</td>
</tr>
<tr>
  <td class="property">collision_tile_map</td>
  <td class="property">AllegroFlare::TileMaps::TileMap&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">atlas_bitmap_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">atlas_bitmap_tile_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">atlas_bitmap_tile_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_atlas_configuration</b>(std::string atlas_bitmap_filename=&quot;[unset-atlas_bitmap_filename]&quot;, int atlas_bitmap_tile_width=1, int atlas_bitmap_tile_height=1)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>resize</b>(int num_columns=1, int num_rows=1)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>rescale_tile_dimensions_to</b>(float tile_width=1, float tile_height=1)</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_real_width</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_real_height</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>obtain_tile_width</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>obtain_tile_height</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>obtain_num_rows</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>obtain_num_columns</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>random_fill</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Random&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Random.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_image_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMesh.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshDictionaryRecord.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshDictionaryRecord.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">tmj_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">tile_atlas_bitmap_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">tile_atlas_tile_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_atlas_tile_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">terrain_mesh</td>
  <td class="property">AllegroFlare::Prototypes::TileDrive::TerrainMesh*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::TileDrive::TerrainMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/TileDrive/TerrainMesh.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshDriverCollisionResolver.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshDriverCollisionResolver.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">tunnel_mesh</td>
  <td class="property">AllegroFlare::Prototypes::TileDrive::TerrainMesh*</td>
</tr>
<tr>
  <td class="property">surfer_position</td>
  <td class="property">AllegroFlare::Vec3D*</td>
</tr>
<tr>
  <td class="property">surfer_velocity</td>
  <td class="property">AllegroFlare::Vec3D*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>resolve_classic</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Physics::TileMapCollisionStepperStepResult</td>
  <td class="method"><b>resolve_basic</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Physics::TileMapCollisionStepperStepResult</td>
  <td class="method"><b>resolve</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::TileDrive::TerrainMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/TileDrive/TerrainMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::TileMapCollisionStepper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/TileMapCollisionStepper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::TileMapCollisionStepperStepResult&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/TileMapCollisionStepperStepResult.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshFactory.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshFactory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">AllegroFlare::Prototypes::TileDrive::TerrainMesh*</td>
  <td class="method"><b>create_classic_random</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Prototypes::TileDrive::TerrainMesh*</td>
  <td class="method"><b>create_random_with_walls</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Prototypes::TileDrive::TerrainMesh*</td>
  <td class="method"><b>create_from_tmj</b>(std::string tmj_filename=&quot;unset-tmj_filename.tmj&quot;, std::string tilemap_bitmap_identifier=&quot;[unset-tilemap_bitmap_identifier]&quot;, int tilemap_tile_width=50, int tilemap_tile_height=50)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>random_fill_from</b>(AllegroFlare::Prototypes::TileDrive::TerrainMesh* terrain_mesh=nullptr, std::vector&lt;std::pair&lt;int, int&gt;&gt; inclusion_list={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>random_sparce_placement</b>(AllegroFlare::Prototypes::TileDrive::TerrainMesh* terrain_mesh=nullptr, std::vector&lt;std::pair&lt;int, int&gt;&gt; inclusion_list={}, int one_in_chance=2)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>random_fill_excluding</b>(AllegroFlare::Prototypes::TileDrive::TerrainMesh* terrain_mesh=nullptr, std::set&lt;int&gt; exclusion_list={})</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::TileDrive::TerrainMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/TileDrive/TerrainMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Random&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Random.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::TileDrive::TerrainMeshTMJDataLoader&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/TileDrive/TerrainMeshTMJDataLoader.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshTMJDataLoader.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshTMJDataLoader.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">layer_num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">layer_num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">layer_tile_data</td>
  <td class="property">std::vector&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">collision_layer_tile_data</td>
  <td class="property">std::vector&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">collision_layer_present</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">loaded</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_num_columns</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_num_rows</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_tile_width</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_tile_height</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_layer_num_columns</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_layer_num_rows</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;int&gt;</td>
  <td class="method"><b>get_layer_tile_data</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;int&gt;</td>
  <td class="method"><b>get_collision_layer_tile_data</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>get_collision_layer_present</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>load</b>()</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>file_exists</b>(std::string filename=&quot;[unset-filename]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::ifstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;nlohmann::json&quot;, &quot;headers&quot;=&gt;[&quot;lib/nlohmann/json.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::exists&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/TileDrive/TileDrive.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/TileDrive.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">sample_bin</td>
  <td class="property">AllegroFlare::SampleBin*</td>
</tr>
<tr>
  <td class="property">current_terrain_mesh</td>
  <td class="property">AllegroFlare::Prototypes::TileDrive::TerrainMesh*</td>
</tr>
<tr>
  <td class="property">terrain_mesh_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::TileDrive::TerrainMeshDictionaryRecord&gt;</td>
</tr>
<tr>
  <td class="property">current_map_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">maps_folder</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">driver_position</td>
  <td class="property">AllegroFlare::Vec3D</td>
</tr>
<tr>
  <td class="property">driver_velocity</td>
  <td class="property">AllegroFlare::Vec3D</td>
</tr>
<tr>
  <td class="property">driver_acceleration_velocity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">driver_turn_rotation</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">driver_turning_velocity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">driver_accelerator_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">driver_break_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">collision_stepper_step_result_callback</td>
  <td class="property">std::function&lt; void( AllegroFlare::Physics::TileMapCollisionStepperStepResult*, AllegroFlare::Prototypes::TileDrive::TileDrive*, void* ) &gt;</td>
</tr>
<tr>
  <td class="property">collision_stepper_step_result_callback_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">parallax_background</td>
  <td class="property">AllegroFlare::Elements::Backgrounds::Parallax</td>
</tr>
<tr>
  <td class="property">camera</td>
  <td class="property">AllegroFlare::Camera3D</td>
</tr>
<tr>
  <td class="property">hud</td>
  <td class="property">AllegroFlare::Prototypes::TileDrive::Hud::Hud</td>
</tr>
<tr>
  <td class="property">state</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">STATE_RACING</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">STATE_WON</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">STATE_PLAYER_DIED</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">STATE_WAITING_START</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">debug_metronome_sound</td>
  <td class="property">AllegroFlare::Sound*</td>
</tr>
<tr>
  <td class="property">backbuffer_sub_bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">backbuffer_sub_bitmap_background</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_bitmap_bin</b>(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_sample_bin</b>(AllegroFlare::SampleBin* sample_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_font_bin</b>(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_maps_folder</b>(std::string maps_folder=&quot;[unset-maps_folder-arg]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_terrain_mesh_dictionary</b>(std::map&lt;std::string, AllegroFlare::Prototypes::TileDrive::TerrainMeshDictionaryRecord&gt; terrain_mesh_dictionary={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_current_map_identifier</b>(std::string current_map_identifier=&quot;[unset-current_map_identifier-arg]&quot;)</td>
</tr>
<tr>
  <td class="method">ALLEGRO_BITMAP*</td>
  <td class="method"><b>create_new_backbuffer_sub_bitmap</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="private_method">float</td>
  <td class="private_method"><b>calculate_current_terrain_mesh_height</b>()</td>
</tr>
<tr>
  <td class="private_method">float</td>
  <td class="private_method"><b>calculate_current_terrain_mesh_tile_depth</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>reset</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>start</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>driver_turn_right</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>driver_turn_left</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>driver_strafe_right</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>driver_strafe_left</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>driver_press_accelerator</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>driver_unpress_accelerator</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>driver_press_break</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>driver_unpress_break</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>driver_stop</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>driver_strafe_none</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>driver_turn_none</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_terrain</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_hud</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_driver</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>development_play_around_with_collision_steper_callback</b>(AllegroFlare::Physics::TileMapCollisionStepperStepResult* step_result=nullptr, AllegroFlare::Prototypes::TileDrive::TileDrive* tile_drive=nullptr, void* user_data=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_background</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_world</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_audio_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_acodec_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_acodec.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::TileDrive::TerrainMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/TileDrive/TerrainMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Useful&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Stopwatch&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Stopwatch.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;sin&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;glCullFace&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_opengl.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::TileDrive::TerrainMeshFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/TileDrive/TerrainMeshFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::TileDrive::Hud::Hud&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/TileDrive/Hud/Hud.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::TileDrive::TerrainMeshDriverCollisionResolver&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/TileDrive/TerrainMeshDriverCollisionResolver.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::TileMapCollisionStepperStepResult&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/TileMapCollisionStepperStepResult.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Sound&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Sound.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SampleBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SampleBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::MindDive::Hypersync&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/MindDive/Hypersync.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::function&quot;, &quot;headers&quot;=&gt;[&quot;functional&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::TileDrive::TileDrive&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/TileDrive/TileDrive.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::TileDrive::TerrainMeshDictionaryRecord&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/TileDrive/TerrainMeshDictionaryRecord.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Parallax&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Parallax.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/RenderSurfaces/Base.q.yml">quintessence/AllegroFlare/RenderSurfaces/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>set_as_target</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_BITMAP*</td>
  <td class="method"><b>obtain_surface</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>clear_surface</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_target</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_width</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_height</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_center</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_middle</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_a_display_surface</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/RenderSurfaces/DisplayBackbuffer.q.yml">quintessence/AllegroFlare/RenderSurfaces/DisplayBackbuffer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">display</td>
  <td class="property">ALLEGRO_DISPLAY*</td>
</tr>
<tr>
  <td class="property">display_backbuffer</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_display</b>(ALLEGRO_DISPLAY* display=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>set_as_target</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>clear_surface</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_BITMAP*</td>
  <td class="method"><b>obtain_surface</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_width</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_height</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::RenderSurfaces::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/RenderSurfaces/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/RenderSurfaces/DisplayBackbufferSubBitmap.q.yml">quintessence/AllegroFlare/RenderSurfaces/DisplayBackbufferSubBitmap.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">display</td>
  <td class="property">ALLEGRO_DISPLAY*</td>
</tr>
<tr>
  <td class="property">display_backbuffer_sub_bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_display</b>(ALLEGRO_DISPLAY* display=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>set_as_target</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>clear_surface</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_BITMAP*</td>
  <td class="method"><b>obtain_surface</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_width</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_height</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::RenderSurfaces::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/RenderSurfaces/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/RouteEventDatas/ActivateScreenByIdentifier.q.yml">quintessence/AllegroFlare/RouteEventDatas/ActivateScreenByIdentifier.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">screen_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::RouteEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/RouteEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/RouteEventDatas/Base.q.yml">quintessence/AllegroFlare/RouteEventDatas/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/RouteEventDatas/StartLevel.q.yml">quintessence/AllegroFlare/RouteEventDatas/StartLevel.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">level_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::RouteEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/RouteEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Routers/Base.q.yml">quintessence/AllegroFlare/Routers/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">screen_manager</td>
  <td class="property">AllegroFlare::ScreenManagers::Dictionary*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>register_screen</b>(std::string screen_identifier=&quot;[unset-screen_identifier]&quot;, AllegroFlare::Screens::Base* screen=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>unregister_screen</b>(AllegroFlare::Screens::Base* screen=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_screen</b>(std::string screen_identifier=&quot;[unset-screen_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_route_event</b>(uint32_t route_event=0, AllegroFlare::RouteEventDatas::Base* route_event_data=nullptr, float time_now=0.0f)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Frameworks::Full&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Frameworks/Full.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameSession&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameSession.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ScreenManagers::Dictionary&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ScreenManagers/Dictionary.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::RouteEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/RouteEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Routers/Standard.q.yml">quintessence/AllegroFlare/Routers/Standard.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["consider a EVENT_FINISH_LEVEL type of event, something that denotes progress in the game, a save, level beaten", "consider a EVENT_GAMEPLAY_SCREEN_FINISHED type of event", "test on_route_event_unhandled_func"]}</p>    <p>{"on sessions"=>["there's currently some misalignment on what a session is, its relationship to GameProgressAndStateInfo, and the gameplay. A session could represent a currently loaded game (with context that would show/hide menu choices on the title screen), or it could represent an current run of gameplay (think super mario bros with number of lives, high score, and time played), or another, not yet surfaced representation.  At this time, the session represents the super mario brothers version and the logic is treated as such in the router, however this may need to be changed. GameProgressAndStateInfo is the user's custom data that travels along with the session."]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">load_level_handler</td>
  <td class="property">std::function&lt;bool(AllegroFlare::RouteEventDatas::Base*)&gt;</td>
</tr>
<tr>
  <td class="property">game_session</td>
  <td class="property">AllegroFlare::GameSession</td>
</tr>
<tr>
  <td class="property">pause_managed_gameplay_screen</td>
  <td class="property">AllegroFlare::Screens::Gameplay*</td>
</tr>
<tr>
  <td class="property">on_route_event_unhandled_func</td>
  <td class="property">std::function&lt;bool(uint32_t, AllegroFlare::Routers::Standard*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_route_event_unhandled_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">on_load_last_played_session_or_start_new_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Routers::Standard*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_load_last_played_session_or_start_new_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">on_create_new_session_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Routers::Standard*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_create_new_session_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">on_continue_from_last_save_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Routers::Standard*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_continue_from_last_save_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">on_primary_gameplay_screen_finished_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Routers::Standard*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_primary_gameplay_screen_finished_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">on_arbitrary_storyboard_screen_finished_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Routers::Standard*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_arbitrary_storyboard_screen_finished_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">on_arbitrary_storyboard_screen_activated_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Routers::Standard*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_arbitrary_storyboard_screen_activated_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">INTRO_LOGOS_SCREEN_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">INTRO_STORYBOARD_SCREEN_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">TITLE_SCREEN_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">ACHIEVEMENTS_SCREEN_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">SETTINGS_SCREEN_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DISPLAY_SETTINGS_SCREEN_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">VERSION_SCREEN_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">LOAD_A_SAVED_GAME_SCREEN_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">NEW_GAME_INTRO_STORYBOARD_SCREEN_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">LEVEL_SELECT_SCREEN_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">ARBITRARY_STORYBOARD_SCREEN_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">GAME_OVER_SCREEN_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">GAME_WON_SCREEN_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">GAME_WON_OUTRO_STORYBOARD_SCREEN_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">CHARACTER_NAME_INPUT_SCREEN_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">CREDITS_SCREEN_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">PRIMARY_GAMEPLAY_SCREEN_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_route_event</b>(uint32_t route_event=0, AllegroFlare::RouteEventDatas::Base* route_event_data=nullptr, float time_now=0.0f)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>name_for_route_event</b>(uint32_t route_event=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_route_event</b>(uint32_t route_event=EVENT_UNDEFINED, AllegroFlare::RouteEventDatas::Base* route_event_data=nullptr, float time_now=0.0f)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Routers::Standard&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Routers/Standard.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameSession&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameSession.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Frameworks::Full&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Frameworks/Full.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Routers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Routers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::RouteEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/RouteEventDatas/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::RouteEventDatas::ActivateScreenByIdentifier&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/RouteEventDatas/ActivateScreenByIdentifier.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Gameplay&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Gameplay.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Rulers.q.yml">quintessence/AllegroFlare/Rulers.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_dimensional_grid</b>(float x=0.0f, float y=0.0f, float z=0.0f, float spacing=(16*4.8))</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_2d_grid</b>(float x=0.0f, float y=0.0f, float size=1.0f, float spacing=(16*4.8))</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_vertical_ruler</b>(float x=0.0f, float y=0.0f, float tick_width=30.0f, float tick_height=4.0f, float y_distance=160.0f, int num_ticks=5, float tick_align_x=0.0f, float tick_align_y=0.0f, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_vertical_ruler_numbers</b>(float x=0.0f, float y=0.0f, int number_start=0, int number_increment=1, float y_distance=160.0f, int num_ticks=5, float text_align_x=0.0f, float text_align_y=0.0f, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1})</td>
</tr>
<tr>
  <td class="method">std::vector&lt;ALLEGRO_VERTEX&gt;</td>
  <td class="method"><b>build_vertical_ruler</b>(float x=0.0f, float y=0.0f, float tick_width=30.0f, float tick_height=4.0f, float y_distance=160.0f, int num_ticks=5, float tick_align_x=0.0f, float tick_align_y=0.0f, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_horizontal_ruler</b>(float x=0.0f, float y=0.0f, float tick_width=4.0f, float tick_height=30.0f, float x_distance=160.0f, int num_ticks=5, float tick_align_x=0.0f, float tick_align_y=0.0f, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_horizontal_ruler_numbers</b>(float x=0.0f, float y=0.0f, int number_start=0, int number_increment=1, float x_distance=160.0f, int num_ticks=5, float text_align_x=0.0f, float text_align_y=0.0f, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1})</td>
</tr>
<tr>
  <td class="method">std::vector&lt;ALLEGRO_VERTEX&gt;</td>
  <td class="method"><b>build_horizontal_ruler</b>(float x=0.0f, float y=0.0f, float tick_width=4.0f, float tick_height=30.0f, float x_distance=160.0f, int num_ticks=5, float tick_align_x=0.0f, float tick_align_y=0.0f, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_number</b>(float x=0.0f, float y=0.0f, int number=137, int num_digits_filled=-1, float align_x=0.5f, float align_y=0.5f, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1})</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>build_number</b>(int number=137, int num_digits_filled=-1)</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_small_hud_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_STATE&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VERTEX&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Useful3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful3D/Useful3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Useful&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Runners/Base.q.yml">quintessence/AllegroFlare/Runners/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Runners/Complete.q.yml">quintessence/AllegroFlare/Runners/Complete.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">framework</td>
  <td class="property">AllegroFlare::Frameworks::Full*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">model_bin</td>
  <td class="property">AllegroFlare::ModelBin*</td>
</tr>
<tr>
  <td class="property">game_configuration</td>
  <td class="property">AllegroFlare::GameConfigurations::Complete*</td>
</tr>
<tr>
  <td class="property">router</td>
  <td class="property">AllegroFlare::Routers::Standard</td>
</tr>
<tr>
  <td class="property">intro_logos_screen</td>
  <td class="property">AllegroFlare::Screens::Storyboard</td>
</tr>
<tr>
  <td class="property">intro_storyboard_screen</td>
  <td class="property">AllegroFlare::Screens::Storyboard</td>
</tr>
<tr>
  <td class="property">title_screen</td>
  <td class="property">AllegroFlare::Screens::TitleScreen</td>
</tr>
<tr>
  <td class="property">display_settings_screen</td>
  <td class="property">AllegroFlare::Screens::DisplaySettings</td>
</tr>
<tr>
  <td class="property">achievements_screen</td>
  <td class="property">AllegroFlare::Screens::Achievements</td>
</tr>
<tr>
  <td class="property">version_screen</td>
  <td class="property">AllegroFlare::Screens::Version</td>
</tr>
<tr>
  <td class="property">load_a_saved_game_screen</td>
  <td class="property">AllegroFlare::LoadASavedGame::Screen</td>
</tr>
<tr>
  <td class="property">new_game_intro_storyboard_screen</td>
  <td class="property">AllegroFlare::Screens::Storyboard</td>
</tr>
<tr>
  <td class="property">level_select_screen</td>
  <td class="property">AllegroFlare::Screens::LevelSelectScreen</td>
</tr>
<tr>
  <td class="property">arbitrary_storyboard_screen</td>
  <td class="property">AllegroFlare::Screens::Storyboard</td>
</tr>
<tr>
  <td class="property">game_over_screen</td>
  <td class="property">AllegroFlare::Screens::GameOverScreen</td>
</tr>
<tr>
  <td class="property">game_won_screen</td>
  <td class="property">AllegroFlare::Screens::GameWonScreen</td>
</tr>
<tr>
  <td class="property">game_won_outro_storyboard_screen</td>
  <td class="property">AllegroFlare::Screens::Storyboard</td>
</tr>
<tr>
  <td class="property">settings_screen</td>
  <td class="property">AllegroFlare::Screens::SettingsScreen</td>
</tr>
<tr>
  <td class="property">rolling_credits_screen</td>
  <td class="property">AllegroFlare::Screens::RollingCredits</td>
</tr>
<tr>
  <td class="property">primary_gameplay_screen</td>
  <td class="property">AllegroFlare::Screens::Gameplay*</td>
</tr>
<tr>
  <td class="property">shared_background</td>
  <td class="property">AllegroFlare::Elements::Backgrounds::Base*</td>
</tr>
<tr>
  <td class="property">shared_foreground</td>
  <td class="property">AllegroFlare::Elements::Backgrounds::Base*</td>
</tr>
<tr>
  <td class="property">release_info</td>
  <td class="property">ReleaseInfo</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">MY_ROUTE_EVENT_ACTIVATE_MY_CUSTOM_SCREEN</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">MY_CUSTOM_SCREEN_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>game_event_func</b>(AllegroFlare::GameEvent* game_event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>on_route_event_unhandled_func</b>(uint32_t unhandled_event=0, AllegroFlare::Routers::Standard* router=nullptr, void* user_data=nullptr)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>on_primary_gameplay_screen_finished_func</b>(AllegroFlare::Routers::Standard* router=nullptr, void* user_data=nullptr)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>on_arbitrary_storyboard_screen_finished_func</b>(AllegroFlare::Routers::Standard* router=nullptr, void* user_data=nullptr)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>on_arbitrary_storyboard_screen_activated_func</b>(AllegroFlare::Routers::Standard* router=nullptr, void* user_data=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>setup_router</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>run</b>(AllegroFlare::GameConfigurations::Complete* game_configuration=nullptr, std::string deployment_environment_mode=&quot;[unset-deployment_environment_mode]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Frameworks::Full&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Frameworks/Full.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEvent&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Routers::Standard&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Routers/Standard.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Storyboard&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Storyboard.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Achievements&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Achievements.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::TitleScreen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/TitleScreen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::GameOverScreen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/GameOverScreen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::GameWonScreen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/GameWonScreen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::RollingCredits&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/RollingCredits.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Version&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Version.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::LevelSelectScreen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/LevelSelectScreen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::SettingsScreen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/SettingsScreen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::LoadASavedGame::Screen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/LoadASavedGame/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Achievements&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Achievements.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::StoryboardFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/StoryboardFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::RouteEventDatas::StartLevel&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/RouteEventDatas/StartLevel.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameSession&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameSession.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::ClearToColor&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/ClearToColor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ReleaseInfo&quot;, &quot;headers&quot;=&gt;[&quot;ReleaseInfo.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::ScreenActivated&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/ScreenActivated.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameConfigurations::Complete&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameConfigurations/Complete.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::LoadASavedGame::SaveSlots::Empty&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/LoadASavedGame/SaveSlots/Empty.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Gameplay&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Gameplay.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameProgressAndStateInfos::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameProgressAndStateInfos/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Achievement&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Achievement.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ForwardDeclarations::AllegroFlare::Runners::Complete&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ForwardDeclarations/AllegroFlare/Runners/Complete.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ForwardDeclarations::AllegroFlare::GameConfigurations::Complete&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ForwardDeclarations/AllegroFlare/GameConfigurations/Complete.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::DisplaySettings&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/DisplaySettings.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/SceneGraph/Entities/Base.q.yml">quintessence/AllegroFlare/SceneGraph/Entities/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ElementID&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ElementID.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/SceneGraph/EntityPool.q.yml">quintessence/AllegroFlare/SceneGraph/EntityPool.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity_pool</td>
  <td class="property">std::unordered_set&lt;AllegroFlare::SceneGraph::Entities::Base*&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">int</td>
  <td class="method"><b>num_elements</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>add</b>(AllegroFlare::SceneGraph::Entities::Base* entity=nullptr)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>add</b>(std::vector&lt;AllegroFlare::SceneGraph::Entities::Base*&gt; entities=)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>remove</b>(AllegroFlare::SceneGraph::Entities::Base* entity=nullptr)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>remove</b>(std::vector&lt;AllegroFlare::SceneGraph::Entities::Base*&gt; entities={})</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>exists</b>(AllegroFlare::SceneGraph::Entities::Base* entity=nullptr)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::SceneGraph::Entities::Base*</td>
  <td class="method"><b>find_with_attribute</b>(std::string attribute=&quot;[unset-attribute]&quot;)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::SceneGraph::Entities::Base*&gt;</td>
  <td class="method"><b>select_A</b>(std::string attribute=&quot;[unset-attribute]&quot;)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::SceneGraph::Entities::Base*&gt;</td>
  <td class="method"><b>select_B</b>(std::vector&lt;std::string&gt; attributes={})</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::SceneGraph::Entities::Base*&gt;</td>
  <td class="method"><b>select_C</b>(std::string attribute=&quot;[unset-attribute]&quot;, std::string parameter=&quot;[unset-parameter]&quot;)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::SceneGraph::Entities::Base*&gt;</td>
  <td class="method"><b>select_D</b>(std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt; attribute_param_pairs={})</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::SceneGraph::Entities::Base*&gt;</td>
  <td class="method"><b>select_E</b>(std::string attribute=&quot;[unset-attribute]&quot;, std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt; attribute_param_pairs={})</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::SceneGraph::Entities::Base*&gt;</td>
  <td class="method"><b>select_F</b>(std::vector&lt;std::string&gt; attributes={}, std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt; attribute_param_pairs={})</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SceneGraph::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SceneGraph/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::find&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::unordered_set&quot;, &quot;headers&quot;=&gt;[&quot;unordered_set&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/ScreenCapture.q.yml">quintessence/AllegroFlare/ScreenCapture.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">ALLEGRO_BITMAP*</td>
  <td class="method"><b>create_backbuffer_capture</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_BITMAP*</td>
  <td class="method"><b>create_frontbuffer_capture</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_BITMAP*</td>
  <td class="method"><b>create_capture</b>(bool flip_display_for_capture=false)</td>
</tr>
<tr>
  <td class="method">ALLEGRO_BITMAP*</td>
  <td class="method"><b>create_frontbuffer_capture_as_scaled_bitmap</b>(int destination_width=1920, int destination_height=1080)</td>
</tr>
<tr>
  <td class="method">ALLEGRO_BITMAP*</td>
  <td class="method"><b>create_backbuffer_capture_as_scaled_bitmap</b>(int destination_width=1920, int destination_height=1080)</td>
</tr>
<tr>
  <td class="method">ALLEGRO_BITMAP*</td>
  <td class="method"><b>create_capture_as_scaled_bitmap</b>(int destination_width=1920, int destination_height=1080, bool flip_display_for_capture=false)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/Achievements.q.yml">quintessence/AllegroFlare/Screens/Achievements.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["Remove redundant self-dependent AllegroFlare/Screens/Achievements dependency"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">achievements</td>
  <td class="property">AllegroFlare::Achievements*</td>
</tr>
<tr>
  <td class="property">scrollbar_dest_position</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">achievements_list</td>
  <td class="property">AllegroFlare::Elements::AchievementsList</td>
</tr>
<tr>
  <td class="property">on_exit_callback_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Screens::Achievements*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_exit_callback_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">game_event_name_to_emit_on_exit</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">DEFAULT_EVENT_NAME_ON_EXIT</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_font_bin</b>(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_event_emitter</b>(AllegroFlare::EventEmitter* event_emitter=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>refresh_achievements_list</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_deactivate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_timer_func</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>exit</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>call_on_exit_callback</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>move_scrollbar_position_to</b>(float position=0.0f)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>move_scrollbar_position_up</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>move_scrollbar_position_down</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_down_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_placeholder_achievements</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::tuple&lt;std::string, std::string, std::string&gt;&gt;</td>
  <td class="method"><b>build_achievements</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>limit_scrollbar_dest_position</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>emit_event_to_set_input_hints</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>infer_scrollbar_is_showing</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::AchievementsList&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/AchievementsList.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::tuple&lt;std::string, std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;tuple&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min, std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Achievements&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Achievements.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::GenericController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/GenericController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Achievements&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Achievements.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/CharacterNameInput.q.yml">quintessence/AllegroFlare/Screens/CharacterNameInput.q.yml</h3>
    <h3>Overview</h3>
    <p>{"notes"=>["default_cursor_position_over_key_name_on_activate might be renamed to something differet, or removed and have the sysrem rely on an on_activate callback or something"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">software_keyboard</td>
  <td class="property">AllegroFlare::SoftwareKeyboard::SoftwareKeyboard</td>
</tr>
<tr>
  <td class="property">on_submit_callback_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Screens::CharacterNameInput*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_submit_callback_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">default_result_text_on_activate</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">default_cursor_position_over_key_name_on_activate</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">software_keyboard_placement</td>
  <td class="property">AllegroFlare::Placement3D</td>
</tr>
<tr>
  <td class="property">mode</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">MODE_USING_VIRTUAL_CONTROLS</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">MODE_USING_KEYBOARD</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_software_keyboard_on_submit_callback_func</b>(AllegroFlare::SoftwareKeyboard::SoftwareKeyboard* software_keyboard=nullptr, void* user_data=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_result_string</b>(std::string result_string=&quot;[unset-result_string]&quot;)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_result_string</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>silently_position_cursor_over_key_by_name</b>(std::string key_name=&quot;[unset-key_name]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_deactivate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_timer_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_font_name</b>(std::string font_name=AllegroFlare::SoftwareKeyboard::SoftwareKeyboard::DEFAULT_FONT_NAME)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_font_size</b>(int font_size=1)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_event_to_emit_on_pressing_submit_key</b>(std::string event_to_emit_on_pressing_submit_key=AllegroFlare::SoftwareKeyboard::SoftwareKeyboard::DEFAULT_EVENT_TO_EMIT_ON_PRESSING_SUBMIT_KEY)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>mode_is_using_keyboard</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>mode_is_using_virtual_controls</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_mode_to_using_keyboard</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_mode_to_using_virtual_controls</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_down_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>key_char_func</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SoftwareKeyboard::SoftwareKeyboard&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SoftwareKeyboard/SoftwareKeyboard.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::GenericController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/GenericController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::CharacterNameInput&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/CharacterNameInput.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/DisplaySettings.q.yml">quintessence/AllegroFlare/Screens/DisplaySettings.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">model_bin</td>
  <td class="property">AllegroFlare::ModelBin*</td>
</tr>
<tr>
  <td class="property">display_settings_interface</td>
  <td class="property">AllegroFlare::DisplaySettingsInterfaces::Base*</td>
</tr>
<tr>
  <td class="property">label_for_menu_option_to_exit_screen</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">on_exit_callback_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Screens::DisplaySettings*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_exit_callback_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">surface_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">base_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cursor_y</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cursor_x</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">up_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">up_pressed_at</td>
  <td class="property">double</td>
</tr>
<tr>
  <td class="property">down_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">down_pressed_at</td>
  <td class="property">double</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_LABEL_FOR_EXIT_SCREEN_MENU_OPTION</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_event_emitter</b>(AllegroFlare::EventEmitter* event_emitter=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_bitmap_bin</b>(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_font_bin</b>(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_model_bin</b>(AllegroFlare::ModelBin* model_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_display_settings_interface</b>(AllegroFlare::DisplaySettingsInterfaces::Base* display_settings_interface=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>exit_screen</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_deactivate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>deactivate_up_down_keypress_repeat_tracking</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_up</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_down</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_left</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_right</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>infer_num_elements</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>infer_current_element_depth</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_cursor_at</b>(int x=0, int y=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_current_option</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>increment_current_option</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>decrement_current_option</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>do_manual_key_repat_logic</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_update_func</b>(double time_now=0.0, double delta_time=0.0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_render_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_cursor_pointer</b>(float x=0.0f, float y=0.0f, ALLEGRO_COLOR color=ALLEGRO_COLOR{0.0f, 0.0f, 0.0f, 0.0f})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_label</b>(std::string label=&quot;[unset-label]&quot;, float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_helper_text</b>(std::string text=&quot;[unset-text]&quot;, float x=0.0f, float y=0.0f, float width=712.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_slider_toggle_box</b>(bool onoff=true, float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_int_spinner</b>(int number=1920, bool selected=false, float x=0.0f, float y=0.0f, bool disabled=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_up_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_down_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_axis_change_func</b>(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>obtain_fullscreen_status</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>obtain_screensaver_inhibited</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>obtain_mouse_cursor_hidden</b>()</td>
</tr>
<tr>
  <td class="method">std::pair&lt;int, int&gt;</td>
  <td class="method"><b>obtain_window_dimensions</b>()</td>
</tr>
<tr>
  <td class="method">std::pair&lt;int, int&gt;</td>
  <td class="method"><b>obtain_display_dimensions</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_heading_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_label_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::DisplaySettings&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/DisplaySettings.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::UI::SliderToggle&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/UI/SliderToggle.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DisplaySettingsInterfaces::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DisplaySettingsInterfaces/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::GenericController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/GenericController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::UI::IntSpinner&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/UI/IntSpinner.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/GameOverScreen.q.yml">quintessence/AllegroFlare/Screens/GameOverScreen.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["add test for DEFAULT_MENU_OPTION value", "background does not have clarity on how or if it should use \"activate()\" or \"show()\". Same with \"deactivate\" or \"hide()\"", "Remove redundant self-dependent AllegroFlare/Screens/GameOverScreen dependency"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">title_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">menu_options</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">fallback_instruction_text_when_no_menu_options</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">on_menu_choice_callback_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Screens::GameOverScreen*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_menu_choice_callback_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">cursor_position</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">title_font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">title_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">menu_font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">menu_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">reveal_counter</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">state</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">state_is_busy</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">state_changed_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">DEFAULT_TITLE_TEXT</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">DEFAULT_MENU_OPTIONS</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">DEFAULT_FALLBACK_INSTRUCTION_TEXT_WHEN_NO_MENU_OPTIONS</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_menu_options</b>(std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt; menu_options={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>clear_menu_options</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_deactivate</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>move_cursor_up</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>move_cursor_down</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>activate_current_chosen_menu_option</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>choose_menu_option</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_timer_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_primary_text</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_menu</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>infer_current_menu_option_value</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>infer_current_menu_option_label</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_down_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_state</b>(uint32_t state=STATE_UNDEF, bool override_if_busy=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>(float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_valid_state</b>(uint32_t state=STATE_UNDEF)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_state</b>(uint32_t possible_state=STATE_UNDEF)</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_current_state_age</b>(float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_title_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_menu_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::GenericController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/GenericController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::GameOverScreen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/GameOverScreen.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/GameWonScreen.q.yml">quintessence/AllegroFlare/Screens/GameWonScreen.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["Remove redundant self-dependent AllegroFlare/Screens/GameWonScreen dependency"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">title_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">on_submit_callback_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Screens::GameWonScreen*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_submit_callback_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">title_font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">title_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">instruction_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">instruction_font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">instruction_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">DEFAULT_TITLE_TEXT</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">DEFAULT_INSTRUCTION_TEXT</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_deactivate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_timer_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_primary_text</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_instruction_text</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_title_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_instruction_font</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>joy_button_down_func</b>(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_down_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_START_TITLE_SCREEN&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::GenericController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/GenericController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::GameWonScreen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/GameWonScreen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/Gameplay.q.yml">quintessence/AllegroFlare/Screens/Gameplay.q.yml</h3>
    <h3>Overview</h3>
    <p>Note that TYPE is not used from this class. Ideally, quintessence would have a "passthrough" and type would be passed along to the base class</p>    <p>Ideally would like to remove "load_level_by_identifier" from this class</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">on_finished_callback_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Screens::Gameplay*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_finished_callback_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">gameplay_suspended</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>dialog_system_switch_in_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>dialog_system_switch_out_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>gameplay_suspend_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>gameplay_resume_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>suspend_gameplay</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>resume_suspended_gameplay</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>toggle_suspend_gameplay</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>call_on_finished_callback_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load_level_by_identifier</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Gameplay&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Gameplay.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/InputDeviceConfiguration.q.yml">quintessence/AllegroFlare/Screens/InputDeviceConfiguration.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["Add an \"exit screen\" command", "Add a \"reset to default\" option", "Remove redundant self-dependent AllegroFlare/Screens/Achievements dependency"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">surface_width</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">on_exit_callback_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Screens::InputDeviceConfiguration*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_exit_callback_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">input_devices_list</td>
  <td class="property">AllegroFlare::InputDevicesList*</td>
</tr>
<tr>
  <td class="property">input_devices_list_element</td>
  <td class="property">AllegroFlare::Elements::InputDevicesList</td>
</tr>
<tr>
  <td class="property">input_device_configuration_element</td>
  <td class="property">AllegroFlare::Elements::InputDeviceConfigurationList</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>compile_assertions</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_event_emitter</b>(AllegroFlare::EventEmitter* event_emitter=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_bitmap_bin</b>(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_font_bin</b>(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_input_devices_list</b>(AllegroFlare::InputDevicesList* input_devices_list=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_deactivate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_timer_func</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>call_on_exit_callback</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_up_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_down_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_axis_change_func</b>(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SampleBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SampleBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::InputDeviceConfigurationList&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/InputDeviceConfigurationList.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::GenericController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/GenericController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InputDevicesList&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InputDevicesList.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::InputDevicesList&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/InputDevicesList.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::InputDeviceConfiguration&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/InputDeviceConfiguration.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/LevelSelectScreen.q.yml">quintessence/AllegroFlare/Screens/LevelSelectScreen.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">level_select_element</td>
  <td class="property">AllegroFlare::Elements::LevelSelect</td>
</tr>
<tr>
  <td class="property">on_menu_choice_callback_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Screens::LevelSelectScreen*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_menu_choice_callback_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_event_emitter</b>(AllegroFlare::EventEmitter* event_emitter=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_bitmap_bin</b>(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_font_bin</b>(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_levels_list</b>(std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt; levels_list={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_deactivate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_selected_menu_option</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>infer_current_menu_option_value</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_timer_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>joy_button_down_func</b>(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>joy_axis_func</b>(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_up_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_down_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_axis_change_func</b>(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::GenericController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/GenericController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::LevelSelect&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/LevelSelect.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::LevelSelectScreen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/LevelSelectScreen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/PauseScreen.q.yml">quintessence/AllegroFlare/Screens/PauseScreen.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">title_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">footer_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">on_menu_choice_callback_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Screens::PauseScreen*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_menu_choice_callback_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">title_bitmap_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">title_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">menu_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">menu_selector_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">footer_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">title_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">menu_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">footer_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">show_footer_text</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">menu_options</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">cursor_position</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">title_menu_gutter</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_deactivate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_menu_options</b>(std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt; menu_options={})</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>move_cursor_up</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>move_cursor_down</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_menu_option</b>(std::string menu_option_name=&quot;[unset-menu-option-name]&quot;)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>select_menu_option</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_timer_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_title</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_footer_text</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_menu</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>infer_current_menu_option_value</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>infer_current_menu_option_label</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_title_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_menu_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_footer_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_BITMAP*</td>
  <td class="private_method"><b>obtain_title_bitmap</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_down_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>menu_is_empty</b>()</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>menu_has_items</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
  <td class="method"><b>build_default_menu_options</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_START_NEW_GAME&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::GenericController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/GenericController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::PauseScreen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/PauseScreen.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/RollingCredits.q.yml">quintessence/AllegroFlare/Screens/RollingCredits.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">rolling_credits_component</td>
  <td class="property">AllegroFlare::Elements::RollingCredits::RollingCredits</td>
</tr>
<tr>
  <td class="property">surface_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y_offset</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y_speed</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">on_finished_callback_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Screens::RollingCredits*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_finished_callback_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">cached_calculated_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">game_event_name_to_emit_after_completing</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">route_event_to_emit_after_completing</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">DEFAULT_GAME_EVENT_NAME_TO_EMIT_AFTER_COMPLETING</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_ROUTE_EVENT_TO_EMIT_AFTER_COMPLETING</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">scroll_is_past_end</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_deactivate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_font_bin</b>(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_sections</b>(std::vector&lt;AllegroFlare::Elements::RollingCredits::Sections::Base*&gt; sections={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>append_section</b>(AllegroFlare::Elements::RollingCredits::Sections::Base* section_to_append=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>append_sections</b>(std::vector&lt;AllegroFlare::Elements::RollingCredits::Sections::Base*&gt; sections={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>clear_game_event_name_to_emit_after_completing</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>clear_route_event_to_emit_after_completing</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>emit_completion_event</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_timer_func</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::RollingCredits&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/RollingCredits.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;AllegroFlare::Elements::RollingCredits::Sections::Base*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Elements/RollingCredits/Sections/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::RollingCredits&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/RollingCredits.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/SettingsScreen.q.yml">quintessence/AllegroFlare/Screens/SettingsScreen.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">model_bin</td>
  <td class="property">AllegroFlare::ModelBin*</td>
</tr>
<tr>
  <td class="property">on_exit_callback_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Screens::SettingsScreen*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_exit_callback_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">surface_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_event_emitter</b>(AllegroFlare::EventEmitter* event_emitter=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_bitmap_bin</b>(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_font_bin</b>(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_model_bin</b>(AllegroFlare::ModelBin* model_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>exit_screen</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_deactivate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_timer_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_up_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_down_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_axis_change_func</b>(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_heading_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_text_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::SettingsScreen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/SettingsScreen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/Storyboard.q.yml">quintessence/AllegroFlare/Screens/Storyboard.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">storyboard_element</td>
  <td class="property">AllegroFlare::Elements::Storyboard</td>
</tr>
<tr>
  <td class="property">on_finished_callback_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Screens::Storyboard*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_finished_callback_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">auto_advance</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">game_event_name_to_emit_after_completing</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">route_event_to_emit_after_completing</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">DEFAULT_GAME_EVENT_NAME_TO_EMIT_AFTER_COMPLETING</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_ROUTE_EVENT_TO_EMIT_AFTER_COMPLETING</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_deactivate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_timer_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>clear_game_event_name_to_emit_after_completing</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>clear_route_event_to_emit_after_completing</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>emit_completion_event</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>advance</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_down_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Storyboard&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Storyboard.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_multiline_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::GenericController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/GenericController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Storyboard&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Storyboard.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/Subscreen/Element.q.yml">quintessence/AllegroFlare/Screens/Subscreen/Element.q.yml</h3>
    <h3>Overview</h3>
    <p>{"notes"=>["This element should act as a parent class for your game's final subscreen, and is thus used by the AllegroFlare/Screens/Subscreen/Screen as the \"subscreen_element\" member.", "The \"pane_camera\" is the viewing camera that moves between the tabs (aka panes)."]}</p>    <p>{"todos"=>["Create a typical subscreen Element class, for example like a AllegroFlare/Screens/Subscreens/Complete - There is now a AllegroFlare/Screens/SubscreenFactory that might be useful, Subscreens/Complete still sounds good, too", "Might consider renaming to AllegroFlare/Screens/SubscreenPanes/Base rather than having it in Subscreen/, you got some options there.", {"Some examples of panes"=>["Inventory", "World Map", "Display Settings", "Controller Settings", "Audio Settings", "Save/Load"]}, "Will need to decide how to dispatch user controls to the panes. Right now there are \"move_cursor_up\", \"move_cursor_down\", etc. style functions."]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">panes</td>
  <td class="property">std::vector&lt;AllegroFlare::Screens::Subscreen::Panes::Base*&gt;</td>
</tr>
<tr>
  <td class="property">background_bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">current_pane_cursor_pos</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">pane_camera</td>
  <td class="property">AllegroFlare::Camera2D</td>
</tr>
<tr>
  <td class="property">pane_camera_edge_bonk_depth</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">pane_camera_dest_x_pos</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">hud_camera</td>
  <td class="property">AllegroFlare::Camera2D</td>
</tr>
<tr>
  <td class="property">black_bar_opacity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">BLACK_BARS_HEIGHT</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>refresh</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>move_pane_right</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>move_pane_left</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_up</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_down</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_right</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_left</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>pane_camera_zoom_in</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>pane_camera_zoom_out</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>render_background</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>render_panes</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>render_black_bars</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_hud</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>render_tabs</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Screens::Subscreen::Panes::Base*</td>
  <td class="method"><b>infer_currently_active_pane</b>()</td>
</tr>
<tr>
  <td class="private_method">int</td>
  <td class="private_method"><b>infer_num_panes</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>clear_panes</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_tabs_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Subscreen::Panes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Subscreen/Panes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Inventory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Inventory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryDictionary&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryDictionary.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryDictionaryItems::WithAttributes&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryDictionaryItems/WithAttributes.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/Subscreen/PaneFactory.q.yml">quintessence/AllegroFlare/Screens/Subscreen/PaneFactory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">AllegroFlare::Screens::Subscreen::Panes::Inventory*</td>
  <td class="method"><b>create_inventory_pane</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Subscreen::Panes::Inventory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Subscreen/Panes/Inventory.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/Subscreen/Panes/Airwing.q.yml">quintessence/AllegroFlare/Screens/Subscreen/Panes/Airwing.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">property</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>property_is</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Subscreen::Panes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Subscreen/Panes/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/Subscreen/Panes/Base.q.yml">quintessence/AllegroFlare/Screens/Subscreen/Panes/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_switch_in</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_switch_out</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_empty_state</b>(AllegroFlare::FontBin* font_bin=nullptr, std::string placeholder_text=&quot;Empty&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/Subscreen/Panes/Inventory.q.yml">quintessence/AllegroFlare/Screens/Subscreen/Panes/Inventory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">property</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>property_is</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Subscreen::Panes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Subscreen/Panes/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/Subscreen/Screen.q.yml">quintessence/AllegroFlare/Screens/Subscreen/Screen.q.yml</h3>
    <h3>Overview</h3>
    <p>{"notes"=>["This class is the screen used to coordinate the subscreen with the system.  It contains a subscreen element.", "You might create a derived of this class, override the input hints bar setup, override the keyboard/user inputs handling and mapping."]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">subscreen_element</td>
  <td class="property">AllegroFlare::Screens::Subscreen::Element*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>refresh</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_deactivate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_background_bitmap</b>(ALLEGRO_BITMAP* background_bitmap=nullptr)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>emit_event_to_update_input_hints_bar</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_show_and_size_input_hints_bar_event</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_hide_and_restore_size_input_hints_bar_event</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_pane_left</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_pane_right</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_update_func</b>(double time_now=0.0f, double delta_time=1.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_render_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>xprimary_timer_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>key_up_func</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>key_down_func</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>key_char_func</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_clear_to_color&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Inventory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Inventory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryDictionary&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryDictionary.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Subscreen::Element&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Subscreen/Element.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/SubscreenFactory.q.yml">quintessence/AllegroFlare/Screens/SubscreenFactory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">AllegroFlare::Screens::Subscreen::Screen*</td>
  <td class="method"><b>create_basic_subscreen</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Subscreen::Screen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Subscreen/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Subscreen::PaneFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Subscreen/PaneFactory.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/TitleScreen.q.yml">quintessence/AllegroFlare/Screens/TitleScreen.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">surface_width</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">title_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">copyright_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">title_bitmap_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">title_font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">menu_font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">copyright_font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">title_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">menu_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">menu_selector_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">menu_selector_outline_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">menu_selected_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">copyright_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">menu_selector_outline_stroke_thickness</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">title_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">menu_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">copyright_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">menu_options</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">on_menu_choice_callback_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Screens::TitleScreen*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_menu_choice_callback_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">on_finished_callback_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Screens::TitleScreen*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_finished_callback_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">title_position_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">title_position_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">menu_position_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">menu_position_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cursor_position</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">menu_move_sound_effect_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">menu_move_sound_effect_enabled</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">menu_select_option_sound_effect_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">menu_select_option_sound_effect_enabled</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">menu_option_selection_to_activation_delay</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">reveal_duration</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">reveal_started_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">showing_menu</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">showing_copyright</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">state</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">state_is_busy</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">state_changed_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">menu_option_chosen</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">menu_option_chosen_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">menu_option_activated</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">showing_confirmation_dialog</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>TODO</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_font_name</b>(std::string font_name=&quot;[unset-font_name]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_state</b>(uint32_t state=STATE_UNDEF, bool override_if_busy=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>(float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_valid_state</b>(uint32_t state=STATE_UNDEF)</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_age</b>(float time_of_event=0, float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_reveal_age</b>(float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_reveal_age_n</b>(float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>show_menu</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>skip_to_title</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_menu_options</b>(std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt; menu_options={})</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>move_cursor_up</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>move_cursor_down</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_current_selected_menu_option</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>select_menu_option</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>current_menu_option_must_be_confirmed</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>processing_user_input_on_main_menu</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_state</b>(uint32_t possible_state=STATE_UNDEF)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_timer_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_title</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_copyright_text</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_cursor_box</b>(float x=0.0f, float y=0.0f, float width=1.0f, float height=1.0f, ALLEGRO_COLOR fill_color=ALLEGRO_COLOR{1, 1, 1, 1}, ALLEGRO_COLOR outline_color=ALLEGRO_COLOR{1, 1, 1, 1}, float outline_stroke_thickness=1.0f, bool menu_option_chosen=false, float menu_option_chosen_at=0.0f, float menu_option_selection_to_activation_delay=1.0f, float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_menu</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_confirmation_dialog</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>infer_current_menu_option_value</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>infer_current_menu_option_label</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>play_menu_move_sound_effect</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>play_menu_select_option_sound_effect</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_title_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_menu_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_copyright_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_BITMAP*</td>
  <td class="private_method"><b>obtain_title_bitmap</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>joy_button_down_func</b>(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>joy_axis_func</b>(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_down_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>menu_is_empty</b>()</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>menu_has_items</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
  <td class="method"><b>build_default_menu_options</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
  <td class="method"><b>build_confirmation_dialog_menu_options</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_time&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_START_NEW_GAME&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::GenericController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/GenericController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::GenericController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/GenericController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::TitleScreen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/TitleScreen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MotionKit&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MotionKit.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ColorKit&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ColorKit.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/Transition.q.yml">quintessence/AllegroFlare/Screens/Transition.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">from_screen</td>
  <td class="property">AllegroFlare::Screens::Base*</td>
</tr>
<tr>
  <td class="property">to_screen</td>
  <td class="property">AllegroFlare::Screens::Base*</td>
</tr>
<tr>
  <td class="property">transition_fx</td>
  <td class="property">AllegroFlare::TransitionFX::Base*</td>
</tr>
<tr>
  <td class="property">on_finished_callback_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Screens::Transition*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_finished_callback_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">game_event_name_to_emit_after_completing</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">target</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">finished</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_timer_func</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_backbuffer_to_pasteboard_a_bitmap</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_backbuffer_to_pasteboard_b_bitmap</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>emit_completion_event</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TransitionFX::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TransitionFX/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Transition&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Transition.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/Version.q.yml">quintessence/AllegroFlare/Screens/Version.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">model_bin</td>
  <td class="property">AllegroFlare::ModelBin*</td>
</tr>
<tr>
  <td class="property">surface_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cached_calculated_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">rolling_credits_component</td>
  <td class="property">AllegroFlare::Elements::RollingCredits::RollingCredits</td>
</tr>
<tr>
  <td class="property">on_exit_callback_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Screens::Version*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_exit_callback_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">game_event_name_to_emit_on_exit</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">DEFAULT_EVENT_NAME_ON_EXIT</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_event_emitter</b>(AllegroFlare::EventEmitter* event_emitter=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_bitmap_bin</b>(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_font_bin</b>(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_model_bin</b>(AllegroFlare::ModelBin* model_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_deactivate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_timer_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_down_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>truncate_to_n_characters</b>(std::string str=&quot;&quot;, std::size_t num_characters=8)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::GenericController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/GenericController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::RollingCredits&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/RollingCredits.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::SectionFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/SectionFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ReleaseInfo&quot;, &quot;headers&quot;=&gt;[&quot;ReleaseInfo.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;BuildInfo&quot;, &quot;headers&quot;=&gt;[&quot;BuildInfo.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Version&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Version.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/WorldMapScreen.q.yml">quintessence/AllegroFlare/Screens/WorldMapScreen.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">map_viewer</td>
  <td class="property">AllegroFlare::Elements::WorldMapViewer</td>
</tr>
<tr>
  <td class="property">on_exit_callback_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Screens::WorldMapScreen*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_exit_callback_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">on_activate_callback_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Screens::WorldMapScreen*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_activate_callback_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_bitmap_bin</b>(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_font_bin</b>(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_map</b>(AllegroFlare::WorldMaps::Maps::Basic* map=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_deactivate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_timer_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_at_cursor</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_exit_screen</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_up_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_down_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_axis_change_func</b>(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::WorldMapScreen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/WorldMapScreen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::WorldMapViewer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/WorldMapViewer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::WorldMaps::Maps::Basic&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/WorldMaps/Maps/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::GenericController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/GenericController.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/ShaderSourcePoller.q.yml">quintessence/AllegroFlare/ShaderSourcePoller.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_queue</td>
  <td class="property">ALLEGRO_EVENT_QUEUE*</td>
</tr>
<tr>
  <td class="property">vertex_source_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">fragment_source_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">path</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">last_recorded_vertex_source_file_changed_at</td>
  <td class="property">std::filesystem::file_time_type</td>
</tr>
<tr>
  <td class="property">last_recorded_fragment_source_file_changed_at</td>
  <td class="property">std::filesystem::file_time_type</td>
</tr>
<tr>
  <td class="property">polling_timer</td>
  <td class="property">ALLEGRO_TIMER*</td>
</tr>
<tr>
  <td class="property">polling_active</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_event_queue</b>(ALLEGRO_EVENT_QUEUE* event_queue=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>start_polling</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>stop_polling</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>read_vertex_source_code_from_file</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>read_fragment_source_code_from_file</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>poll</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::file_time_type&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::last_write_time&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT_QUEUE&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_TIMER&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::php::file_get_contents&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/UsefulPHP.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Shaders/AllegroDefault.q.yml">quintessence/AllegroFlare/Shaders/AllegroDefault.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_vertex_source</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_fragment_source</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Shaders/Base.q.yml">quintessence/AllegroFlare/Shaders/Base.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todo"=>["Consider removing \"vertex_source_code\" and \"fragment_source_code\" as constructor args"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">vertex_source_code</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">fragment_source_code</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">al_shader</td>
  <td class="property">ALLEGRO_SHADER*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">DEFAULT_VERTEX_SOURCE_CODE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_FRAGMENT_SOURCE_CODE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_vertex_source_code</b>(std::string vertex_source_code=DEFAULT_VERTEX_SOURCE_CODE)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_fragment_source_code</b>(std::string fragment_source_code=DEFAULT_FRAGMENT_SOURCE_CODE)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_active</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>display_is_opengl</b>(ALLEGRO_DISPLAY* display=nullptr)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>display_is_programmable_pipeline</b>(ALLEGRO_DISPLAY* display=nullptr)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>attach_source_code</b>(bool throw_on_error=true)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>build</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>destroy</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>deactivate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>global_deactivate</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>set_sampler</b>(std::string name=&quot;[unset-name]&quot;, ALLEGRO_BITMAP* bitmap=nullptr, int unit=0)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>set_mat4</b>(std::string name=&quot;[unset-name]&quot;, ALLEGRO_TRANSFORM* transform=nullptr)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>set_int</b>(std::string name=&quot;[unset-name]&quot;, int value=0)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>set_float</b>(std::string name=&quot;[unset-name]&quot;, float value=0.0f)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>set_bool</b>(std::string name=&quot;[unset-name]&quot;, bool value=false)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>set_int2</b>(std::string name=&quot;[unset-name]&quot;, int x=0, int y=0)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>set_int3</b>(std::string name=&quot;[unset-name]&quot;, int x=0, int y=0, int z=0)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>set_vec2</b>(std::string name=&quot;[unset-name]&quot;, float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>set_vec3</b>(std::string name=&quot;[unset-name]&quot;, float x=0.0f, float y=0.0f, float z=0.0f)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>set_vec3</b>(std::string name=&quot;[unset-name]&quot;, AllegroFlare::Vec3D vec={})</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>set_vec4</b>(std::string name=&quot;[unset-name]&quot;, float x=0.0f, float y=0.0f, float z=0.0f, float a=0.0f)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>set_sampler_cube</b>(std::string name=&quot;[unset-name]&quot;, AllegroFlare::Cubemap* cubemap=nullptr, int unit=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>hotload</b>(std::string vertex_source_code=&quot;&quot;, std::string fragment_source_code=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>vertex_source_code_is_default</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>fragment_source_code_is_default</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_SHADER&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_TRANSFORM&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Cubemap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Cubemap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CubemapTextureBinder&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CubemapTextureBinder.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Shaders/Cubemap.q.yml">quintessence/AllegroFlare/Shaders/Cubemap.q.yml</h3>
    <h3>Overview</h3>
    <p>{"definitions"=>[{"name"=>"reflecting", "body"=>"When set to true, the material being rendered will act as a solid, reflecting the world around it.  When set\nto false, the material will be rendered as if it were a skybox.\n"}]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">cube_map</td>
  <td class="property">AllegroFlare::Cubemap*</td>
</tr>
<tr>
  <td class="property">camera_position</td>
  <td class="property">AllegroFlare::Vec3D</td>
</tr>
<tr>
  <td class="property">object_placement_transform</td>
  <td class="property">ALLEGRO_TRANSFORM</td>
</tr>
<tr>
  <td class="property">reflecting</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_object_placement</b>(AllegroFlare::Placement3D* object_placement=nullptr)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>set_values_to_activated_shader</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_vertex_source</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_fragment_source</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Cubemap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Cubemap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_TRANSFORM&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Shaders/FlatColor.q.yml">quintessence/AllegroFlare/Shaders/FlatColor.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">color_intensity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_color</b>(ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_color_intensity</b>(float color_intensity=1.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>set_values_to_activated_shader</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_vertex_source</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_fragment_source</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Shaders/Multitexture.q.yml">quintessence/AllegroFlare/Shaders/Multitexture.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["Add explit setters (which will set the property on the shader if active) for properties."]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">texture_a</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">texture_b</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>set_values_to_activated_shader</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_vertex_source</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_fragment_source</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Shaders/PostProcessing/Blinds.q.yml">quintessence/AllegroFlare/Shaders/PostProcessing/Blinds.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">surface_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">transition_playhead_position</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">num_blinds</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">blinds_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_transition_playhead_position</b>(float transition_playhead_position=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_num_blinds</b>(int num_blinds=14)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_blinds_color</b>(ALLEGRO_COLOR blinds_color=ALLEGRO_COLOR{0, 0, 0, 1})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_vertex_source</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_fragment_source</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Shaders/PostProcessing/DipToBlack.q.yml">quintessence/AllegroFlare/Shaders/PostProcessing/DipToBlack.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">surface_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">transition_playhead_position</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_transition_playhead_position</b>(float transition_playhead_position=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_color</b>(ALLEGRO_COLOR color=ALLEGRO_COLOR{0, 0, 0, 1})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_vertex_source</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_fragment_source</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Shaders/PostProcessing/Wipe.q.yml">quintessence/AllegroFlare/Shaders/PostProcessing/Wipe.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">surface_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">transition_playhead_position</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">direction</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">DIRECTION_UNDEF</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DIRECTION_LEFT</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DIRECTION_RIGHT</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_transition_playhead_position</b>(float transition_playhead_position=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_direction</b>(std::string direction=AllegroFlare::Shaders::PostProcessing::Wipe::DIRECTION_UNDEF)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_valid_direction</b>(std::string possibly_valid_direction=AllegroFlare::Shaders::PostProcessing::Wipe::DIRECTION_UNDEF)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_vertex_source</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_fragment_source</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/SoftwareKeyboard/KeyboardKey.q.yml">quintessence/AllegroFlare/SoftwareKeyboard/KeyboardKey.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">label</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">last_pressed_at</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_x2</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_center</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_middle</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_y2</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/SoftwareKeyboard/SoftwareKeyboard.q.yml">quintessence/AllegroFlare/SoftwareKeyboard/SoftwareKeyboard.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["Find a more technically proper name for \"cursor_reposition_multiplier\", \"DEFAULT_CURSOR_REPOSITION_MULTIPLIER\"", "Remove self listed as a dependency in dependencies", "Consider differences between \"hiding\" error frame (animating its disappearance), and making it disappear instantly. Some cases (for example on reset()) may want it to disappear, while other cases (in use), may want it to animate its disappearance."]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">keys</td>
  <td class="property">tsl::ordered_map&lt;std::string, AllegroFlare::SoftwareKeyboard::KeyboardKey&gt;</td>
</tr>
<tr>
  <td class="property">cursor_pos</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cursor_destination</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">cursor_size_destination</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">cursor_reposition_multiplier</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">show_rectangle_outline_on_keys</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">keyboard_placement</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">prompt_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">result_string</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">num_permitted_chars</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">event_to_emit_on_pressing_submit_key</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">on_submit_callback_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::SoftwareKeyboard::SoftwareKeyboard*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_submit_callback_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">cursor_location</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">cursor_size</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">showing_input_error_frame</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">input_error_frame_error_messages</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">bonk_sound_effect_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">key_click_sound_effect_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">erase_sound_effect_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">DEFAULT_EVENT_TO_EMIT_ON_PRESSING_SUBMIT_KEY</td>
  <td class="property">const char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_BONK_SOUND_EFFECT_IDENTIFIER</td>
  <td class="property">const char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_KEY_CLICK_SOUND_EFFECT_IDENTIFIER</td>
  <td class="property">const char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_ERASE_SOUND_EFFECT_IDENTIFIER</td>
  <td class="property">const char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_FONT_NAME</td>
  <td class="property">const char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_CURSOR_REPOSITION_MULTIPLIER</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_font_bin</b>(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>reset</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>reset_with_defaults</b>(std::string initial_result_string=&quot;&quot;, std::string initial_cursor_position_over_key_name=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_cursor_reposition_multiplier</b>(float cursor_reposition_multiplier=DEFAULT_CURSOR_REPOSITION_MULTIPLIER)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_keys</b>(tsl::ordered_map&lt;std::string, AllegroFlare::SoftwareKeyboard::KeyboardKey&gt; keys={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_keyboard_dimensions</b>(float width=1, float height=1)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_keyboard_position</b>(float x=0, float y=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>press_key_under_cursor</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>press_key_by_name</b>(std::string name=&quot;[unset-name]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>show_input_error_frame</b>(std::vector&lt;std::string&gt; input_error_frame_error_messages={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>clear_input_error_frame</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>clear_input_error_frame_error_messages</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>has_input_error_frame_error_messages</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>validate_and_submit_form</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>update_cursor_destination</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>infer_current_key_name</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>jump_cursor_pos_to_index_of_key_name</b>(std::string name=&quot;[unset-name]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>increment_cursor_pos</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>decrement_cursor_pos</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_result_string_and_boxes</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_COLOR</td>
  <td class="private_method"><b>build_cursor_color</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_COLOR</td>
  <td class="private_method"><b>build_input_error_frame_color</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_cursor_rectangle</b>(float x=0.0f, float y=0.0f, float w=0.0f, float h=0.0f)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_cursor_underline</b>(float x=0.0f, float y=0.0f, float w=0.0f, float h=0.0f)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_input_error_frame</b>(float x=0.0f, float y=0.0f, float w=0.0f, float h=0.0f)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_cursor</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_keyboard_backfill_and_frame</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>key_exists</b>(std::string identifier=&quot;[unset-identifier]&quot;)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>emit_bonk_sound_effect</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>emit_key_click_sound_effect</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>emit_erase_sound_effect</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_keyboard_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_prompt_text_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_result_text_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_error_messages_font</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Vec2D</td>
  <td class="method"><b>calculate_boilerplate_keyboard_dimensions</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_down</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_up</b>()</td>
</tr>
<tr>
  <td class="method">tsl::ordered_map&lt;std::string, AllegroFlare::SoftwareKeyboard::KeyboardKey&gt;</td>
  <td class="method"><b>build_boilerplate_keyboard_keys</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>calculate_spaced_elements_width</b>(int num_elements=0, float element_width=0.0f, float element_spacing=0.0f)</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>join</b>(std::vector&lt;std::string&gt; tokens={}, std::string delimiter=&quot;, &quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;tsl::ordered_map&quot;, &quot;headers&quot;=&gt;[&quot;lib/tsl/ordered_map.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SoftwareKeyboard::KeyboardKey&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SoftwareKeyboard/KeyboardKey.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_font_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::size_t&quot;, &quot;headers&quot;=&gt;[&quot;cstddef&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::php::trim&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/UsefulPHP.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SoftwareKeyboard::SoftwareKeyboard&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SoftwareKeyboard/SoftwareKeyboard.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Story/Characters/PersonalityDimension.q.yml">quintessence/AllegroFlare/Story/Characters/PersonalityDimension.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">description</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">descriptor_very_low</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">descriptor_low</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">descriptor_balanced</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">descriptor_high</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">descriptor_very_high</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_descriptor_for_level</b>(uint32_t ranking_level=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Story/Characters/PersonalityProfile.q.yml">quintessence/AllegroFlare/Story/Characters/PersonalityProfile.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">character_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">personality_dimensions</td>
  <td class="property">std::vector&lt;AllegroFlare::Story::Characters::PersonalityProfileDimension&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::size_t</td>
  <td class="method"><b>num_personality_dimensions</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>add_personality_dimension</b>(AllegroFlare::Story::Characters::PersonalityProfileDimension personality_dimension={})</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>personality_dimension_with_title_exists</b>(std::string title=&quot;[unset-title]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Story::Characters::PersonalityProfileDimension</td>
  <td class="method"><b>get_personality_dimension_by_index</b>(std::size_t index=0)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>build_personality_dimensions_writeup</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>build_writeup_for_dimension</b>(std::string character_name=&quot;this character&quot;, std::string dimension_name=&quot;[unset-dimension_name]&quot;, std::string dimension_description=&quot;[unset-dimension_description]&quot;, uint32_t dimension_ranking_level=0, std::string dimension_descriptor_for_level=&quot;[unset-dimension_descriptor_for_level]&quot;)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>build_brief_personality_dimensions_writeup</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>ranking_level_to_text</b>(uint32_t ranking_level=0)</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>join</b>(std::vector&lt;std::string&gt; tokens={}, std::string delimiter=&quot;, &quot;)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>join_with_and</b>(std::vector&lt;std::string&gt; tokens={}, std::string delimiter=&quot;, &quot;, bool use_and=false)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Story::Characters::PersonalityProfileDimension&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Story/Characters/PersonalityProfileDimension.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Story/Characters/PersonalityProfileDimension.q.yml">quintessence/AllegroFlare/Story/Characters/PersonalityProfileDimension.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">title</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">description</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">scoring</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">scoring_max</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">scoring_descriptor</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_scoring_normalized</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Story/Characters/PersonalityProfileFactory.q.yml">quintessence/AllegroFlare/Story/Characters/PersonalityProfileFactory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">personality_profile_matrix</td>
  <td class="property">AllegroFlare::Story::Characters::PersonalityProfileMatrix</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Story::Characters::PersonalityProfile</td>
  <td class="method"><b>build_random_personality_profile</b>(std::string character_name=&quot;this character&quot;, std::size_t num_traits=5, unsigned int seed=0)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>build_writeup_for_dimension</b>(std::string character_name=&quot;this character&quot;, std::string dimension_name=&quot;[unset-dimension_name]&quot;, std::string dimension_description=&quot;[unset-dimension_description]&quot;, uint32_t dimension_ranking_level=0, std::string dimension_descriptor_for_level=&quot;[unset-dimension_descriptor_for_level]&quot;)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>ranking_level_to_text</b>(uint32_t ranking_level=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Story::Characters::PersonalityProfile&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Story/Characters/PersonalityProfile.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Story::Characters::PersonalityProfileMatrix&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Story/Characters/PersonalityProfileMatrix.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Story::Characters::PersonalityProfileMatrixFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Story/Characters/PersonalityProfileMatrixFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Story::Characters::PersonalityProfile&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Story/Characters/PersonalityProfile.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Random&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Random.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Story/Characters/PersonalityProfileMatrix.q.yml">quintessence/AllegroFlare/Story/Characters/PersonalityProfileMatrix.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">dimensions</td>
  <td class="property">std::vector&lt;AllegroFlare::Story::Characters::PersonalityDimension&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::size_t</td>
  <td class="method"><b>num_dimensions</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Story::Characters::PersonalityDimension</td>
  <td class="method"><b>get_personality_dimension_by_index</b>(std::size_t index=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Story::Characters::PersonalityDimension&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Story/Characters/PersonalityDimension.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Story/Characters/PersonalityProfileMatrixFactory.q.yml">quintessence/AllegroFlare/Story/Characters/PersonalityProfileMatrixFactory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">AllegroFlare::Story::Characters::PersonalityProfileMatrix</td>
  <td class="method"><b>build_standard_matrix</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Story::Characters::PersonalityProfileMatrix&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Story/Characters/PersonalityProfileMatrix.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/StoryboardFactory.q.yml">quintessence/AllegroFlare/StoryboardFactory.q.yml</h3>
    <h3>Overview</h3>
    <p>{"docs"=>["Dependencies must be set independently and can not be passed in on the constructor. (Another option would be to add an initialization pattern.)"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">model_bin</td>
  <td class="property">AllegroFlare::ModelBin*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="private_property">page_factory</td>
  <td class="private_property">AllegroFlare::StoryboardPageFactory</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_font_bin</b>(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_bitmap_bin</b>(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_model_bin</b>(AllegroFlare::ModelBin* model_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Screens::Storyboard*</td>
  <td class="method"><b>create_images_storyboard_screen</b>(std::vector&lt;ALLEGRO_BITMAP*&gt; source_bitmaps={}, int button_font_size=-40)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Screens::Storyboard*</td>
  <td class="method"><b>create_advancing_text_storyboard_screen</b>(std::vector&lt;std::string&gt; pages_text={}, int button_font_size=-40, float page_top_padding=400, float page_left_padding=400, float page_right_padding=400, int page_text_font_size=AllegroFlare::Elements::StoryboardPages::AdvancingText::DEFAULT_FONT_SIZE, std::string page_text_font_name=AllegroFlare::Elements::StoryboardPages::AdvancingText::DEFAULT_FONT_NAME, float page_text_line_height_multiplier=1.5)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::StoryboardPageFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/StoryboardPageFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Storyboard&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Storyboard.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Image&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Image.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::AdvancingText&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/AdvancingText.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/StoryboardPageFactory.q.yml">quintessence/AllegroFlare/StoryboardPageFactory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">model_bin</td>
  <td class="property">AllegroFlare::ModelBin*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">AllegroFlare::Elements::StoryboardPages::Text*</td>
  <td class="method"><b>create_text_page</b>(std::string text=&quot;[unset-text]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::StoryboardPages::AdvancingText*</td>
  <td class="method"><b>create_advancing_text_page</b>(std::string text=&quot;[unset-text]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::StoryboardPages::Image*</td>
  <td class="method"><b>create_image_page</b>(ALLEGRO_BITMAP* image=nullptr)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::StoryboardPages::ImageWithAdvancingText*</td>
  <td class="method"><b>create_image_with_advancing_text_page</b>(std::string image_identifier=&quot;[unset-image_identifier]&quot;, std::string text=&quot;[unset-text]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::StoryboardPages::ClubCattLogo*</td>
  <td class="method"><b>create_clubcatt_logo_page</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Text*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Text.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Image*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Image.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::AdvancingText*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/AdvancingText.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Text&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Text.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Image&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Image.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::AdvancingText&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/AdvancingText.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::ImageWithAdvancingText&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/ImageWithAdvancingText.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::ClubCattLogo&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/ClubCattLogo.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/StringFormatValidator.q.yml">quintessence/AllegroFlare/StringFormatValidator.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">string</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>fits_max_length</b>(std::size_t max=0)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>fits_min_length</b>(std::size_t min=0)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>has_only_numerical_characters</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>ends_with</b>(std::string ending=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_uppercase_symbol_name</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_blank</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>matches</b>(std::string other=&quot;[unset-other]&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>contains_none</b>(std::vector&lt;std::string&gt; strings_to_match={})</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/SyncOracle.q.yml">quintessence/AllegroFlare/SyncOracle.q.yml</h3>
    <h3>Overview</h3>
    <p>primary_event_queue must be passed in</p>    <p>primary_timer is owned and managed by the SyncOracle</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">display</td>
  <td class="property">ALLEGRO_DISPLAY*</td>
</tr>
<tr>
  <td class="property">primary_event_queue</td>
  <td class="property">ALLEGRO_EVENT_QUEUE*</td>
</tr>
<tr>
  <td class="property">primary_timer</td>
  <td class="property">ALLEGRO_TIMER*</td>
</tr>
<tr>
  <td class="property">primary_timer_is_active</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">hyper_primary_timer</td>
  <td class="property">ALLEGRO_TIMER*</td>
</tr>
<tr>
  <td class="property">target_fps</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">display_refresh_rate</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_nudge_notches</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_hyper_primary_timer_units</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">hyper_primary_timer_is_active</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">auto_nudge_is_active</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">num_measurer_samples</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">primary_timer_measurer</td>
  <td class="property">AllegroFlare::Instrumentation::Metrics::Double</td>
</tr>
<tr>
  <td class="property">update_measurer</td>
  <td class="property">AllegroFlare::Instrumentation::DurationMeasurer</td>
</tr>
<tr>
  <td class="property">draw_measurer</td>
  <td class="property">AllegroFlare::Instrumentation::DurationMeasurer</td>
</tr>
<tr>
  <td class="property">flip_display_measurer</td>
  <td class="property">AllegroFlare::Instrumentation::DurationMeasurer</td>
</tr>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_display</b>(ALLEGRO_DISPLAY* display=nullptr)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_display_refresh_rate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_primary_event_queue</b>(ALLEGRO_EVENT_QUEUE* primary_event_queue=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_target_fps</b>(int target_fps=60)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_num_nudge_notches</b>(int num_nudge_notches=16)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_num_hyper_primary_timer_units</b>(int num_hyper_primary_timer_units=32)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_num_measurer_samples</b>(int num_measurer_samples=64*4)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_primary_timer</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>deactivate_primary_timer</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>shutdown</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_hyper_timer</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>deactivate_hyper_timer</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>toggle_hyper_timer</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_auto_nudge</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>deactivate_auto_nudge</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>toggle_auto_nudge</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_primary_timer_event</b>(ALLEGRO_EVENT* al_event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>capture_primary_timer_event_time</b>(double timer_event_time=0.0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>start_flip_measure</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>end_flip_measure</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>start_update_measure</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>end_update_measure</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>start_draw_measure</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>end_draw_measure</b>()</td>
</tr>
<tr>
  <td class="method">double</td>
  <td class="method"><b>calculate_frame_duration_sec</b>()</td>
</tr>
<tr>
  <td class="method">double</td>
  <td class="method"><b>calculate_duration_of_previous_frame_for_delta_time</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>calculate_practical_fps</b>()</td>
</tr>
<tr>
  <td class="method">double</td>
  <td class="method"><b>calculate_nudge_duration</b>(int num_nudge_notches_delta=1)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>nudge_primary_timer</b>(int num_nudge_notches_to_move=1)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>nudge_primary_timer_forward</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>nudge_primary_timer_backward</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_graph</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_metric</b>(std::vector&lt;double&gt;* samples=nullptr, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1}, float x=0.0f, float y=0.0f, float h=0.0f, float chart_min=0.0f, float chart_max=0.0f, int num_samples=64*4, int scale=4)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_triangle</b>(float x=0.0f, float y=0.0f, float width=0.0f, float height=0.0f, ALLEGRO_COLOR color=ALLEGRO_COLOR{0.0f, 0.0f, 0.0f, 0.0f})</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT_QUEUE&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_TIMER&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_current_display&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Instrumentation::DurationMeasurer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Instrumentation/DurationMeasurer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Instrumentation::Metrics::Double&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Instrumentation/Metrics/Double.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/SystemInfo.q.yml">quintessence/AllegroFlare/SystemInfo.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>allegro_flare_version</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>allegro_version</b>()</td>
</tr>
<tr>
  <td class="method">uint32_t</td>
  <td class="method"><b>num_available_threads</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>num_available_threads_are_known</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_processor_type</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_sysname</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_version</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_release</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_hostname</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_machine</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>operating_system</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Version&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Version.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::thread::hardware_concurrency&quot;, &quot;headers&quot;=&gt;[&quot;thread&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SystemInfoFetcher&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SystemInfoFetcher.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TemplatedText.q.yml">quintessence/AllegroFlare/TemplatedText.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">template_content</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">insertion_variables</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>__replace</b>(std::string str=&quot;source string&quot;, std::string from=&quot;source&quot;, std::string to=&quot;result&quot;)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>generate_content</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Testing/AllegroFlare/DisplaySettingsInterfaces/DisplayMock.q.yml">quintessence/AllegroFlare/Testing/AllegroFlare/DisplaySettingsInterfaces/DisplayMock.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">fullscreen_status</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">display_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">display_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">screensaver_inhibited</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">mouse_cursor_hidden</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_fullscreen</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>deactivate_fullscreen</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>toggle_fullscreen</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_fullscreen</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_window_size</b>(int width=1920, int height=1080)</td>
</tr>
<tr>
  <td class="method">std::pair&lt;int, int&gt;</td>
  <td class="method"><b>get_window_size</b>()</td>
</tr>
<tr>
  <td class="method">std::pair&lt;int, int&gt;</td>
  <td class="method"><b>get_display_size</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>manually_mark_screensaver_as_inhibited</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>enable_inhibit_screensaver</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>disable_inhibit_screensaver</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>toggle_inhibit_screensaver</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_screensaver_inhibited</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>hide_mouse_cursor</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>show_mouse_cursor</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>toggle_hide_mouse_cursor</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_mouse_cursor_hidden</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:AllegroFlare::DisplaySettingsInterfaces::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DisplaySettingsInterfaces/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Testing/GameConfigurations/Complete/SimpleConfiguration.q.yml">quintessence/AllegroFlare/Testing/GameConfigurations/Complete/SimpleConfiguration.q.yml</h3>
    <h3>Overview</h3>
    <p>{"notes"=>["This testing class represents bare-bones setup when creating a custom GameConfigurations/Complete derived class"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
  <td class="method"><b>build_title_screen_menu_options</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>handle_game_event</b>(AllegroFlare::GameEvent* game_event=nullptr)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Levels::Base*</td>
  <td class="method"><b>load_level_by_identifier</b>(std::string level_identifier=&quot;[unset-level_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
  <td class="method"><b>build_level_list_for_level_select_screen_by_identifier</b>(std::string identifier=&quot;[unset-identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::DialogTree::NodeBank</td>
  <td class="method"><b>build_dialog_bank_by_identifier</b>(std::string identifier=&quot;[unset-identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::tuple&lt;std::string, AllegroFlare::Achievement*, bool, bool&gt;&gt;</td>
  <td class="method"><b>build_achievements</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Screens::Gameplay*</td>
  <td class="method"><b>create_primary_gameplay_screen</b>(AllegroFlare::Runners::Complete* runner=nullptr)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Elements::StoryboardPages::Base *&gt;</td>
  <td class="method"><b>create_intro_logos_storyboard_pages</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::Backgrounds::Base*</td>
  <td class="method"><b>create_shared_background</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Elements::StoryboardPages::Base *&gt;</td>
  <td class="method"><b>create_new_game_intro_storyboard_pages</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Elements::StoryboardPages::Base *&gt;</td>
  <td class="method"><b>create_intro_storyboard_pages</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::LoadASavedGame::SaveSlots::Base*&gt;</td>
  <td class="method"><b>build_save_slots_for_load_a_saved_game_screen</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load_game_progress_and_state_info_into_universe</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>setup_new_game_progress_and_state_info</b>(AllegroFlare::GameSession* game_session=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load_last_played_session_or_start_new</b>(AllegroFlare::GameSession* game_session=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load_audio_controller</b>(AllegroFlare::AudioController* audio_controller=nullptr)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>build_copyright_text</b>(ReleaseInfo* release_info=nullptr)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Elements::RollingCredits::Sections::Base*&gt;</td>
  <td class="method"><b>build_rolling_credits_sections</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameConfigurations::Complete&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameConfigurations/Complete.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeBank&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeBank.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Levels::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Levels/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Achievement&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Achievement.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameProgressAndStateInfos::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameProgressAndStateInfos/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameSession&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameSession.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::SectionFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/SectionFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::LoadASavedGame::SaveSlots::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/LoadASavedGame/SaveSlots/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ReleaseInfo&quot;, &quot;headers&quot;=&gt;[&quot;ReleaseInfo.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::ClearToColor&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/ClearToColor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEvent&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::ScreenActivated&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/ScreenActivated.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TemplatedText&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TemplatedText.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::UnicodeCharacters&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/UnicodeCharacters.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AudioController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AudioController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Gameplay&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Gameplay.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Runners::Complete&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Runners/Complete.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Testing/TemporaryDirectoryCreator.q.yml">quintessence/AllegroFlare/Testing/TemporaryDirectoryCreator.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::filesystem::path</td>
  <td class="method"><b>create</b>(uint32_t max_tries=100000)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;random&quot;, &quot;headers&quot;=&gt;[&quot;random&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::random_device&quot;, &quot;headers&quot;=&gt;[&quot;random&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::mt19937&quot;, &quot;headers&quot;=&gt;[&quot;random&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;filesystem&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::path&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Testing/TemporaryFilenameCreator.q.yml">quintessence/AllegroFlare/Testing/TemporaryFilenameCreator.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>create_filename</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>create_filename_within_guaranteed_unique_directory</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::tmpnam&quot;, &quot;headers&quot;=&gt;[&quot;cstdio&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Testing::TemporaryDirectoryCreator&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Testing/TemporaryDirectoryCreator.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Testing/TestNameInference.q.yml">quintessence/AllegroFlare/Testing/TestNameInference.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_test_name</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_test_suite_name</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>build_full_test_name_str</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>build_test_snapshot_full_filename</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::string&gt;</td>
  <td class="method"><b>extract_prefix_tokens</b>(std::string str=&quot;[unset-str]&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_valid_prefix_token_format</b>(std::string possible_prefix_token=&quot;[unset-possible_prefix_token]&quot;)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::string&gt;</td>
  <td class="method"><b>split</b>(std::string input=&quot;[unset-input]&quot;, std::string delimiter=&quot;__&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:testing::Test&quot;, &quot;headers&quot;=&gt;[&quot;gtest/gtest.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Testing/WithAllegroFlareFrameworksFullFixture.q.yml">quintessence/AllegroFlare/Testing/WithAllegroFlareFrameworksFullFixture.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">framework</td>
  <td class="property">AllegroFlare::Frameworks::Full</td>
</tr>
<tr>
  <td class="property">framework_event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">framework_bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">framework_font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">framework_sample_bin</td>
  <td class="property">AllegroFlare::SampleBin*</td>
</tr>
<tr>
  <td class="property">framework_model_bin</td>
  <td class="property">AllegroFlare::ModelBin*</td>
</tr>
<tr>
  <td class="property">framework_video_bin</td>
  <td class="property">AllegroFlare::VideoBin*</td>
</tr>
<tr>
  <td class="property">framework_profiler</td>
  <td class="property">AllegroFlare::Profiler*</td>
</tr>
<tr>
  <td class="property">framework_data_folder_path</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">framework_primary_render_surface</td>
  <td class="property">AllegroFlare::RenderSurfaces::Base*</td>
</tr>
<tr>
  <td class="property">test_prefix_tokens</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">test_snapshots_folder</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>SetUp</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>TearDown</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>framework_register_and_activate_screen</b>(std::string name=&quot;[unset-name]&quot;, AllegroFlare::Screens::Base* screen=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>framework_register_screen</b>(std::string name=&quot;[unset-name]&quot;, AllegroFlare::Screens::Base* screen=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>framework_activate_screen</b>(std::string name=&quot;[unset-name]&quot;, AllegroFlare::Screens::Base* screen=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>framework_run_loop</b>(float num_seconds_to_auto_abort=3)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_test_name</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_test_suite_name</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>build_full_test_name_str</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::string&gt;</td>
  <td class="method"><b>extract_test_prefix_tokens</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>test_name_indicates_it_wants_a_screenshot</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>test_name_has_prefix_token</b>(std::string possible_prefix_token=&quot;[unset-possible_prefix_token]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>capture_screenshot</b>(std::string base_filename=&quot;WithAllegroFlareFrameworksFullFixture-screenshot.png&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:testing::Test&quot;, &quot;headers&quot;=&gt;[&quot;gtest/gtest.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Frameworks::Full&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Frameworks/Full.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SampleBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SampleBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Profiler&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Profiler.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VideoBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VideoBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::RenderSurfaces::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/RenderSurfaces/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DeploymentEnvironment&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DeploymentEnvironment.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Testing::TestNameInference&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Testing/TestNameInference.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Testing/WithAllegroRenderingFixture.q.yml">quintessence/AllegroFlare/Testing/WithAllegroRenderingFixture.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">display</td>
  <td class="property">ALLEGRO_DISPLAY*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin</td>
</tr>
<tr>
  <td class="property">display_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">display_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">display_samples</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">deployment_environment</td>
  <td class="property">AllegroFlare::DeploymentEnvironment</td>
</tr>
<tr>
  <td class="property">test_snapshots_folder</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">test_prefix_tokens</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">is_setup</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_display_samples</b>(int display_samples=4)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_display_width</b>(int display_width=1920)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_display_height</b>(int display_height=1080)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>SetUp</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_fixtures_path</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>TearDown</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_FONT*</td>
  <td class="method"><b>get_any_font</b>(int size=-30)</td>
</tr>
<tr>
  <td class="method">ALLEGRO_FONT*</td>
  <td class="method"><b>get_user_prompt_font</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_BITMAP*</td>
  <td class="method"><b>get_display_backbuffer</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>sleep_for_frame</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>sleep_for</b>(float length_in_seconds=0.0f)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_test_name</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_test_suite_name</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::string&gt;</td>
  <td class="method"><b>extract_test_prefix_tokens</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>build_full_test_name_str</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Placement2D</td>
  <td class="method"><b>build_centered_placement</b>(float width=0.0f, float height=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_rulers</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_crosshair</b>(float x=0.0f, float y=0.0f, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 0, 0, 1}, float size=200.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_crosshair_blue</b>(float x=0.0f, float y=0.0f, ALLEGRO_COLOR color=ALLEGRO_COLOR{0, 0, 1, 1}, float size=100.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_horizontal_crosshair</b>(float x=0.0f, float y=0.0f, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 0, 0, 1}, float size_v=30.0f, float size_h=600.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_vertical_crosshair</b>(float x=0.0f, float y=0.0f, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 0, 0, 1}, float size_v=600.0f, float size_h=30.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_rectangle</b>(float x=0.0f, float y=0.0f, float width=160.0f, float height=90.0f, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 0, 0, 1}, float size=100.0f)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>test_name_indicates_it_wants_a_screenshot</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>clear_display</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>clear</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>test_name_has_prefix_token</b>(std::string possible_prefix_token=&quot;[unset-possible_prefix_token]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>capture_screenshot</b>(std::string base_filename=&quot;WithAllegroRenderingFixture-screenshot.png&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Testing::CustomComparison&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Testing/CustomComparison.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_primitives_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_ttf_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_ttf.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_font_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_image_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_image.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:testing::Test&quot;, &quot;headers&quot;=&gt;[&quot;gtest/gtest.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::chrono::milliseconds&quot;, &quot;headers&quot;=&gt;[&quot;chrono&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::this_thread::sleep_for&quot;, &quot;headers&quot;=&gt;[&quot;thread&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TerminalColors&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TerminalColors.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DeploymentEnvironment&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DeploymentEnvironment.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Testing::TestNameInference&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Testing/TestNameInference.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/AutoTile/FilterMatrix.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/FilterMatrix.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">matrix</td>
  <td class="property">std::vector&lt;std::vector&lt;int&gt;&gt;</td>
</tr>
<tr>
  <td class="property">axis</td>
  <td class="property">std::pair&lt;int, int&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">AllegroFlare::TileMaps::AutoTile::FilterMatrix</td>
  <td class="method"><b>build</b>(std::vector&lt;std::vector&lt;int&gt;&gt; matrix={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_matrix</b>(std::vector&lt;std::vector&lt;int&gt;&gt; matrix={})</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>STATIC_is_valid</b>(std::vector&lt;std::vector&lt;int&gt;&gt; matrix={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>resize</b>(int width=1, int height=1)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_width</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_height</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_tile</b>(int x=0, int y=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_tile</b>(int x=0, int y=0, int tile_value=0)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>set_tile_ignore_if_out_of_bounds</b>(int x=0, int y=0, int tile_value=0)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>tile_matches</b>(int x=0, int y=0, int tile_value=0, bool match_true_if_out_of_bounds=false)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>tile_matches_with_extruded_boundaries</b>(int x=0, int y=0, int tile_value=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::AutoTile::FilterMatrix&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/AutoTile/FilterMatrix.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/AutoTile/Filters/Base.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/Filters/Base.q.yml</h3>
    <h3>Overview</h3>
    <p>{"body"=>"Note that a lot of logic in this initial concept is derived from \nhttps://github.com/MarkOates/tilemap/blob/master/include/tilemap, for example\nhttps://github.com/MarkOates/tilemap/blob/master/include/tilemap/lib/SixteenEdgeTileSet.hpp\n", "todos"=>["Integrate SixteenEdgeTileSet concept for a quick draft at design"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">input_matrix</td>
  <td class="property">AllegroFlare::TileMaps::AutoTile::FilterMatrix</td>
</tr>
<tr>
  <td class="property">result_matrix</td>
  <td class="property">AllegroFlare::TileMaps::AutoTile::FilterMatrix</td>
</tr>
<tr>
  <td class="property">OUT_OF_BOUNDS_MATCH_TYPE_POSITIVE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">OUT_OF_BOUNDS_MATCH_TYPE_NEGATIVE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">OUT_OF_BOUNDS_MATCH_TYPE_EXTRUDED_EDGE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_OUT_OF_BOUNDS_MATCH_TYPE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>process</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>iterate_through_input_and_apply_to_result_if_match</b>(std::vector&lt;std::vector&lt;int&gt;&gt; match_matrix={}, std::vector&lt;std::vector&lt;int&gt;&gt; apply_matrix={}, int match_matrix_offset_x=0, int match_matrix_offset_y=0, int apply_matrix_offset_x=0, int apply_matrix_offset_y=0, std::string out_of_bounds_match_type=DEFAULT_OUT_OF_BOUNDS_MATCH_TYPE, bool ignore_if_negative_tile_value_on_match_matrix=true, bool ignore_write_if_negative_tile_value_on_stamp_tile=true, bool ignore_if_stamp_tile_is_out_of_bounds_on_result_matrix=true)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>matrix_matches</b>(std::vector&lt;std::vector&lt;int&gt;&gt; match_matrix={}, int at_coord_x=0, int at_coord_y=0, int match_matrix_offset_x=0, int match_matrix_offset_y=0, bool ignore_if_negative_tile_value_on_match_matrix=true, std::string out_of_bounds_match_type=DEFAULT_OUT_OF_BOUNDS_MATCH_TYPE)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>stamp_to_result</b>(std::vector&lt;std::vector&lt;int&gt;&gt; stamp_matrix={}, int at_coord_x=0, int at_coord_y=0, int apply_matrix_offset_x=0, int apply_matrix_offset_y=0, bool ignore_write_if_negative_tile_value_on_stamp_tile=true, bool ignore_if_stamp_tile_is_out_of_bounds_on_result_matrix=true)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>tile_coord_to_contiguous</b>(int tile_x=0, int tile_y=0, int tile_atlas_num_columns=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::AutoTile::FilterMatrix&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/AutoTile/FilterMatrix.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/AutoTile/Filters/Basic.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/Filters/Basic.q.yml</h3>
    <h3>Overview</h3>
    <p>{"body"=>"This class is an example class, not really practical. It's identical to Filters/Fill."}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">tile_value</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>process</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::AutoTile::Filters::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/AutoTile/Filters/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/AutoTile/Filters/BasicFloor.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/Filters/BasicFloor.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">floor_tile_value</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>process</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>matrix_matches</b>(std::vector&lt;std::vector&lt;int&gt;&gt; match_matrix={}, int x=0, int y=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::AutoTile::Filters::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/AutoTile/Filters/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::AutoTile::FilterMatrix&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/AutoTile/FilterMatrix.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/AutoTile/Filters/BasicSolid.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/Filters/BasicSolid.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">solid_tile_value</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>process</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>matrix_matches</b>(std::vector&lt;std::vector&lt;int&gt;&gt; match_matrix={}, int x=0, int y=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::AutoTile::Filters::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/AutoTile/Filters/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::AutoTile::FilterMatrix&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/AutoTile/FilterMatrix.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/AutoTile/Filters/Fill.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/Filters/Fill.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">tile_value</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>process</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::AutoTile::Filters::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/AutoTile/Filters/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/AutoTile/Filters/FortyEightEdges.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/Filters/FortyEightEdges.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">solid_tile_value</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">forty_eight_edges_tiles_definition</td>
  <td class="property">std::map&lt;uint32_t, int&gt;</td>
</tr>
<tr>
  <td class="property">UNDEF</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP_LEFT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP_RIGHT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP_TIP</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">LEFT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">FULL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">RIGHT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">CENTER</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BOTTOM_LEFT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BOTTOM</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BOTTOM_RIGHT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BOTTOM_TIP</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">LEFT_TIP</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">MIDDLE</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">RIGHT_TIP</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">ISOLATED</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">EMPTY</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">SOLID</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP_BL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP_BR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TL_BR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TR_BL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TL_TR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BL_BR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TL_BL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TR_BR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP_RIGHT_BOTTOM</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">RIGHT_BOTTOM_LEFT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BOTTOM_LEFT_TOP</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">LEFT_TOP_RIGHT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP_BOTTOM</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">LEFT_RIGHT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP_RIGHT_BOTTOM_LEFT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BOTTOM_TL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BOTTOM_TR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP_LEFT_BR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP_RIGHT_BL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BOTTOM_LEFT_TR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BOTTOM_RIGHT_TL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TL_TR_BR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TR_BR_BL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BR_BL_TL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BL_TL_TR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TL_TR_BR_BL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP_BR_BL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">RIGHT_BL_TR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BOTTOM_TL_TR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">LEFT_TR_BR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">LEFT_TR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">LEFT_BR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">RIGHT_TL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">RIGHT_BL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>process</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>process_three_edge_filters</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>process_three_tip_filters</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>process_two_edge_with_tip_filters</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>process_one_edge_one_tip</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>process_one_edge_two_tips</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>process_two_tip_filters</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_tile_for</b>(uint32_t edge_tile_name=UNDEF)</td>
</tr>
<tr>
  <td class="method">std::map&lt;uint32_t, int&gt;</td>
  <td class="method"><b>build_default_forty_eight_edges_tiles_definition</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::AutoTile::Filters::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/AutoTile/Filters/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::AutoTile::FilterMatrix&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/AutoTile/FilterMatrix.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/AutoTile/Filters/MonolineBlobsHorizontal.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/Filters/MonolineBlobsHorizontal.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">solid_tile_value</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">monoline_blobs_horizontal_tiles_definition</td>
  <td class="property">std::map&lt;uint32_t, int&gt;</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>process</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_tile_for</b>(uint32_t edge_tile_name=UNDEF)</td>
</tr>
<tr>
  <td class="method">std::map&lt;uint32_t, int&gt;</td>
  <td class="method"><b>build_default_monoline_blobs_horizontal_tiles_definition</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::AutoTile::Filters::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/AutoTile/Filters/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/AutoTile/Filters/SixteenEdges.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/Filters/SixteenEdges.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">solid_tile_value</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">sixteen_edges_tiles_definition</td>
  <td class="property">std::map&lt;uint32_t, int&gt;</td>
</tr>
<tr>
  <td class="property">UNDEF</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP_LEFT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP_RIGHT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP_TIP</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">LEFT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">FULL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">RIGHT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">CENTER</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BOTTOM_LEFT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BOTTOM</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BOTTOM_RIGHT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BOTTOM_TIP</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">LEFT_TIP</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">MIDDLE</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">RIGHT_TIP</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">ISOLATED</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>process</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_tile_for</b>(uint32_t edge_tile_name=UNDEF)</td>
</tr>
<tr>
  <td class="method">std::map&lt;uint32_t, int&gt;</td>
  <td class="method"><b>build_default_sixteen_edges_tiles_definition</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::AutoTile::Filters::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/AutoTile/Filters/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::AutoTile::FilterMatrix&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/AutoTile/FilterMatrix.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/Basic2D.q.yml">quintessence/AllegroFlare/TileMaps/Basic2D.q.yml</h3>
    <h3>Overview</h3>
    <p>{"body"=>"`Basic2D` is a combination of 3 main elements:\n   - `TileMaps::PrimMesh` used for rendering the tile map.\n   - `TileMaps::PrimMeshAtlas` an atlas for the prim mesh.  Note this is a managed atlas that copies a \n      bitmap and builds on initialization.\n   - `TileMaps::Tilemap<int>` that contains tile metadata. So far, this is useful for collision info.\nThe design is essentially similar to AllegroFlare::Prototypes::Platforming2D::Entities::TileMaps::Basic2D but\nhandles the building of the atlas\n"}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">atlas_bitmap_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">atlas_bitmap_tile_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">atlas_bitmap_tile_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">atlas</td>
  <td class="property">AllegroFlare::TileMaps::PrimMeshAtlas</td>
</tr>
<tr>
  <td class="property">prim_mesh</td>
  <td class="property">AllegroFlare::TileMaps::PrimMesh</td>
</tr>
<tr>
  <td class="property">collision_tile_map</td>
  <td class="property">AllegroFlare::TileMaps::TileMap&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_atlas_configuration</b>(std::string atlas_bitmap_filename=&quot;[unset-atlas_bitmap_filename]&quot;, int atlas_bitmap_tile_width=1, int atlas_bitmap_tile_height=1)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_num_rows</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_num_columns</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>resize</b>(int num_columns=1, int num_rows=1)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>rescale_tile_dimensions_to</b>(float tile_width=1, float tile_height=1)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>random_fill</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_real_width</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_real_height</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>obtain_tile_width</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>obtain_tile_height</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Random&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Random.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_image_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMesh.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/MultiMesh.q.yml">quintessence/AllegroFlare/TileMaps/MultiMesh.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">num_items</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">vertex_buffer</td>
  <td class="property">ALLEGRO_VERTEX_BUFFER*</td>
</tr>
<tr>
  <td class="property">vertex_decl</td>
  <td class="property">ALLEGRO_VERTEX_DECL*</td>
</tr>
<tr>
  <td class="property">texture</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">vertices_in_use</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">VERTICES_PER_ITEM</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">atlas</td>
  <td class="property">AllegroFlare::TileMaps::MultiMeshUVAtlas</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">DEFAULT_NUM_ITEMS</td>
  <td class="property">std::size_t</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_atlas</b>(AllegroFlare::TileMaps::MultiMeshUVAtlas atlas={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_num_items</b>(std::size_t num_items=DEFAULT_NUM_ITEMS)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>infer_num_items_in_use</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>infer_largest_index_num_in_use</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>append</b>(int atlas_item_index_num=0, float x=0, float y=0)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>append_raw</b>(float x=0, float y=0, float w=1, float h=1, float u1=100.0f, float v1=100.0f, float u2=200.0f, float v2=200.0f)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>remove</b>(int item_index=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::MultiMeshUVAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/MultiMeshUVAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::size_t&quot;, &quot;headers&quot;=&gt;[&quot;cstddef&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VERTEX_DECL&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VERTEX_BUFFER&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/MultiMeshUV.q.yml">quintessence/AllegroFlare/TileMaps/MultiMeshUV.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">u1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">v1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">u2</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">v2</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_width</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_height</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/MultiMeshUVAtlas.q.yml">quintessence/AllegroFlare/TileMaps/MultiMeshUVAtlas.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">index</td>
  <td class="property">std::map&lt;int, AllegroFlare::TileMaps::MultiMeshUV&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>add</b>(int index_num=0, float u1=0.0f, float v1=0.0f, float u2=1.0f, float v2=1.0f)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>exists</b>(int index_num=0)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::TileMaps::MultiMeshUV</td>
  <td class="method"><b>get</b>(int index_num=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::MultiMeshUV&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/MultiMeshUV.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/PrimMeshAtlas.q.yml">quintessence/AllegroFlare/TileMaps/PrimMeshAtlas.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">bitmap_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">tile_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_spacing</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_index</td>
  <td class="property">std::vector&lt;AllegroFlare::TileMaps::PrimMeshAtlasIndexRecord&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_tile_width</b>(int tile_width=16)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_tile_height</b>(int tile_height=16)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_tile_spacing</b>(int tile_spacing=16)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>clear</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>duplicate_bitmap_and_load</b>(ALLEGRO_BITMAP* source_bitmap=nullptr, int tile_width=16, int tile_height=16, int tile_spacing=0)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_tile_index_size</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_bitmap_width</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_bitmap_height</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>get_tile_uv</b>(int index_num=0, int* u1=nullptr, int* v1=nullptr, int* u2=nullptr, int* v2=nullptr)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>get_tile_uv</b>(int index_num=0, float* u1=nullptr, float* v1=nullptr, float* u2=nullptr, float* v2=nullptr)</td>
</tr>
<tr>
  <td class="method">ALLEGRO_BITMAP*</td>
  <td class="method"><b>get_tile_sub_bitmap</b>(int index_num=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlasIndexRecord&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlasIndexRecord.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/PrimMeshAtlasIndexRecord.q.yml">quintessence/AllegroFlare/TileMaps/PrimMeshAtlasIndexRecord.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">index_num</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">bitmap_source</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">sub_bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">u1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">v1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">u2</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">v2</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/TileAtlasBuilder.q.yml">quintessence/AllegroFlare/TileMaps/TileAtlasBuilder.q.yml</h3>
    <h3>Overview</h3>
    <p>{"todos"=>["Fix argument order in \"build_scaled_and_extruded\""]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">tile_w</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_h</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_index</td>
  <td class="property">std::vector&lt;AllegroFlare::TileMaps::PrimMeshAtlasIndexRecord&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">ALLEGRO_BITMAP*</td>
  <td class="method"><b>build_extruded</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_BITMAP*</td>
  <td class="method"><b>build_scaled_and_extruded</b>(ALLEGRO_BITMAP* original_bitmap=nullptr, int scale=3, int tile_width=16, int tile_height=16)</td>
</tr>
<tr>
  <td class="method">ALLEGRO_BITMAP*</td>
  <td class="method"><b>create_pixel_perfect_scaled_render</b>(ALLEGRO_BITMAP* bitmap=nullptr, int scale=3)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlasIndexRecord&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlasIndexRecord.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ImageProcessing&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ImageProcessing.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/TileAtlasRepository.q.yml">quintessence/AllegroFlare/TileMaps/TileAtlasRepository.q.yml</h3>
    <h3>Overview</h3>
    <p>{"notes"=>["Unlike other bins (BitmapBin, FontBin), is object's internalBitmapBin does not store data, and does not need to be cleared. It's just used to access bitmap assets from the filesystem, which are then duplicated into the TileAtlas as a new bitmap once the data is loaded."]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">tile_atlas_bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin</td>
</tr>
<tr>
  <td class="property">data_path</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">asset_subdirectory</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">repository</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::TileMaps::TileAtlasRepositoryRecord&gt;</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">DEFAULT_DATA_PATH</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_ASSET_SUBDIRECTORY</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::TileMaps::PrimMeshAtlas*</td>
  <td class="method"><b>fetch</b>(std::string identifier=&quot;[unset-identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>exists</b>(std::string identifier=&quot;[unset-identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>destroy</b>(std::string identifier=&quot;[unset-identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load</b>(std::string identifier=&quot;[unset-identifier]&quot;, std::string source_bitmap_filename=&quot;[unset-source_bitmap_filename]&quot;, int source_bitmap_tile_width=16, int source_bitmap_tile_height=16, int scale=3)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileAtlasRepositoryRecord&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileAtlasRepositoryRecord.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileAtlasBuilder&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileAtlasBuilder.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/TileAtlasRepositoryRecord.q.yml">quintessence/AllegroFlare/TileMaps/TileAtlasRepositoryRecord.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">tile_atlas</td>
  <td class="property">AllegroFlare::TileMaps::PrimMeshAtlas</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/TileMesh.q.yml">quintessence/AllegroFlare/TileMaps/TileMesh.q.yml</h3>
    <h3>Overview</h3>
    <p>{"notes"=>["This class is the evolutionary replacement for TileMaps/PrimMesh. It includes uses vertex_buffer and has features for postponing a vertex_buffer refresh. Feel free to optimize this!"]}</p>    <p>{"todos"=>["Add a pruning feature (Make is to that \"empty\" tiles can be present in the tile_ids<>, but do not draw them) - Consider adding an index buffer so that empty tiles are not rendered - Consider *removing* empty tile vertices from the vertices<>.", "Consider adding an index buffer feature, breaking the map into sections so that off-screen draws can be bypassed", "Add a destroy mechanism for object destruction", "Add a warning in the class's destructor if the object has not been destroyed", "Consider option to opt out of using the vertex buffer"]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">atlas</td>
  <td class="property">AllegroFlare::TileMaps::PrimMeshAtlas*</td>
</tr>
<tr>
  <td class="property">vertices</td>
  <td class="property">std::vector&lt;ALLEGRO_VERTEX&gt;</td>
</tr>
<tr>
  <td class="property">vertex_buffer</td>
  <td class="property">ALLEGRO_VERTEX_BUFFER*</td>
</tr>
<tr>
  <td class="property">index_buffer</td>
  <td class="property">ALLEGRO_INDEX_BUFFER*</td>
</tr>
<tr>
  <td class="property">tile_ids</td>
  <td class="property">std::vector&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">index_vertices</td>
  <td class="property">std::vector&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">h_flipped_tiles</td>
  <td class="property">std::set&lt;std::pair&lt;int, int&gt;&gt;</td>
</tr>
<tr>
  <td class="property">v_flipped_tiles</td>
  <td class="property">std::set&lt;std::pair&lt;int, int&gt;&gt;</td>
</tr>
<tr>
  <td class="property">d_flipped_tiles</td>
  <td class="property">std::set&lt;std::pair&lt;int, int&gt;&gt;</td>
</tr>
<tr>
  <td class="property">num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">holding_vertex_buffer_update_until_refresh</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">vertex_buffer_is_dirty</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">yz_swapped</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_num_rows</b>(int num_rows=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_num_columns</b>(int num_columns=0)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>remove_tile_xy_from_index</b>(int tile_x=0, int tile_y=0)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>remove_vertices_from_index_vertices</b>(std::vector&lt;int&gt; vertices_to_remove={})</td>
</tr>
<tr>
  <td class="method">std::vector&lt;int&gt;</td>
  <td class="method"><b>vertex_indices_for_tile_xy</b>(int tile_x=0, int tile_y=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>destroy</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>disable_holding_vertex_buffer_update_until_refresh</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>resize</b>(int num_columns=0, int num_rows=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>(bool draw_outline=false)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>set_tile_id</b>(int tile_x=0, int tile_y=0, int tile_id=0, bool flip_h=false, bool flip_v=false, bool flip_d=false)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_tile_id</b>(int tile_x=0, int tile_y=0)</td>
</tr>
<tr>
  <td class="method">std::tuple&lt;bool, bool, bool&gt;</td>
  <td class="method"><b>get_tile_flip</b>(int tile_x=0, int tile_y=0)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>h_flip_vertices</b>(int* u1=nullptr, int* v1=nullptr, int* u2=nullptr, int* v2=nullptr)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>v_flip_vertices</b>(int* u1=nullptr, int* v1=nullptr, int* u2=nullptr, int* v2=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_tile_uv</b>(int tile_x=0, int tile_y=0, int u1=0, int v1=0, int u2=0, int v2=0, bool diagonal_flip=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>refresh_vertex_buffer</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>infer_num_vertices</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>infer_num_tiles</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>rescale_tile_dimensions_to</b>(int new_tile_width=0, int new_tile_height=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_tile_width</b>(int new_tile_width=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_tile_height</b>(int new_tile_height=0)</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_real_width</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_real_height</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>swap_yz</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VERTEX&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_INDEX_BUFFER&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VERTEX_BUFFER&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Time.q.yml">quintessence/AllegroFlare/Time.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">absolute_now</td>
  <td class="property">double</td>
</tr>
<tr>
  <td class="property">playhead</td>
  <td class="property">double</td>
</tr>
<tr>
  <td class="property">rate</td>
  <td class="property">double</td>
</tr>
<tr>
  <td class="property">paused</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">last_rate_changed_at</td>
  <td class="property">double</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">double</td>
  <td class="method"><b>universal_absolute_now</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_absolute_now</b>(double absolute_now=AllegroFlare::Time::universal_absolute_now())</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>pause</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>unpause</b>()</td>
</tr>
<tr>
  <td class="method">double</td>
  <td class="method"><b>now</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>jump_ahead_sec</b>(double distance=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_rate</b>(double rate=1.0f)</td>
</tr>
<tr>
  <td class="method">double</td>
  <td class="method"><b>calculate_age</b>(double time_now=0.0f, double time_begin=0.0f)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TimeStamper.q.yml">quintessence/AllegroFlare/TimeStamper.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>generate_now_timestamp_utc</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::time_t&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;, &quot;ctime&quot;, &quot;iomanip&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Timeline/ActorFactory.q.yml">quintessence/AllegroFlare/Timeline/ActorFactory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">AllegroFlare::Timeline::Actors::Actor2D*</td>
  <td class="method"><b>create_actor2d_with_script</b>(std::string identifier=&quot;[unset-identifier]&quot;, std::string bitmap_identifier=&quot;[unset-bitmap_identifier]&quot;, std::string script=&quot;[unset-bitmap_identifier]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timeline::Actors::Actor2D*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timeline/Actors/Actor2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timeline::Actors::Actor2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timeline/Actors/Actor2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TransitionFX/Base.q.yml">quintessence/AllegroFlare/TransitionFX/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">pasteboard_a</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">pasteboard_b</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">duration_sec</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">position</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">finished</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_BITMAP*</td>
  <td class="method"><b>get_pasteboard_a</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_BITMAP*</td>
  <td class="method"><b>get_pasteboard_b</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/UnicodeFontViewer.q.yml">quintessence/AllegroFlare/UnicodeFontViewer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">font_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">unicode_range_start</td>
  <td class="property">uint32_t</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>previous_page</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>next_page</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>as_hex</b>(uint32_t value=0, int zero_fill_width=6)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>as_int</b>(uint32_t value=0)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_unicode_character</b>(ALLEGRO_FONT* font=nullptr, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1}, uint32_t icon=61444, int flags=0, float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_unicode_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_ui_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_ui_font_mini</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::setfill&quot;, &quot;headers&quot;=&gt;[&quot;iomanip&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_font_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_ttf_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Useful3D/Triangle.q.yml">quintessence/AllegroFlare/Useful3D/Triangle.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">v0</td>
  <td class="property">AllegroFlare::vec3d</td>
</tr>
<tr>
  <td class="property">v1</td>
  <td class="property">AllegroFlare::vec3d</td>
</tr>
<tr>
  <td class="property">v2</td>
  <td class="property">AllegroFlare::vec3d</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>intersect</b>(AllegroFlare::Useful3D::Ray* ray_=nullptr, AllegroFlare::Useful3D::IntersectData* intersect_data=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw</b>(ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1})</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;cross_product&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec3d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Useful3D::build_vertex&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Useful3D::Ray*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful3D/Ray.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Useful3D::IntersectData*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful3D/IntersectData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Useful3D::IntersectData&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful3D/IntersectData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Useful3D::Ray&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful3D/Ray.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Vec2B.q.yml">quintessence/AllegroFlare/Vec2B.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">x</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Vec2I.q.yml">quintessence/AllegroFlare/Vec2I.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">x</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Video.q.yml">quintessence/AllegroFlare/Video.q.yml</h3>
    <h3>Overview</h3>
    <p>{"notes"=>["see AllegroFlare/Elements/Backgrounds/Video for information about the play status needed for this class."]}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">al_video</td>
  <td class="property">ALLEGRO_VIDEO*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VIDEO&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_video.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/VideoBin.q.yml">quintessence/AllegroFlare/VideoBin.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>validate</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_VIDEO*</td>
  <td class="method"><b>load_data</b>(std::string identifier=&quot;[unset-identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>destroy_data</b>(ALLEGRO_VIDEO* video=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Bin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Bin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VIDEO&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_video.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/VirtualController.q.yml">quintessence/AllegroFlare/VirtualController.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">BUTTON_UP</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BUTTON_DOWN</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BUTTON_LEFT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BUTTON_RIGHT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BUTTON_A</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BUTTON_B</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BUTTON_X</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BUTTON_Y</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BUTTON_START</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BUTTON_RIGHT_BUMPER</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BUTTON_LEFT_BUMPER</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">PRIMARY_STICK</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">SECONDARY_STICK</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">right_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">left_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">up_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">down_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">a_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">b_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">x_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">y_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">left_bumper_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">right_bumper_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">start_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">primary_stick_position</td>
  <td class="property">AllegroFlare::vec2d</td>
</tr>
<tr>
  <td class="property">secondary_stick_position</td>
  <td class="property">AllegroFlare::vec2d</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>clear</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/VirtualControllers/Base.q.yml">quintessence/AllegroFlare/VirtualControllers/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/VirtualControllers/GenericController.q.yml">quintessence/AllegroFlare/VirtualControllers/GenericController.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">PRIMARY_STICK</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">SECONDARY_STICK</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">primary_stick_position</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">secondary_stick_position</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_NAME</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/VirtualControlsProcessor.q.yml">quintessence/AllegroFlare/VirtualControlsProcessor.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">input_devices_list</td>
  <td class="property">AllegroFlare::InputDevicesList*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">physical_input_device_to_virtual_control_mappings</td>
  <td class="property">std::vector&lt;AllegroFlare::PhysicalInputDeviceToVirtualControllerMapping&gt;</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_input_devices_list</b>(AllegroFlare::InputDevicesList* input_devices_list=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_event_emitter</b>(AllegroFlare::EventEmitter* event_emitter=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>handle_raw_keyboard_key_down_event</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>handle_raw_keyboard_key_up_event</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>handle_raw_joystick_button_down_event</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>handle_raw_joystick_button_up_event</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>handle_raw_joystick_axis_change_event</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>handle_joystick_device_configuration_change_event</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="private_method">int</td>
  <td class="private_method"><b>get_joystick_mapped_virtual_button</b>(int native_button_num=-1)</td>
</tr>
<tr>
  <td class="private_method">AllegroFlare::PhysicalInputDeviceToVirtualControllerMapping*</td>
  <td class="private_method"><b>get_keyboard_mapped_physical_input_device_to_virtual_controller_mapping</b>(int al_keyboard_keycode=-1)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_virtual_controls_button_up_event</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_virtual_controls_button_down_event</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_virtual_controls_axis_change_event</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_stick=0, int virtual_controller_axis=0, float virtual_controller_position=0.0f)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_JOYSTICK&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_KEY_&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::PhysicalInputDevices::Joysticks::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/PhysicalInputDevices/Joysticks/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::PhysicalInputDevices::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/PhysicalInputDevices/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::PhysicalInputDeviceToVirtualControllerMapping&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/PhysicalInputDeviceToVirtualControllerMapping.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::PhysicalInputDeviceToVirtualControllerMappingFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/PhysicalInputDeviceToVirtualControllerMappingFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::VirtualControllerAxisChangeEventData&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/VirtualControllerAxisChangeEventData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::VirtualControllerButtonPressedEventData&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/VirtualControllerButtonPressedEventData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::VirtualControllerButtonReleasedEventData&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/VirtualControllerButtonReleasedEventData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InputDevicesList&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InputDevicesList.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/WorldMapRenderer.q.yml">quintessence/AllegroFlare/WorldMapRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">quote</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/WorldMapRenderers/Basic.q.yml">quintessence/AllegroFlare/WorldMapRenderers/Basic.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">map</td>
  <td class="property">AllegroFlare::WorldMaps::Maps::Basic*</td>
</tr>
<tr>
  <td class="property">quote</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_point</b>(float x=0.0f, float y=0.0f, ALLEGRO_COLOR point_color=ALLEGRO_COLOR{0.96, 0.89, 0.5, 1.0})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_location</b>(AllegroFlare::WorldMaps::Locations::Base* location=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_BITMAP*</td>
  <td class="private_method"><b>obtain_background_image</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::WorldMaps::Locations::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/WorldMaps/Locations/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::WorldMaps::Locations::Basic&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/WorldMaps/Locations/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::WorldMaps::Locations::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/WorldMaps/Locations/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::WorldMaps::Maps::Basic&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/WorldMaps/Maps/Basic.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/WorldMaps/Locations/Base.q.yml">quintessence/AllegroFlare/WorldMaps/Locations/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>collides</b>(float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_type</b>(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/WorldMaps/Locations/Basic.q.yml">quintessence/AllegroFlare/WorldMaps/Locations/Basic.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">label</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>collides</b>(float point_x=0.0f, float point_y=0.0f)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::WorldMaps::Locations::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/WorldMaps/Locations/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/WorldMaps/Locations/Player.q.yml">quintessence/AllegroFlare/WorldMaps/Locations/Player.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>collides</b>(float point_x=0.0f, float point_y=0.0f)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::WorldMaps::Locations::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/WorldMaps/Locations/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/WorldMaps/Maps/Base.q.yml">quintessence/AllegroFlare/WorldMaps/Maps/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::pair&lt;float, float&gt;</td>
  <td class="method"><b>infer_primary_point_of_interest_coordinates</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>location_id_at</b>(float x=0, float y=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/WorldMaps/Maps/Basic.q.yml">quintessence/AllegroFlare/WorldMaps/Maps/Basic.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">background_image_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">locations</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::WorldMaps::Locations::Base*&gt;</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">primary_point_of_interest_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">DEFAULT_PRIMARY_POINT_OF_INTEREST_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::pair&lt;float, float&gt;</td>
  <td class="method"><b>infer_primary_point_of_interest_coordinates</b>()</td>
</tr>
<tr>
  <td class="method">std::pair&lt;bool, std::pair&lt;float, float&gt;&gt;</td>
  <td class="method"><b>infer_location_coordinates</b>(std::string location_id=&quot;[unset-location_id]&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>primary_point_of_interest_is_set</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>primary_point_of_interest_is_on_map</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>location_exists</b>(std::string location_id=&quot;[unset-location_id]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::WorldMaps::Locations::Base*</td>
  <td class="method"><b>find_location_by_id</b>(std::string location_id=&quot;[unset-location_id]&quot;)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>location_id_at</b>(float x=0, float y=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::WorldMaps::Maps::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/WorldMaps/Maps/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::WorldMaps::Locations::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/WorldMaps/Locations/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::WorldMaps::Maps::Basic&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/WorldMaps/Maps/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/YAMLValidator.q.yml">quintessence/AllegroFlare/YAMLValidator.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>validate_presence_of_key</b>(YAML::Node node={}, std::string key=&quot;[unset-key]&quot;, bool throw_on_error=true)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>validate_node_type</b>(YAML::Node node={}, std::string key=&quot;[unset-key]&quot;, YAML::NodeType::value expected_type=YAML::NodeType::Undefined, bool throw_on_error=true)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>validate_node_is_one_of_type</b>(YAML::Node node={}, std::string key=&quot;[unset-key]&quot;, std::vector&lt;YAML::NodeType::value&gt; possible_valid_types={}, bool throw_on_error=true)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>validate_node_has_unsigned_int_value</b>(YAML::Node node={}, std::string key=&quot;[unset-key]&quot;)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>validate_elements_are_unique</b>(std::vector&lt;std::string&gt; elements={})</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>yaml_node_type_as_string</b>(YAML::NodeType::value node_type=YAML::NodeType::Undefined)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>validate_unique_all_upper_identifiers</b>(YAML::Node items={})</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_type_string</b>(YAML::Node* node_ptr=nullptr)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::string&gt;</td>
  <td class="method"><b>extract_sequence_as_string_array</b>(YAML::Node source={})</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>join</b>(std::vector&lt;std::string&gt; tokens={}, std::string delimiter=&quot;, &quot;)</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>quote_and_escape_inner_quotes</b>(std::string subject=&quot;[unset-subject]&quot;)</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>replace</b>(std::string subject=&quot;[unset-subject]&quot;, std::string search=&quot;[unset-search]&quot;, std::string replace=&quot;[unset-replace]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::any_of&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;YAML::Node&quot;, &quot;headers&quot;=&gt;[&quot;yaml-cpp/yaml.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;YAML::NodeType::value&quot;, &quot;headers&quot;=&gt;[&quot;yaml-cpp/yaml.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/BuildInfo.q.yml">quintessence/BuildInfo.q.yml</h3>
    <h3>Overview</h3>
    <p>{"note"=>"This class will be completely overwritten during release. The release process will create a new class that\nwill replace this one. For the purpose of building during development and testing, this stub class is used.\nNote that the class is kept at the top-level in include/ and src/ folders and is not nested in AllegroFlare/.\n"}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">time_of_build</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">building_platform_os_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">building_platform_os_version</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">building_platform_chipset</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">compiler_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">compiler_version</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">allegro_version_num</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">allegro_version_git_branch</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">allegro_version_git_hash</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">allegro_version_git_latest_commit_date_and_time</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">allegro_version_git_num_commits</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_cpp_version_string</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/ReleaseInfo.q.yml">quintessence/ReleaseInfo.q.yml</h3>
    <h3>Overview</h3>
    <p>{"note"=>"This class will be completely overwritten during release. The release process will create a new class that\nwill replace this one. For the purpose of building during development and testing, this current class is used.\nNote that the class is kept at the top-level in include/ and src/ folders and is not nested in AllegroFlare/.\n"}</p>    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">version</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">allegro_flare_version_git_hash</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">blast_version_git_hash</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Tileo/MeshWithNormals.q.yml">quintessence/Tileo/MeshWithNormals.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">tileo_tile_vertex_allegro_vertex_declaration</td>
  <td class="property">Tileo::TileoTileVertexAllegroVertexDeclaration</td>
</tr>
<tr>
  <td class="property">num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">tile_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">atlas</td>
  <td class="property">AllegroFlare::TileMaps::PrimMeshAtlas*</td>
</tr>
<tr>
  <td class="property">normal_atlas</td>
  <td class="property">AllegroFlare::TileMaps::PrimMeshAtlas*</td>
</tr>
<tr>
  <td class="property">tile_ids</td>
  <td class="property">std::vector&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">normal_tile_ids</td>
  <td class="property">std::vector&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">vertexes</td>
  <td class="property">std::vector&lt;TILEO_TILE_VERTEX&gt;</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">destroyed</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>destroy</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_VERTEX_DECL*</td>
  <td class="method"><b>obtain_vertex_declaration</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>resize</b>(int num_columns=1, int num_rows=1)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>set_tile</b>(int tile_x=0, int tile_y=0, int tile_index_num=0)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>set_normal_tile</b>(int tile_x=0, int tile_y=0, int tile_index_num=0)</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>set_tile_uv</b>(int tile_x=0, int tile_y=0, float u1=0.0f, float v1=0.0f, float u2=0.0f, float v2=0.0f)</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>set_normal_tile_uv</b>(int tile_x=0, int tile_y=0, float u1=0.0f, float v1=0.0f, float u2=0.0f, float v2=0.0f)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>place_vertexes_into_tile_mesh_shape</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>clear_and_reserve</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tileo::TileoTileVertexAllegroVertexDeclaration&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/TileoTileVertexAllegroVertexDeclaration.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VERTEX_DECL&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;TILEO_TILE_VERTEX&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/TileoTileVertex.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Tileo/Shaders/AllegroDefault.q.yml">quintessence/Tileo/Shaders/AllegroDefault.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_vertex_source</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_fragment_source</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tileo::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Tileo/Shaders/Base.q.yml">quintessence/Tileo/Shaders/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">vertex_source_code</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">fragment_source_code</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Tileo/Shaders/MeshWithNormals.q.yml">quintessence/Tileo/Shaders/MeshWithNormals.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_flat_color</b>(ALLEGRO_COLOR flat_color={}, float intensity=1.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_light_direction</b>(AllegroFlare::vec3d light_direction={0, 0, 0})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_light_spread</b>(int light_spread=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_light_attenuation</b>(float light_attenuation=1.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_primary_texture</b>(ALLEGRO_BITMAP* primary_texture_bitmap=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_normal_texture</b>(ALLEGRO_BITMAP* normal_texture_bitmap=nullptr)</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_vertex_source</b>()</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>obtain_fragment_source</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tileo::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec3d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Tileo/TMJDataLoader.q.yml">quintessence/Tileo/TMJDataLoader.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">layer_num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">layer_num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">layer_tile_data</td>
  <td class="property">std::vector&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">collision_layer_num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">collision_layer_num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">collision_layer_tile_data</td>
  <td class="property">std::vector&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">loaded</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_num_columns</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_num_rows</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_tile_width</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_tile_height</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_layer_num_columns</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_layer_num_rows</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;int&gt;</td>
  <td class="method"><b>get_layer_tile_data</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_collision_layer_num_columns</b>()</td>
</tr>
<tr>
  <td class="method">int</td>
  <td class="method"><b>get_collision_layer_num_rows</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;int&gt;</td>
  <td class="method"><b>get_collision_layer_tile_data</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>load</b>()</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>file_exists</b>(std::string filename=&quot;[unset-filename]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::ifstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;nlohmann::json&quot;, &quot;headers&quot;=&gt;[&quot;lib/nlohmann/json.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::exists&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Tileo/TMJMeshLoader.q.yml">quintessence/Tileo/TMJMeshLoader.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">BITMAP_ATLAS_FILENAME</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">tmj_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">tile_atlas</td>
  <td class="property">AllegroFlare::TileMaps::PrimMeshAtlas*</td>
</tr>
<tr>
  <td class="property">mesh</td>
  <td class="property">AllegroFlare::TileMaps::PrimMesh*</td>
</tr>
<tr>
  <td class="property">collision_tile_map</td>
  <td class="property">AllegroFlare::TileMaps::TileMap&lt;int&gt;*</td>
</tr>
<tr>
  <td class="property">loaded</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">AllegroFlare::TileMaps::PrimMeshAtlas*</td>
  <td class="method"><b>get_tile_atlas</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::TileMaps::PrimMesh*</td>
  <td class="method"><b>get_mesh</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::TileMaps::TileMap&lt;int&gt;*</td>
  <td class="method"><b>get_collision_tile_map</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>load</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ifstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;nlohmann::json&quot;, &quot;headers&quot;=&gt;[&quot;lib/nlohmann/json.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileAtlasBuilder&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileAtlasBuilder.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tileo::TMJDataLoader&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/TMJDataLoader.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Tileo/TileoTileVertexAllegroVertexDeclaration.q.yml">quintessence/Tileo/TileoTileVertexAllegroVertexDeclaration.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">vertex_declaration</td>
  <td class="property">ALLEGRO_VERTEX_DECL*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">destroyed</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">ALLEGRO_VERTEX_DECL*</td>
  <td class="method"><b>get_vertex_declaration</b>()</td>
</tr>
<tr>
  <td class="method">TILEO_TILE_VERTEX</td>
  <td class="method"><b>build_empty_vertex</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>destroy</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VERTEX_DECL&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;TILEO_TILE_VERTEX&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/TileoTileVertex.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/CameraControlStrategies2D/Base.q.yml">quintessence/Wicked/CameraControlStrategies2D/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">camera</td>
  <td class="property">AllegroFlare::Placement2D*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/CameraControlStrategies2D/HorizontalRail.q.yml">quintessence/Wicked/CameraControlStrategies2D/HorizontalRail.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity_to_follow</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::CameraControlStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/CameraControlStrategies2D/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/CameraControlStrategies2D/SmoothSnap.q.yml">quintessence/Wicked/CameraControlStrategies2D/SmoothSnap.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">room_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">room_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">entity_to_follow</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::CameraControlStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/CameraControlStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/CameraControlStrategies2D/Snap.q.yml">quintessence/Wicked/CameraControlStrategies2D/Snap.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity_to_follow</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::CameraControlStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/CameraControlStrategies2D/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/Base.q.yml">quintessence/Wicked/Entities/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">parent</td>
  <td class="property">AllegroFlare::ElementID*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ElementID&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ElementID.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/Basic2D.q.yml">quintessence/Wicked/Entities/Basic2D.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">place</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">velocity</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">bitmap_alignment_strategy</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">bitmap_flip_h</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">debug_box_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>fit_to_bitmap</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>assign_alignment_strategy_values</b>(AllegroFlare::Placement2D* parent_placement=nullptr, ALLEGRO_BITMAP* bitmap=nullptr, float* bitmap_x=nullptr, float* bitmap_y=nullptr, std::string bitmap_alignment_strategy=&quot;centered&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/EntityFlagNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/Basic2DFactory.q.yml">quintessence/Wicked/Entities/Basic2DFactory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">enemy_debug_box_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">player_collectable_box_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">goalpost_box_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">Wicked::Entities::Basic2D*</td>
  <td class="method"><b>create_from_bitmap_filename</b>(std::string map_name=&quot;[map-name-not-set]&quot;, std::string bitmap_filename=&quot;bitmap-filename-that-has-not-been-set.png&quot;, std::string bitmap_alignment_strategy=&quot;centered&quot;)</td>
</tr>
<tr>
  <td class="method">Wicked::Entities::Basic2D*</td>
  <td class="method"><b>create_for_aabb2d</b>(std::string map_name=&quot;[map-name-not-set]&quot;, float width=(16.0f-1.0f), float height=(16.0f-1.0f))</td>
</tr>
<tr>
  <td class="method">Wicked::Entities::Basic2D*</td>
  <td class="method"><b>create_player_projectile</b>(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f, float width=(8.0f-1.0f), float height=(8.0f-1.0f), AllegroFlare::vec2d vector=AllegroFlare::vec2d(0.0f, 1.0f), float magnitude=1.0f)</td>
</tr>
<tr>
  <td class="method">Wicked::Entities::Enemies::Base*</td>
  <td class="method"><b>create_enemy_move_left</b>(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f, float width=(16.0f-1.0f), float height=(16.0f-1.0f))</td>
</tr>
<tr>
  <td class="method">Wicked::Entities::Enemies::Base*</td>
  <td class="method"><b>create_tracking_enemy</b>(std::string map_name=&quot;[map-name-not-set]&quot;, Wicked::Entities::Basic2D* tracked_entity=nullptr, float x=0.0f, float y=0.0f, float width=(16.0f-1.0f), float height=(16.0f-1.0f))</td>
</tr>
<tr>
  <td class="method">Wicked::Entities::Enemies::Base*</td>
  <td class="method"><b>create_flapping_enemy</b>(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f, float width=(16.0f-1.0f), float height=(16.0f-1.0f), float target_elevation=0.0f, float flap_strength=1.0f, float flap_recovery_rate=0.1f)</td>
</tr>
<tr>
  <td class="method">Wicked::Entities::Basic2D*</td>
  <td class="method"><b>create_collectable</b>(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="method">Wicked::Entities::Basic2D*</td>
  <td class="method"><b>create_door</b>(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f, std::string target_map_name=&quot;[unset-target-map-name]&quot;, float target_spawn_x=0.0f, float target_spawn_y=0.0f)</td>
</tr>
<tr>
  <td class="method">Wicked::Entities::Basic2D*</td>
  <td class="method"><b>create_game_event_door</b>(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f, std::string game_event_name_to_emit=&quot;[unset-game_event_name_to_emit]&quot;)</td>
</tr>
<tr>
  <td class="method">Wicked::Entities::Basic2D*</td>
  <td class="method"><b>create_goalpost</b>(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="method">Wicked::Entities::Basic2D*</td>
  <td class="method"><b>create_tile_map</b>(std::string map_json_filename=&quot;[a-map-tmj-filename-that-is-not-set]&quot;, std::string map_name=&quot;[map-name-not-set]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::MoveLeft&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/MoveLeft.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::MoveRight&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/MoveRight.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::StayStill&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/StayStill.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::BackAndForthHorizontal&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/BackAndForthHorizontal.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::HoppingLeft&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/HoppingLeft.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::Tracking&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/Tracking.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::FallOnTrackingRange&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/FallOnTrackingRange.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::ReflectOffWalls&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/ReflectOffWalls.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::MoveInDirection&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/MoveInDirection.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::Flapping&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/Flapping.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::FlappingWithRandomness&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/FlappingWithRandomness.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/EntityFlagNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Doors::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Doors/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;WickedDemos::TileMaps::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;WickedDemos/TileMaps/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tileo::TMJMeshLoader&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/TMJMeshLoader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Enemies::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Enemies/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/Basic3D.q.yml">quintessence/Wicked/Entities/Basic3D.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">place</td>
  <td class="property">AllegroFlare::Placement3D</td>
</tr>
<tr>
  <td class="property">velocity</td>
  <td class="property">AllegroFlare::Placement3D</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>TODO</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/CollectionHelper.q.yml">quintessence/Wicked/Entities/CollectionHelper.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entities</td>
  <td class="property">std::vector&lt;Wicked::Entities::Basic2D*&gt;*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::vector&lt;Wicked::Entities::Basic2D*&gt;</td>
  <td class="method"><b>select_collectable_by_player</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;Wicked::Entities::Basic2D*&gt;</td>
  <td class="method"><b>select_goalposts</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;Wicked::Entities::Basic2D*&gt;</td>
  <td class="method"><b>select_doors</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;Wicked::Entities::Basic2D*&gt;</td>
  <td class="method"><b>select_on_map</b>(std::string on_map_name=&quot;[on-map-name-not-set]&quot;)</td>
</tr>
<tr>
  <td class="method">WickedDemos::TileMaps::Basic2D*</td>
  <td class="method"><b>find_map_by_name</b>(std::string map_name=&quot;[find-map-name-not-set]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/EntityFlagNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;WickedDemos::TileMaps::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;WickedDemos/TileMaps/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/Doors/Basic2D.q.yml">quintessence/Wicked/Entities/Doors/Basic2D.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">game_event_name_to_emit</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">target_map_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">target_spawn_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">target_spawn_y</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/Enemies/Base.q.yml">quintessence/Wicked/Entities/Enemies/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">movement_strategy</td>
  <td class="property">Wicked::Entities::MovementStrategies2D::Base*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/EnemyFactory.q.yml">quintessence/Wicked/Entities/EnemyFactory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>run</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/MovementStrategies2D/Anchored.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/Anchored.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">anchor</td>
  <td class="property">AllegroFlare::vec2d</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/MovementStrategies2D/BackAndForthHorizontal.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/BackAndForthHorizontal.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">timer</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">travel_speed</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">travel_duration</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">direction_of_travel_is_left</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/MovementStrategies2D/Base.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/MovementStrategies2D/FallOnTrackingRange.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/FallOnTrackingRange.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">tracked_entity</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">range_radius</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">triggered</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/MovementStrategies2D/Flapping.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/Flapping.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">target_elevation</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">flap_strength</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">flap_recovery_rate</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">flap_recovery_counter</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">can_flap</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>update_flapability_status</b>()</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>decide_to_flap</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>flap</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/MovementStrategies2D/FlappingWithRandomness.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/FlappingWithRandomness.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">target_elevation</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">flap_strength</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">flap_recovery_rate</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">flap_recovery_counter</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">can_flap</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">random</td>
  <td class="property">AllegroFlare::Random</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_random_seed</b>(uint32_t random_seed=0)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>flap</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>update_flapability_status</b>()</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>decide_to_flap</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Random&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Random.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/EntityFlagNames.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/MovementStrategies2D/HoppingLeft.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/HoppingLeft.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">jump_force</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">speed</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">landing_delay</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">timer</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/MovementStrategies2D/MoveInDirection.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/MoveInDirection.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">direction</td>
  <td class="property">AllegroFlare::vec2d</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/MovementStrategies2D/MoveLeft.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/MoveLeft.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">speed</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/MovementStrategies2D/MoveRight.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/MoveRight.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">speed</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/MovementStrategies2D/ReflectOffWalls.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/ReflectOffWalls.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">speed</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">moving_right</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">moving_down</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/EntityFlagNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/MovementStrategies2D/StayStill.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/StayStill.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/MovementStrategies2D/Tracking.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/Tracking.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">tracked_entity</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">speed</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/Zones/Base2D.q.yml">quintessence/Wicked/Entities/Zones/Base2D.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>collides</b>(AllegroFlare::vec2d point={})</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/Zones/Base3D.q.yml">quintessence/Wicked/Entities/Zones/Base3D.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>collides</b>(AllegroFlare::vec3d point={})</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec3d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/Zones/Rectangle2D.q.yml">quintessence/Wicked/Entities/Zones/Rectangle2D.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">x1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">x2</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y2</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>collides</b>(AllegroFlare::vec2d point={})</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Zones::Base2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Zones/Base2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/Zones/Rectangle3D.q.yml">quintessence/Wicked/Entities/Zones/Rectangle3D.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">x1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">z1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">x2</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y2</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">z2</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>collides</b>(AllegroFlare::vec3d point={})</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Zones::Base3D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Zones/Base3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec3d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Hud.q.yml">quintessence/Wicked/Hud.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">score</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">health</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_timer_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_health</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_score</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_hud_text_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::setfill&quot;, &quot;headers&quot;=&gt;[&quot;iomanip&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Physics/AABB2D.q.yml">quintessence/Wicked/Physics/AABB2D.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">w</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">h</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">velocity_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">velocity_y</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_left_edge</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_right_edge</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_top_edge</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_bottom_edge</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_left_edge</b>(float x=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_right_edge</b>(float x=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_top_edge</b>(float y=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_bottom_edge</b>(float y=0.0f)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Physics/EntityZoneCollisionObserver.q.yml">quintessence/Wicked/Physics/EntityZoneCollisionObserver.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">collisions_at_start</td>
  <td class="property">std::vector&lt;std::pair&lt;Wicked::Entities::Basic3D*, Wicked::Entities::Zones::Base3D*&gt;&gt;</td>
</tr>
<tr>
  <td class="property">collisions_at_end</td>
  <td class="property">std::vector&lt;std::pair&lt;Wicked::Entities::Basic3D*, Wicked::Entities::Zones::Base3D*&gt;&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::vector&lt;std::pair&lt;Wicked::Entities::Basic3D*, Wicked::Entities::Zones::Base3D*&gt;&gt;</td>
  <td class="method"><b>get_collided</b>(std::vector&lt;Wicked::Entities::Basic3D*&gt; entities={}, std::vector&lt;Wicked::Entities::Zones::Base3D*&gt; zones={})</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>collides</b>(Wicked::Entities::Basic3D* entity=nullptr, Wicked::Entities::Zones::Base3D* zone=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>observe_start_state</b>(std::vector&lt;Wicked::Entities::Basic3D*&gt; entities={}, std::vector&lt;Wicked::Entities::Zones::Base3D*&gt; zones={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>observe_end_state</b>(std::vector&lt;Wicked::Entities::Basic3D*&gt; entities={}, std::vector&lt;Wicked::Entities::Zones::Base3D*&gt; zones={})</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::pair&lt;Wicked::Entities::Basic3D*, Wicked::Entities::Zones::Base3D*&gt;&gt;</td>
  <td class="method"><b>collisions_added</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::pair&lt;Wicked::Entities::Basic3D*, Wicked::Entities::Zones::Base3D*&gt;&gt;</td>
  <td class="method"><b>collisions_removed</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic3D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Zones::Base3D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Zones/Base3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::set_difference&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Physics/TileMapCollisionStepper.q.yml">quintessence/Wicked/Physics/TileMapCollisionStepper.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">collision_tile_map</td>
  <td class="property">AllegroFlare::TileMaps::TileMap&lt;int&gt;*</td>
</tr>
<tr>
  <td class="property">aabb2d</td>
  <td class="property">Wicked::Physics::AABB2D*</td>
</tr>
<tr>
  <td class="property">tile_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">tile_height</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>step</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>adjacent_to_bottom_edge</b>(float tile_width=16.0f, float tile_height=16.0f)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>adjacent_to_right_edge</b>(float tile_width=16.0f, float tile_height=16.0f)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>adjacent_to_top_edge</b>(float tile_width=16.0f, float tile_height=16.0f)</td>
</tr>
<tr>
  <td class="method">std::pair&lt;int, int&gt;</td>
  <td class="method"><b>get_tile_coords_below_left_foot</b>(float x=0.0f, float y=0.0f, float height=1.0f)</td>
</tr>
<tr>
  <td class="method">std::pair&lt;int, int&gt;</td>
  <td class="method"><b>get_tile_coords_below_right_foot</b>(float x=0.0f, float y=0.0f, float width=1.0f, float height=1.0f)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>adjacent_to_left_edge</b>(float tile_width=16.0f, float tile_height=16.0f)</td>
</tr>
<tr>
  <td class="private_method">std::vector&lt;Wicked::Physics::Int2D&gt;</td>
  <td class="private_method"><b>get_next_collided_tile_coords</b>(float x=0.0f, float y=0.0f, float velocity=0.0f, float depth_of_body=1.0f, float length_of_edge=1.0f, float tile_length_n=1.0f, float tile_length_m=1.0f)</td>
</tr>
<tr>
  <td class="private_method">int</td>
  <td class="private_method"><b>world_coords_to_tile_coords</b>(float world_pos=0.0f, float tile_length=1.0f)</td>
</tr>
<tr>
  <td class="private_method">int</td>
  <td class="private_method"><b>world_x_coords_to_tile_coords_x</b>(float world_pos_x=0.0f)</td>
</tr>
<tr>
  <td class="private_method">int</td>
  <td class="private_method"><b>world_y_coords_to_tile_coords_y</b>(float world_pos_y=0.0f)</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_tile_left_edge</b>(float tile_x=0.0f, float tile_width=16.0f)</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_tile_right_edge</b>(float tile_x=0.0f, float tile_width=16.0f)</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_tile_top_edge</b>(float tile_y=0.0f, float tile_height=16.0f)</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_tile_bottom_edge</b>(float tile_y=0.0f, float tile_height=16.0f)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Physics::AABB2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Physics/AABB2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Wicked::Physics::Int2D&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Wicked/Physics/Int2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::pair&lt;int, int&gt;&quot;, &quot;headers&quot;=&gt;[&quot;utility&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Physics::Int2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Physics/Int2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Weapons/Base.q.yml">quintessence/Wicked/Weapons/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Weapons/DrawnBow.q.yml">quintessence/Wicked/Weapons/DrawnBow.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">draw_back_value</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">being_drawn</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>stop_draw</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>start_draw</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_strength</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>at_max</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>get_strength_value_styled</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Weapons::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Weapons/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Interpolators&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/WickedDemos/ProgramRunner.q.yml">quintessence/WickedDemos/ProgramRunner.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>run</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/WickedDemos/TileDemo.q.yml">quintessence/WickedDemos/TileDemo.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">framework</td>
  <td class="property">AllegroFlare::Frameworks::Full*</td>
</tr>
<tr>
  <td class="property">display</td>
  <td class="property">AllegroFlare::Display*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">native_display_resolution_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">native_display_resolution_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">currently_active_map</td>
  <td class="property">WickedDemos::TileMaps::Basic2D*</td>
</tr>
<tr>
  <td class="property">currently_active_map_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">entities</td>
  <td class="property">std::vector&lt;Wicked::Entities::Basic2D*&gt;</td>
</tr>
<tr>
  <td class="property">gravity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">gravity_reversed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">camera</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">hud_projection</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">player_controlled_entity</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">show_tile_mesh</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">show_collision_tile_mesh</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">player_controls</td>
  <td class="property">AllegroFlare::VirtualController</td>
</tr>
<tr>
  <td class="property">XXvirtual_controls_processor</td>
  <td class="property">AllegroFlare::VirtualControlsProcessor</td>
</tr>
<tr>
  <td class="property">showing_player_reticle</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">player_reticle_vector</td>
  <td class="property">AllegroFlare::vec2d</td>
</tr>
<tr>
  <td class="property">bow</td>
  <td class="property">Wicked::Weapons::DrawnBow</td>
</tr>
<tr>
  <td class="property">camera_control_strategy</td>
  <td class="property">Wicked::CameraControlStrategies2D::Base*</td>
</tr>
<tr>
  <td class="property">player_collected_items</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_currently_active_map</b>(std::string name=&quot;[unset-current-map-name-to-use]&quot;)</td>
</tr>
<tr>
  <td class="method">WickedDemos::TileMaps::Basic2D*</td>
  <td class="method"><b>find_map_by_name</b>(std::string name=&quot;[unset-map-name]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize_display_projection</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize_maps</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize_hud</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>setup_projection</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize_camera_control</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize_player_controls</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>setup_orthographic_projection_on_backbuffer</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>setup_camera</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>initialize_entities</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>unset_player_controlled_entity_vertical_velocity</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>unset_player_controlled_entity_horizontal_velocity</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_player_controlled_entity_jump</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>player_emit_projectile</b>(float magnitude=3.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>reverse_gravity</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update_entities</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>delete_entities_flagged_for_deletion</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>check_player_collisions_with_doors</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update_player_collisions_with_collectables</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update_player_collisions_with_goalposts</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>player_increment_collected_items</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_entities</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_hud</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>run</b>(std::vector&lt;std::string&gt; args={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update_player_controls_on_player_controlled_entity</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_dimensional_grid</b>(float x=0.0f, float y=0.0f, float z=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_player_reticle</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>toggle_show_collision_tile_mesh</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>toggle_show_tile_mesh</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_timer_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>__primary_timer_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>key_char_func</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>_joy_button_down_func</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>_joy_button_up_func</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>_joy_axis_func</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>_key_up_func</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>_key_down_func</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>key_up_func</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>key_down_func</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_down_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_up_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_axis_change_func</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>user_event_func</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_collision_tile_mesh</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::TileMaps::PrimMeshAtlas*</td>
  <td class="method"><b>get_tile_atlas</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::TileMaps::PrimMesh*</td>
  <td class="method"><b>get_tile_mesh</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::TileMaps::TileMap&lt;int&gt;*</td>
  <td class="method"><b>get_collision_tile_mesh</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;Wicked::Entities::Basic2D*&gt;&amp;</td>
  <td class="method"><b>get_current_map_entities_ref</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;Wicked::Entities::Basic2D*&gt;</td>
  <td class="method"><b>get_current_map_entities</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;int, int&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControlsProcessor&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControlsProcessor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMesh*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tileo::TMJMeshLoader&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/TMJMeshLoader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Wicked::Entities::Basic2D*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D*&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2DFactory&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2DFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Display*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Display.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Framework*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Framework.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Frameworks::Full&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Frameworks/Full.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Physics::TileMapCollisionStepper&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Physics/TileMapCollisionStepper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Physics::AABB2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Physics/AABB2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/EntityFlagNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Weapons::DrawnBow&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Weapons/DrawnBow.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::CameraControlStrategies2D::Base*&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/CameraControlStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::CameraControlStrategies2D::Snap&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/CameraControlStrategies2D/Snap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::CameraControlStrategies2D::SmoothSnap&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/CameraControlStrategies2D/SmoothSnap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::CameraControlStrategies2D::HorizontalRail&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/CameraControlStrategies2D/HorizontalRail.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::CollectionHelper&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/CollectionHelper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;WickedDemos::TileMaps::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;WickedDemos/TileMaps/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Doors::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Doors/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Wicked::Entities::Basic2D*&gt;&amp;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::find&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;tan&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Display&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Display.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::CameraControlStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/CameraControlStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::GenericController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/GenericController.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/WickedDemos/TileMaps/Basic2D.q.yml">quintessence/WickedDemos/TileMaps/Basic2D.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">tile_atlas</td>
  <td class="property">AllegroFlare::TileMaps::PrimMeshAtlas*</td>
</tr>
<tr>
  <td class="property">tile_mesh</td>
  <td class="property">AllegroFlare::TileMaps::PrimMesh*</td>
</tr>
<tr>
  <td class="property">collision_tile_mesh</td>
  <td class="property">AllegroFlare::TileMaps::TileMap&lt;int&gt;*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMesh.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<h1>Dependents</h1>
<pre>
{
  "AllegroFlare/AI/PromptTemplate": [
    "AllegroFlare/AI/PromptTemplateYAMLLoader"
  ],
  "AllegroFlare/YAMLValidator": [
    "AllegroFlare/AI/PromptTemplateYAMLLoader",
    "AllegroFlare/DialogTree/YAMLLoader"
  ],
  "YAML/Node": [
    "AllegroFlare/AI/PromptTemplateYAMLLoader",
    "AllegroFlare/DialogTree/YAMLLoader",
    "AllegroFlare/YAMLValidator"
  ],
  "YAML/NodeType/value": [
    "AllegroFlare/AI/PromptTemplateYAMLLoader",
    "AllegroFlare/YAMLValidator"
  ],
  "AllegroFlare/FrameAnimation/Animation": [
    "AllegroFlare/AssetStudio/Asset",
    "AllegroFlare/AssetStudio/Database",
    "AllegroFlare/FrameAnimation/AsepriteSpriteSheetJSONLoader",
    "AllegroFlare/FrameAnimation/Book",
    "AllegroFlare/FrameAnimation/Book",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D"
  ],
  "AllegroFlare/FrameAnimation/Book": [
    "AllegroFlare/AssetStudio/Asset",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory"
  ],
  "ALLEGRO_BITMAP": [
    "AllegroFlare/AssetStudio/Asset",
    "AllegroFlare/Camera2D",
    "AllegroFlare/ClubCatt/Logo",
    "AllegroFlare/DialogSystem/CharacterStagingLayouts/Base",
    "AllegroFlare/DialogSystem/CharacterStagingLayouts/BasicCentered",
    "AllegroFlare/DialogSystem/CharacterStagingLayouts/Dynamic",
    "AllegroFlare/DialogSystem/CharacterStagingLayouts/MultiModal",
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystem/StagedCharacter/Dynamic",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/Elements/Backgrounds/Basic3D",
    "AllegroFlare/Elements/Backgrounds/Image",
    "AllegroFlare/Elements/Backgrounds/Parallax",
    "AllegroFlare/Elements/Backgrounds/ParallaxLayer",
    "AllegroFlare/Elements/Backgrounds/ParallaxLayer",
    "AllegroFlare/Elements/Backgrounds/ScreenCapture",
    "AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/ThumbnailWithLabelRenderer",
    "AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/ThumbnailWithLabelUnlockableRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/CharacterFeatureRenderer",
    "AllegroFlare/Elements/NinePatch",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/FrameAnimation/Animation",
    "AllegroFlare/FrameAnimation/Book",
    "AllegroFlare/FrameAnimation/SpriteStripAssembler",
    "AllegroFlare/GameSession",
    "AllegroFlare/GraphicsPipelines/Basic3D/Entity",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/DynamicModel3D",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticModel3D",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticMultitextureModel3D",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer",
    "AllegroFlare/MotionFX/Sparkles2",
    "AllegroFlare/MotionFX/Sparkles2",
    "AllegroFlare/MusicMesh/FontCharacterAtlasBuilder",
    "AllegroFlare/Prototypes/FixedRoom2D/Entities/Base",
    "AllegroFlare/Prototypes/FixedRoom2D/Entities/Base",
    "AllegroFlare/Prototypes/FixedRoom2D/EntityFactory",
    "AllegroFlare/Prototypes/MindDive/Hud/Hud",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Prototypes/TileDrive/Hud/Hud",
    "AllegroFlare/Prototypes/TileDrive/TileDrive",
    "AllegroFlare/RenderSurfaces/Base",
    "AllegroFlare/RenderSurfaces/DisplayBackbuffer",
    "AllegroFlare/RenderSurfaces/DisplayBackbufferSubBitmap",
    "AllegroFlare/ScreenCapture",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/Subscreen/Element",
    "AllegroFlare/Screens/Subscreen/Screen",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/Screens/Transition",
    "AllegroFlare/Shaders/Base",
    "AllegroFlare/Shaders/Multitexture",
    "AllegroFlare/StoryboardFactory",
    "AllegroFlare/StoryboardPageFactory",
    "AllegroFlare/StoryboardPageFactory",
    "AllegroFlare/Testing/WithAllegroRenderingFixture",
    "AllegroFlare/TileMaps/MultiMesh",
    "AllegroFlare/TileMaps/PrimMeshAtlas",
    "AllegroFlare/TileMaps/PrimMeshAtlasIndexRecord",
    "AllegroFlare/TileMaps/TileAtlasBuilder",
    "AllegroFlare/TransitionFX/Base",
    "AllegroFlare/WorldMapRenderers/Basic",
    "Tileo/Shaders/MeshWithNormals",
    "Wicked/Entities/Basic2D"
  ],
  "std/filesystem": [
    "AllegroFlare/AssetStudio/AssetImporter",
    "AllegroFlare/DeploymentEnvironment",
    "AllegroFlare/Logger"
  ],
  "std/filesystem/exists": [
    "AllegroFlare/AssetStudio/AssetImporter",
    "AllegroFlare/AssetStudio/DatabaseCSVLoader",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/Prototypes/MindDive/TunnelMeshTMJDataLoader",
    "AllegroFlare/Prototypes/Platforming2D/TMJDataLoader",
    "AllegroFlare/Prototypes/Platforming2D/TMJObjectLoader",
    "AllegroFlare/Prototypes/TileDrive/TerrainMeshTMJDataLoader",
    "Tileo/TMJDataLoader"
  ],
  "AllegroFlare/AssetStudio/Database": [
    "AllegroFlare/AssetStudio/AssetImporter",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D"
  ],
  "AllegroFlare/Logger": [
    "AllegroFlare/AssetStudio/AssetImporter",
    "AllegroFlare/AssetStudio/DatabaseCSVLoader",
    "AllegroFlare/AudioController",
    "AllegroFlare/AudioController",
    "AllegroFlare/CSVParser",
    "AllegroFlare/DeploymentEnvironment",
    "AllegroFlare/DialogSystem/CharacterStagingLayouts/Base",
    "AllegroFlare/DialogSystem/CharacterStagingLayouts/Dynamic",
    "AllegroFlare/DialogSystem/Characters/Base",
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/DialogTree/NodeBank",
    "AllegroFlare/DialogTree/NodeBankInferencer",
    "AllegroFlare/DialogTree/YAMLLoader",
    "AllegroFlare/DisplaySettingsInterfaces/Live",
    "AllegroFlare/Elements/ChapterSelect/Carousel",
    "AllegroFlare/Elements/ChapterSelect/CarouselElementRenderer",
    "AllegroFlare/Elements/ChapterSelect/Screen",
    "AllegroFlare/Elements/DialogBoxes/Basic",
    "AllegroFlare/Elements/DialogBoxes/Choice",
    "AllegroFlare/Elements/LevelSelect",
    "AllegroFlare/Elements/ListBox",
    "AllegroFlare/Elements/ListBoxRenderer",
    "AllegroFlare/FrameAnimation/SpriteStripAssembler",
    "AllegroFlare/GameConfigurations/Base",
    "AllegroFlare/GameConfigurations/Complete",
    "AllegroFlare/GameProgressAndStateInfos/Base",
    "AllegroFlare/GameSession",
    "AllegroFlare/LoadASavedGame/Screen",
    "AllegroFlare/Logger",
    "AllegroFlare/MultitextureModel3DObjLoader",
    "AllegroFlare/MusicNotation/RomanNumeralAnalysisSymbol",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Boss",
    "AllegroFlare/Prototypes/Platforming2D/TMJDataLoader",
    "AllegroFlare/Prototypes/Platforming2D/TMJDataLoader",
    "AllegroFlare/Prototypes/Platforming2D/TMJObjectLoader",
    "AllegroFlare/Routers/Base",
    "AllegroFlare/Routers/Standard",
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Screens/DisplaySettings",
    "AllegroFlare/Screens/Gameplay",
    "AllegroFlare/Screens/LevelSelectScreen",
    "AllegroFlare/Screens/SettingsScreen",
    "AllegroFlare/Screens/Storyboard",
    "AllegroFlare/Shaders/Base",
    "AllegroFlare/Testing/GameConfigurations/Complete/SimpleConfiguration",
    "AllegroFlare/TileMaps/TileAtlasBuilder",
    "AllegroFlare/TileMaps/TileAtlasRepository",
    "AllegroFlare/VirtualControlsProcessor",
    "AllegroFlare/WorldMapRenderers/Basic",
    "AllegroFlare/WorldMaps/Maps/Base",
    "AllegroFlare/WorldMaps/Maps/Basic",
    "AllegroFlare/YAMLValidator"
  ],
  "AllegroFlare/Errors": [
    "AllegroFlare/AssetStudio/Database",
    "AllegroFlare/FrameAnimation/AsepriteSpriteSheetJSONLoader",
    "AllegroFlare/FrameAnimation/Book",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer"
  ],
  "AllegroFlare/AssetStudio/Asset": [
    "AllegroFlare/AssetStudio/Database",
    "AllegroFlare/AssetStudio/DatabaseCSVLoader"
  ],
  "AllegroFlare/CSVParser": [
    "AllegroFlare/AssetStudio/DatabaseCSVLoader"
  ],
  "AllegroFlare/UsefulPHP": [
    "AllegroFlare/AssetStudio/DatabaseCSVLoader",
    "AllegroFlare/CSVParser",
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/DialogTree/BasicScreenplayTextLoader",
    "AllegroFlare/FrameAnimation/AsepriteSpriteSheetJSONLoader",
    "AllegroFlare/FrameAnimation/Book"
  ],
  "SurviveTheCity/CSVParser": [
    "AllegroFlare/AssetStudio/DatabaseCSVLoader"
  ],
  "std/atoi": [
    "AllegroFlare/AssetStudio/DatabaseCSVLoader"
  ],
  "std/stof": [
    "AllegroFlare/AssetStudio/DatabaseCSVLoader"
  ],
  "AllegroFlare/BitmapBin": [
    "AllegroFlare/AssetStudio/DatabaseCSVLoader",
    "AllegroFlare/BackgroundFactory",
    "AllegroFlare/ClubCatt/Logo",
    "AllegroFlare/DialogSystem/CharacterStagingLayouts/Dynamic",
    "AllegroFlare/DialogSystem/CharacterStagingLayouts/MultiModal",
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/Elements/Backgrounds/Basic3D",
    "AllegroFlare/Elements/Backgrounds/Image",
    "AllegroFlare/Elements/Backgrounds/Monoplex",
    "AllegroFlare/Elements/Backgrounds/Monoplex",
    "AllegroFlare/Elements/Backgrounds/Parallax",
    "AllegroFlare/Elements/ChapterSelect/Carousel",
    "AllegroFlare/Elements/ChapterSelect/CarouselElementRenderer",
    "AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/ThumbnailWithLabelRenderer",
    "AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/ThumbnailWithLabelUnlockableRenderer",
    "AllegroFlare/Elements/ChapterSelect/CarouselElements/ThumbnailWithLabel",
    "AllegroFlare/Elements/ChapterSelect/CarouselElements/ThumbnailWithLabelUnlockable",
    "AllegroFlare/Elements/ChapterSelect/ChapterSelect",
    "AllegroFlare/Elements/ChapterSelect/Screen",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/CharacterFeatureRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer",
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/ListBoxRenderer",
    "AllegroFlare/Elements/NotificationRenderer",
    "AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked",
    "AllegroFlare/Elements/NotificationsRenderer",
    "AllegroFlare/Elements/StoryboardPages/ClubCattLogo",
    "AllegroFlare/Elements/StoryboardPages/ImageWithAdvancingText",
    "AllegroFlare/Elements/WorldMapViewer",
    "AllegroFlare/GraphicsPipelines/Basic3D/Scene",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityFactory",
    "AllegroFlare/LoadASavedGame/Screen",
    "AllegroFlare/MotionFX/Sparkles2",
    "AllegroFlare/MotionFX/Sparkles2",
    "AllegroFlare/Prototypes/CubeShooter/EntityFactory",
    "AllegroFlare/Prototypes/CubeShooter/Runner",
    "AllegroFlare/Prototypes/CubeShooter/Screen",
    "AllegroFlare/Prototypes/CubeShooter/Shaders/Fog",
    "AllegroFlare/Prototypes/CubeShooter/Shaders/Multiply",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem",
    "AllegroFlare/Prototypes/FixedRoom2D/EntityFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen",
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/MindDive/TunnelMesh",
    "AllegroFlare/Prototypes/MindDive/TunnelMeshFactory",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Prototypes/Platforming2D/TMJMeshLoader",
    "AllegroFlare/Prototypes/Platforming2D/TMJTileMeshLoader",
    "AllegroFlare/Prototypes/TileDrive/Screen",
    "AllegroFlare/Prototypes/TileDrive/TerrainMesh",
    "AllegroFlare/Prototypes/TileDrive/TerrainMeshFactory",
    "AllegroFlare/Prototypes/TileDrive/TileDrive",
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Screens/DisplaySettings",
    "AllegroFlare/Screens/InputDeviceConfiguration",
    "AllegroFlare/Screens/LevelSelectScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/SettingsScreen",
    "AllegroFlare/Screens/Subscreen/Element",
    "AllegroFlare/Screens/Subscreen/Screen",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/Screens/Version",
    "AllegroFlare/Screens/WorldMapScreen",
    "AllegroFlare/StoryboardFactory",
    "AllegroFlare/StoryboardPageFactory",
    "AllegroFlare/Testing/WithAllegroFlareFrameworksFullFixture",
    "AllegroFlare/Testing/WithAllegroRenderingFixture",
    "AllegroFlare/TileMaps/Basic2D",
    "AllegroFlare/TileMaps/TileAtlasRepository",
    "AllegroFlare/Timeline/ActorFactory",
    "AllegroFlare/Timeline/ActorFactory",
    "AllegroFlare/WorldMapRenderers/Basic",
    "Tileo/TMJMeshLoader",
    "Wicked/Entities/Basic2DFactory"
  ],
  "AllegroFlare/FrameAnimation/SpriteSheet": [
    "AllegroFlare/AssetStudio/DatabaseCSVLoader",
    "AllegroFlare/FrameAnimation/Animation",
    "AllegroFlare/FrameAnimation/AsepriteSpriteSheetJSONLoader",
    "AllegroFlare/FrameAnimation/Book"
  ],
  "AllegroFlare/FrameAnimation/Frame": [
    "AllegroFlare/AssetStudio/DatabaseCSVLoader",
    "AllegroFlare/FrameAnimation/Animation",
    "AllegroFlare/FrameAnimation/AsepriteSpriteSheetJSONLoader"
  ],
  "std/find_if": [
    "AllegroFlare/AssetStudio/DatabaseCSVLoader",
    "AllegroFlare/Network2/URLTokenizer",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "AllegroFlare/FrameAnimation/SpriteStripAssembler": [
    "AllegroFlare/AssetStudio/DatabaseCSVLoader"
  ],
  "AllegroFlare/TerminalColors": [
    "AllegroFlare/AudioController",
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "AllegroFlare/SampleBin": [
    "AllegroFlare/AudioController",
    "AllegroFlare/AudioController",
    "AllegroFlare/Prototypes/CubeShooter/Runner",
    "AllegroFlare/Prototypes/CubeShooter/Screen",
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/TileDrive/Screen",
    "AllegroFlare/Prototypes/TileDrive/TileDrive",
    "AllegroFlare/Screens/InputDeviceConfiguration",
    "AllegroFlare/Testing/WithAllegroFlareFrameworksFullFixture"
  ],
  "AllegroFlare/AudioRepositoryElement": [
    "AllegroFlare/AudioController"
  ],
  "std/map<std/string, AllegroFlare/AudioRepositoryElement>": [
    "AllegroFlare/AudioController"
  ],
  "std/map<std/string, AllegroFlare/Sound>": [
    "AllegroFlare/AudioController"
  ],
  "AllegroFlare/Sound": [
    "AllegroFlare/AudioController",
    "AllegroFlare/AudioController",
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "al_is_audio_initialized": [
    "AllegroFlare/AudioController"
  ],
  "al_is_acodec_addon_initialized": [
    "AllegroFlare/AudioController",
    "AllegroFlare/Prototypes/MindDive/Hypersync",
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "ALLEGRO_MIXER": [
    "AllegroFlare/AudioProcessing/AudioDataBlock",
    "AllegroFlare/AudioProcessing/AudioMixer",
    "AllegroFlare/AudioProcessing/Filters/AllPass",
    "AllegroFlare/AudioProcessing/Filters/Delay",
    "AllegroFlare/Prototypes/MindDive/Hypersync"
  ],
  "ALLEGRO_AUDIO_DEPTH": [
    "AllegroFlare/AudioProcessing/AudioDataBlock",
    "AllegroFlare/AudioProcessing/AudioMixer"
  ],
  "ALLEGRO_CHANNEL_CONF": [
    "AllegroFlare/AudioProcessing/AudioDataBlock",
    "AllegroFlare/AudioProcessing/AudioMixer"
  ],
  "std/size_t": [
    "AllegroFlare/AudioProcessing/AudioDataBlock",
    "AllegroFlare/AudioProcessing/AudioMixer",
    "AllegroFlare/EncoderDecoders/Base62",
    "AllegroFlare/Network2/Message",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard",
    "AllegroFlare/TileMaps/MultiMesh"
  ],
  "al_is_system_installed": [
    "AllegroFlare/AudioProcessing/AudioMixer",
    "AllegroFlare/Bone3DGraphRenderer",
    "AllegroFlare/Clock",
    "AllegroFlare/Elements/AdvancingText",
    "AllegroFlare/Elements/DialogBoxFrame",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/ListBoxRenderer",
    "AllegroFlare/Elements/NinePatch",
    "AllegroFlare/Elements/Scrollbar",
    "AllegroFlare/Elements/WorldMapViewer",
    "AllegroFlare/FlipSync",
    "AllegroFlare/FrameAnimation/Animation",
    "AllegroFlare/FrameAnimation/SpriteStripAssembler",
    "AllegroFlare/InputDevicesList",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo",
    "AllegroFlare/InputHints",
    "AllegroFlare/NotificationsFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/Room",
    "AllegroFlare/Rulers",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard",
    "AllegroFlare/SyncOracle",
    "AllegroFlare/TileMaps/TileAtlasBuilder",
    "AllegroFlare/TileMaps/TileMesh",
    "AllegroFlare/Time",
    "Tileo/TileoTileVertexAllegroVertexDeclaration"
  ],
  "al_is_audio_installed": [
    "AllegroFlare/AudioProcessing/AudioMixer",
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "callback": [
    "AllegroFlare/AudioProcessing/AudioMixer"
  ],
  "AllegroFlare/AudioProcessing/AudioDataBlock": [
    "AllegroFlare/AudioProcessing/Filters/AllPass",
    "AllegroFlare/AudioProcessing/Filters/Delay"
  ],
  "AllegroFlare/AudioProcessing/AudioMixer": [
    "AllegroFlare/AudioProcessing/Filters/AllPass",
    "AllegroFlare/AudioProcessing/Filters/Delay"
  ],
  "AllegroFlare/Elements/Backgrounds/Image": [
    "AllegroFlare/BackgroundFactory"
  ],
  "AllegroFlare/Elements/Backgrounds/Monoplex": [
    "AllegroFlare/BackgroundFactory"
  ],
  "AllegroFlare/Elements/Backgrounds/Parallax": [
    "AllegroFlare/BackgroundFactory",
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "AllegroFlare/Elements/Backgrounds/ParallaxLayer": [
    "AllegroFlare/BackgroundFactory",
    "AllegroFlare/Elements/Backgrounds/Parallax"
  ],
  "std/runtime_error": [
    "AllegroFlare/BacktracingException"
  ],
  "AllegroFlare/StackTracer": [
    "AllegroFlare/BacktracingException"
  ],
  "AllegroFlare/Placement3D": [
    "AllegroFlare/Bone3D",
    "AllegroFlare/ClubCatt/Logo",
    "AllegroFlare/DialogSystem/CharacterStagingLayouts/Dynamic",
    "AllegroFlare/DialogSystem/StagedCharacter/Dynamic",
    "AllegroFlare/GraphicsPipelines/Basic3D/Entity",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/DynamicModel3D",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticModel3D",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticMultitextureModel3D",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityFactory",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer",
    "AllegroFlare/Prototypes/CubeShooter/Entity",
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/TileDrive/TileDrive",
    "AllegroFlare/Screens/CharacterNameInput",
    "AllegroFlare/Shaders/Cubemap",
    "Wicked/Entities/Basic3D"
  ],
  "std/vector<AllegroFlare/Bone3D>": [
    "AllegroFlare/Bone3D"
  ],
  "AllegroFlare/Bone3D": [
    "AllegroFlare/Bone3D",
    "AllegroFlare/Bone3D",
    "AllegroFlare/Bone3DGraphRenderer",
    "AllegroFlare/Bone3DGraphRenderer"
  ],
  "AllegroFlare/FontBin": [
    "AllegroFlare/Bone3DGraphRenderer",
    "AllegroFlare/Bone3DGraphRenderer",
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/AdvancingTextRenderer",
    "AllegroFlare/Elements/AdvancingTextRenderer",
    "AllegroFlare/Elements/Backgrounds/IconPattern",
    "AllegroFlare/Elements/Button",
    "AllegroFlare/Elements/ChapterSelect/Carousel",
    "AllegroFlare/Elements/ChapterSelect/CarouselElementRenderer",
    "AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/ThumbnailWithLabelRenderer",
    "AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/ThumbnailWithLabelUnlockableRenderer",
    "AllegroFlare/Elements/ChapterSelect/ChapterSelect",
    "AllegroFlare/Elements/ChapterSelect/Screen",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChapterTitleRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/CharacterFeatureRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/IntertitleRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/IntertitleRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/TextMessages",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer",
    "AllegroFlare/Elements/DialogBoxes/Intertitle",
    "AllegroFlare/Elements/DialogBoxes/Intertitle",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/DialogRollRenderer",
    "AllegroFlare/Elements/DialogRollRenderer",
    "AllegroFlare/Elements/HealthBars/Hearts",
    "AllegroFlare/Elements/HealthBars/Hearts",
    "AllegroFlare/Elements/InputDeviceConfigurationList",
    "AllegroFlare/Elements/InputDeviceConfigurationList",
    "AllegroFlare/Elements/InputDevicesList",
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/LevelSelect",
    "AllegroFlare/Elements/ListBoxRenderer",
    "AllegroFlare/Elements/NotificationRenderer",
    "AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked",
    "AllegroFlare/Elements/NotificationsRenderer",
    "AllegroFlare/Elements/RollingCredits/RollingCredits",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/ColumnWithLabels",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/ColumnWithLabels",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/Header",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/LegalText",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/Multicolumn",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/Text",
    "AllegroFlare/Elements/Score",
    "AllegroFlare/Elements/SelectionCursorBox",
    "AllegroFlare/Elements/Stopwatch",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/ImageWithAdvancingText",
    "AllegroFlare/Elements/StoryboardPages/ImageWithAdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Text",
    "AllegroFlare/Elements/StoryboardPages/Text",
    "AllegroFlare/Elements/Text",
    "AllegroFlare/Elements/TextMessageBubble",
    "AllegroFlare/Elements/UI/IntSpinner",
    "AllegroFlare/Elements/UI/SliderToggle",
    "AllegroFlare/Elements/WorldMapViewer",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityFactory",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo",
    "AllegroFlare/InputHints",
    "AllegroFlare/InputHints",
    "AllegroFlare/LoadASavedGame/SaveSlotRenderer",
    "AllegroFlare/LoadASavedGame/SaveSlotRenderers/Basic",
    "AllegroFlare/LoadASavedGame/SaveSlotRenderers/Empty",
    "AllegroFlare/LoadASavedGame/Screen",
    "AllegroFlare/MotionComposer/TrackView",
    "AllegroFlare/MotionComposer/TrackView",
    "AllegroFlare/MotionFX/Sparkles",
    "AllegroFlare/MotionFX/Sparkles",
    "AllegroFlare/MusicMesh/FontCharacterAtlasBuilder",
    "AllegroFlare/MusicMesh/MusicMesh",
    "AllegroFlare/MusicNotation/RomanNumeralAnalysisSymbolRenderer",
    "AllegroFlare/ProfilerRenderer",
    "AllegroFlare/Prototypes/CubeShooter/Runner",
    "AllegroFlare/Prototypes/CubeShooter/Screen",
    "AllegroFlare/Prototypes/CubeShooter/Shaders/Fog",
    "AllegroFlare/Prototypes/CubeShooter/Shaders/Multiply",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/Cursor",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Room",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen",
    "AllegroFlare/Prototypes/MindDive/Hud/Hud",
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Prototypes/TileDrive/Hud/Hud",
    "AllegroFlare/Prototypes/TileDrive/Screen",
    "AllegroFlare/Prototypes/TileDrive/TileDrive",
    "AllegroFlare/Rulers",
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Screens/Achievements",
    "AllegroFlare/Screens/CharacterNameInput",
    "AllegroFlare/Screens/DisplaySettings",
    "AllegroFlare/Screens/GameOverScreen",
    "AllegroFlare/Screens/GameWonScreen",
    "AllegroFlare/Screens/InputDeviceConfiguration",
    "AllegroFlare/Screens/LevelSelectScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/RollingCredits",
    "AllegroFlare/Screens/SettingsScreen",
    "AllegroFlare/Screens/Storyboard",
    "AllegroFlare/Screens/Subscreen/Element",
    "AllegroFlare/Screens/Subscreen/Panes/Base",
    "AllegroFlare/Screens/Subscreen/Screen",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/Screens/Version",
    "AllegroFlare/Screens/WorldMapScreen",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard",
    "AllegroFlare/StoryboardFactory",
    "AllegroFlare/StoryboardPageFactory",
    "AllegroFlare/StoryboardPageFactory",
    "AllegroFlare/Testing/WithAllegroFlareFrameworksFullFixture",
    "AllegroFlare/Testing/WithAllegroRenderingFixture",
    "AllegroFlare/UnicodeFontViewer",
    "AllegroFlare/UnicodeFontViewer",
    "AllegroFlare/WorldMapRenderer",
    "AllegroFlare/WorldMapRenderers/Basic",
    "Wicked/Hud"
  ],
  "ALLEGRO_FONT": [
    "AllegroFlare/Bone3DGraphRenderer",
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/AdvancingTextRenderer",
    "AllegroFlare/Elements/Backgrounds/IconPattern",
    "AllegroFlare/Elements/Button",
    "AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/ThumbnailWithLabelRenderer",
    "AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/ThumbnailWithLabelUnlockableRenderer",
    "AllegroFlare/Elements/ChapterSelect/ChapterSelect",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChapterTitleRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/CharacterFeatureRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/IntertitleRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer",
    "AllegroFlare/Elements/DialogBoxes/Intertitle",
    "AllegroFlare/Elements/DialogBoxes/Intertitle",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/DialogRollRenderer",
    "AllegroFlare/Elements/DialogRollRenderer",
    "AllegroFlare/Elements/HealthBars/Hearts",
    "AllegroFlare/Elements/HealthBars/Hearts",
    "AllegroFlare/Elements/InputDeviceConfigurationList",
    "AllegroFlare/Elements/InputDeviceConfigurationList",
    "AllegroFlare/Elements/InputDevicesList",
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/LevelSelect",
    "AllegroFlare/Elements/ListBoxRenderer",
    "AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked",
    "AllegroFlare/Elements/RollingCredits/RollingCredits",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/ColumnWithLabels",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/ColumnWithLabels",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/Header",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/LegalText",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/Multicolumn",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/Text",
    "AllegroFlare/Elements/Score",
    "AllegroFlare/Elements/SelectionCursorBox",
    "AllegroFlare/Elements/Stopwatch",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/ImageWithAdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Text",
    "AllegroFlare/Elements/StoryboardPages/Text",
    "AllegroFlare/Elements/Text",
    "AllegroFlare/Elements/TextMessageBubble",
    "AllegroFlare/Elements/UI/IntSpinner",
    "AllegroFlare/Elements/UI/SliderToggle",
    "AllegroFlare/Elements/WorldMapViewer",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo",
    "AllegroFlare/InputHints",
    "AllegroFlare/InputHints",
    "AllegroFlare/LoadASavedGame/SaveSlotRenderer",
    "AllegroFlare/LoadASavedGame/SaveSlotRenderers/Basic",
    "AllegroFlare/LoadASavedGame/SaveSlotRenderers/Empty",
    "AllegroFlare/LoadASavedGame/Screen",
    "AllegroFlare/MotionComposer/TrackView",
    "AllegroFlare/MotionComposer/TrackView",
    "AllegroFlare/MotionFX/Sparkles",
    "AllegroFlare/MotionFX/Sparkles",
    "AllegroFlare/MotionFX/Sparkles2",
    "AllegroFlare/MusicMesh/FontCharacterAtlasBuilder",
    "AllegroFlare/MusicMesh/MusicMesh",
    "AllegroFlare/MusicNotation/RomanNumeralAnalysisSymbolRenderer",
    "AllegroFlare/ProfilerRenderer",
    "AllegroFlare/Prototypes/FixedRoom2D/Cursor",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem",
    "AllegroFlare/Prototypes/MindDive/Hud/Hud",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Prototypes/TileDrive/Hud/Hud",
    "AllegroFlare/Rulers",
    "AllegroFlare/Screens/DisplaySettings",
    "AllegroFlare/Screens/GameOverScreen",
    "AllegroFlare/Screens/GameWonScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/SettingsScreen",
    "AllegroFlare/Screens/Subscreen/Element",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard",
    "AllegroFlare/SyncOracle",
    "AllegroFlare/Testing/WithAllegroRenderingFixture",
    "AllegroFlare/Testing/WithAllegroRenderingFixture",
    "AllegroFlare/UnicodeFontViewer",
    "AllegroFlare/UnicodeFontViewer",
    "AllegroFlare/WorldMapRenderer",
    "AllegroFlare/WorldMapRenderers/Basic",
    "Wicked/Hud"
  ],
  "al_is_primitives_addon_initialized": [
    "AllegroFlare/Bone3DGraphRenderer",
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/ThumbnailWithLabelRenderer",
    "AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/ThumbnailWithLabelUnlockableRenderer",
    "AllegroFlare/Elements/ChapterSelect/PaginationBar",
    "AllegroFlare/Elements/ChapterSelect/Screen",
    "AllegroFlare/Elements/DialogBoxFrame",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/HealthBars/Basic",
    "AllegroFlare/Elements/HealthBars/Classic",
    "AllegroFlare/Elements/HealthBars/Hearts",
    "AllegroFlare/Elements/ListBoxRenderer",
    "AllegroFlare/Elements/NinePatch",
    "AllegroFlare/Elements/NotificationRenderer",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/Multicolumn",
    "AllegroFlare/Elements/Scrollbar",
    "AllegroFlare/Elements/WorldMapViewer",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo",
    "AllegroFlare/InputHints",
    "AllegroFlare/LoadASavedGame/Screen",
    "AllegroFlare/MotionComposer/TrackView",
    "AllegroFlare/Rulers",
    "AllegroFlare/Screens/DisplaySettings",
    "AllegroFlare/Screens/InputDeviceConfiguration",
    "AllegroFlare/Screens/LevelSelectScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/SettingsScreen",
    "AllegroFlare/Screens/Subscreen/Element",
    "AllegroFlare/Screens/Subscreen/Screen",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/Screens/Version",
    "AllegroFlare/Screens/WorldMapScreen",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard",
    "AllegroFlare/SyncOracle",
    "AllegroFlare/TileMaps/TileMesh",
    "AllegroFlare/UnicodeFontViewer",
    "Tileo/TileoTileVertexAllegroVertexDeclaration"
  ],
  "al_is_font_addon_initialized": [
    "AllegroFlare/Bone3DGraphRenderer",
    "AllegroFlare/Elements/WorldMapViewer",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo",
    "AllegroFlare/InputHints",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard",
    "AllegroFlare/UnicodeFontViewer"
  ],
  "AllegroFlare/draw_3d_line": [
    "AllegroFlare/Bone3DGraphRenderer"
  ],
  "AllegroFlare/Placement2D": [
    "AllegroFlare/Camera2D",
    "AllegroFlare/DialogSystem/CharacterStagingLayouts/BasicCentered",
    "AllegroFlare/DialogSystem/CharacterStagingLayouts/Dynamic",
    "AllegroFlare/DialogSystem/CharacterStagingLayouts/MultiModal",
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/AdvancingTextRenderer",
    "AllegroFlare/Elements/Backgrounds/Basic3D",
    "AllegroFlare/Elements/Backgrounds/IconPattern",
    "AllegroFlare/Elements/Backgrounds/Image",
    "AllegroFlare/Elements/Backgrounds/Monoplex",
    "AllegroFlare/Elements/Backgrounds/Parallax",
    "AllegroFlare/Elements/Backgrounds/Video",
    "AllegroFlare/Elements/Base",
    "AllegroFlare/Elements/Button",
    "AllegroFlare/Elements/ChapterSelect/Carousel",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/CharacterFeatureRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/IntertitleRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/TextMessages",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer",
    "AllegroFlare/Elements/DialogBoxes/Intertitle",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/InputDeviceConfigurationList",
    "AllegroFlare/Elements/InputDevicesList",
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/LevelSelect",
    "AllegroFlare/Elements/ListBoxRenderer",
    "AllegroFlare/Elements/NotificationsRenderer",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/Elements/StoryboardPages/ImageWithAdvancingText",
    "AllegroFlare/Elements/WorldMapViewer",
    "AllegroFlare/MotionFX/Sparkles",
    "AllegroFlare/MotionFX/Sparkles2",
    "AllegroFlare/Prototypes/FixedRoom2D/Cursor",
    "AllegroFlare/Prototypes/FixedRoom2D/Entities/Base",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard",
    "AllegroFlare/Testing/WithAllegroFlareFrameworksFullFixture",
    "AllegroFlare/Testing/WithAllegroRenderingFixture",
    "Wicked/CameraControlStrategies2D/Base",
    "Wicked/Entities/Basic2D",
    "WickedDemos/TileDemo"
  ],
  "tan": [
    "AllegroFlare/Camera2D",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "WickedDemos/TileDemo"
  ],
  "AllegroFlare/Vec2D": [
    "AllegroFlare/Camera2D",
    "AllegroFlare/Elements/DialogBoxRenderers/ChapterTitleRenderer",
    "AllegroFlare/Elements/InputDeviceConfigurationList",
    "AllegroFlare/Elements/InputDevicesList",
    "AllegroFlare/Elements/Score",
    "AllegroFlare/Elements/SelectionCursorBox",
    "AllegroFlare/Elements/UI/IntSpinner",
    "AllegroFlare/Elements/UI/SliderToggle",
    "AllegroFlare/Elements/WorldMapViewer",
    "AllegroFlare/LoadASavedGame/SaveSlotRenderer",
    "AllegroFlare/LoadASavedGame/SaveSlotRenderers/Basic",
    "AllegroFlare/LoadASavedGame/SaveSlotRenderers/Empty",
    "AllegroFlare/MusicMesh/FontCharacterAtlasBuilder",
    "AllegroFlare/MusicNotation/Beam",
    "AllegroFlare/MusicNotation/TieRenderer",
    "AllegroFlare/Physics/AABB2D",
    "AllegroFlare/Physics/TileMapCollisionStepperStepResult",
    "AllegroFlare/ProfilerRenderer",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem",
    "AllegroFlare/Prototypes/MindDive/Hud/Hud",
    "AllegroFlare/Prototypes/MindDive/TunnelRenderer",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Prototypes/TileDrive/Hud/Hud",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard",
    "AllegroFlare/VirtualControllers/GenericController",
    "AllegroFlare/WorldMapRenderer",
    "AllegroFlare/WorldMapRenderers/Basic"
  ],
  "AllegroFlare/Camera2D": [
    "AllegroFlare/Camera2D",
    "AllegroFlare/CameraControlStrategies2D/Base",
    "AllegroFlare/Elements/WorldMapViewer",
    "AllegroFlare/Prototypes/MindDive/Hud/Hud",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Prototypes/TileDrive/Hud/Hud",
    "AllegroFlare/Screens/Subscreen/Element"
  ],
  "AllegroFlare/CameraControlStrategies2D/Base": [
    "AllegroFlare/CameraControlStrategies2D/HorizontalRail",
    "AllegroFlare/CameraControlStrategies2D/SmoothSnap",
    "AllegroFlare/CameraControlStrategies2D/SmoothSnapWithZoomEffect",
    "AllegroFlare/CameraControlStrategies2D/Snap",
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D": [
    "AllegroFlare/CameraControlStrategies2D/HorizontalRail",
    "AllegroFlare/CameraControlStrategies2D/SmoothSnap",
    "AllegroFlare/CameraControlStrategies2D/SmoothSnapWithZoomEffect",
    "AllegroFlare/CameraControlStrategies2D/Snap",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Boss",
    "AllegroFlare/Prototypes/Platforming2D/Entities/BossZone",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Doors/Basic2D",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Anchored",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/BackAndForthHorizontal",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FallOnTrackingRange",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Flapping",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FlappingWithRandomness",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/HoppingLeft",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveInDirection",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveLeft",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveRight",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/ReflectOffWalls",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/StayStill",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Tracking",
    "AllegroFlare/Prototypes/Platforming2D/Entities/TileMaps/Basic2D",
    "AllegroFlare/Prototypes/Platforming2D/EntityCollectionHelper",
    "AllegroFlare/Prototypes/Platforming2D/EntityControlConnectors/Basic2D",
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "fabs": [
    "AllegroFlare/CameraControlStrategies2D/SmoothSnapWithZoomEffect"
  ],
  "AllegroFlare/Useful": [
    "AllegroFlare/CameraControlStrategies2D/SmoothSnapWithZoomEffect",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/Multicolumn",
    "AllegroFlare/Prototypes/CubeShooter/Screen",
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/TileDrive/TileDrive",
    "AllegroFlare/Rulers"
  ],
  "al_get_time": [
    "AllegroFlare/ClubCatt/Logo",
    "AllegroFlare/Elements/DialogBoxFactory",
    "AllegroFlare/Elements/DialogBoxes/Base",
    "AllegroFlare/Elements/DialogBoxes/Basic",
    "AllegroFlare/Elements/DialogBoxes/Wait",
    "AllegroFlare/Elements/DialogBoxes/YouGotAnItem",
    "AllegroFlare/Elements/DialogBoxes/YouGotEvidence",
    "AllegroFlare/Elements/ListBox",
    "AllegroFlare/Elements/Notifications/Base",
    "AllegroFlare/Elements/StoryboardPages/ImageWithAdvancingText",
    "AllegroFlare/GameSession",
    "AllegroFlare/PhysicalInputDevices/Base",
    "AllegroFlare/Prototypes/FixedRoom2D/Room",
    "AllegroFlare/Screens/TitleScreen"
  ],
  "AllegroFlare/ModelBin": [
    "AllegroFlare/ClubCatt/Logo",
    "AllegroFlare/Elements/Backgrounds/Basic3D",
    "AllegroFlare/Elements/ChapterSelect/Screen",
    "AllegroFlare/Elements/StoryboardPages/ClubCattLogo",
    "AllegroFlare/GraphicsPipelines/Basic3D/Scene",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityFactory",
    "AllegroFlare/LoadASavedGame/Screen",
    "AllegroFlare/Prototypes/CubeShooter/EntityFactory",
    "AllegroFlare/Prototypes/CubeShooter/Runner",
    "AllegroFlare/Prototypes/CubeShooter/Screen",
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Screens/DisplaySettings",
    "AllegroFlare/Screens/InputDeviceConfiguration",
    "AllegroFlare/Screens/LevelSelectScreen",
    "AllegroFlare/Screens/SettingsScreen",
    "AllegroFlare/Screens/Version",
    "AllegroFlare/Screens/WorldMapScreen",
    "AllegroFlare/StoryboardFactory",
    "AllegroFlare/StoryboardPageFactory",
    "AllegroFlare/Testing/WithAllegroFlareFrameworksFullFixture"
  ],
  "AllegroFlare/Timeline/Track": [
    "AllegroFlare/ClubCatt/Logo",
    "AllegroFlare/MotionComposer/TrackView",
    "AllegroFlare/MotionComposer/TrackView"
  ],
  "AllegroFlare/Camera3D": [
    "AllegroFlare/ClubCatt/Logo",
    "AllegroFlare/GraphicsPipelines/Basic3D/Scene",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Camera3D",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer",
    "AllegroFlare/Prototypes/CubeShooter/Screen",
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "AllegroFlare/ClubCatt/Logo": [
    "AllegroFlare/ClubCatt/Logo",
    "AllegroFlare/Elements/StoryboardPages/ClubCattLogo"
  ],
  "ALLEGRO_COLOR": [
    "AllegroFlare/ColorKit",
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/AdvancingTextRenderer",
    "AllegroFlare/Elements/Backgrounds/ClearToColor",
    "AllegroFlare/Elements/Backgrounds/IconPattern",
    "AllegroFlare/Elements/Button",
    "AllegroFlare/Elements/ChapterSelect/PaginationBar",
    "AllegroFlare/Elements/DialogBoxFrame",
    "AllegroFlare/Elements/DialogBoxRenderers/IntertitleRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer",
    "AllegroFlare/Elements/DialogBoxes/Intertitle",
    "AllegroFlare/Elements/DialogRollRenderer",
    "AllegroFlare/Elements/HealthBars/Basic",
    "AllegroFlare/Elements/HealthBars/Classic",
    "AllegroFlare/Elements/HealthBars/Hearts",
    "AllegroFlare/Elements/InputDeviceConfigurationList",
    "AllegroFlare/Elements/InputDevicesList",
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/LevelSelect",
    "AllegroFlare/Elements/ListBoxRenderer",
    "AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/ColumnWithLabels",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/Header",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/LegalText",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/Multicolumn",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/Text",
    "AllegroFlare/Elements/Scrollbar",
    "AllegroFlare/Elements/SelectionCursorBox",
    "AllegroFlare/Elements/Stopwatch",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/Elements/StoryboardPages/ImageWithAdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Text",
    "AllegroFlare/Elements/Text",
    "AllegroFlare/Elements/TextMessageBubble",
    "AllegroFlare/Elements/UI/IntSpinner",
    "AllegroFlare/Elements/UI/SliderToggle",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo",
    "AllegroFlare/InputHints",
    "AllegroFlare/MotionComposer/TrackView",
    "AllegroFlare/MotionFX/Sparkles",
    "AllegroFlare/MusicMesh/FontCharacterAtlasBuilder",
    "AllegroFlare/MusicNotation/Beam",
    "AllegroFlare/MusicNotation/TieRenderer",
    "AllegroFlare/Physics/AABB3D",
    "AllegroFlare/Prototypes/CubeShooter/Shaders/DepthDarken",
    "AllegroFlare/Prototypes/CubeShooter/Shaders/Fog",
    "AllegroFlare/Prototypes/CubeShooter/Shaders/Multiply",
    "AllegroFlare/Prototypes/FixedRoom2D/Cursor",
    "AllegroFlare/Prototypes/MindDive/Hud/Hud",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory",
    "AllegroFlare/Prototypes/TileDrive/Hud/Hud",
    "AllegroFlare/Rulers",
    "AllegroFlare/Screens/DisplaySettings",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/Storyboard",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/Shaders/AllegroDefault",
    "AllegroFlare/Shaders/FlatColor",
    "AllegroFlare/Shaders/Multitexture",
    "AllegroFlare/Shaders/PostProcessing/Blinds",
    "AllegroFlare/Shaders/PostProcessing/DipToBlack",
    "AllegroFlare/Shaders/PostProcessing/Wipe",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard",
    "AllegroFlare/SyncOracle",
    "AllegroFlare/Testing/WithAllegroRenderingFixture",
    "AllegroFlare/UnicodeFontViewer",
    "AllegroFlare/Useful3D/Triangle",
    "AllegroFlare/WorldMapRenderers/Basic",
    "Tileo/Shaders/AllegroDefault",
    "Tileo/Shaders/MeshWithNormals",
    "Wicked/Entities/Basic2D",
    "Wicked/Entities/Basic2DFactory"
  ],
  "ALLEGRO_PATH": [
    "AllegroFlare/DeploymentEnvironment"
  ],
  "AllegroFlare/DesignSystems/DesignPillar": [
    "AllegroFlare/DesignSystems/DesignFocus",
    "AllegroFlare/DesignSystems/DesignPillar",
    "AllegroFlare/DesignSystems/DesignPillarDistributor"
  ],
  "AllegroFlare/DesignSystems/DesignFocus": [
    "AllegroFlare/DesignSystems/DesignPillarDistribution",
    "AllegroFlare/DesignSystems/DesignPillarDistributor"
  ],
  "AllegroFlare/Random": [
    "AllegroFlare/DesignSystems/DesignPillarDistributor",
    "AllegroFlare/Elements/WorldMapViewer",
    "AllegroFlare/Generators/PersonNameGenerator",
    "AllegroFlare/Prototypes/MindDive/TunnelMesh",
    "AllegroFlare/Prototypes/MindDive/TunnelMeshFactory",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FlappingWithRandomness",
    "AllegroFlare/Prototypes/TileDrive/TerrainMesh",
    "AllegroFlare/Prototypes/TileDrive/TerrainMeshFactory",
    "AllegroFlare/Story/Characters/PersonalityProfileFactory",
    "AllegroFlare/TileMaps/Basic2D",
    "Wicked/Entities/MovementStrategies2D/FlappingWithRandomness"
  ],
  "AllegroFlare/DialogSystem/Chapters/Base": [
    "AllegroFlare/DialogSystem/ChapterIndex",
    "AllegroFlare/DialogSystem/Chapters/Basic"
  ],
  "tsl/ordered_map": [
    "AllegroFlare/DialogSystem/ChapterIndex",
    "AllegroFlare/DialogSystem/CharacterStagingLayouts/Dynamic",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard"
  ],
  "AllegroFlare/DialogSystem/Characters/Basic": [
    "AllegroFlare/DialogSystem/CharacterFactory",
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver"
  ],
  "AllegroFlare/DialogSystem/Characters/Base": [
    "AllegroFlare/DialogSystem/CharacterRoster",
    "AllegroFlare/DialogSystem/Characters/Basic"
  ],
  "AllegroFlare/DialogSystem/CharacterStagingLayouts/Base": [
    "AllegroFlare/DialogSystem/CharacterStagingLayouts/BasicCentered",
    "AllegroFlare/DialogSystem/CharacterStagingLayouts/Dynamic",
    "AllegroFlare/DialogSystem/CharacterStagingLayouts/MultiModal",
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver"
  ],
  "AllegroFlare/DialogSystem/StagedCharacter/Dynamic": [
    "AllegroFlare/DialogSystem/CharacterStagingLayouts/Dynamic"
  ],
  "AllegroFlare/GameEventDatas/Base": [
    "AllegroFlare/DialogSystem/DialogEventDatas/CloseDialog",
    "AllegroFlare/DialogSystem/DialogEventDatas/CreateYouGotAnItemDialog",
    "AllegroFlare/DialogSystem/DialogEventDatas/CreateYouGotEvidenceDialog",
    "AllegroFlare/DialogSystem/DialogEventDatas/LoadDialogNodeBankFromFile",
    "AllegroFlare/DialogSystem/DialogEventDatas/SpawnDialogByName",
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/EventEmitter",
    "AllegroFlare/GameEvent",
    "AllegroFlare/GameEventDatas/AchievementUnlocked",
    "AllegroFlare/GameEventDatas/ScreenActivated",
    "AllegroFlare/GameEventDatas/String",
    "AllegroFlare/GameEventDatas/VirtualControllerAxisChangeEventData",
    "AllegroFlare/GameEventDatas/VirtualControllerButtonPressedEventData",
    "AllegroFlare/GameEventDatas/VirtualControllerButtonReleasedEventData",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CloseDialog",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotAnItemDialog",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotEvidenceDialog",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectEvidence",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectItem",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/EnterRoom",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/InitiateDialog",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "AllegroFlare/DialogSystem/DialogSystem": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/Base",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver"
  ],
  "ALLEGRO_EVENT": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/Elements/ChapterSelect/Screen",
    "AllegroFlare/Elements/DialogBoxes/Intertitle",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Integrations/CameraProjectionChanges",
    "AllegroFlare/LoadASavedGame/Screen",
    "AllegroFlare/Prototypes/CubeShooter/Screen",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen",
    "AllegroFlare/Prototypes/Platforming2D/EntityControlConnectors/Base",
    "AllegroFlare/Prototypes/Platforming2D/EntityControlConnectors/Basic2D",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Prototypes/TileDrive/Screen",
    "AllegroFlare/Screens/CharacterNameInput",
    "AllegroFlare/Screens/DisplaySettings",
    "AllegroFlare/Screens/GameWonScreen",
    "AllegroFlare/Screens/InputDeviceConfiguration",
    "AllegroFlare/Screens/LevelSelectScreen",
    "AllegroFlare/Screens/SettingsScreen",
    "AllegroFlare/Screens/Subscreen/Screen",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/Screens/Version",
    "AllegroFlare/Screens/WorldMapScreen",
    "AllegroFlare/SyncOracle",
    "AllegroFlare/VirtualControlsProcessor",
    "AllegroFlare/VirtualControlsProcessor",
    "WickedDemos/TileDemo",
    "WickedDemos/TileDemo"
  ],
  "AllegroFlare/EventNames": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/EventEmitter",
    "AllegroFlare/GameConfigurations/Complete",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Testing/GameConfigurations/Complete/SimpleConfiguration",
    "AllegroFlare/VirtualControlsProcessor",
    "WickedDemos/TileDemo"
  ],
  "AllegroFlare/DialogSystem/DialogEventDatas/CloseDialog": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver"
  ],
  "AllegroFlare/Elements/DialogBoxes/YouGotEvidence": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/Elements/DialogBoxFactory",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem"
  ],
  "AllegroFlare/Elements/DialogBoxes/Base": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/Base",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxes/Base",
    "AllegroFlare/Elements/DialogBoxes/Basic",
    "AllegroFlare/Elements/DialogBoxes/ChapterTitle",
    "AllegroFlare/Elements/DialogBoxes/CharacterFeature",
    "AllegroFlare/Elements/DialogBoxes/Choice",
    "AllegroFlare/Elements/DialogBoxes/Intertitle",
    "AllegroFlare/Elements/DialogBoxes/TextMessages",
    "AllegroFlare/Elements/DialogBoxes/Wait",
    "AllegroFlare/Elements/DialogBoxes/YouGotAnItem",
    "AllegroFlare/Elements/DialogBoxes/YouGotEvidence",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CloseDialog",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/Elements/DialogBoxes/Choice": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/Elements/DialogBoxFactory",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer"
  ],
  "AllegroFlare/GameEvent": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/EventEmitter",
    "AllegroFlare/GameConfigurations/Complete",
    "AllegroFlare/Prototypes/CubeShooter/Runner",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen",
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Testing/GameConfigurations/Complete/SimpleConfiguration"
  ],
  "AllegroFlare/Elements/DialogBoxRenderer": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/Elements/DialogBoxes/Basic": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/Elements/DialogBoxFactory",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem"
  ],
  "AllegroFlare/Elements/DialogBoxes/YouGotAnItem": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/Elements/DialogBoxFactory",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem"
  ],
  "AllegroFlare/Elements/DialogBoxes/Wait": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/Elements/DialogBoxFactory",
    "AllegroFlare/Elements/DialogBoxRenderer"
  ],
  "AllegroFlare/InventoryDictionaryItems/WithAttributes": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Screens/Subscreen/Element"
  ],
  "AllegroFlare/Elements/DialogBoxFactory": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/DialogSystem/DialogEventDatas/CreateYouGotAnItemDialog": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver"
  ],
  "AllegroFlare/DialogSystem/DialogEventDatas/CreateYouGotEvidenceDialog": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver"
  ],
  "AllegroFlare/EventEmitter": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/Elements/AdvancingTextRenderer",
    "AllegroFlare/Elements/ChapterSelect/Carousel",
    "AllegroFlare/Elements/ChapterSelect/ChapterSelect",
    "AllegroFlare/Elements/ChapterSelect/Screen",
    "AllegroFlare/Elements/DialogBoxRenderers/IntertitleRenderer",
    "AllegroFlare/Elements/DialogBoxes/Intertitle",
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/LevelSelect",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/ImageWithAdvancingText",
    "AllegroFlare/LoadASavedGame/Screen",
    "AllegroFlare/Prototypes/CubeShooter/Runner",
    "AllegroFlare/Prototypes/CubeShooter/Screen",
    "AllegroFlare/Prototypes/CubeShooter/Shaders/Fog",
    "AllegroFlare/Prototypes/CubeShooter/Shaders/Multiply",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Room",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner",
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Prototypes/TileDrive/Screen",
    "AllegroFlare/Prototypes/TileDrive/TileDrive",
    "AllegroFlare/Routers/Base",
    "AllegroFlare/Routers/Standard",
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Screens/Achievements",
    "AllegroFlare/Screens/CharacterNameInput",
    "AllegroFlare/Screens/DisplaySettings",
    "AllegroFlare/Screens/GameOverScreen",
    "AllegroFlare/Screens/GameWonScreen",
    "AllegroFlare/Screens/InputDeviceConfiguration",
    "AllegroFlare/Screens/LevelSelectScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/RollingCredits",
    "AllegroFlare/Screens/SettingsScreen",
    "AllegroFlare/Screens/Storyboard",
    "AllegroFlare/Screens/Subscreen/Screen",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/Screens/Transition",
    "AllegroFlare/Screens/Version",
    "AllegroFlare/Screens/WorldMapScreen",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard",
    "AllegroFlare/StoryboardFactory",
    "AllegroFlare/Testing/WithAllegroFlareFrameworksFullFixture",
    "AllegroFlare/VirtualControlsProcessor",
    "AllegroFlare/VirtualControlsProcessor",
    "WickedDemos/TileDemo",
    "WickedDemos/TileDemo"
  ],
  "AllegroFlare/DialogTree/NodeBank": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/Base",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/DialogTree/BasicScreenplayTextLoader",
    "AllegroFlare/DialogTree/NodeBank",
    "AllegroFlare/DialogTree/NodeBankFactory",
    "AllegroFlare/DialogTree/NodeBankInferencer",
    "AllegroFlare/DialogTree/YAMLLoader",
    "AllegroFlare/GameConfigurations/Base",
    "AllegroFlare/GameConfigurations/Complete",
    "AllegroFlare/Testing/GameConfigurations/Complete/SimpleConfiguration"
  ],
  "AllegroFlare/DialogTree/Nodes/Base": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/Base",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/DialogTree/NodeBank",
    "AllegroFlare/DialogTree/Nodes/ChapterTitle",
    "AllegroFlare/DialogTree/Nodes/EmitGameEvent",
    "AllegroFlare/DialogTree/Nodes/ExitDialog",
    "AllegroFlare/DialogTree/Nodes/ExitProgram",
    "AllegroFlare/DialogTree/Nodes/MultipageWithOptions",
    "AllegroFlare/DialogTree/Nodes/RawScriptLine",
    "AllegroFlare/DialogTree/Nodes/Wait",
    "AllegroFlare/DialogTree/Nodes/YouGotAnItemDialog",
    "AllegroFlare/DialogTree/YAMLLoader"
  ],
  "AllegroFlare/DialogTree/NodeOptions/GoToNode": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/DialogTree/BasicScreenplayTextLoader",
    "AllegroFlare/DialogTree/NodeBankFactory",
    "AllegroFlare/DialogTree/YAMLLoader"
  ],
  "AllegroFlare/DialogTree/NodeOptions/ExitDialog": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/DialogTree/NodeBankFactory",
    "AllegroFlare/DialogTree/YAMLLoader"
  ],
  "AllegroFlare/DialogTree/Nodes/MultipageWithOptions": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/DialogTree/BasicScreenplayTextLoader",
    "AllegroFlare/DialogTree/NodeBankFactory",
    "AllegroFlare/DialogTree/NodeBankInferencer",
    "AllegroFlare/DialogTree/YAMLLoader"
  ],
  "AllegroFlare/DialogTree/Nodes/YouGotAnItemDialog": [
    "AllegroFlare/DialogSystem/DialogSystem"
  ],
  "AllegroFlare/Elements/SelectionCursorBox": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/InputDeviceConfigurationList",
    "AllegroFlare/Elements/InputDevicesList",
    "AllegroFlare/Elements/ListBoxRenderer"
  ],
  "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/Elements/DialogBoxRenderer"
  ],
  "AllegroFlare/DialogSystem/DialogEventDatas/SpawnDialogByName": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/EventEmitter"
  ],
  "AllegroFlare/DialogSystem/DialogEventDatas/LoadDialogNodeBankFromFile": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/EventEmitter"
  ],
  "AllegroFlare/DialogSystem/CharacterRoster": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver"
  ],
  "AllegroFlare/StringFormatValidator": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/Prototypes/Platforming2D/TMJDataLoader"
  ],
  "AllegroFlare/DialogTree/BasicScreenplayTextLoader": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver"
  ],
  "AllegroFlare/DialogTree/Nodes/ExitDialog": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/DialogTree/BasicScreenplayTextLoader",
    "AllegroFlare/DialogTree/NodeBankFactory",
    "AllegroFlare/DialogTree/NodeBankInferencer"
  ],
  "AllegroFlare/DialogTree/Nodes/ExitProgram": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/DialogTree/NodeBankFactory"
  ],
  "AllegroFlare/DialogTree/Nodes/ChapterTitle": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver"
  ],
  "AllegroFlare/DialogTree/Nodes/RawScriptLine": [
    "AllegroFlare/DialogSystem/DialogSystem"
  ],
  "AllegroFlare/DialogTree/Nodes/EmitGameEvent": [
    "AllegroFlare/DialogSystem/DialogSystem"
  ],
  "AllegroFlare/Elements/DialogRoll": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/Elements/DialogRollRenderer",
    "AllegroFlare/Elements/DialogRollRenderer"
  ],
  "AllegroFlare/DialogTree/Nodes/Wait": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/DialogTree/NodeBankFactory"
  ],
  "AllegroFlare/DialogSystemDrivers/Base": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver",
    "AllegroFlare/DialogTree/NodeBankFactory"
  ],
  "AllegroFlare/Elements/DialogBoxes/CharacterFeature": [
    "AllegroFlare/DialogSystem/DialogSystem",
    "AllegroFlare/Elements/DialogBoxFactory",
    "AllegroFlare/Elements/DialogBoxRenderer"
  ],
  "AllegroFlare/DialogSystem/Scenes/Base": [
    "AllegroFlare/DialogSystem/SceneIndex",
    "AllegroFlare/DialogSystem/Scenes/Basic"
  ],
  "AllegroFlare/DialogSystem/SceneIndex": [
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver"
  ],
  "AllegroFlare/DialogSystem/ChapterIndex": [
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver"
  ],
  "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver": [
    "AllegroFlare/DialogSystemDrivers/BasicCharacterDialogDriver"
  ],
  "AllegroFlare/DialogTree/NodeOptions/Base": [
    "AllegroFlare/DialogTree/NodeOptions/ExitDialog",
    "AllegroFlare/DialogTree/NodeOptions/GoToNode",
    "AllegroFlare/DialogTree/Nodes/MultipageWithOptions",
    "AllegroFlare/DialogTree/YAMLLoader"
  ],
  "AllegroFlare/Time": [
    "AllegroFlare/DialogTree/Nodes/Base"
  ],
  "AllegroFlare/BitFlags": [
    "AllegroFlare/DialogTree/Nodes/MultipageWithOptions",
    "AllegroFlare/DialogTree/YAMLLoader"
  ],
  "AllegroFlare/Logger/throw_error": [
    "AllegroFlare/DialogTree/Nodes/MultipageWithOptions"
  ],
  "std/make_pair": [
    "AllegroFlare/DialogTree/YAMLLoader"
  ],
  "AllegroFlare/php/file_get_contents": [
    "AllegroFlare/DialogTree/YAMLLoader",
    "AllegroFlare/ShaderSourcePoller"
  ],
  "ALLEGRO_DISPLAY": [
    "AllegroFlare/DisplaySettingsInterfaces/Live",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer",
    "AllegroFlare/RenderSurfaces/DisplayBackbuffer",
    "AllegroFlare/RenderSurfaces/DisplayBackbufferSubBitmap",
    "AllegroFlare/Shaders/Base",
    "AllegroFlare/SyncOracle",
    "AllegroFlare/Testing/WithAllegroRenderingFixture",
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "AllegroFlare/DisplaySettingsInterfaces/Base": [
    "AllegroFlare/DisplaySettingsInterfaces/Live",
    "AllegroFlare/Screens/DisplaySettings"
  ],
  "al_draw_filled_rectangle": [
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/IntertitleRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/TextMessages",
    "AllegroFlare/Elements/InputDeviceConfigurationList",
    "AllegroFlare/Elements/InputDevicesList",
    "AllegroFlare/Elements/ListBoxRenderer",
    "AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked",
    "AllegroFlare/Rulers",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/TitleScreen"
  ],
  "al_draw_text": [
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/ChapterSelect/ChapterSelect",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxRenderers/ChapterTitleRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/CharacterFeatureRenderer",
    "AllegroFlare/Elements/InputDeviceConfigurationList",
    "AllegroFlare/Elements/InputDevicesList",
    "AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked",
    "AllegroFlare/Elements/Score",
    "AllegroFlare/Elements/Text",
    "AllegroFlare/Elements/UI/IntSpinner",
    "AllegroFlare/Elements/UI/SliderToggle",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo",
    "AllegroFlare/LoadASavedGame/SaveSlotRenderer",
    "AllegroFlare/LoadASavedGame/SaveSlotRenderers/Basic",
    "AllegroFlare/LoadASavedGame/SaveSlotRenderers/Empty",
    "AllegroFlare/ProfilerRenderer",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem",
    "AllegroFlare/Prototypes/MindDive/Hud/Hud",
    "AllegroFlare/Prototypes/TileDrive/Hud/Hud",
    "AllegroFlare/WorldMapRenderer",
    "AllegroFlare/WorldMapRenderers/Basic"
  ],
  "std/vector<std/tuple<std/string, std/string, std/string>>": [
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Screens/Achievements"
  ],
  "AllegroFlare/Elements/Scrollbar": [
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/InputDeviceConfigurationList",
    "AllegroFlare/Elements/InputDevicesList"
  ],
  "std/min, std/max": [
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/AdvancingText",
    "AllegroFlare/Elements/AdvancingTextRenderer",
    "AllegroFlare/Elements/Button",
    "AllegroFlare/Elements/DialogBoxes/Intertitle",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/InputDeviceConfigurationList",
    "AllegroFlare/Elements/InputDevicesList",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/Elements/StoryboardPages/ImageWithAdvancingText",
    "AllegroFlare/Screens/Achievements"
  ],
  "std/min": [
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/Button",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/HealthBars/Basic",
    "AllegroFlare/Elements/InputDeviceConfigurationList",
    "AllegroFlare/Elements/InputDevicesList",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/EncoderDecoders/Base62"
  ],
  "std/max": [
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/Button",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/HealthBars/Basic",
    "AllegroFlare/Elements/InputDeviceConfigurationList",
    "AllegroFlare/Elements/InputDevicesList",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/Elements/StoryboardPages/Image"
  ],
  "AllegroFlare/Color": [
    "AllegroFlare/Elements/AdvancingTextRenderer",
    "AllegroFlare/Elements/Backgrounds/IconPattern",
    "AllegroFlare/Elements/Button",
    "AllegroFlare/Elements/DialogBoxRenderers/IntertitleRenderer",
    "AllegroFlare/Elements/DialogBoxes/Intertitle",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/LevelSelect",
    "AllegroFlare/Elements/SelectionCursorBox",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/Elements/StoryboardPages/ImageWithAdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Text",
    "AllegroFlare/MusicMesh/FontCharacterAtlasBuilder",
    "AllegroFlare/Prototypes/CubeShooter/Screen",
    "AllegroFlare/Prototypes/MindDive/Hud/Hud",
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/TileDrive/Hud/Hud",
    "AllegroFlare/Prototypes/TileDrive/TileDrive",
    "AllegroFlare/RenderSurfaces/DisplayBackbuffer",
    "AllegroFlare/RenderSurfaces/DisplayBackbufferSubBitmap",
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Screens/Storyboard",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard",
    "AllegroFlare/UnicodeFontViewer"
  ],
  "AllegroFlare/Screens/Base": [
    "AllegroFlare/Elements/AdvancingTextRenderer",
    "AllegroFlare/Elements/ChapterSelect/Screen",
    "AllegroFlare/Elements/DialogBoxRenderers/IntertitleRenderer",
    "AllegroFlare/Elements/DialogBoxes/Intertitle",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/ImageWithAdvancingText",
    "AllegroFlare/GameConfigurations/Complete",
    "AllegroFlare/Integrations/CameraProjectionChanges",
    "AllegroFlare/LoadASavedGame/Screen",
    "AllegroFlare/Prototypes/CubeShooter/Runner",
    "AllegroFlare/Prototypes/CubeShooter/Screen",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Prototypes/TileDrive/Screen",
    "AllegroFlare/Routers/Base",
    "AllegroFlare/Routers/Standard",
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Screens/Achievements",
    "AllegroFlare/Screens/CharacterNameInput",
    "AllegroFlare/Screens/DisplaySettings",
    "AllegroFlare/Screens/GameOverScreen",
    "AllegroFlare/Screens/GameWonScreen",
    "AllegroFlare/Screens/Gameplay",
    "AllegroFlare/Screens/InputDeviceConfiguration",
    "AllegroFlare/Screens/LevelSelectScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/RollingCredits",
    "AllegroFlare/Screens/SettingsScreen",
    "AllegroFlare/Screens/Storyboard",
    "AllegroFlare/Screens/Subscreen/Screen",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/Screens/Transition",
    "AllegroFlare/Screens/Version",
    "AllegroFlare/Screens/WorldMapScreen",
    "AllegroFlare/Testing/WithAllegroFlareFrameworksFullFixture",
    "WickedDemos/TileDemo"
  ],
  "al_draw_multiline_text": [
    "AllegroFlare/Elements/AdvancingTextRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/IntertitleRenderer",
    "AllegroFlare/Elements/DialogBoxes/Intertitle",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/ImageWithAdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Text",
    "AllegroFlare/Elements/TextMessageBubble",
    "AllegroFlare/Screens/Storyboard"
  ],
  "al_draw_rounded_rectangle": [
    "AllegroFlare/Elements/AdvancingTextRenderer",
    "AllegroFlare/Elements/Button",
    "AllegroFlare/Elements/DialogBoxRenderers/ChapterTitleRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/CharacterFeatureRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/IntertitleRenderer",
    "AllegroFlare/Elements/DialogBoxes/Intertitle",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/Score",
    "AllegroFlare/Elements/SelectionCursorBox",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/ImageWithAdvancingText",
    "AllegroFlare/Elements/UI/IntSpinner",
    "AllegroFlare/Elements/UI/SliderToggle",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo",
    "AllegroFlare/LoadASavedGame/SaveSlotRenderer",
    "AllegroFlare/LoadASavedGame/SaveSlotRenderers/Basic",
    "AllegroFlare/LoadASavedGame/SaveSlotRenderers/Empty",
    "AllegroFlare/MusicNotation/Beam",
    "AllegroFlare/ProfilerRenderer",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem",
    "AllegroFlare/Prototypes/MindDive/Hud/Hud",
    "AllegroFlare/Prototypes/MindDive/TunnelRenderer",
    "AllegroFlare/Prototypes/TileDrive/Hud/Hud",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard",
    "AllegroFlare/WorldMapRenderer",
    "AllegroFlare/WorldMapRenderers/Basic"
  ],
  "AllegroFlare/interpolator/": [
    "AllegroFlare/Elements/AdvancingTextRenderer",
    "AllegroFlare/Elements/Button",
    "AllegroFlare/Elements/DialogBoxRenderers/IntertitleRenderer",
    "AllegroFlare/Elements/DialogBoxes/Intertitle",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/Elements/StoryboardPages/ImageWithAdvancingText"
  ],
  "fmod": [
    "AllegroFlare/Elements/AdvancingTextRenderer",
    "AllegroFlare/Elements/Button",
    "AllegroFlare/Elements/DialogBoxRenderers/IntertitleRenderer",
    "AllegroFlare/Elements/DialogBoxes/Intertitle",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/LevelSelect",
    "AllegroFlare/Elements/SelectionCursorBox",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/Elements/StoryboardPages/ImageWithAdvancingText",
    "AllegroFlare/FrameAnimation/Animation",
    "AllegroFlare/MotionKit",
    "AllegroFlare/Prototypes/MindDive/Hypersync",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard"
  ],
  "AllegroFlare/Elements/Backgrounds/Base": [
    "AllegroFlare/Elements/Backgrounds/Basic3D",
    "AllegroFlare/Elements/Backgrounds/ClearToColor",
    "AllegroFlare/Elements/Backgrounds/IconPattern",
    "AllegroFlare/Elements/Backgrounds/Image",
    "AllegroFlare/Elements/Backgrounds/Monoplex",
    "AllegroFlare/Elements/Backgrounds/None",
    "AllegroFlare/Elements/Backgrounds/Parallax",
    "AllegroFlare/Elements/Backgrounds/ScreenCapture",
    "AllegroFlare/Elements/Backgrounds/Video",
    "AllegroFlare/Elements/ChapterSelect/Screen",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/GameConfigurations/Complete",
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Screens/Achievements",
    "AllegroFlare/Screens/CharacterNameInput",
    "AllegroFlare/Screens/GameOverScreen",
    "AllegroFlare/Screens/GameWonScreen",
    "AllegroFlare/Screens/InputDeviceConfiguration",
    "AllegroFlare/Screens/LevelSelectScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/RollingCredits",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/Screens/Version",
    "AllegroFlare/Testing/GameConfigurations/Complete/SimpleConfiguration"
  ],
  "AllegroFlare/GraphicsPipelines/Basic3D/Scene": [
    "AllegroFlare/Elements/Backgrounds/Basic3D"
  ],
  "sin": [
    "AllegroFlare/Elements/Backgrounds/IconPattern",
    "AllegroFlare/Elements/Backgrounds/Monoplex",
    "AllegroFlare/MotionFX/Sparkles",
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "AllegroFlare/draw_offset_textured_rectangle": [
    "AllegroFlare/Elements/Backgrounds/Parallax"
  ],
  "std/vector<AllegroFlare/Elements/Backgrounds/ParallaxLayer>": [
    "AllegroFlare/Elements/Backgrounds/Parallax"
  ],
  "AllegroFlare/ScreenCapture": [
    "AllegroFlare/Elements/Backgrounds/ScreenCapture"
  ],
  "ALLEGRO_VIDEO": [
    "AllegroFlare/Elements/Backgrounds/Video",
    "AllegroFlare/Video",
    "AllegroFlare/VideoBin"
  ],
  "AllegroFlare/VideoBin": [
    "AllegroFlare/Elements/Backgrounds/Video",
    "AllegroFlare/Testing/WithAllegroFlareFrameworksFullFixture"
  ],
  "AllegroFlare/ElementID": [
    "AllegroFlare/Elements/Base",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Base",
    "AllegroFlare/Prototypes/CubeShooter/Entity",
    "AllegroFlare/Prototypes/CubeShooter/EntityFactory",
    "AllegroFlare/Prototypes/CubeShooter/Screen",
    "AllegroFlare/Prototypes/FixedRoom2D/Entities/Base",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Base",
    "AllegroFlare/SceneGraph/Entities/Base",
    "Wicked/Entities/Base"
  ],
  "al_is_ttf_addon_initialized": [
    "AllegroFlare/Elements/Button",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/WorldMapViewer",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo",
    "AllegroFlare/InputHints",
    "AllegroFlare/UnicodeFontViewer"
  ],
  "AllegroFlare/interpolator": [
    "AllegroFlare/Elements/Button",
    "AllegroFlare/Elements/DialogBoxRenderers/TextMessages",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/LevelSelect",
    "AllegroFlare/Elements/SelectionCursorBox",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard"
  ],
  "AllegroFlare/Interpolators/": [
    "AllegroFlare/Elements/Button",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/ListBoxRenderer",
    "AllegroFlare/MotionFX/Sparkles2",
    "AllegroFlare/MotionFX/Sparkles2"
  ],
  "AllegroFlare/Clock": [
    "AllegroFlare/Elements/Button"
  ],
  "AllegroFlare/Elements/Button/Alignments": [
    "AllegroFlare/Elements/Button"
  ],
  "AllegroFlare/Elements/ChapterSelect/CarouselElements/Base": [
    "AllegroFlare/Elements/ChapterSelect/Carousel",
    "AllegroFlare/Elements/ChapterSelect/CarouselElementRenderer",
    "AllegroFlare/Elements/ChapterSelect/CarouselElements/ThumbnailWithLabel",
    "AllegroFlare/Elements/ChapterSelect/CarouselElements/ThumbnailWithLabelUnlockable",
    "AllegroFlare/Elements/ChapterSelect/ChapterSelect",
    "AllegroFlare/Elements/ChapterSelect/Screen"
  ],
  "AllegroFlare/Elements/ChapterSelect/CarouselElementRenderer": [
    "AllegroFlare/Elements/ChapterSelect/Carousel"
  ],
  "al_draw_rectangle": [
    "AllegroFlare/Elements/ChapterSelect/Carousel",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/ListBoxRenderer",
    "AllegroFlare/Elements/WorldMapViewer",
    "AllegroFlare/MusicMesh/FontCharacterAtlasBuilder",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D",
    "AllegroFlare/Screens/Subscreen/Panes/Base",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/UnicodeFontViewer",
    "Wicked/Entities/Basic2D"
  ],
  "AllegroFlare/Elements/ChapterSelect/CarouselElements/ThumbnailWithLabel": [
    "AllegroFlare/Elements/ChapterSelect/CarouselElementRenderer"
  ],
  "AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/ThumbnailWithLabelRenderer": [
    "AllegroFlare/Elements/ChapterSelect/CarouselElementRenderer"
  ],
  "AllegroFlare/Elements/ChapterSelect/CarouselElements/ThumbnailWithLabelUnlockable": [
    "AllegroFlare/Elements/ChapterSelect/CarouselElementRenderer",
    "AllegroFlare/Elements/ChapterSelect/Screen"
  ],
  "AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/ThumbnailWithLabelUnlockableRenderer": [
    "AllegroFlare/Elements/ChapterSelect/CarouselElementRenderer"
  ],
  "AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/Base": [
    "AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/ThumbnailWithLabelRenderer",
    "AllegroFlare/Elements/ChapterSelect/CarouselElementRenderers/ThumbnailWithLabelUnlockableRenderer"
  ],
  "AllegroFlare/Elements/ChapterSelect/Carousel": [
    "AllegroFlare/Elements/ChapterSelect/ChapterSelect"
  ],
  "AllegroFlare/Elements/ChapterSelect/PaginationBar": [
    "AllegroFlare/Elements/ChapterSelect/ChapterSelect"
  ],
  "AllegroFlare/Elements/Base": [
    "AllegroFlare/Elements/ChapterSelect/PaginationBar",
    "AllegroFlare/Elements/HealthBars/Basic",
    "AllegroFlare/Elements/HealthBars/Classic",
    "AllegroFlare/Elements/HealthBars/Hearts",
    "AllegroFlare/Elements/Stopwatch",
    "AllegroFlare/Elements/Text"
  ],
  "AllegroFlare/Player": [
    "AllegroFlare/Elements/ChapterSelect/Screen",
    "AllegroFlare/GameEventDatas/VirtualControllerAxisChangeEventData",
    "AllegroFlare/GameEventDatas/VirtualControllerButtonPressedEventData",
    "AllegroFlare/GameEventDatas/VirtualControllerButtonReleasedEventData",
    "AllegroFlare/LoadASavedGame/Screen",
    "AllegroFlare/PhysicalInputDeviceToVirtualControllerMapping",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Screens/Achievements",
    "AllegroFlare/Screens/CharacterNameInput",
    "AllegroFlare/Screens/DisplaySettings",
    "AllegroFlare/Screens/GameOverScreen",
    "AllegroFlare/Screens/GameWonScreen",
    "AllegroFlare/Screens/InputDeviceConfiguration",
    "AllegroFlare/Screens/LevelSelectScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/SettingsScreen",
    "AllegroFlare/Screens/Storyboard",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/Screens/Version",
    "AllegroFlare/Screens/WorldMapScreen",
    "AllegroFlare/VirtualControlsProcessor",
    "WickedDemos/TileDemo"
  ],
  "AllegroFlare/VirtualControllers/Base": [
    "AllegroFlare/Elements/ChapterSelect/Screen",
    "AllegroFlare/GameEventDatas/VirtualControllerAxisChangeEventData",
    "AllegroFlare/GameEventDatas/VirtualControllerButtonPressedEventData",
    "AllegroFlare/GameEventDatas/VirtualControllerButtonReleasedEventData",
    "AllegroFlare/LoadASavedGame/Screen",
    "AllegroFlare/PhysicalInputDeviceToVirtualControllerMapping",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Screens/Achievements",
    "AllegroFlare/Screens/CharacterNameInput",
    "AllegroFlare/Screens/DisplaySettings",
    "AllegroFlare/Screens/GameOverScreen",
    "AllegroFlare/Screens/GameWonScreen",
    "AllegroFlare/Screens/InputDeviceConfiguration",
    "AllegroFlare/Screens/LevelSelectScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/SettingsScreen",
    "AllegroFlare/Screens/Storyboard",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/Screens/Version",
    "AllegroFlare/Screens/WorldMapScreen",
    "AllegroFlare/VirtualControllers/GenericController",
    "AllegroFlare/VirtualControlsProcessor",
    "WickedDemos/TileDemo"
  ],
  "AllegroFlare/Elements/ChapterSelect/ChapterSelect": [
    "AllegroFlare/Elements/ChapterSelect/Screen"
  ],
  "AllegroFlare/VirtualControllers/GenericController": [
    "AllegroFlare/Elements/ChapterSelect/Screen",
    "AllegroFlare/PhysicalInputDeviceToVirtualControllerMappingFactory",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Screens/Achievements",
    "AllegroFlare/Screens/CharacterNameInput",
    "AllegroFlare/Screens/DisplaySettings",
    "AllegroFlare/Screens/GameOverScreen",
    "AllegroFlare/Screens/GameWonScreen",
    "AllegroFlare/Screens/InputDeviceConfiguration",
    "AllegroFlare/Screens/LevelSelectScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/Storyboard",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/Screens/Version",
    "AllegroFlare/Screens/WorldMapScreen",
    "WickedDemos/TileDemo"
  ],
  "AllegroFlare/Elements/ChapterSelect/Screen": [
    "AllegroFlare/Elements/ChapterSelect/Screen"
  ],
  "AllegroFlare/Elements/DialogBoxes/ChapterTitle": [
    "AllegroFlare/Elements/DialogBoxFactory",
    "AllegroFlare/Elements/DialogBoxRenderer"
  ],
  "AllegroFlare/Elements/DialogBoxes/TextMessages": [
    "AllegroFlare/Elements/DialogBoxFactory",
    "AllegroFlare/Elements/DialogBoxRenderer"
  ],
  "AllegroFlare/Elements/DialogBoxes/Intertitle": [
    "AllegroFlare/Elements/DialogBoxFactory",
    "AllegroFlare/Elements/DialogBoxRenderer"
  ],
  "AllegroFlare/color/color": [
    "AllegroFlare/Elements/DialogBoxFrame"
  ],
  "al_get_current_display": [
    "AllegroFlare/Elements/DialogBoxFrame",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/SyncOracle"
  ],
  "al_color_html": [
    "AllegroFlare/Elements/DialogBoxFrame",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer",
    "AllegroFlare/Elements/ListBoxRenderer"
  ],
  "al_draw_filled_rounded_rectangle": [
    "AllegroFlare/Elements/DialogBoxFrame",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/ListBoxRenderer",
    "AllegroFlare/Elements/TextMessageBubble"
  ],
  "AllegroFlare/Elements/DialogBoxFrame": [
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer",
    "AllegroFlare/Elements/ListBoxRenderer"
  ],
  "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer": [
    "AllegroFlare/Elements/DialogBoxRenderer"
  ],
  "AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer": [
    "AllegroFlare/Elements/DialogBoxRenderer"
  ],
  "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer": [
    "AllegroFlare/Elements/DialogBoxRenderer"
  ],
  "AllegroFlare/Elements/DialogBoxRenderers/ChapterTitleRenderer": [
    "AllegroFlare/Elements/DialogBoxRenderer"
  ],
  "AllegroFlare/Elements/DialogBoxRenderers/CharacterFeatureRenderer": [
    "AllegroFlare/Elements/DialogBoxRenderer"
  ],
  "AllegroFlare/Elements/DialogBoxRenderers/TextMessages": [
    "AllegroFlare/Elements/DialogBoxRenderer"
  ],
  "AllegroFlare/Elements/DialogBoxRenderers/IntertitleRenderer": [
    "AllegroFlare/Elements/DialogBoxRenderer"
  ],
  "AllegroFlare/Elements/DialogBoxStyles": [
    "AllegroFlare/Elements/DialogBoxRenderer"
  ],
  "AllegroFlare/Elements/DialogButton": [
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer"
  ],
  "AllegroFlare/Elements/ListBoxRenderer": [
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer"
  ],
  "AllegroFlare/Elements/DialogBoxNameTag": [
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer"
  ],
  "AllegroFlare/Interpolators": [
    "AllegroFlare/Elements/DialogBoxRenderers/ChapterTitleRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/CharacterFeatureRenderer",
    "Wicked/Weapons/DrawnBow"
  ],
  "AllegroFlare/ColorKit": [
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/ListBoxRenderer",
    "AllegroFlare/Screens/TitleScreen"
  ],
  "AllegroFlare/Elements/StoryboardPages/Base": [
    "AllegroFlare/Elements/DialogBoxRenderers/IntertitleRenderer",
    "AllegroFlare/Elements/DialogBoxes/Intertitle",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/ClubCattLogo",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/Elements/StoryboardPages/ImageWithAdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Text",
    "AllegroFlare/GameConfigurations/Base",
    "AllegroFlare/GameConfigurations/Complete",
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Testing/GameConfigurations/Complete/SimpleConfiguration"
  ],
  "ALLEGRO_VERTEX[4]": [
    "AllegroFlare/Elements/DialogBoxRenderers/IntertitleRenderer"
  ],
  "AllegroFlare/build_vertex": [
    "AllegroFlare/Elements/DialogBoxRenderers/IntertitleRenderer"
  ],
  "AllegroFlare/Elements/TextMessageBubble": [
    "AllegroFlare/Elements/DialogBoxRenderers/TextMessages"
  ],
  "AllegroFlare/Elements/AdvancingText": [
    "AllegroFlare/Elements/DialogBoxes/Choice"
  ],
  "AllegroFlare/Elements/ListBox": [
    "AllegroFlare/Elements/DialogBoxes/Choice"
  ],
  "std/vector<std/pair<std/string, std/string>>": [
    "AllegroFlare/Elements/DialogRoll",
    "AllegroFlare/Elements/DialogRollRenderer",
    "AllegroFlare/Elements/ListBoxRenderer",
    "AllegroFlare/InputHints",
    "AllegroFlare/Screens/GameWonScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/TitleScreen"
  ],
  "char": [
    "AllegroFlare/Elements/DialogRoll",
    "AllegroFlare/Network2/Message"
  ],
  "AllegroFlare/FontAwesome": [
    "AllegroFlare/Elements/HealthBars/Hearts"
  ],
  "int32_t": [
    "AllegroFlare/Elements/HealthBars/Hearts"
  ],
  "AllegroFlare/PhysicalInputDevices/Base": [
    "AllegroFlare/Elements/InputDeviceConfigurationList",
    "AllegroFlare/Elements/InputDevicesList",
    "AllegroFlare/InputDevicesList",
    "AllegroFlare/PhysicalInputDeviceToVirtualControllerMapping",
    "AllegroFlare/PhysicalInputDevices/Joysticks/Base",
    "AllegroFlare/PhysicalInputDevices/Keyboard",
    "AllegroFlare/VirtualControlsProcessor"
  ],
  "AllegroFlare/PhysicalInputDevices/Keyboard": [
    "AllegroFlare/Elements/InputDevicesList",
    "AllegroFlare/InputDevicesList",
    "AllegroFlare/PhysicalInputDeviceToVirtualControllerMappingFactory"
  ],
  "AllegroFlare/PhysicalInputDevices/Joysticks/Base": [
    "AllegroFlare/Elements/InputDevicesList",
    "AllegroFlare/InputDevicesList",
    "AllegroFlare/VirtualControlsProcessor"
  ],
  "connection_status_t": [
    "AllegroFlare/Elements/InputDevicesList"
  ],
  "AllegroFlare/Elements/Button": [
    "AllegroFlare/Elements/InputDevicesList"
  ],
  "X": [
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/LevelSelect"
  ],
  "AllegroFlare/Inventory": [
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Prototypes/FixedRoom2D/Configuration",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner",
    "AllegroFlare/Screens/Subscreen/Element",
    "AllegroFlare/Screens/Subscreen/Screen"
  ],
  "AllegroFlare/InventoryIndex": [
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/InventoryIndex",
    "AllegroFlare/Prototypes/FixedRoom2D/Configuration",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/InventoryDictionary": [
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/InventoryDictionary",
    "AllegroFlare/Screens/Subscreen/Element",
    "AllegroFlare/Screens/Subscreen/Screen"
  ],
  "AllegroFlare/Elements/Inventory": [
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "std/function": [
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner",
    "AllegroFlare/Prototypes/Platforming2D/TMJObjectLoader",
    "AllegroFlare/Prototypes/TileDrive/Screen",
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "ALLEGRO_FLARE_EVENT_SELECT_LEVEL": [
    "AllegroFlare/Elements/LevelSelect"
  ],
  "AllegroFlare/Elements/LevelSelect": [
    "AllegroFlare/Elements/LevelSelect",
    "AllegroFlare/Screens/LevelSelectScreen"
  ],
  "al_color_name": [
    "AllegroFlare/Elements/ListBoxRenderer",
    "AllegroFlare/Elements/TextMessageBubble",
    "AllegroFlare/MultitextureModel3DObjLoader",
    "AllegroFlare/ProfilerRenderer",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Testing/WithAllegroRenderingFixture",
    "WickedDemos/TileDemo",
    "WickedDemos/TileDemo"
  ],
  "ALLEGRO_VERTEX": [
    "AllegroFlare/Elements/NinePatch",
    "AllegroFlare/Rulers",
    "AllegroFlare/TileMaps/TileMesh"
  ],
  "AllegroFlare/Elements/Notifications/Base": [
    "AllegroFlare/Elements/NotificationRenderer",
    "AllegroFlare/Elements/NotificationRenderer",
    "AllegroFlare/Elements/Notifications/AchievementUnlocked",
    "AllegroFlare/Elements/NotificationsRenderer",
    "AllegroFlare/Notifications",
    "AllegroFlare/Notifications",
    "AllegroFlare/NotificationsFactory"
  ],
  "AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked": [
    "AllegroFlare/Elements/NotificationRenderer"
  ],
  "AllegroFlare/Elements/Notifications/AchievementUnlocked": [
    "AllegroFlare/Elements/NotificationRenderer",
    "AllegroFlare/NotificationsFactory",
    "AllegroFlare/NotificationsFactory"
  ],
  "AllegroFlare/MotionFX/Sparkles2": [
    "AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked"
  ],
  "std/vector<std/vector<std/string>>": [
    "AllegroFlare/Elements/Notifications/Base",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/Base",
    "AllegroFlare/Elements/RollingCredits/Sections/Base",
    "AllegroFlare/MotionComposer/Messages/Base"
  ],
  "AllegroFlare/Elements/NotificationRenderer": [
    "AllegroFlare/Elements/NotificationsRenderer"
  ],
  "std/vector<AllegroFlare/Elements/PlayingCards/Card>": [
    "AllegroFlare/Elements/PlayingCards/Deck"
  ],
  "AllegroFlare/Elements/PlayingCards/Card": [
    "AllegroFlare/Elements/PlayingCards/Deck",
    "AllegroFlare/Prototypes/Solitare/Solitare"
  ],
  "std/shuffle": [
    "AllegroFlare/Elements/PlayingCards/Deck"
  ],
  "AllegroFlare/Elements/PlayingCards/Deck": [
    "AllegroFlare/Elements/PlayingCards/DeckFactory",
    "AllegroFlare/Prototypes/Solitare/Solitare"
  ],
  "AllegroFlare/Elements/RollingCredits/Sections/Base": [
    "AllegroFlare/Elements/RollingCredits/RollingCredits",
    "AllegroFlare/Elements/RollingCredits/SectionFactory",
    "AllegroFlare/Elements/RollingCredits/Sections/ColumnWithLabels",
    "AllegroFlare/Elements/RollingCredits/Sections/Header",
    "AllegroFlare/Elements/RollingCredits/Sections/LegalText",
    "AllegroFlare/Elements/RollingCredits/Sections/Multicolumn",
    "AllegroFlare/Elements/RollingCredits/Sections/Spacer",
    "AllegroFlare/Elements/RollingCredits/Sections/Text",
    "AllegroFlare/GameConfigurations/Complete",
    "AllegroFlare/Screens/RollingCredits",
    "AllegroFlare/Testing/GameConfigurations/Complete/SimpleConfiguration"
  ],
  "AllegroFlare/Elements/RollingCredits/Sections/Header": [
    "AllegroFlare/Elements/RollingCredits/RollingCredits",
    "AllegroFlare/Elements/RollingCredits/SectionFactory"
  ],
  "AllegroFlare/Elements/RollingCredits/SectionRenderers/Header": [
    "AllegroFlare/Elements/RollingCredits/RollingCredits"
  ],
  "AllegroFlare/Elements/RollingCredits/Sections/ColumnWithLabels": [
    "AllegroFlare/Elements/RollingCredits/RollingCredits",
    "AllegroFlare/Elements/RollingCredits/SectionFactory"
  ],
  "AllegroFlare/Elements/RollingCredits/SectionRenderers/ColumnWithLabels": [
    "AllegroFlare/Elements/RollingCredits/RollingCredits"
  ],
  "AllegroFlare/Elements/RollingCredits/Sections/Text": [
    "AllegroFlare/Elements/RollingCredits/RollingCredits",
    "AllegroFlare/Elements/RollingCredits/SectionFactory",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/LegalText",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/Text"
  ],
  "AllegroFlare/Elements/RollingCredits/SectionRenderers/Text": [
    "AllegroFlare/Elements/RollingCredits/RollingCredits"
  ],
  "AllegroFlare/Elements/RollingCredits/SectionRenderers/LegalText": [
    "AllegroFlare/Elements/RollingCredits/RollingCredits"
  ],
  "AllegroFlare/Elements/RollingCredits/Sections/LegalText": [
    "AllegroFlare/Elements/RollingCredits/RollingCredits",
    "AllegroFlare/Elements/RollingCredits/SectionFactory"
  ],
  "AllegroFlare/Elements/RollingCredits/Sections/Spacer": [
    "AllegroFlare/Elements/RollingCredits/RollingCredits",
    "AllegroFlare/Elements/RollingCredits/SectionFactory"
  ],
  "AllegroFlare/Elements/RollingCredits/SectionRenderers/Multicolumn": [
    "AllegroFlare/Elements/RollingCredits/RollingCredits"
  ],
  "AllegroFlare/Elements/RollingCredits/Sections/Multicolumn": [
    "AllegroFlare/Elements/RollingCredits/RollingCredits",
    "AllegroFlare/Elements/RollingCredits/SectionFactory"
  ],
  "AllegroFlare/AllegroContributorsList": [
    "AllegroFlare/Elements/RollingCredits/SectionFactory"
  ],
  "AllegroFlare/LegalClauseGenerator": [
    "AllegroFlare/Elements/RollingCredits/SectionFactory"
  ],
  "AllegroFlare/Elements/RollingCredits/SectionRenderers/Base": [
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/ColumnWithLabels",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/Header",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/LegalText",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/Multicolumn",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/Text"
  ],
  "std/vector<std/tuple<std/string, std/string>>": [
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/ColumnWithLabels",
    "AllegroFlare/Elements/RollingCredits/Sections/ColumnWithLabels"
  ],
  "al_draw_line": [
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/Multicolumn"
  ],
  "std/max_element": [
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/Multicolumn"
  ],
  "std/setfill": [
    "AllegroFlare/Elements/Score",
    "AllegroFlare/MusicMesh/FontCharacterAtlasBuilder",
    "AllegroFlare/UnicodeFontViewer",
    "Wicked/Hud"
  ],
  "AllegroFlare/TimerFormatter": [
    "AllegroFlare/Elements/Stopwatch"
  ],
  "AllegroFlare/Timer": [
    "AllegroFlare/Elements/Stopwatch",
    "AllegroFlare/ProfilerRenderer",
    "AllegroFlare/Prototypes/MindDive/Hud/Hud",
    "AllegroFlare/Prototypes/MindDive/Hypersync",
    "AllegroFlare/Prototypes/MindDive/MindDive"
  ],
  "AllegroFlare/MotionKit": [
    "AllegroFlare/Elements/StoryboardPages/ImageWithAdvancingText",
    "AllegroFlare/Screens/TitleScreen"
  ],
  "CatDetective/Chronicle/Panes/Base": [
    "AllegroFlare/Elements/WorldMapViewer"
  ],
  "CatDetective/Chronicle/Panes/CrimeSummaryPage": [
    "AllegroFlare/Elements/WorldMapViewer"
  ],
  "std/minmax_element": [
    "AllegroFlare/Elements/WorldMapViewer"
  ],
  "AllegroFlare/clamp": [
    "AllegroFlare/Elements/WorldMapViewer"
  ],
  "AllegroFlare/WorldMaps/Maps/Basic": [
    "AllegroFlare/Elements/WorldMapViewer",
    "AllegroFlare/Screens/WorldMapScreen",
    "AllegroFlare/WorldMapRenderers/Basic",
    "AllegroFlare/WorldMaps/Maps/Basic"
  ],
  "AllegroFlare/WorldMapRenderers/Basic": [
    "AllegroFlare/Elements/WorldMapViewer"
  ],
  "AllegroFlare/WorldMaps/Locations/Basic": [
    "AllegroFlare/Elements/WorldMapViewer",
    "AllegroFlare/WorldMapRenderers/Basic"
  ],
  "AllegroFlare/WorldMaps/Locations/Player": [
    "AllegroFlare/Elements/WorldMapViewer",
    "AllegroFlare/WorldMapRenderers/Basic"
  ],
  "std/abs": [
    "AllegroFlare/Elements/WorldMapViewer"
  ],
  "ALLEGRO_USER_EVENT": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_ROUTER": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_TOGGLE_FULLSCREEN": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_ENABLE_FULLSCREEN": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_DISABLE_FULLSCREEN": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_POLL_HOTLOAD_SHADER_SOURCE_FOR_CHANGE": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_SET_SHADER_TARGET_FOR_HOTLOADING": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_HOTLOAD_SHADER_SOURCE": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_POST_ACHIEVEMENT_UNLOCKED_NOTIFICATION": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_SHOW_INPUT_HINTS_BAR": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_HIDE_INPUT_HINTS_BAR": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR_TEXT_OPACITY": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR_BACKFILL_OPACITY": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_STOP_ALL_MUSIC_TRACKS": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR_HEIGHT": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_UNLOCK_ACHIEVEMENT": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_EVENT_SOURCE": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_EXIT_GAME": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_SWITCH_SCREEN": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_OFFSET_PRIMARY_TIMER": [
    "AllegroFlare/EventEmitter"
  ],
  "AllegroFlare/Shaders/Base": [
    "AllegroFlare/EventEmitter",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer",
    "AllegroFlare/Prototypes/CubeShooter/Screen",
    "AllegroFlare/Prototypes/CubeShooter/Shaders/DepthDarken",
    "AllegroFlare/Prototypes/CubeShooter/Shaders/Fog",
    "AllegroFlare/Prototypes/CubeShooter/Shaders/Multiply",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D",
    "AllegroFlare/Prototypes/Platforming2D/Entities/TileMaps/Basic2D",
    "AllegroFlare/Shaders/AllegroDefault",
    "AllegroFlare/Shaders/Cubemap",
    "AllegroFlare/Shaders/FlatColor",
    "AllegroFlare/Shaders/Multitexture",
    "AllegroFlare/Shaders/PostProcessing/Blinds",
    "AllegroFlare/Shaders/PostProcessing/DipToBlack",
    "AllegroFlare/Shaders/PostProcessing/Wipe",
    "Tileo/Shaders/Base"
  ],
  "AllegroFlare/RouteEventDatas/Base": [
    "AllegroFlare/EventEmitter",
    "AllegroFlare/RouteEventDatas/ActivateScreenByIdentifier",
    "AllegroFlare/RouteEventDatas/StartLevel",
    "AllegroFlare/Routers/Base",
    "AllegroFlare/Routers/Standard"
  ],
  "AllegroFlare/GameEventDatas/ScreenActivated": [
    "AllegroFlare/EventEmitter",
    "AllegroFlare/GameConfigurations/Complete",
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Testing/GameConfigurations/Complete/SimpleConfiguration"
  ],
  "AllegroFlare/GameEventDatas/AchievementUnlocked": [
    "AllegroFlare/EventEmitter",
    "AllegroFlare/GameConfigurations/Complete"
  ],
  "nlohmann/json": [
    "AllegroFlare/FrameAnimation/AsepriteSpriteSheetJSONLoader",
    "AllegroFlare/MotionComposer/MessageFactory",
    "AllegroFlare/MotionComposer/MessageProcessor",
    "AllegroFlare/Prototypes/MindDive/TunnelMeshTMJDataLoader",
    "AllegroFlare/Prototypes/Platforming2D/TMJDataLoader",
    "AllegroFlare/Prototypes/Platforming2D/TMJMeshLoader",
    "AllegroFlare/Prototypes/Platforming2D/TMJObjectLoader",
    "AllegroFlare/Prototypes/Platforming2D/TMJTileMeshLoader",
    "AllegroFlare/Prototypes/TileDrive/TerrainMeshTMJDataLoader",
    "Tileo/TMJDataLoader",
    "Tileo/TMJMeshLoader"
  ],
  "AllegroFlare/FrameAnimation/Errors": [
    "AllegroFlare/FrameAnimation/AsepriteSpriteSheetJSONLoader"
  ],
  "AllegroFlare/FrameAnimation/AsepriteSpriteSheetJSONLoader": [
    "AllegroFlare/FrameAnimation/Book"
  ],
  "AllegroFlare/Levels/Base": [
    "AllegroFlare/GameConfigurations/Base",
    "AllegroFlare/GameConfigurations/Complete",
    "AllegroFlare/Testing/GameConfigurations/Complete/SimpleConfiguration"
  ],
  "AllegroFlare/Achievement": [
    "AllegroFlare/GameConfigurations/Base",
    "AllegroFlare/GameConfigurations/Complete",
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Testing/GameConfigurations/Complete/SimpleConfiguration"
  ],
  "AllegroFlare/GameProgressAndStateInfos/Base": [
    "AllegroFlare/GameConfigurations/Complete",
    "AllegroFlare/GameSession",
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Testing/GameConfigurations/Complete/SimpleConfiguration"
  ],
  "AllegroFlare/GameSession": [
    "AllegroFlare/GameConfigurations/Complete",
    "AllegroFlare/Routers/Base",
    "AllegroFlare/Routers/Standard",
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Testing/GameConfigurations/Complete/SimpleConfiguration"
  ],
  "AllegroFlare/Elements/RollingCredits/SectionFactory": [
    "AllegroFlare/GameConfigurations/Complete",
    "AllegroFlare/Screens/Version",
    "AllegroFlare/Testing/GameConfigurations/Complete/SimpleConfiguration"
  ],
  "AllegroFlare/LoadASavedGame/SaveSlots/Base": [
    "AllegroFlare/GameConfigurations/Complete",
    "AllegroFlare/LoadASavedGame/SaveSlotRenderer",
    "AllegroFlare/LoadASavedGame/SaveSlots/Basic",
    "AllegroFlare/LoadASavedGame/SaveSlots/Empty",
    "AllegroFlare/LoadASavedGame/Screen",
    "AllegroFlare/Testing/GameConfigurations/Complete/SimpleConfiguration"
  ],
  "ReleaseInfo": [
    "AllegroFlare/GameConfigurations/Complete",
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Screens/Version",
    "AllegroFlare/Testing/GameConfigurations/Complete/SimpleConfiguration"
  ],
  "AllegroFlare/Elements/Backgrounds/ClearToColor": [
    "AllegroFlare/GameConfigurations/Complete",
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Testing/GameConfigurations/Complete/SimpleConfiguration"
  ],
  "AllegroFlare/Elements/Backgrounds/None": [
    "AllegroFlare/GameConfigurations/Complete"
  ],
  "AllegroFlare/TemplatedText": [
    "AllegroFlare/GameConfigurations/Complete",
    "AllegroFlare/Testing/GameConfigurations/Complete/SimpleConfiguration"
  ],
  "AllegroFlare/UnicodeCharacters": [
    "AllegroFlare/GameConfigurations/Complete",
    "AllegroFlare/Testing/GameConfigurations/Complete/SimpleConfiguration"
  ],
  "AllegroFlare/Screens/Gameplay": [
    "AllegroFlare/GameConfigurations/Complete",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Routers/Standard",
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Screens/Gameplay",
    "AllegroFlare/Testing/GameConfigurations/Complete/SimpleConfiguration"
  ],
  "AllegroFlare/Runners/Complete": [
    "AllegroFlare/GameConfigurations/Complete",
    "AllegroFlare/Testing/GameConfigurations/Complete/SimpleConfiguration"
  ],
  "AllegroFlare/AudioController": [
    "AllegroFlare/GameConfigurations/Complete",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen",
    "AllegroFlare/Testing/GameConfigurations/Complete/SimpleConfiguration"
  ],
  "AllegroFlare/ForwardDeclarations/AllegroFlare/Runners/Complete": [
    "AllegroFlare/GameConfigurations/Complete",
    "AllegroFlare/Runners/Complete"
  ],
  "AllegroFlare/ForwardDeclarations/AllegroFlare/GameConfigurations/Complete": [
    "AllegroFlare/GameConfigurations/Complete",
    "AllegroFlare/Runners/Complete"
  ],
  "AllegroFlare/GameplayMechanics/Triggers/Base": [
    "AllegroFlare/GameplayMechanics/Triggers/Basic"
  ],
  "AllegroFlare/php/str_replace": [
    "AllegroFlare/Generators/LoremIpsumGenerator"
  ],
  "std/vector<std/string>": [
    "AllegroFlare/Generators/LoremIpsumGenerator",
    "AllegroFlare/Generators/PersonNameGenerator",
    "AllegroFlare/Integrations/Network",
    "AllegroFlare/MotionFX/Sparkles",
    "AllegroFlare/MotionFX/Sparkles2"
  ],
  "AllegroFlare/Model3D": [
    "AllegroFlare/GraphicsPipelines/Basic3D/Entity",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/DynamicModel3D",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticModel3D",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer",
    "AllegroFlare/Prototypes/CubeShooter/Entity"
  ],
  "AllegroFlare/GraphicsPipelines/Basic3D/Entity": [
    "AllegroFlare/GraphicsPipelines/Basic3D/Scene"
  ],
  "AllegroFlare/Vec3D": [
    "AllegroFlare/GraphicsPipelines/Basic3D/Scene",
    "AllegroFlare/Physics/AABB3D",
    "AllegroFlare/Prototypes/CubeShooter/Entity",
    "AllegroFlare/Prototypes/CubeShooter/PlayerMovementControl",
    "AllegroFlare/Prototypes/CubeShooter/Screen",
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/MindDive/TunnelMeshSurferCollisionResolver",
    "AllegroFlare/Prototypes/TileDrive/TerrainMeshDriverCollisionResolver",
    "AllegroFlare/Prototypes/TileDrive/TileDrive",
    "AllegroFlare/Shaders/Base",
    "AllegroFlare/Shaders/Cubemap"
  ],
  "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Base": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Camera3D",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/DynamicModel3D",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticModel3D",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticMultitextureModel3D",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityPool",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer"
  ],
  "AllegroFlare/SceneGraph/Entities/Base": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/DynamicModel3D",
    "AllegroFlare/SceneGraph/EntityPool"
  ],
  "AllegroFlare/MultitextureModel3D": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticMultitextureModel3D",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer",
    "AllegroFlare/MultitextureModel3DObjLoader"
  ],
  "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/Camera3D": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityFactory",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer"
  ],
  "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticModel3D": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityFactory",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer"
  ],
  "std/find": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityPool",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/SceneGraph/EntityPool",
    "WickedDemos/TileDemo"
  ],
  "std/unordered_set": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityPool",
    "AllegroFlare/SceneGraph/EntityPool"
  ],
  "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityPool": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer"
  ],
  "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/DynamicModel3D": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer"
  ],
  "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/Entities/StaticMultitextureModel3D": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer",
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer"
  ],
  "AllegroFlare/Shaders/Cubemap": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer"
  ],
  "AllegroFlare/Shaders/Multitexture": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer"
  ],
  "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/EntityRenderFlags": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer"
  ],
  "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/SceneRenderer"
  ],
  "glEnable": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer"
  ],
  "AllegroFlare/php": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer"
  ],
  "ALLEGRO_TRANSFORM": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer",
    "AllegroFlare/Shaders/Base",
    "AllegroFlare/Shaders/Cubemap"
  ],
  "AllegroFlare/AllegroUnstable": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer"
  ],
  "AllegroFlare/RenderSurfaces/Bitmap": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer"
  ],
  "AllegroFlare/ALLEGRO_VERTEX_WITH_TWO_UVS_AND_NORMAL": [
    "AllegroFlare/GraphicsPipelines/DynamicEntityPipeline/ShadowDepthMapRenderer"
  ],
  "ALLEGRO_JOYSTICK": [
    "AllegroFlare/InputDevicesList",
    "AllegroFlare/PhysicalInputDevices/Joysticks/Base",
    "AllegroFlare/VirtualControlsProcessor"
  ],
  "std/set_difference": [
    "AllegroFlare/InputDevicesList",
    "Wicked/Physics/EntityZoneCollisionObserver"
  ],
  "AllegroFlare/InputDiagrams/KeyboardKey": [
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo"
  ],
  "AllegroFlare/InputDiagrams/KeyboardKeyCombo": [
    "AllegroFlare/InputHints"
  ],
  "std/chrono/steady_clock/time_point": [
    "AllegroFlare/Instrumentation/DurationMeasurer",
    "AllegroFlare/Instrumentation/Metrics/TimePoint"
  ],
  "AllegroFlare/Frameworks/Full": [
    "AllegroFlare/Integrations/CameraProjectionChanges",
    "AllegroFlare/Prototypes/CubeShooter/Runner",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Routers/Base",
    "AllegroFlare/Routers/Standard",
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Testing/WithAllegroFlareFrameworksFullFixture",
    "WickedDemos/TileDemo"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Screen": [
    "AllegroFlare/Integrations/CameraProjectionChanges"
  ],
  "AllegroFlare/Prototypes/TileDrive/Screen": [
    "AllegroFlare/Integrations/CameraProjectionChanges"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory": [
    "AllegroFlare/Integrations/CameraProjectionChanges",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory",
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "void": [
    "AllegroFlare/Integrations/Network"
  ],
  "std/mutex": [
    "AllegroFlare/Integrations/Network",
    "AllegroFlare/Integrations/Network"
  ],
  "std/atomic<bool>": [
    "AllegroFlare/Integrations/Network",
    "AllegroFlare/Integrations/Network"
  ],
  ":testing/Test": [
    "AllegroFlare/Integrations/Network",
    "AllegroFlare/Testing/TestNameInference",
    "AllegroFlare/Testing/WithAllegroFlareFrameworksFullFixture",
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "AllegroFlare/Network2/Client": [
    "AllegroFlare/Integrations/Network"
  ],
  "AllegroFlare/Network2/Server": [
    "AllegroFlare/Integrations/Network"
  ],
  "(void (callback)(std/string))": [
    "AllegroFlare/Integrations/Network"
  ],
  "std/atomic": [
    "AllegroFlare/Integrations/Network"
  ],
  "AllegroFlare/InventoryIndexItem": [
    "AllegroFlare/InventoryDictionary",
    "AllegroFlare/InventoryIndex"
  ],
  "AllegroFlare/InventoryDictionaryItems/Base": [
    "AllegroFlare/InventoryDictionary",
    "AllegroFlare/InventoryDictionaryItems/ClassicItem",
    "AllegroFlare/InventoryDictionaryItems/WithAttributes"
  ],
  "AllegroFlare/InventoryDictionaryItems/ClassicItem": [
    "AllegroFlare/InventoryDictionary"
  ],
  "AllegroFlare/Attributes": [
    "AllegroFlare/InventoryDictionaryItems/WithAttributes"
  ],
  "std/map<int, AllegroFlare/InventoryIndexItem>": [
    "AllegroFlare/InventoryIndex"
  ],
  "std/tuple<std/string, std/string, std/string>": [
    "AllegroFlare/InventoryIndexItem"
  ],
  "AllegroFlare/LoadASavedGame/SaveSlots/Basic": [
    "AllegroFlare/LoadASavedGame/SaveSlotRenderer"
  ],
  "AllegroFlare/LoadASavedGame/SaveSlots/Empty": [
    "AllegroFlare/LoadASavedGame/SaveSlotRenderer",
    "AllegroFlare/Runners/Complete"
  ],
  "AllegroFlare/LoadASavedGame/SaveSlotRenderers/Basic": [
    "AllegroFlare/LoadASavedGame/SaveSlotRenderer"
  ],
  "AllegroFlare/LoadASavedGame/SaveSlotRenderers/Empty": [
    "AllegroFlare/LoadASavedGame/SaveSlotRenderer"
  ],
  "AllegroFlare/LoadASavedGame/Screen": [
    "AllegroFlare/LoadASavedGame/Screen",
    "AllegroFlare/Runners/Complete"
  ],
  "AllegroFlare/LoadASavedGame/SaveSlotRenderer": [
    "AllegroFlare/LoadASavedGame/Screen"
  ],
  "AllegroFlare/ConsoleColors": [
    "AllegroFlare/Logger"
  ],
  "AllegroFlare/Instrumentation/PrimaryProcessEventMetric": [
    "AllegroFlare/Logger"
  ],
  "AllegroFlare/MotionComposer/Messages/Clear": [
    "AllegroFlare/MotionComposer/MessageFactory"
  ],
  "AllegroFlare/JSONLoaders/MotionComposer/Messages/Clear": [
    "AllegroFlare/MotionComposer/MessageFactory",
    "AllegroFlare/MotionComposer/MessageProcessor"
  ],
  "AllegroFlare/MotionComposer/Messages/AddActor2D": [
    "AllegroFlare/MotionComposer/MessageFactory"
  ],
  "AllegroFlare/JSONLoaders/AllegroFlare/MotionComposer/Messages/AddActor2D": [
    "AllegroFlare/MotionComposer/MessageFactory",
    "AllegroFlare/MotionComposer/MessageProcessor"
  ],
  "AllegroFlare/MotionComposer/Messages/TogglePlayback": [
    "AllegroFlare/MotionComposer/MessageFactory"
  ],
  "AllegroFlare/JSONLoaders/MotionComposer/Messages/TogglePlayback": [
    "AllegroFlare/MotionComposer/MessageFactory",
    "AllegroFlare/MotionComposer/MessageProcessor"
  ],
  "AllegroFlare/MotionComposer/Messages/SetPlayheadPosition": [
    "AllegroFlare/MotionComposer/MessageFactory"
  ],
  "AllegroFlare/JSONLoaders/MotionComposer/Messages/SetPlayheadPosition": [
    "AllegroFlare/MotionComposer/MessageFactory",
    "AllegroFlare/MotionComposer/MessageProcessor"
  ],
  "AllegroFlare/JSONLoaders/MotionComposer/Messages/RunBuildProcess": [
    "AllegroFlare/MotionComposer/MessageFactory",
    "AllegroFlare/MotionComposer/MessageProcessor"
  ],
  "AllegroFlare/MotionComposer/Messages/Base": [
    "AllegroFlare/MotionComposer/MessageProcessor",
    "AllegroFlare/MotionComposer/Messages/AddActor2D",
    "AllegroFlare/MotionComposer/Messages/RunBuildProcess",
    "AllegroFlare/MotionComposer/Messages/SetPlayheadPosition",
    "AllegroFlare/MotionComposer/Messages/SetScript"
  ],
  "AllegroFlare/Timeline/Actor2D": [
    "AllegroFlare/MotionComposer/Messages/AddActor2D"
  ],
  "AllegroFlare/Color/": [
    "AllegroFlare/MotionComposer/TrackView",
    "AllegroFlare/MotionComposer/TrackView",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Room"
  ],
  "AllegroFlare/Color/Gold": [
    "AllegroFlare/MotionFX/Sparkles"
  ],
  "std/vector<std/tuple<float, float, float, ALLEGRO_COLOR>>": [
    "AllegroFlare/MotionFX/Sparkles"
  ],
  "cos": [
    "AllegroFlare/MotionFX/Sparkles"
  ],
  "AllegroFlare/Timeline/ActorManager": [
    "AllegroFlare/MotionFX/Sparkles2"
  ],
  "AllegroFlare/Timeline/Actors/Actor2D": [
    "AllegroFlare/MotionFX/Sparkles2",
    "AllegroFlare/Timeline/ActorFactory",
    "AllegroFlare/Timeline/ActorFactory"
  ],
  "CONSOLE_COLOR_RED": [
    "AllegroFlare/MultitextureModel3DObjLoader"
  ],
  "CONSOLE_COLOR_DEFAULT": [
    "AllegroFlare/MultitextureModel3DObjLoader"
  ],
  "al_fopen": [
    "AllegroFlare/MultitextureModel3DObjLoader"
  ],
  "AllegroFlare/MusicMesh/Stamp": [
    "AllegroFlare/MusicMesh/MusicMesh"
  ],
  "AllegroFlare/TileMaps/MultiMesh": [
    "AllegroFlare/MusicMesh/MusicMesh"
  ],
  "AllegroFlare/TileMaps/MultiMeshUVAtlas": [
    "AllegroFlare/MusicMesh/MusicMesh",
    "AllegroFlare/TileMaps/MultiMesh"
  ],
  "AllegroFlare/MusicMesh/FontCharacterAtlasBuilder": [
    "AllegroFlare/MusicMesh/MusicMesh"
  ],
  "AllegroFlare/MusicNotation/AccidentalStacker/AccidentalType": [
    "AllegroFlare/MusicNotation/AccidentalStacker"
  ],
  "AllegroFlare/MusicNotation/Parser/PitchToken": [
    "AllegroFlare/MusicNotation/AccidentalStacker",
    "AllegroFlare/MusicNotation/ChordDotPositionCalculator",
    "AllegroFlare/MusicNotation/ChordNoteheadPositionResolver",
    "AllegroFlare/MusicNotation/Parser/PitchTokenSorter"
  ],
  "std/reverse": [
    "AllegroFlare/MusicNotation/AccidentalStacker",
    "AllegroFlare/MusicNotation/Parser/PitchTokenSorter"
  ],
  "AllegroFlare/MusicNotation/Parser/PitchTokenSorter": [
    "AllegroFlare/MusicNotation/AccidentalStacker",
    "AllegroFlare/MusicNotation/ChordDotPositionCalculator",
    "AllegroFlare/MusicNotation/ChordNoteheadPositionResolver"
  ],
  "std/numeric_limits": [
    "AllegroFlare/MusicNotation/AccidentalStacker",
    "AllegroFlare/MusicNotation/ChordNoteheadPositionResolver",
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "Beam/Alignment": [
    "AllegroFlare/MusicNotation/Beam"
  ],
  "BeamPositionCalculator/StemDirection": [
    "AllegroFlare/MusicNotation/BeamPositionCalculator"
  ],
  "std/min_element": [
    "AllegroFlare/MusicNotation/BeamPositionCalculator"
  ],
  "AllegroFlare/MusicNotation/ChordNoteheadPositionResolver/PositionType": [
    "AllegroFlare/MusicNotation/ChordNoteheadPositionResolver"
  ],
  "RomanNumeralAnalysisSymbol/ChordQuality": [
    "AllegroFlare/MusicNotation/RomanNumeralAnalysisSymbol"
  ],
  "std/rotate": [
    "AllegroFlare/MusicNotation/RomanNumeralAnalysisSymbol"
  ],
  "AllegroFlare/MusicNotation/RomanNumeralAnalysisSymbol": [
    "AllegroFlare/MusicNotation/RomanNumeralAnalysisSymbolRenderer"
  ],
  "al_draw_spline": [
    "AllegroFlare/MusicNotation/TieRenderer"
  ],
  "chat_message": [
    "AllegroFlare/Network2/Message"
  ],
  "AllegroFlare/EncoderDecoders/Base62": [
    "AllegroFlare/Network2/Message"
  ],
  "AllegroFlare/SHA2": [
    "AllegroFlare/Network2/Message"
  ],
  "std/invalid_argument": [
    "AllegroFlare/Network2/URLTokenizer"
  ],
  "std/vector<AllegroFlare/Elements/Notifications/Base>": [
    "AllegroFlare/Notifications"
  ],
  "std/sort": [
    "AllegroFlare/Notifications"
  ],
  "std/copy_if": [
    "AllegroFlare/Notifications"
  ],
  "AllegroFlare/Obfuscators/Rotate": [
    "AllegroFlare/Obfuscator"
  ],
  "AllegroFlare/PhysicalInputDeviceToVirtualControllerMapping": [
    "AllegroFlare/PhysicalInputDeviceToVirtualControllerMappingFactory",
    "AllegroFlare/VirtualControlsProcessor"
  ],
  "ALLEGRO_KEY_": [
    "AllegroFlare/PhysicalInputDeviceToVirtualControllerMappingFactory",
    "AllegroFlare/VirtualControlsProcessor"
  ],
  "AllegroFlare/Physics/AABB2D": [
    "AllegroFlare/Physics/AABB2D",
    "AllegroFlare/Physics/TileMapCollisionStepper",
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "AllegroFlare/Physics/AABB3D": [
    "AllegroFlare/Physics/AABB3D"
  ],
  "std/fmod": [
    "AllegroFlare/Physics/TileMapCollisionStepper",
    "AllegroFlare/SyncOracle",
    "Wicked/Physics/TileMapCollisionStepper"
  ],
  "std/vector<AllegroFlare/Physics/Int2D>": [
    "AllegroFlare/Physics/TileMapCollisionStepper"
  ],
  "std/pair<int, int>": [
    "AllegroFlare/Physics/TileMapCollisionStepper",
    "Wicked/Physics/TileMapCollisionStepper"
  ],
  "AllegroFlare/TileMaps/TileMap": [
    "AllegroFlare/Physics/TileMapCollisionStepper",
    "AllegroFlare/Prototypes/MindDive/Tunnel",
    "AllegroFlare/Prototypes/MindDive/TunnelMesh",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory",
    "AllegroFlare/Prototypes/Platforming2D/Entities/TileMaps/Basic2D",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Prototypes/Platforming2D/TMJMeshLoader",
    "AllegroFlare/Prototypes/Platforming2D/TMJTileMeshLoader",
    "AllegroFlare/Prototypes/TileDrive/TerrainMesh",
    "AllegroFlare/TileMaps/Basic2D",
    "Tileo/TMJMeshLoader",
    "Wicked/Entities/Basic2DFactory",
    "Wicked/Physics/TileMapCollisionStepper",
    "WickedDemos/TileDemo",
    "WickedDemos/TileDemo",
    "WickedDemos/TileMaps/Basic2D"
  ],
  "AllegroFlare/Physics/Int2D": [
    "AllegroFlare/Physics/TileMapCollisionStepper",
    "AllegroFlare/Physics/TileMapCollisionStepperCollisionInfo"
  ],
  "AllegroFlare/Physics/TileMapCollisionStepperCollisionInfo": [
    "AllegroFlare/Physics/TileMapCollisionStepper",
    "AllegroFlare/Physics/TileMapCollisionStepperStepResult",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base",
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "AllegroFlare/Physics/TileMapCollisionStepperCollisionInfo/CollidingBlockEdge": [
    "AllegroFlare/Physics/TileMapCollisionStepperCollisionInfo"
  ],
  "AllegroFlare/Prototypes/CubeShooter/Entity": [
    "AllegroFlare/Prototypes/CubeShooter/EntityFactory",
    "AllegroFlare/Prototypes/CubeShooter/PlayerMovementControl",
    "AllegroFlare/Prototypes/CubeShooter/Screen"
  ],
  "AllegroFlare/Prototypes/CubeShooter/Screen": [
    "AllegroFlare/Prototypes/CubeShooter/Runner"
  ],
  "AllegroFlare/Prototypes/CubeShooter/EntityFactory": [
    "AllegroFlare/Prototypes/CubeShooter/Screen"
  ],
  "AllegroFlare/Prototypes/CubeShooter/PlayerMovementControl": [
    "AllegroFlare/Prototypes/CubeShooter/Screen"
  ],
  "AllegroFlare/Prototypes/CubeShooter/Shaders/DepthDarken": [
    "AllegroFlare/Prototypes/CubeShooter/Screen"
  ],
  "AllegroFlare/Prototypes/CubeShooter/Shaders/Multiply": [
    "AllegroFlare/Prototypes/CubeShooter/Screen"
  ],
  "AllegroFlare/Prototypes/CubeShooter/Shaders/Fog": [
    "AllegroFlare/Prototypes/CubeShooter/Screen"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper": [
    "AllegroFlare/Prototypes/CubeShooter/Shaders/Fog",
    "AllegroFlare/Prototypes/CubeShooter/Shaders/Multiply",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Room",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/Entities/Base": [
    "AllegroFlare/Prototypes/FixedRoom2D/Configuration",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader",
    "AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper",
    "AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper",
    "AllegroFlare/Prototypes/FixedRoom2D/EntityFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Room"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/Room": [
    "AllegroFlare/Prototypes/FixedRoom2D/Configuration",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/Script": [
    "AllegroFlare/Prototypes/FixedRoom2D/Configuration",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/EntityFactory": [
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory": [
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/Configuration": [
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/EventNames": [
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CloseDialog": [
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotAnItemDialog": [
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotEvidenceDialog": [
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem"
  ],
  "std/vector<AllegroFlare/Prototypes/FixedRoom2D/Entities/Base>": [
    "AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper",
    "AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper"
  ],
  "std/map<int, AllegroFlare/Prototypes/FixedRoom2D/Entities/Base>": [
    "AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper"
  ],
  "std/map<std/string, AllegroFlare/Prototypes/FixedRoom2D/Entities/Base>": [
    "AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory"
  ],
  "std/map<std/string, std/string>": [
    "AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/Cursor": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Room"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Room",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Room",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/InitiateDialog": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectItem": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/EnterRoom": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/EventNames/": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/EventNames/INTERACTION_EVENT_NAME": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Room",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/RoomDictionary": [
    "AllegroFlare/Prototypes/FixedRoom2D/Room",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D": [
    "AllegroFlare/Prototypes/FixedRoom2D/Screen"
  ],
  "std/pair<std/string, std/string>": [
    "AllegroFlare/Prototypes/FixedRoom2D/Script"
  ],
  "AllegroFlare/php/trim": [
    "AllegroFlare/Prototypes/FixedRoom2D/Script",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard"
  ],
  "std/map<std/string, int>": [
    "AllegroFlare/Prototypes/FixedRoom2D/Script"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/EventNames/SCRIPT_EVENT_NAME": [
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectEvidence": [
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "AllegroFlare/Elements/Stopwatch": [
    "AllegroFlare/Prototypes/MindDive/Hud/Hud",
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/TileDrive/Hud/Hud",
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "ALLEGRO_EVENT_QUEUE": [
    "AllegroFlare/Prototypes/MindDive/Hypersync",
    "AllegroFlare/ShaderSourcePoller",
    "AllegroFlare/SyncOracle"
  ],
  "ALLEGRO_AUDIO_STREAM": [
    "AllegroFlare/Prototypes/MindDive/Hypersync"
  ],
  "ALLEGRO_VOICE": [
    "AllegroFlare/Prototypes/MindDive/Hypersync"
  ],
  "AllegroFlare/Prototypes/MindDive/TunnelMesh": [
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/MindDive/TunnelMeshFactory",
    "AllegroFlare/Prototypes/MindDive/TunnelMeshSurferCollisionResolver",
    "AllegroFlare/Prototypes/MindDive/TunnelRenderer"
  ],
  "glCullFace": [
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "AllegroFlare/Prototypes/MindDive/TunnelMeshFactory": [
    "AllegroFlare/Prototypes/MindDive/MindDive"
  ],
  "AllegroFlare/Prototypes/MindDive/Hud/Hud": [
    "AllegroFlare/Prototypes/MindDive/MindDive"
  ],
  "AllegroFlare/Prototypes/MindDive/TunnelMeshSurferCollisionResolver": [
    "AllegroFlare/Prototypes/MindDive/MindDive"
  ],
  "AllegroFlare/Physics/TileMapCollisionStepperStepResult": [
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/MindDive/TunnelMeshSurferCollisionResolver",
    "AllegroFlare/Prototypes/TileDrive/Screen",
    "AllegroFlare/Prototypes/TileDrive/TerrainMeshDriverCollisionResolver",
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "AllegroFlare/Prototypes/MindDive/Hypersync": [
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "AllegroFlare/Prototypes/MindDive/TunnelTiles/Base": [
    "AllegroFlare/Prototypes/MindDive/Tunnel",
    "AllegroFlare/Prototypes/MindDive/TunnelTiles/Basic"
  ],
  "al_is_image_addon_initialized": [
    "AllegroFlare/Prototypes/MindDive/TunnelMesh",
    "AllegroFlare/Prototypes/TileDrive/TerrainMesh",
    "AllegroFlare/TileMaps/Basic2D"
  ],
  "AllegroFlare/TileMaps/PrimMeshAtlas": [
    "AllegroFlare/Prototypes/MindDive/TunnelMesh",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory",
    "AllegroFlare/Prototypes/Platforming2D/Entities/TileMaps/Basic2D",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Prototypes/Platforming2D/TMJMeshLoader",
    "AllegroFlare/Prototypes/Platforming2D/TMJTileMeshLoader",
    "AllegroFlare/Prototypes/TileDrive/TerrainMesh",
    "AllegroFlare/TileMaps/Basic2D",
    "AllegroFlare/TileMaps/TileAtlasBuilder",
    "AllegroFlare/TileMaps/TileAtlasRepository",
    "AllegroFlare/TileMaps/TileAtlasRepositoryRecord",
    "AllegroFlare/TileMaps/TileMesh",
    "Tileo/MeshWithNormals",
    "Tileo/TMJMeshLoader",
    "Wicked/Entities/Basic2DFactory",
    "WickedDemos/TileDemo",
    "WickedDemos/TileMaps/Basic2D"
  ],
  "AllegroFlare/TileMaps/PrimMesh": [
    "AllegroFlare/Prototypes/MindDive/TunnelMesh",
    "AllegroFlare/Prototypes/Platforming2D/TMJMeshLoader",
    "AllegroFlare/Prototypes/TileDrive/TerrainMesh",
    "AllegroFlare/TileMaps/Basic2D",
    "Tileo/TMJMeshLoader",
    "Wicked/Entities/Basic2DFactory",
    "WickedDemos/TileDemo",
    "WickedDemos/TileDemo",
    "WickedDemos/TileMaps/Basic2D"
  ],
  "AllegroFlare/Prototypes/MindDive/TunnelMeshTMJDataLoader": [
    "AllegroFlare/Prototypes/MindDive/TunnelMeshFactory"
  ],
  "AllegroFlare/Physics/TileMapCollisionStepper": [
    "AllegroFlare/Prototypes/MindDive/TunnelMeshSurferCollisionResolver",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Prototypes/TileDrive/TerrainMeshDriverCollisionResolver"
  ],
  "std/ifstream": [
    "AllegroFlare/Prototypes/MindDive/TunnelMeshTMJDataLoader",
    "AllegroFlare/Prototypes/Platforming2D/TMJDataLoader",
    "AllegroFlare/Prototypes/Platforming2D/TMJObjectLoader",
    "AllegroFlare/Prototypes/TileDrive/TerrainMeshTMJDataLoader",
    "Tileo/TMJDataLoader"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/Base": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D"
  ],
  "AllegroFlare/Prototypes/Platforming2D/EntityFlagNames": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FlappingWithRandomness",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/HoppingLeft",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/ReflectOffWalls",
    "AllegroFlare/Prototypes/Platforming2D/EntityCollectionHelper",
    "AllegroFlare/Prototypes/Platforming2D/EntityControlConnectors/Basic2D",
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Anchored",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/BackAndForthHorizontal",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FallOnTrackingRange",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Flapping",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FlappingWithRandomness",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/HoppingLeft",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveInDirection",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveLeft",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveRight",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/ReflectOffWalls",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/StayStill",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Tracking"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D/BlendMode": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D"
  ],
  "AllegroFlare/vec2d": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Anchored",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Flapping",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FlappingWithRandomness",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveInDirection",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/VirtualController",
    "Wicked/Entities/Basic2DFactory",
    "Wicked/Entities/MovementStrategies2D/Anchored",
    "Wicked/Entities/MovementStrategies2D/Flapping",
    "Wicked/Entities/MovementStrategies2D/FlappingWithRandomness",
    "Wicked/Entities/MovementStrategies2D/MoveInDirection",
    "Wicked/Entities/Zones/Base2D",
    "Wicked/Entities/Zones/Rectangle2D",
    "WickedDemos/TileDemo"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveLeft": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveRight": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/StayStill": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/BackAndForthHorizontal": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/HoppingLeft": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Tracking": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FallOnTrackingRange": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/ReflectOffWalls": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveInDirection": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Flapping": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FlappingWithRandomness": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/Doors/Basic2D": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory",
    "AllegroFlare/Prototypes/Platforming2D/EntityCollectionHelper",
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/TileMaps/Basic2D": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory",
    "AllegroFlare/Prototypes/Platforming2D/EntityCollectionHelper",
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "AllegroFlare/TileMaps/TileMesh": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory",
    "AllegroFlare/Prototypes/Platforming2D/Entities/TileMaps/Basic2D",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Prototypes/Platforming2D/TMJTileMeshLoader"
  ],
  "AllegroFlare/Prototypes/Platforming2D/TMJTileMeshLoader": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/Enemies/Base": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/FrameAnimated2D": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory"
  ],
  "AllegroFlare/Prototypes/Platforming2D/TMJObjectLoader": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory"
  ],
  "AllegroFlare/Prototypes/Platforming2D/TMJObjectLoaderObjectCustomProperties": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Prototypes/Platforming2D/TMJObjectLoader"
  ],
  "AllegroFlare/TileMaps/TileAtlasRepository": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory",
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/Boss": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Boss",
    "AllegroFlare/Prototypes/Platforming2D/Entities/BossZone"
  ],
  "AllegroFlare/Prototypes/Platforming2D/EntityControlConnectors/Base": [
    "AllegroFlare/Prototypes/Platforming2D/EntityControlConnectors/Basic2D",
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "std/fixed": [
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "std/map<int, int>": [
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "WickedDemos/TileDemo"
  ],
  "AllegroFlare/VirtualController": [
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Screens/Achievements",
    "AllegroFlare/Screens/GameOverScreen",
    "AllegroFlare/Screens/Storyboard",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/VirtualControlsProcessor",
    "WickedDemos/TileDemo"
  ],
  "AllegroFlare/VirtualControlsProcessor": [
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "WickedDemos/TileDemo"
  ],
  "AllegroFlare/Screen": [
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "WickedDemos/TileDemo"
  ],
  "AllegroFlare/CameraControlStrategies2D/Snap": [
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "AllegroFlare/CameraControlStrategies2D/SmoothSnap": [
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "AllegroFlare/CameraControlStrategies2D/SmoothSnapWithZoomEffect": [
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "AllegroFlare/CameraControlStrategies2D/HorizontalRail": [
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "AllegroFlare/Prototypes/Platforming2D/EntityCollectionHelper": [
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "AllegroFlare/Display": [
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "WickedDemos/TileDemo",
    "WickedDemos/TileDemo"
  ],
  "AllegroFlare/Prototypes/Platforming2D/EntityControlConnectors/Basic2D": [
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "AllegroFlare/Prototypes/Platforming2D/MapDictionaryListing": [
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/BossZone": [
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "ifstream": [
    "AllegroFlare/Prototypes/Platforming2D/TMJMeshLoader",
    "Tileo/TMJMeshLoader"
  ],
  "AllegroFlare/TileMaps/TileAtlasBuilder": [
    "AllegroFlare/Prototypes/Platforming2D/TMJMeshLoader",
    "AllegroFlare/Prototypes/Platforming2D/TMJTileMeshLoader",
    "AllegroFlare/TileMaps/TileAtlasRepository",
    "Tileo/TMJMeshLoader"
  ],
  "AllegroFlare/Prototypes/Platforming2D/TMJDataLoader": [
    "AllegroFlare/Prototypes/Platforming2D/TMJMeshLoader",
    "AllegroFlare/Prototypes/Platforming2D/TMJTileMeshLoader"
  ],
  "AllegroFlare/Elements/PlayingCards/DeckFactory": [
    "AllegroFlare/Prototypes/Solitare/Solitare"
  ],
  "AllegroFlare/Prototypes/TileDrive/TileDrive": [
    "AllegroFlare/Prototypes/TileDrive/Screen",
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "AllegroFlare/Prototypes/TileDrive/TerrainMesh": [
    "AllegroFlare/Prototypes/TileDrive/Screen",
    "AllegroFlare/Prototypes/TileDrive/TerrainMeshDictionaryRecord",
    "AllegroFlare/Prototypes/TileDrive/TerrainMeshDriverCollisionResolver",
    "AllegroFlare/Prototypes/TileDrive/TerrainMeshFactory",
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "AllegroFlare/Prototypes/TileDrive/TerrainMeshDictionaryRecord": [
    "AllegroFlare/Prototypes/TileDrive/Screen",
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "AllegroFlare/Prototypes/TileDrive/TerrainMeshTMJDataLoader": [
    "AllegroFlare/Prototypes/TileDrive/TerrainMeshFactory"
  ],
  "AllegroFlare/Prototypes/TileDrive/TerrainMeshFactory": [
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "AllegroFlare/Prototypes/TileDrive/Hud/Hud": [
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "AllegroFlare/Prototypes/TileDrive/TerrainMeshDriverCollisionResolver": [
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "AllegroFlare/RenderSurfaces/Base": [
    "AllegroFlare/RenderSurfaces/DisplayBackbuffer",
    "AllegroFlare/RenderSurfaces/DisplayBackbufferSubBitmap",
    "AllegroFlare/Testing/WithAllegroFlareFrameworksFullFixture"
  ],
  "AllegroFlare/ScreenManagers/Dictionary": [
    "AllegroFlare/Routers/Base"
  ],
  "AllegroFlare/Routers/Standard": [
    "AllegroFlare/Routers/Standard",
    "AllegroFlare/Runners/Complete"
  ],
  "AllegroFlare/Routers/Base": [
    "AllegroFlare/Routers/Standard"
  ],
  "AllegroFlare/RouteEventDatas/ActivateScreenByIdentifier": [
    "AllegroFlare/Routers/Standard"
  ],
  "ALLEGRO_STATE": [
    "AllegroFlare/Rulers"
  ],
  "AllegroFlare/Useful3D": [
    "AllegroFlare/Rulers"
  ],
  "AllegroFlare/Screens/Storyboard": [
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Screens/Storyboard",
    "AllegroFlare/StoryboardFactory"
  ],
  "AllegroFlare/Screens/Achievements": [
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Screens/Achievements"
  ],
  "AllegroFlare/Screens/TitleScreen": [
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Screens/TitleScreen"
  ],
  "AllegroFlare/Screens/GameOverScreen": [
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Screens/GameOverScreen"
  ],
  "AllegroFlare/Screens/GameWonScreen": [
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Screens/GameWonScreen"
  ],
  "AllegroFlare/Screens/RollingCredits": [
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Screens/RollingCredits"
  ],
  "AllegroFlare/Screens/Version": [
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Screens/Version"
  ],
  "AllegroFlare/Screens/LevelSelectScreen": [
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Screens/LevelSelectScreen"
  ],
  "AllegroFlare/Screens/SettingsScreen": [
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Screens/SettingsScreen"
  ],
  "AllegroFlare/Achievements": [
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Screens/Achievements"
  ],
  "AllegroFlare/StoryboardFactory": [
    "AllegroFlare/Runners/Complete"
  ],
  "AllegroFlare/RouteEventDatas/StartLevel": [
    "AllegroFlare/Runners/Complete"
  ],
  "AllegroFlare/GameConfigurations/Complete": [
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Testing/GameConfigurations/Complete/SimpleConfiguration"
  ],
  "AllegroFlare/Screens/DisplaySettings": [
    "AllegroFlare/Runners/Complete",
    "AllegroFlare/Screens/DisplaySettings"
  ],
  "AllegroFlare/Elements/AchievementsList": [
    "AllegroFlare/Screens/Achievements"
  ],
  "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard": [
    "AllegroFlare/Screens/CharacterNameInput",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard"
  ],
  "AllegroFlare/Screens/CharacterNameInput": [
    "AllegroFlare/Screens/CharacterNameInput"
  ],
  "AllegroFlare/Elements/UI/SliderToggle": [
    "AllegroFlare/Screens/DisplaySettings"
  ],
  "AllegroFlare/Elements/UI/IntSpinner": [
    "AllegroFlare/Screens/DisplaySettings"
  ],
  "ALLEGRO_FLARE_EVENT_START_TITLE_SCREEN": [
    "AllegroFlare/Screens/GameWonScreen"
  ],
  "AllegroFlare/Elements/InputDeviceConfigurationList": [
    "AllegroFlare/Screens/InputDeviceConfiguration"
  ],
  "AllegroFlare/InputDevicesList": [
    "AllegroFlare/Screens/InputDeviceConfiguration",
    "AllegroFlare/VirtualControlsProcessor"
  ],
  "AllegroFlare/Elements/InputDevicesList": [
    "AllegroFlare/Screens/InputDeviceConfiguration"
  ],
  "AllegroFlare/Screens/InputDeviceConfiguration": [
    "AllegroFlare/Screens/InputDeviceConfiguration"
  ],
  "ALLEGRO_FLARE_EVENT_START_NEW_GAME": [
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/TitleScreen"
  ],
  "AllegroFlare/Screens/PauseScreen": [
    "AllegroFlare/Screens/PauseScreen"
  ],
  "AllegroFlare/Elements/RollingCredits/RollingCredits": [
    "AllegroFlare/Screens/RollingCredits",
    "AllegroFlare/Screens/Version"
  ],
  "std/vector<AllegroFlare/Elements/RollingCredits/Sections/Base>": [
    "AllegroFlare/Screens/RollingCredits"
  ],
  "AllegroFlare/Elements/Storyboard": [
    "AllegroFlare/Screens/Storyboard"
  ],
  "AllegroFlare/Screens/Subscreen/Panes/Base": [
    "AllegroFlare/Screens/Subscreen/Element",
    "AllegroFlare/Screens/Subscreen/Panes/Airwing",
    "AllegroFlare/Screens/Subscreen/Panes/Inventory"
  ],
  "AllegroFlare/Screens/Subscreen/Panes/Inventory": [
    "AllegroFlare/Screens/Subscreen/PaneFactory"
  ],
  "al_clear_to_color": [
    "AllegroFlare/Screens/Subscreen/Screen"
  ],
  "AllegroFlare/Screens/Subscreen/Element": [
    "AllegroFlare/Screens/Subscreen/Screen"
  ],
  "AllegroFlare/Screens/Subscreen/Screen": [
    "AllegroFlare/Screens/SubscreenFactory"
  ],
  "AllegroFlare/Screens/Subscreen/PaneFactory": [
    "AllegroFlare/Screens/SubscreenFactory"
  ],
  "AllegroFlare/TransitionFX/Base": [
    "AllegroFlare/Screens/Transition"
  ],
  "AllegroFlare/Screens/Transition": [
    "AllegroFlare/Screens/Transition"
  ],
  "BuildInfo": [
    "AllegroFlare/Screens/Version"
  ],
  "AllegroFlare/Screens/WorldMapScreen": [
    "AllegroFlare/Screens/WorldMapScreen"
  ],
  "AllegroFlare/Elements/WorldMapViewer": [
    "AllegroFlare/Screens/WorldMapScreen"
  ],
  "std/filesystem/file_time_type": [
    "AllegroFlare/ShaderSourcePoller"
  ],
  "std/filesystem/last_write_time": [
    "AllegroFlare/ShaderSourcePoller"
  ],
  "ALLEGRO_TIMER": [
    "AllegroFlare/ShaderSourcePoller",
    "AllegroFlare/SyncOracle"
  ],
  "ALLEGRO_SHADER": [
    "AllegroFlare/Shaders/Base"
  ],
  "AllegroFlare/Cubemap": [
    "AllegroFlare/Shaders/Base",
    "AllegroFlare/Shaders/Cubemap"
  ],
  "AllegroFlare/CubemapTextureBinder": [
    "AllegroFlare/Shaders/Base"
  ],
  "AllegroFlare/SoftwareKeyboard/KeyboardKey": [
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard"
  ],
  "AllegroFlare/Story/Characters/PersonalityProfileDimension": [
    "AllegroFlare/Story/Characters/PersonalityProfile"
  ],
  "AllegroFlare/Story/Characters/PersonalityProfile": [
    "AllegroFlare/Story/Characters/PersonalityProfileFactory",
    "AllegroFlare/Story/Characters/PersonalityProfileFactory"
  ],
  "AllegroFlare/Story/Characters/PersonalityProfileMatrix": [
    "AllegroFlare/Story/Characters/PersonalityProfileFactory",
    "AllegroFlare/Story/Characters/PersonalityProfileMatrixFactory"
  ],
  "AllegroFlare/Story/Characters/PersonalityProfileMatrixFactory": [
    "AllegroFlare/Story/Characters/PersonalityProfileFactory"
  ],
  "AllegroFlare/Story/Characters/PersonalityDimension": [
    "AllegroFlare/Story/Characters/PersonalityProfileMatrix"
  ],
  "AllegroFlare/StoryboardPageFactory": [
    "AllegroFlare/StoryboardFactory"
  ],
  "AllegroFlare/Elements/StoryboardPages/Image": [
    "AllegroFlare/StoryboardFactory",
    "AllegroFlare/StoryboardPageFactory",
    "AllegroFlare/StoryboardPageFactory"
  ],
  "AllegroFlare/Elements/StoryboardPages/AdvancingText": [
    "AllegroFlare/StoryboardFactory",
    "AllegroFlare/StoryboardPageFactory",
    "AllegroFlare/StoryboardPageFactory"
  ],
  "AllegroFlare/Elements/StoryboardPages/Text": [
    "AllegroFlare/StoryboardPageFactory",
    "AllegroFlare/StoryboardPageFactory"
  ],
  "AllegroFlare/Elements/StoryboardPages/ImageWithAdvancingText": [
    "AllegroFlare/StoryboardPageFactory"
  ],
  "AllegroFlare/Elements/StoryboardPages/ClubCattLogo": [
    "AllegroFlare/StoryboardPageFactory"
  ],
  "AllegroFlare/Instrumentation/DurationMeasurer": [
    "AllegroFlare/SyncOracle"
  ],
  "AllegroFlare/Instrumentation/Metrics/Double": [
    "AllegroFlare/SyncOracle"
  ],
  "AllegroFlare/Version": [
    "AllegroFlare/SystemInfo"
  ],
  "std/thread/hardware_concurrency": [
    "AllegroFlare/SystemInfo"
  ],
  "AllegroFlare/SystemInfoFetcher": [
    "AllegroFlare/SystemInfo"
  ],
  ":AllegroFlare/DisplaySettingsInterfaces/Base": [
    "AllegroFlare/Testing/AllegroFlare/DisplaySettingsInterfaces/DisplayMock"
  ],
  "random": [
    "AllegroFlare/Testing/TemporaryDirectoryCreator"
  ],
  "std/random_device": [
    "AllegroFlare/Testing/TemporaryDirectoryCreator"
  ],
  "std/mt19937": [
    "AllegroFlare/Testing/TemporaryDirectoryCreator"
  ],
  "filesystem": [
    "AllegroFlare/Testing/TemporaryDirectoryCreator"
  ],
  "std/filesystem/path": [
    "AllegroFlare/Testing/TemporaryDirectoryCreator"
  ],
  "std/tmpnam": [
    "AllegroFlare/Testing/TemporaryFilenameCreator"
  ],
  "AllegroFlare/Testing/TemporaryDirectoryCreator": [
    "AllegroFlare/Testing/TemporaryFilenameCreator"
  ],
  "AllegroFlare/Profiler": [
    "AllegroFlare/Testing/WithAllegroFlareFrameworksFullFixture"
  ],
  "AllegroFlare/DeploymentEnvironment": [
    "AllegroFlare/Testing/WithAllegroFlareFrameworksFullFixture",
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "AllegroFlare/Testing/TestNameInference": [
    "AllegroFlare/Testing/WithAllegroFlareFrameworksFullFixture",
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "AllegroFlare/Testing/CustomComparison": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "al_init_primitives_addon": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "al_init_ttf_addon": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "al_init_font_addon": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "al_init_image_addon": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "std/chrono/milliseconds": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "std/this_thread/sleep_for": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "AllegroFlare/TileMaps/AutoTile/FilterMatrix": [
    "AllegroFlare/TileMaps/AutoTile/FilterMatrix",
    "AllegroFlare/TileMaps/AutoTile/Filters/Base",
    "AllegroFlare/TileMaps/AutoTile/Filters/BasicFloor",
    "AllegroFlare/TileMaps/AutoTile/Filters/BasicSolid",
    "AllegroFlare/TileMaps/AutoTile/Filters/FortyEightEdges",
    "AllegroFlare/TileMaps/AutoTile/Filters/SixteenEdges"
  ],
  "AllegroFlare/TileMaps/AutoTile/Filters/Base": [
    "AllegroFlare/TileMaps/AutoTile/Filters/Basic",
    "AllegroFlare/TileMaps/AutoTile/Filters/BasicFloor",
    "AllegroFlare/TileMaps/AutoTile/Filters/BasicSolid",
    "AllegroFlare/TileMaps/AutoTile/Filters/Fill",
    "AllegroFlare/TileMaps/AutoTile/Filters/FortyEightEdges",
    "AllegroFlare/TileMaps/AutoTile/Filters/MonolineBlobsHorizontal",
    "AllegroFlare/TileMaps/AutoTile/Filters/SixteenEdges"
  ],
  "ALLEGRO_VERTEX_DECL": [
    "AllegroFlare/TileMaps/MultiMesh",
    "Tileo/MeshWithNormals",
    "Tileo/TileoTileVertexAllegroVertexDeclaration"
  ],
  "ALLEGRO_VERTEX_BUFFER": [
    "AllegroFlare/TileMaps/MultiMesh",
    "AllegroFlare/TileMaps/TileMesh"
  ],
  "AllegroFlare/TileMaps/MultiMeshUV": [
    "AllegroFlare/TileMaps/MultiMeshUVAtlas"
  ],
  "AllegroFlare/TileMaps/PrimMeshAtlasIndexRecord": [
    "AllegroFlare/TileMaps/PrimMeshAtlas",
    "AllegroFlare/TileMaps/TileAtlasBuilder"
  ],
  "AllegroFlare/ImageProcessing": [
    "AllegroFlare/TileMaps/TileAtlasBuilder"
  ],
  "AllegroFlare/TileMaps/TileAtlasRepositoryRecord": [
    "AllegroFlare/TileMaps/TileAtlasRepository"
  ],
  "ALLEGRO_INDEX_BUFFER": [
    "AllegroFlare/TileMaps/TileMesh"
  ],
  "std/time_t": [
    "AllegroFlare/TimeStamper"
  ],
  "cross_product": [
    "AllegroFlare/Useful3D/Triangle"
  ],
  "AllegroFlare/vec3d": [
    "AllegroFlare/Useful3D/Triangle",
    "Tileo/Shaders/MeshWithNormals",
    "Wicked/Entities/Zones/Base3D",
    "Wicked/Entities/Zones/Rectangle3D"
  ],
  "AllegroFlare/Useful3D/build_vertex": [
    "AllegroFlare/Useful3D/Triangle"
  ],
  "AllegroFlare/Useful3D/Ray": [
    "AllegroFlare/Useful3D/Triangle",
    "AllegroFlare/Useful3D/Triangle"
  ],
  "AllegroFlare/Useful3D/IntersectData": [
    "AllegroFlare/Useful3D/Triangle",
    "AllegroFlare/Useful3D/Triangle"
  ],
  "AllegroFlare/Bin": [
    "AllegroFlare/VideoBin"
  ],
  "AllegroFlare/PhysicalInputDeviceToVirtualControllerMappingFactory": [
    "AllegroFlare/VirtualControlsProcessor"
  ],
  "AllegroFlare/GameEventDatas/VirtualControllerAxisChangeEventData": [
    "AllegroFlare/VirtualControlsProcessor"
  ],
  "AllegroFlare/GameEventDatas/VirtualControllerButtonPressedEventData": [
    "AllegroFlare/VirtualControlsProcessor"
  ],
  "AllegroFlare/GameEventDatas/VirtualControllerButtonReleasedEventData": [
    "AllegroFlare/VirtualControlsProcessor"
  ],
  "AllegroFlare/WorldMaps/Locations/Base": [
    "AllegroFlare/WorldMapRenderers/Basic",
    "AllegroFlare/WorldMaps/Locations/Basic",
    "AllegroFlare/WorldMaps/Locations/Player",
    "AllegroFlare/WorldMaps/Maps/Basic"
  ],
  "AllegroFlare/WorldMaps/Maps/Base": [
    "AllegroFlare/WorldMaps/Maps/Basic"
  ],
  "std/any_of": [
    "AllegroFlare/YAMLValidator"
  ],
  "Tileo/TileoTileVertexAllegroVertexDeclaration": [
    "Tileo/MeshWithNormals"
  ],
  "TILEO_TILE_VERTEX": [
    "Tileo/MeshWithNormals",
    "Tileo/TileoTileVertexAllegroVertexDeclaration"
  ],
  "Tileo/Shaders/Base": [
    "Tileo/Shaders/AllegroDefault",
    "Tileo/Shaders/MeshWithNormals"
  ],
  "Tileo/TMJDataLoader": [
    "Tileo/TMJMeshLoader"
  ],
  "Wicked/Entities/Basic2D": [
    "Wicked/CameraControlStrategies2D/HorizontalRail",
    "Wicked/CameraControlStrategies2D/SmoothSnap",
    "Wicked/CameraControlStrategies2D/Snap",
    "Wicked/Entities/Basic2DFactory",
    "Wicked/Entities/CollectionHelper",
    "Wicked/Entities/Doors/Basic2D",
    "Wicked/Entities/Enemies/Base",
    "Wicked/Entities/MovementStrategies2D/Anchored",
    "Wicked/Entities/MovementStrategies2D/BackAndForthHorizontal",
    "Wicked/Entities/MovementStrategies2D/FallOnTrackingRange",
    "Wicked/Entities/MovementStrategies2D/Flapping",
    "Wicked/Entities/MovementStrategies2D/FlappingWithRandomness",
    "Wicked/Entities/MovementStrategies2D/HoppingLeft",
    "Wicked/Entities/MovementStrategies2D/MoveInDirection",
    "Wicked/Entities/MovementStrategies2D/MoveLeft",
    "Wicked/Entities/MovementStrategies2D/MoveRight",
    "Wicked/Entities/MovementStrategies2D/ReflectOffWalls",
    "Wicked/Entities/MovementStrategies2D/StayStill",
    "Wicked/Entities/MovementStrategies2D/Tracking",
    "WickedDemos/TileDemo",
    "WickedDemos/TileDemo",
    "WickedDemos/TileMaps/Basic2D"
  ],
  "Wicked/CameraControlStrategies2D/Base": [
    "Wicked/CameraControlStrategies2D/HorizontalRail",
    "Wicked/CameraControlStrategies2D/SmoothSnap",
    "Wicked/CameraControlStrategies2D/Snap",
    "WickedDemos/TileDemo",
    "WickedDemos/TileDemo"
  ],
  "Wicked/Entities/Base": [
    "Wicked/Entities/Basic2D",
    "Wicked/Entities/Basic3D",
    "Wicked/Entities/Zones/Base2D",
    "Wicked/Entities/Zones/Base3D"
  ],
  "Wicked/EntityFlagNames": [
    "Wicked/Entities/Basic2D",
    "Wicked/Entities/Basic2DFactory",
    "Wicked/Entities/CollectionHelper",
    "Wicked/Entities/MovementStrategies2D/FlappingWithRandomness",
    "Wicked/Entities/MovementStrategies2D/ReflectOffWalls",
    "WickedDemos/TileDemo"
  ],
  "Wicked/Entities/MovementStrategies2D/MoveLeft": [
    "Wicked/Entities/Basic2DFactory"
  ],
  "Wicked/Entities/MovementStrategies2D/MoveRight": [
    "Wicked/Entities/Basic2DFactory"
  ],
  "Wicked/Entities/MovementStrategies2D/StayStill": [
    "Wicked/Entities/Basic2DFactory"
  ],
  "Wicked/Entities/MovementStrategies2D/BackAndForthHorizontal": [
    "Wicked/Entities/Basic2DFactory"
  ],
  "Wicked/Entities/MovementStrategies2D/HoppingLeft": [
    "Wicked/Entities/Basic2DFactory"
  ],
  "Wicked/Entities/MovementStrategies2D/Tracking": [
    "Wicked/Entities/Basic2DFactory"
  ],
  "Wicked/Entities/MovementStrategies2D/FallOnTrackingRange": [
    "Wicked/Entities/Basic2DFactory"
  ],
  "Wicked/Entities/MovementStrategies2D/ReflectOffWalls": [
    "Wicked/Entities/Basic2DFactory"
  ],
  "Wicked/Entities/MovementStrategies2D/MoveInDirection": [
    "Wicked/Entities/Basic2DFactory"
  ],
  "Wicked/Entities/MovementStrategies2D/Flapping": [
    "Wicked/Entities/Basic2DFactory"
  ],
  "Wicked/Entities/MovementStrategies2D/FlappingWithRandomness": [
    "Wicked/Entities/Basic2DFactory"
  ],
  "Wicked/Entities/Doors/Basic2D": [
    "Wicked/Entities/Basic2DFactory",
    "WickedDemos/TileDemo"
  ],
  "WickedDemos/TileMaps/Basic2D": [
    "Wicked/Entities/Basic2DFactory",
    "Wicked/Entities/CollectionHelper",
    "WickedDemos/TileDemo"
  ],
  "Tileo/TMJMeshLoader": [
    "Wicked/Entities/Basic2DFactory",
    "WickedDemos/TileDemo"
  ],
  "Wicked/Entities/Enemies/Base": [
    "Wicked/Entities/Basic2DFactory"
  ],
  "Wicked/Entities/MovementStrategies2D/Base": [
    "Wicked/Entities/Enemies/Base",
    "Wicked/Entities/MovementStrategies2D/Anchored",
    "Wicked/Entities/MovementStrategies2D/BackAndForthHorizontal",
    "Wicked/Entities/MovementStrategies2D/FallOnTrackingRange",
    "Wicked/Entities/MovementStrategies2D/Flapping",
    "Wicked/Entities/MovementStrategies2D/FlappingWithRandomness",
    "Wicked/Entities/MovementStrategies2D/HoppingLeft",
    "Wicked/Entities/MovementStrategies2D/MoveInDirection",
    "Wicked/Entities/MovementStrategies2D/MoveLeft",
    "Wicked/Entities/MovementStrategies2D/MoveRight",
    "Wicked/Entities/MovementStrategies2D/ReflectOffWalls",
    "Wicked/Entities/MovementStrategies2D/StayStill",
    "Wicked/Entities/MovementStrategies2D/Tracking"
  ],
  "Wicked/Entities/Zones/Base2D": [
    "Wicked/Entities/Zones/Rectangle2D"
  ],
  "Wicked/Entities/Zones/Base3D": [
    "Wicked/Entities/Zones/Rectangle3D",
    "Wicked/Physics/EntityZoneCollisionObserver"
  ],
  "Wicked/Entities/Basic3D": [
    "Wicked/Physics/EntityZoneCollisionObserver"
  ],
  "Wicked/Physics/AABB2D": [
    "Wicked/Physics/TileMapCollisionStepper",
    "WickedDemos/TileDemo"
  ],
  "std/vector<Wicked/Physics/Int2D>": [
    "Wicked/Physics/TileMapCollisionStepper"
  ],
  "Wicked/Physics/Int2D": [
    "Wicked/Physics/TileMapCollisionStepper"
  ],
  "Wicked/Weapons/Base": [
    "Wicked/Weapons/DrawnBow"
  ],
  "std/vector<Wicked/Entities/Basic2D>": [
    "WickedDemos/TileDemo"
  ],
  "Wicked/Entities/Basic2DFactory": [
    "WickedDemos/TileDemo"
  ],
  "AllegroFlare/Framework": [
    "WickedDemos/TileDemo"
  ],
  "Wicked/Physics/TileMapCollisionStepper": [
    "WickedDemos/TileDemo"
  ],
  "Wicked/Weapons/DrawnBow": [
    "WickedDemos/TileDemo"
  ],
  "Wicked/CameraControlStrategies2D/Snap": [
    "WickedDemos/TileDemo"
  ],
  "Wicked/CameraControlStrategies2D/SmoothSnap": [
    "WickedDemos/TileDemo"
  ],
  "Wicked/CameraControlStrategies2D/HorizontalRail": [
    "WickedDemos/TileDemo"
  ],
  "Wicked/Entities/CollectionHelper": [
    "WickedDemos/TileDemo"
  ],
  "std/vector<Wicked/Entities/Basic2D>&": [
    "WickedDemos/TileDemo"
  ]
}
</pre>
</body>