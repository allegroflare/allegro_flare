<!DOCTYPE html>
<head>
<style>
*
{
  font-family: 'Arial';
  padding: 3px 20px;
}
table td
{
  padding: 3px 20px;
}
.property
{
  color: blue;
}
.private_property
{
  color: lightblue;
}

.method
{
  color: red;
}

.private_method
{
  color: pink;
}

.dependency
{
  color: green;
}

.component
{
  padding: 20 10 20 10;
  margin: 20 10 20 10;
  background-color: #dfdfdf;
}

.component h3
{
}
</style>
</head>
<body>
<h1>TOC</h1>
<ul>
  <li><a href="#quintessence/AllegroFlare/AudioController.q.yml">quintessence/AllegroFlare/AudioController.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/AudioRepositoryElement.q.yml">quintessence/AllegroFlare/AudioRepositoryElement.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/BackgroundFactory.q.yml">quintessence/AllegroFlare/BackgroundFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Bone3D.q.yml">quintessence/AllegroFlare/Bone3D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Bone3DGraphRenderer.q.yml">quintessence/AllegroFlare/Bone3DGraphRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Camera2D.q.yml">quintessence/AllegroFlare/Camera2D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Cubemap.q.yml">quintessence/AllegroFlare/Cubemap.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/AchievementsList.q.yml">quintessence/AllegroFlare/Elements/AchievementsList.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/AdvancingText.q.yml">quintessence/AllegroFlare/Elements/AdvancingText.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Backgrounds/Base.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Backgrounds/Image.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/Image.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Backgrounds/Monoplex.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/Monoplex.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Backgrounds/Parallax.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/Parallax.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Backgrounds/ParallaxLayer.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/ParallaxLayer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Base.q.yml">quintessence/AllegroFlare/Elements/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxFactory.q.yml">quintessence/AllegroFlare/Elements/DialogBoxFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxFrame.q.yml">quintessence/AllegroFlare/Elements/DialogBoxFrame.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxNameTag.q.yml">quintessence/AllegroFlare/Elements/DialogBoxNameTag.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxes/Base.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxes/Basic.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/Basic.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxes/Choice.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/Choice.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxes/YouGotAnItem.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/YouGotAnItem.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogButton.q.yml">quintessence/AllegroFlare/Elements/DialogButton.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/HealthBars/Basic.q.yml">quintessence/AllegroFlare/Elements/HealthBars/Basic.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/HealthBars/Classic.q.yml">quintessence/AllegroFlare/Elements/HealthBars/Classic.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/HealthBars/Hearts.q.yml">quintessence/AllegroFlare/Elements/HealthBars/Hearts.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Inventory.q.yml">quintessence/AllegroFlare/Elements/Inventory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/LevelSelect.q.yml">quintessence/AllegroFlare/Elements/LevelSelect.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/NotificationRenderer.q.yml">quintessence/AllegroFlare/Elements/NotificationRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked.q.yml">quintessence/AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Notifications/AchievementUnlocked.q.yml">quintessence/AllegroFlare/Elements/Notifications/AchievementUnlocked.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Notifications/Base.q.yml">quintessence/AllegroFlare/Elements/Notifications/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/NotificationsRenderer.q.yml">quintessence/AllegroFlare/Elements/NotificationsRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/PlayingCards/Card.q.yml">quintessence/AllegroFlare/Elements/PlayingCards/Card.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/PlayingCards/Deck.q.yml">quintessence/AllegroFlare/Elements/PlayingCards/Deck.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/PlayingCards/DeckFactory.q.yml">quintessence/AllegroFlare/Elements/PlayingCards/DeckFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/ScrollBar.q.yml">quintessence/AllegroFlare/Elements/ScrollBar.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Stopwatch.q.yml">quintessence/AllegroFlare/Elements/Stopwatch.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Storyboard.q.yml">quintessence/AllegroFlare/Elements/Storyboard.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/StoryboardPages/AdvancingText.q.yml">quintessence/AllegroFlare/Elements/StoryboardPages/AdvancingText.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/StoryboardPages/Base.q.yml">quintessence/AllegroFlare/Elements/StoryboardPages/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/StoryboardPages/Image.q.yml">quintessence/AllegroFlare/Elements/StoryboardPages/Image.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/StoryboardPages/Text.q.yml">quintessence/AllegroFlare/Elements/StoryboardPages/Text.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Text.q.yml">quintessence/AllegroFlare/Elements/Text.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/EncoderDecoders/Base62.q.yml">quintessence/AllegroFlare/EncoderDecoders/Base62.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/EventEmitter.q.yml">quintessence/AllegroFlare/EventEmitter.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GameEvent.q.yml">quintessence/AllegroFlare/GameEvent.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GameEventDatas/Base.q.yml">quintessence/AllegroFlare/GameEventDatas/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Generators/LoremIpsumGenerator.q.yml">quintessence/AllegroFlare/Generators/LoremIpsumGenerator.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Generators/PersonNameGenerator.q.yml">quintessence/AllegroFlare/Generators/PersonNameGenerator.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/InputDiagrams/KeyboardKey.q.yml">quintessence/AllegroFlare/InputDiagrams/KeyboardKey.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/InputDiagrams/KeyboardKeyCombo.q.yml">quintessence/AllegroFlare/InputDiagrams/KeyboardKeyCombo.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/InputHints.q.yml">quintessence/AllegroFlare/InputHints.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Integrations/Network.q.yml">quintessence/AllegroFlare/Integrations/Network.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/InventoryIndex.q.yml">quintessence/AllegroFlare/InventoryIndex.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/InventoryIndexItem.q.yml">quintessence/AllegroFlare/InventoryIndexItem.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MotionComposer/TrackView.q.yml">quintessence/AllegroFlare/MotionComposer/TrackView.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MotionFX/Sparkles.q.yml">quintessence/AllegroFlare/MotionFX/Sparkles.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MotionFX/Sparkles2.q.yml">quintessence/AllegroFlare/MotionFX/Sparkles2.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Network2/Message.q.yml">quintessence/AllegroFlare/Network2/Message.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Notifications.q.yml">quintessence/AllegroFlare/Notifications.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/NotificationsFactory.q.yml">quintessence/AllegroFlare/NotificationsFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/Configuration.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Configuration.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/Cursor.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Cursor.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/EntityFactory.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/EntityFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/Room.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Room.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/RoomDictionary.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/RoomDictionary.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/RoomFactory.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/RoomFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/Screen.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Screen.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/Script.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Script.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectItem.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectItem.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/EnterRoom.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/EnterRoom.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/SpawnDialog.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/SpawnDialog.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/Achievements.q.yml">quintessence/AllegroFlare/Screens/Achievements.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/GameOverScreen.q.yml">quintessence/AllegroFlare/Screens/GameOverScreen.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/GameWonScreen.q.yml">quintessence/AllegroFlare/Screens/GameWonScreen.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/PauseScreen.q.yml">quintessence/AllegroFlare/Screens/PauseScreen.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/Storyboard.q.yml">quintessence/AllegroFlare/Screens/Storyboard.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/TitleScreen.q.yml">quintessence/AllegroFlare/Screens/TitleScreen.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/StoryboardFactory.q.yml">quintessence/AllegroFlare/StoryboardFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/StoryboardPageFactory.q.yml">quintessence/AllegroFlare/StoryboardPageFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Testing/WithAllegroRenderingFixture.q.yml">quintessence/AllegroFlare/Testing/WithAllegroRenderingFixture.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Time.q.yml">quintessence/AllegroFlare/Time.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TimeStamper.q.yml">quintessence/AllegroFlare/TimeStamper.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/UnicodeFontViewer.q.yml">quintessence/AllegroFlare/UnicodeFontViewer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Useful3D/Triangle.q.yml">quintessence/AllegroFlare/Useful3D/Triangle.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Vec2B.q.yml">quintessence/AllegroFlare/Vec2B.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Vec2I.q.yml">quintessence/AllegroFlare/Vec2I.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/VirtualControls.q.yml">quintessence/AllegroFlare/VirtualControls.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/VirtualControlsProcessor.q.yml">quintessence/AllegroFlare/VirtualControlsProcessor.q.yml</a></li>
</ul>
<h1>Components</h1>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/AudioController.q.yml">quintessence/AllegroFlare/AudioController.q.yml</h3>
     <table>
<tr>
  <td class="private_property">sample_bin</td>
  <td class="private_property">AllegroFlare::SampleBin*</td>
</tr>
<tr>
  <td class="private_property">sound_effects_identifier_prefix</td>
  <td class="private_property">std::string</td>
</tr>
<tr>
  <td class="private_property">music_tracks_identifier_prefix</td>
  <td class="private_property">std::string</td>
</tr>
<tr>
  <td class="private_property">sound_effect_elements</td>
  <td class="private_property">std::map&lt;std::string, AllegroFlare::AudioRepositoryElement&gt;</td>
</tr>
<tr>
  <td class="private_property">music_track_elements</td>
  <td class="private_property">std::map&lt;std::string, AllegroFlare::AudioRepositoryElement&gt;</td>
</tr>
<tr>
  <td class="private_property">sound_effects</td>
  <td class="private_property">std::map&lt;std::string, AllegroFlare::Sound*&gt;</td>
</tr>
<tr>
  <td class="private_property">music_tracks</td>
  <td class="private_property">std::map&lt;std::string, AllegroFlare::Sound*&gt;</td>
</tr>
<tr>
  <td class="private_property">current_music_track_identifier</td>
  <td class="private_property">std::string</td>
</tr>
<tr>
  <td class="private_property">global_volume</td>
  <td class="private_property">float</td>
</tr>
<tr>
  <td class="private_property">output_loading_debug_to_cout</td>
  <td class="private_property">bool</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">music_tracks_loaded</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">sound_effects_loaded</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">set_and_load_sound_effect_elements(1)</td>
</tr>
<tr>
  <td class="method">set_and_load_music_track_elements(1)</td>
</tr>
<tr>
  <td class="private_method">load_sound_effects()</td>
</tr>
<tr>
  <td class="private_method">load_music_tracks()</td>
</tr>
<tr>
  <td class="private_method">destruct()</td>
</tr>
<tr>
  <td class="private_method">destruct_all()</td>
</tr>
<tr>
  <td class="private_method">destruct_all_sound_effects()</td>
</tr>
<tr>
  <td class="private_method">destruct_all_music_tracks()</td>
</tr>
<tr>
  <td class="method">stop_all()</td>
</tr>
<tr>
  <td class="private_method">stop_all_music_tracks()</td>
</tr>
<tr>
  <td class="private_method">stop_all_sound_effects()</td>
</tr>
<tr>
  <td class="method">set_global_volume(1)</td>
</tr>
<tr>
  <td class="method">play_sound_effect(1)</td>
</tr>
<tr>
  <td class="method">play_music_track(1)</td>
</tr>
<tr>
  <td class="private_method">sound_effect_element_exists(1)</td>
</tr>
<tr>
  <td class="private_method">find_sound_effect_sound_object_by_identifier(1)</td>
</tr>
<tr>
  <td class="private_method">find_sound_effect_element_by_identifier(1)</td>
</tr>
<tr>
  <td class="private_method">find_music_track_sound_object_by_identifier(1)</td>
</tr>
<tr>
  <td class="private_method">music_track_element_exists(1)</td>
</tr>
<tr>
  <td class="private_method">find_music_track_element_by_identifier(1)</td>
</tr>
<tr>
  <td class="method">dump_to_cout()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TerminalColors&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TerminalColors.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SampleBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SampleBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SampleBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SampleBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AudioRepositoryElement&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AudioRepositoryElement.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, AllegroFlare::AudioRepositoryElement&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;, &quot;AllegroFlare/AudioRepositoryElement.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, AllegroFlare::Sound*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;, &quot;AllegroFlare/Sound.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Sound*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Sound.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_audio_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_acodec_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_acodec.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/AudioRepositoryElement.q.yml">quintessence/AllegroFlare/AudioRepositoryElement.q.yml</h3>
     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">loop</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">overplay_strategy</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">overplay_strategy_is_ignore()</td>
</tr>
<tr>
  <td class="method">overplay_strategy_is_restart()</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/BackgroundFactory.q.yml">quintessence/AllegroFlare/BackgroundFactory.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">create_monoplex()</td>
</tr>
<tr>
  <td class="method">create_image(1)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Monoplex*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Monoplex.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Image*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Image.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Bone3D.q.yml">quintessence/AllegroFlare/Bone3D.q.yml</h3>
     <table>
<tr>
  <td class="property">children</td>
  <td class="property">std::vector&lt;AllegroFlare::Bone3D*&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">add_child(1)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;AllegroFlare::Bone3D*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Bone3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Bone3D*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Bone3D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Bone3DGraphRenderer.q.yml">quintessence/AllegroFlare/Bone3DGraphRenderer.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">root_bone</td>
  <td class="property">AllegroFlare::Bone3D*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">render_recursive(1)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Bone3D*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Bone3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_font_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::draw_3d_line&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful3D/Useful3D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Camera2D.q.yml">quintessence/AllegroFlare/Camera2D.q.yml</h3>
     <table>
<tr>
  <td class="property">zoom</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_zoom(1)</td>
</tr>
<tr>
  <td class="method">setup_dimentional_projection(1)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;tan&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Cubemap.q.yml">quintessence/AllegroFlare/Cubemap.q.yml</h3>
     <table>
<tr>
  <td class="property">id</td>
  <td class="property">GLuint</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;GLuint&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_opengl.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/AchievementsList.q.yml">quintessence/AllegroFlare/Elements/AchievementsList.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">achievements</td>
  <td class="property">std::vector&lt;std::tuple&lt;std::string, std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">achievements_box_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">achievements_box_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">surface_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">scrollbar_position</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">box_gutter_y</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">move_scrollbar_position(1)</td>
</tr>
<tr>
  <td class="method">set_scrollbar_position(1)</td>
</tr>
<tr>
  <td class="method">set_scrollbar_position_to_max()</td>
</tr>
<tr>
  <td class="method">infer_scrollbar_max_position()</td>
</tr>
<tr>
  <td class="method">scrollbar_is_autohidden_because_list_contents_is_smaller_than_the_container()</td>
</tr>
<tr>
  <td class="method">build_placeholder_achievements()</td>
</tr>
<tr>
  <td class="private_method">count_num_achievements_completed()</td>
</tr>
<tr>
  <td class="private_method">draw_header_title_backfill()</td>
</tr>
<tr>
  <td class="private_method">count_num_achievements()</td>
</tr>
<tr>
  <td class="private_method">build_achievements_count_string()</td>
</tr>
<tr>
  <td class="private_method">draw_achievements_list_title_text_and_completed_title_text()</td>
</tr>
<tr>
  <td class="private_method">infer_container_height()</td>
</tr>
<tr>
  <td class="private_method">infer_container_contents_height()</td>
</tr>
<tr>
  <td class="private_method">infer_container_scroll_range()</td>
</tr>
<tr>
  <td class="private_method">limit_scrollbar_position()</td>
</tr>
<tr>
  <td class="private_method">draw_achievements_list_items_and_scrollbar()</td>
</tr>
<tr>
  <td class="private_method">draw_achievement_box(5)</td>
</tr>
<tr>
  <td class="private_method">infer_icon_character_by_status(1)</td>
</tr>
<tr>
  <td class="private_method">infer_icon_color_by_status(4)</td>
</tr>
<tr>
  <td class="private_method">filter_item_title_through_status(2)</td>
</tr>
<tr>
  <td class="private_method">filter_item_description_through_status(2)</td>
</tr>
<tr>
  <td class="private_method">obtain_title_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_item_title_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_item_description_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_icon_font()</td>
</tr>
<tr>
  <td class="private_method">draw_unicode_character(6)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::tuple&lt;std::string, std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;tuple&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Scrollbar&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Scrollbar.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min, std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/AdvancingText.q.yml">quintessence/AllegroFlare/Elements/AdvancingText.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">line_height_multiplier</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">line_height_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">revealed_characters_count</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">finished</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">start()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">jump_to_end()</td>
</tr>
<tr>
  <td class="method">reveal_all_characters()</td>
</tr>
<tr>
  <td class="method">all_characters_are_revealed()</td>
</tr>
<tr>
  <td class="private_method">generate_revealed_text()</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_multiline_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min, std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Backgrounds/Base.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">activate()</td>
</tr>
<tr>
  <td class="method">deactivate()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">show()</td>
</tr>
<tr>
  <td class="method">hide()</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Backgrounds/Image.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/Image.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">image_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">image_file_location_prefix</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">reveal_counter</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">reveal_speed</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">obtain_background_bitmap()</td>
</tr>
<tr>
  <td class="method">activate()</td>
</tr>
<tr>
  <td class="method">deactivate()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">infer_opacity()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Backgrounds/Monoplex.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/Monoplex.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">monoplex_1_counter</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">monoplex_2_counter</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">monoplex_3_counter</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;sin&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Backgrounds/Parallax.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/Parallax.q.yml</h3>
     <table>
<tr>
  <td class="property">layers</td>
  <td class="property">std::vector&lt;AllegroFlare::Elements::Backgrounds::ParallaxLayer&gt;</td>
</tr>
<tr>
  <td class="property">offset_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">offset_y</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::draw_offset_textured_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;AllegroFlare::Elements::Backgrounds::ParallaxLayer&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Elements/Backgrounds/ParallaxLayer.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Backgrounds/ParallaxLayer.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/ParallaxLayer.q.yml</h3>
     <table>
<tr>
  <td class="property">anchor_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">anchor_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">offset_rate</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Base.q.yml">quintessence/AllegroFlare/Elements/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">placement</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ElementID&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ElementID.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxFactory.q.yml">quintessence/AllegroFlare/Elements/DialogBoxFactory.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">build_basic_test_dialog()</td>
</tr>
<tr>
  <td class="method">create_basic_test_dialog()</td>
</tr>
<tr>
  <td class="method">build_basic_dialog(1)</td>
</tr>
<tr>
  <td class="method">create_basic_dialog(1)</td>
</tr>
<tr>
  <td class="method">create_choice_dialog(2)</td>
</tr>
<tr>
  <td class="method">create_you_got_an_item_dialog(2)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_time&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::YouGotAnItem*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/YouGotAnItem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Choice*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Choice.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Basic*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Basic&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxFrame.q.yml">quintessence/AllegroFlare/Elements/DialogBoxFrame.q.yml</h3>
     <table>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">backfill_opacity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">backfill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">border_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">opacity</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::color::color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_current_display&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxNameTag.q.yml">quintessence/AllegroFlare/Elements/DialogBoxNameTag.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">draw_text()</td>
</tr>
<tr>
  <td class="private_method">obtain_dialog_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_current_display&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxFrame&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxFrame.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderer.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">dialog_box</td>
  <td class="property">AllegroFlare::Elements::DialogBoxes::Base*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_current_display&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringJoiner&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringJoiner.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Basic*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxFrame&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxFrame.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Choice*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Choice.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::YouGotAnItem*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/YouGotAnItem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxRenderers::ChoiceRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxRenderers::YouGotAnItemRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxRenderers::BasicRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">current_page_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">text_padding_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">text_padding_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">num_revealed_characters</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">is_finished</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">page_is_finished</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">page_finished_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">at_last_page</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">age</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">draw_special_state_empty_text(2)</td>
</tr>
<tr>
  <td class="private_method">draw_action_text(3)</td>
</tr>
<tr>
  <td class="method">draw_styled_revealed_text(3)</td>
</tr>
<tr>
  <td class="private_method">concat_text(2)</td>
</tr>
<tr>
  <td class="private_method">obtain_dialog_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_current_display&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringJoiner&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringJoiner.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Basic*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxFrame&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxFrame.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogButton&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogButton.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Interpolators::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">choice_dialog_box</td>
  <td class="property">AllegroFlare::Elements::DialogBoxes::Choice*</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">text_padding_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">text_padding_y</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">draw_prompt_text()</td>
</tr>
<tr>
  <td class="method">draw_choices_with_cursor_and_current_selection(1)</td>
</tr>
<tr>
  <td class="private_method">obtain_dialog_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_choice_dialog_box_prompt()</td>
</tr>
<tr>
  <td class="private_method">obtain_choice_dialog_box_options()</td>
</tr>
<tr>
  <td class="private_method">obtain_choice_dialog_box_cursor_position()</td>
</tr>
<tr>
  <td class="private_method">concat_text(2)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Choice*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Choice.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxFrame&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxFrame.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">item_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">item_bitmap_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">age</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">get_live_reveal_counter()</td>
</tr>
<tr>
  <td class="private_method">obtain_notification_text_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_item_name_text_font()</td>
</tr>
<tr>
  <td class="method">opaquify(1)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxFrame&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxFrame.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Interpolators::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxes/Base.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">created_at</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">infer_age()</td>
</tr>
<tr>
  <td class="method">is_type(1)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::vector&lt;std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_time&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxes/Basic.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/Basic.q.yml</h3>
     <table>
<tr>
  <td class="property">pages</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">current_page_num</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">finished</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">num_revealed_characters</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">finished_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">page_finished</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">page_finished_at</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">set_pages(1)</td>
</tr>
<tr>
  <td class="method">reset()</td>
</tr>
<tr>
  <td class="method">get_current_page_text()</td>
</tr>
<tr>
  <td class="method">get_current_page_num_chars()</td>
</tr>
<tr>
  <td class="method">advance()</td>
</tr>
<tr>
  <td class="method">next_page()</td>
</tr>
<tr>
  <td class="method">reset_current_page_counters()</td>
</tr>
<tr>
  <td class="method">num_pages()</td>
</tr>
<tr>
  <td class="method">has_no_pages()</td>
</tr>
<tr>
  <td class="method">at_last_page()</td>
</tr>
<tr>
  <td class="private_method">current_page_is_valid()</td>
</tr>
<tr>
  <td class="method">reveal_all_characters()</td>
</tr>
<tr>
  <td class="method">all_characters_are_revealed()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_time&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxes/Choice.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/Choice.q.yml</h3>
     <table>
<tr>
  <td class="property">prompt</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">options</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">cursor_position</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">get_prompt()</td>
</tr>
<tr>
  <td class="method">get_options()</td>
</tr>
<tr>
  <td class="method">get_current_selection_text()</td>
</tr>
<tr>
  <td class="method">get_current_selection_value()</td>
</tr>
<tr>
  <td class="method">move_cursor_position_down()</td>
</tr>
<tr>
  <td class="method">move_cursor_position_up()</td>
</tr>
<tr>
  <td class="private_method">has_valid_cursor_position()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxes/YouGotAnItem.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/YouGotAnItem.q.yml</h3>
     <table>
<tr>
  <td class="property">item_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">item_bitmap_identifier</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_time&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogButton.q.yml">quintessence/AllegroFlare/Elements/DialogButton.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">text_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">started_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">at_last_advance</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="private_method">render()</td>
</tr>
<tr>
  <td class="private_method">obtain_button_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_ttf_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_ttf.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min, std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/HealthBars/Basic.q.yml">quintessence/AllegroFlare/Elements/HealthBars/Basic.q.yml</h3>
     <table>
<tr>
  <td class="property">value</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">max</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">fill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">backfill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">bar_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">bar_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">min_render_threshold</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/HealthBars/Classic.q.yml">quintessence/AllegroFlare/Elements/HealthBars/Classic.q.yml</h3>
     <table>
<tr>
  <td class="property">max</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">value</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">fill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">bar_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">bar_spacing</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">bar_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">bar_stroke_thickness</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/HealthBars/Hearts.q.yml">quintessence/AllegroFlare/Elements/HealthBars/Hearts.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">max</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">value</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">fill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">empty_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">heart_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">heart_spacing</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">font_awesome_font_name</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">draw_unicode_character(6)</td>
</tr>
<tr>
  <td class="method">obtain_font_awesome_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontAwesome&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontAwesome.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;int32_t&quot;, &quot;headers&quot;=&gt;[&quot;cstdint&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Inventory.q.yml">quintessence/AllegroFlare/Elements/Inventory.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">af_inventory</td>
  <td class="property">AllegroFlare::Inventory*</td>
</tr>
<tr>
  <td class="property">inventory_index</td>
  <td class="property">AllegroFlare::InventoryIndex*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">place</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">cursor_x</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cursor_y</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">active</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">details_reveal_counter</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">details_num_revealed_characters</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">reveal_counter</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">item_in_details_pane</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">inventory_items_left_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">inventory_items_top_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">inventory_items_box_size</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">inventory_items_box_spacing</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cursor_move_sound_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">inventory_show_sound_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">inventory_hide_sound_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">sound_is_disabled</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">activate()</td>
</tr>
<tr>
  <td class="method">deactivate()</td>
</tr>
<tr>
  <td class="method">set_details_pane()</td>
</tr>
<tr>
  <td class="method">opaquify(1)</td>
</tr>
<tr>
  <td class="method">change_a(2)</td>
</tr>
<tr>
  <td class="method">inv_reveal_counter()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">draw_backframe()</td>
</tr>
<tr>
  <td class="private_method">draw_inventory_title_text()</td>
</tr>
<tr>
  <td class="private_method">draw_inventory_items()</td>
</tr>
<tr>
  <td class="private_method">draw_inventory_boxes()</td>
</tr>
<tr>
  <td class="private_method">draw_details_frame()</td>
</tr>
<tr>
  <td class="method">move_cursor_up()</td>
</tr>
<tr>
  <td class="method">move_cursor_down()</td>
</tr>
<tr>
  <td class="method">move_cursor_left()</td>
</tr>
<tr>
  <td class="method">move_cursor_right()</td>
</tr>
<tr>
  <td class="method">show()</td>
</tr>
<tr>
  <td class="method">hide()</td>
</tr>
<tr>
  <td class="method">toggle_show_hide()</td>
</tr>
<tr>
  <td class="method">disable_sound()</td>
</tr>
<tr>
  <td class="method">enable_sound()</td>
</tr>
<tr>
  <td class="method">is_sound_disabled()</td>
</tr>
<tr>
  <td class="method">is_sound_enabled()</td>
</tr>
<tr>
  <td class="private_method">has_valid_size()</td>
</tr>
<tr>
  <td class="private_method">draw_item_selection_cursor(2)</td>
</tr>
<tr>
  <td class="private_method">draw_inventory_box(2)</td>
</tr>
<tr>
  <td class="private_method">draw_inventory_item(3)</td>
</tr>
<tr>
  <td class="method">get_item_definition(1)</td>
</tr>
<tr>
  <td class="method">obtain_title_font()</td>
</tr>
<tr>
  <td class="method">obtain_description_font()</td>
</tr>
<tr>
  <td class="method">obtain_item_name_font()</td>
</tr>
<tr>
  <td class="method">obtain_details_header_font()</td>
</tr>
<tr>
  <td class="private_method">play_move_cursor_sound()</td>
</tr>
<tr>
  <td class="private_method">play_hide_inventory_sound()</td>
</tr>
<tr>
  <td class="private_method">play_show_inventory_sound()</td>
</tr>
<tr>
  <td class="method">play_sound(1)</td>
</tr>
<tr>
  <td class="method">create_placeholder_inventory_index()</td>
</tr>
<tr>
  <td class="private_method">concat_text(2)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Inventory*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Inventory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryIndex*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryIndex.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;X&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;, &quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;int, std::tuple&lt;std::string, std::string, std::string&gt;&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::tuple&lt;std::string, std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::tuple&lt;std::string, std::string, std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/LevelSelect.q.yml">quintessence/AllegroFlare/Elements/LevelSelect.q.yml</h3>
     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">levels_list</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">place</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">cursor_x</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cursor_y</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">selection_box_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">selection_box_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">selection_box_spacing_x</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">selection_box_spacing_y</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_rows</td>
  <td class="property">int</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">opaquify(1)</td>
</tr>
<tr>
  <td class="method">change_a(2)</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">draw_backfill_and_frame()</td>
</tr>
<tr>
  <td class="private_method">draw_level_select_title_text()</td>
</tr>
<tr>
  <td class="private_method">draw_level_select_boxes_and_cursor()</td>
</tr>
<tr>
  <td class="method">move_cursor_up()</td>
</tr>
<tr>
  <td class="method">move_cursor_down()</td>
</tr>
<tr>
  <td class="method">move_cursor_left()</td>
</tr>
<tr>
  <td class="method">move_cursor_right()</td>
</tr>
<tr>
  <td class="private_method">has_valid_size()</td>
</tr>
<tr>
  <td class="private_method">list_is_empty()</td>
</tr>
<tr>
  <td class="private_method">draw_selection_cursor(2)</td>
</tr>
<tr>
  <td class="private_method">draw_level_list_item_box(5)</td>
</tr>
<tr>
  <td class="private_method">activate_selected_menu_option()</td>
</tr>
<tr>
  <td class="private_method">infer_current_menu_option_value()</td>
</tr>
<tr>
  <td class="method">obtain_title_font()</td>
</tr>
<tr>
  <td class="method">obtain_description_font()</td>
</tr>
<tr>
  <td class="method">obtain_item_name_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;X&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;, &quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;int, std::tuple&lt;std::string, std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::tuple&lt;std::string, std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::tuple&lt;std::string, std::string, std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_SELECT_LEVEL&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/NotificationRenderer.q.yml">quintessence/AllegroFlare/Elements/NotificationRenderer.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">notification</td>
  <td class="property">AllegroFlare::Elements::Notifications::Base*</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">draw_box()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Notifications::Base*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Notifications/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::NotificationRenderers::AchievementUnlocked&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Notifications::AchievementUnlocked&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Notifications/AchievementUnlocked.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked.q.yml">quintessence/AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">created_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">name</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">draw_achievement_box(2)</td>
</tr>
<tr>
  <td class="private_method">infer_icon_character_by_status(1)</td>
</tr>
<tr>
  <td class="private_method">infer_icon_color_by_status(4)</td>
</tr>
<tr>
  <td class="private_method">obtain_item_title_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_item_description_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_icon_font()</td>
</tr>
<tr>
  <td class="private_method">draw_unicode_character(6)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Notifications/AchievementUnlocked.q.yml">quintessence/AllegroFlare/Elements/Notifications/AchievementUnlocked.q.yml</h3>
     <table>
<tr>
  <td class="property">name</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Notifications::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Notifications/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Notifications/Base.q.yml">quintessence/AllegroFlare/Elements/Notifications/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">created_at</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">infer_age()</td>
</tr>
<tr>
  <td class="method">is_type(1)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::vector&lt;std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_time&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/NotificationsRenderer.q.yml">quintessence/AllegroFlare/Elements/NotificationsRenderer.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">notifications</td>
  <td class="property">std::vector&lt;AllegroFlare::Elements::Notifications::Base*&gt;</td>
</tr>
<tr>
  <td class="property">surface_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">notification_box_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">notification_box_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">notification_vertical_gutter</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;AllegroFlare::Elements::Notifications::Base*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Elements/Notifications/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::NotificationRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/NotificationRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/PlayingCards/Card.q.yml">quintessence/AllegroFlare/Elements/PlayingCards/Card.q.yml</h3>
     <table>
<tr>
  <td class="property">value</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">suit</td>
  <td class="property">int</td>
</tr>
    </table>
     <table>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/PlayingCards/Deck.q.yml">quintessence/AllegroFlare/Elements/PlayingCards/Deck.q.yml</h3>
     <table>
<tr>
  <td class="property">cards</td>
  <td class="property">std::vector&lt;AllegroFlare::Elements::PlayingCards::Card&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">put_card_on_top(1)</td>
</tr>
<tr>
  <td class="method">shuffle()</td>
</tr>
<tr>
  <td class="method">draw_card()</td>
</tr>
<tr>
  <td class="method">empty()</td>
</tr>
<tr>
  <td class="method">clear()</td>
</tr>
<tr>
  <td class="method">num_cards()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;AllegroFlare::Elements::PlayingCards::Card&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Elements/PlayingCards/Card.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::PlayingCards::Card&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Elements/PlayingCards/Card.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::shuffle&quot;, &quot;headers&quot;=&gt;[&quot;random&quot;, &quot;algorithm&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/PlayingCards/DeckFactory.q.yml">quintessence/AllegroFlare/Elements/PlayingCards/DeckFactory.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">generate_standard_52_card_deck()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::PlayingCards::Deck&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/PlayingCards/Deck.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/ScrollBar.q.yml">quintessence/AllegroFlare/Elements/ScrollBar.q.yml</h3>
     <table>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">position</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">bar_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">handle_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">handle_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">rail_thickness</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">handle_thickness</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Stopwatch.q.yml">quintessence/AllegroFlare/Elements/Stopwatch.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">timer</td>
  <td class="property">AllegroFlare::Timer*</td>
</tr>
<tr>
  <td class="property">color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
     <table>
<tr>
  <td class="private_method">fit_placement_width_and_height_to_stopwatch()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">build_ellapsed_time_str()</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TimerFormatter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TimerFormatter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timer*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Storyboard.q.yml">quintessence/AllegroFlare/Elements/Storyboard.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">pages</td>
  <td class="property">std::vector&lt;AllegroFlare::Elements::StoryboardPages::Base *&gt;</td>
</tr>
<tr>
  <td class="property">button_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">current_page_num</td>
  <td class="property">intptr_t</td>
</tr>
<tr>
  <td class="property">can_advance_to_next_page</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">can_advance_started_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">finished</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">reset()</td>
</tr>
<tr>
  <td class="method">permit_advancing_page()</td>
</tr>
<tr>
  <td class="method">deny_advancing_page()</td>
</tr>
<tr>
  <td class="method">advance()</td>
</tr>
<tr>
  <td class="method">advance_page()</td>
</tr>
<tr>
  <td class="private_method">render_next_button()</td>
</tr>
<tr>
  <td class="method">infer_at_last_page()</td>
</tr>
<tr>
  <td class="method">infer_at_or_past_last_page()</td>
</tr>
<tr>
  <td class="method">infer_at_last_advance()</td>
</tr>
<tr>
  <td class="method">infer_current_page()</td>
</tr>
<tr>
  <td class="private_method">obtain_next_button_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Base*&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Elements/StoryboardPages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;AllegroFlare::Elements::StoryboardPages::Base *&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Elements/StoryboardPages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_multiline_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min, std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/StoryboardPages/AdvancingText.q.yml">quintessence/AllegroFlare/Elements/StoryboardPages/AdvancingText.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">top_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">left_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">right_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">line_height_multiplier</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">line_height_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">revealed_characters_count</td>
  <td class="property">int</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">start()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">advance()</td>
</tr>
<tr>
  <td class="method">generate_revealed_text()</td>
</tr>
<tr>
  <td class="method">reveal_all_characters()</td>
</tr>
<tr>
  <td class="method">all_characters_are_revealed()</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_next_button_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_multiline_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min, std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/StoryboardPages/Base.q.yml">quintessence/AllegroFlare/Elements/StoryboardPages/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">finished</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">start()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">advance()</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/StoryboardPages/Image.q.yml">quintessence/AllegroFlare/Elements/StoryboardPages/Image.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">duration_to_advance_sec</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">reveal_style</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">started_at</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">start()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">advance()</td>
</tr>
<tr>
  <td class="method">infer_age()</td>
</tr>
<tr>
  <td class="method">modify_params_for_hide(2)</td>
</tr>
<tr>
  <td class="method">modify_params_for_reveal(2)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min, std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/StoryboardPages/Text.q.yml">quintessence/AllegroFlare/Elements/StoryboardPages/Text.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">top_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">left_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">right_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">line_height_multiplier</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">line_height_padding</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">start()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">advance()</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_multiline_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Text.q.yml">quintessence/AllegroFlare/Elements/Text.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">fit_placement_width_and_height_to_text()</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/EncoderDecoders/Base62.q.yml">quintessence/AllegroFlare/EncoderDecoders/Base62.q.yml</h3>
     <table>
<tr>
  <td class="property">CHARACTERS_LOWERCASE_FIRST</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">encode(2)</td>
</tr>
<tr>
  <td class="method">decode(1)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::size_t&quot;, &quot;headers&quot;=&gt;[&quot;cstddef&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/EventEmitter.q.yml">quintessence/AllegroFlare/EventEmitter.q.yml</h3>
     <table>
<tr>
  <td class="property">event_source</td>
  <td class="property">ALLEGRO_EVENT_SOURCE</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">emit_event(5)</td>
</tr>
<tr>
  <td class="method">emit_switch_screen_event(1)</td>
</tr>
<tr>
  <td class="method">emit_exit_game_event()</td>
</tr>
<tr>
  <td class="method">emit_show_input_hints_bar_event()</td>
</tr>
<tr>
  <td class="method">emit_hide_input_hints_bar_event()</td>
</tr>
<tr>
  <td class="method">emit_set_input_hints_bar_event(1)</td>
</tr>
<tr>
  <td class="method">emit_set_input_hints_bar_opacity_event(1)</td>
</tr>
<tr>
  <td class="method">emit_post_unlocked_achievement_notification_event(1)</td>
</tr>
<tr>
  <td class="method">emit_play_sound_effect_event(1)</td>
</tr>
<tr>
  <td class="method">emit_play_music_track_event(1)</td>
</tr>
<tr>
  <td class="method">emit_virtual_controls_button_up_event(1)</td>
</tr>
<tr>
  <td class="method">emit_virtual_controls_button_down_event(1)</td>
</tr>
<tr>
  <td class="method">emit_game_event(1)</td>
</tr>
<tr>
  <td class="method">emit_virtual_controls_axis_change_event(3)</td>
</tr>
<tr>
  <td class="method">TODO()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_POST_ACHIEVEMENT_UNLOCKED_NOTIFICATION&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_SHOW_INPUT_HINTS_BAR&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_HIDE_INPUT_HINTS_BAR&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR_OPACITY&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT_SOURCE&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_EXIT_GAME&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_SWITCH_SCREEN&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEvent&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GameEvent.q.yml">quintessence/AllegroFlare/GameEvent.q.yml</h3>
     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">data</td>
  <td class="property">AllegroFlare::GameEventDatas::Base*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">get_name()</td>
</tr>
<tr>
  <td class="method">is_type(1)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GameEventDatas/Base.q.yml">quintessence/AllegroFlare/GameEventDatas/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Generators/LoremIpsumGenerator.q.yml">quintessence/AllegroFlare/Generators/LoremIpsumGenerator.q.yml</h3>
     <table>
<tr>
  <td class="property">source_text</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">generate_characters(1)</td>
</tr>
<tr>
  <td class="method">generate_characters_about(1)</td>
</tr>
<tr>
  <td class="method">generate_words(1)</td>
</tr>
<tr>
  <td class="method">generate_sentences(1)</td>
</tr>
<tr>
  <td class="method">generate_paragraphs(1)</td>
</tr>
<tr>
  <td class="private_method">generate_source_text()</td>
</tr>
<tr>
  <td class="private_method">split(2)</td>
</tr>
<tr>
  <td class="private_method">join(2)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::php::str_replace&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/UsefulPHP.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Generators/PersonNameGenerator.q.yml">quintessence/AllegroFlare/Generators/PersonNameGenerator.q.yml</h3>
     <table>
<tr>
  <td class="property">random</td>
  <td class="property">AllegroFlare::Random</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">victorian_boy_names</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">victorian_girl_names</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">next_boy_name_index</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">next_girl_name_index</td>
  <td class="property">int</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">randomize(1)</td>
</tr>
<tr>
  <td class="method">generate_boy_name()</td>
</tr>
<tr>
  <td class="method">generate_girl_name()</td>
</tr>
<tr>
  <td class="method">build_victorian_boy_name_list()</td>
</tr>
<tr>
  <td class="method">build_victorian_girl_name_list()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Random&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Random.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/InputDiagrams/KeyboardKey.q.yml">quintessence/AllegroFlare/InputDiagrams/KeyboardKey.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">keyboard_key_str</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">keyboard_key_box_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">keyboard_key_box_min_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_keyboard_key_box_height(1)</td>
</tr>
<tr>
  <td class="method">render(1)</td>
</tr>
<tr>
  <td class="method">calculate_width()</td>
</tr>
<tr>
  <td class="method">guarantee_even_number(1)</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_font_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_ttf_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_ttf.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/InputDiagrams/KeyboardKeyCombo.q.yml">quintessence/AllegroFlare/InputDiagrams/KeyboardKeyCombo.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">keyboard_combo_tokens</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">keyboard_key_font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">keyboard_key_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">keyboard_key_box_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">keyboard_key_box_min_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">token_SPACE_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">token_SPACER_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">token_SEPARATOR_width</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_keyboard_key_box_height(1)</td>
</tr>
<tr>
  <td class="method">render(1)</td>
</tr>
<tr>
  <td class="method">calculate_width()</td>
</tr>
<tr>
  <td class="method">guarantee_even_number(1)</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_font_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_ttf_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_ttf.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InputDiagrams::KeyboardKey&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InputDiagrams/KeyboardKey.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/InputHints.q.yml">quintessence/AllegroFlare/InputHints.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">input_hints_tokens</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">keyboard_key_combo_tokens</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">bar_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">surface_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">int</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">draw_inputs_bar()</td>
</tr>
<tr>
  <td class="method">draw_keyboard_key_combo_tokens()</td>
</tr>
<tr>
  <td class="method">draw_inputs_hints_tokens()</td>
</tr>
<tr>
  <td class="method">build_placeholder_input_hints_tokens()</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_font_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_ttf_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_ttf.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InputDiagrams::KeyboardKeyCombo&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InputDiagrams/KeyboardKeyCombo.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Integrations/Network.q.yml">quintessence/AllegroFlare/Integrations/Network.q.yml</h3>
     <table>
<tr>
  <td class="property">global_abort</td>
  <td class="property">std::atomic&lt;bool&gt;</td>
</tr>
<tr>
  <td class="property">captured_callback_messages</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">get_global_abort_ptr()</td>
</tr>
<tr>
  <td class="method">SetUp()</td>
</tr>
<tr>
  <td class="method">TearDown()</td>
</tr>
<tr>
  <td class="method">run_server_blocking(1)</td>
</tr>
<tr>
  <td class="method">run_client_blocking(5)</td>
</tr>
<tr>
  <td class="method">simple_capture_callback(2)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;void*&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::mutex*&quot;, &quot;headers&quot;=&gt;[&quot;mutex&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::atomic&lt;bool&gt;&quot;, &quot;headers&quot;=&gt;[&quot;atomic&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::atomic&lt;bool&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;atomic&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:testing::Test&quot;, &quot;headers&quot;=&gt;[&quot;gtest/gtest.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Network2::Client&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Network2/Client.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Network2::Server&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Network2/Server.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;(void (*callback)(std::string))&quot;, &quot;headers&quot;=&gt;[&quot;string&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/InventoryIndex.q.yml">quintessence/AllegroFlare/InventoryIndex.q.yml</h3>
     <table>
<tr>
  <td class="property">index</td>
  <td class="property">std::map&lt;int, AllegroFlare::InventoryIndexItem&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">size()</td>
</tr>
<tr>
  <td class="method">exists(1)</td>
</tr>
<tr>
  <td class="method">at(1)</td>
</tr>
<tr>
  <td class="method">build_placeholder_inventory_index()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;int, AllegroFlare::InventoryIndexItem&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;AllegroFlare/InventoryIndexItem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryIndex&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryIndex.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryIndexItem&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryIndexItem.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/InventoryIndexItem.q.yml">quintessence/AllegroFlare/InventoryIndexItem.q.yml</h3>
     <table>
<tr>
  <td class="property">title</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">bitmap_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">description</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">to_tuple()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::tuple&lt;std::string, std::string, std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;tuple&quot;, &quot;string&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MotionComposer/TrackView.q.yml">quintessence/AllegroFlare/MotionComposer/TrackView.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">track</td>
  <td class="property">AllegroFlare::Timeline::Track*</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">value_min</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">value_max</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">selection_cursor_x</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">icon_font_size</td>
  <td class="property">int</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">draw_selected_node_icon(2)</td>
</tr>
<tr>
  <td class="private_method">draw_node_icon(2)</td>
</tr>
<tr>
  <td class="private_method">draw_centered_unicode_character(6)</td>
</tr>
<tr>
  <td class="private_method">obtain_icon_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_bigger_icon_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_track_values_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timeline::Track*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timeline/Track.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MotionFX/Sparkles.q.yml">quintessence/AllegroFlare/MotionFX/Sparkles.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">particles</td>
  <td class="property">std::vector&lt;std::tuple&lt;float, float, float, ALLEGRO_COLOR&gt;&gt;</td>
</tr>
<tr>
  <td class="property">created_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">main_star_placement</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">is_finished()</td>
</tr>
<tr>
  <td class="method">infer_age()</td>
</tr>
<tr>
  <td class="private_method">obtain_icon_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_mini_icon_font()</td>
</tr>
<tr>
  <td class="private_method">draw_centered_unicode_character(6)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color::Gold&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::tuple&lt;float, float, float, ALLEGRO_COLOR&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;tuple&quot;, &quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;sin&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;cos&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MotionFX/Sparkles2.q.yml">quintessence/AllegroFlare/MotionFX/Sparkles2.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">actor_manager</td>
  <td class="property">AllegroFlare::Timeline::ActorManager</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">build_friend_star_script_lines(1)</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">obtain_star_bitmap()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timeline::ActorManager&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timeline/ActorManager.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timeline::Actor2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timeline/Actor2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Interpolators::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Network2/Message.q.yml">quintessence/AllegroFlare/Network2/Message.q.yml</h3>
     <table>
<tr>
  <td class="property">HEADER_LENGTH</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">MAX_BODY_LENGTH</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">MAGIC_HEADER_CHUNK</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">data</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">body_length</td>
  <td class="property">std::size_t</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">todo()</td>
</tr>
<tr>
  <td class="method">data_ptr()</td>
</tr>
<tr>
  <td class="method">body_ptr()</td>
</tr>
<tr>
  <td class="method">length()</td>
</tr>
<tr>
  <td class="method">set_body_length(1)</td>
</tr>
<tr>
  <td class="method">set_body(1)</td>
</tr>
<tr>
  <td class="method">get_header()</td>
</tr>
<tr>
  <td class="method">encode_header()</td>
</tr>
<tr>
  <td class="method">first_4_chars_hash_of(1)</td>
</tr>
<tr>
  <td class="method">body_size_base62()</td>
</tr>
<tr>
  <td class="method">ignore()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;chat_message&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Network2/inc/chat_message.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;char*&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;char[16 + 512]&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::size_t&quot;, &quot;headers&quot;=&gt;[&quot;cstddef&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EncoderDecoders::Base62&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EncoderDecoders/Base62.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SHA2&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SHA2.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Notifications.q.yml">quintessence/AllegroFlare/Notifications.q.yml</h3>
     <table>
<tr>
  <td class="property">notifications</td>
  <td class="property">std::vector&lt;AllegroFlare::Elements::Notifications::Base*&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">size()</td>
</tr>
<tr>
  <td class="method">add(1)</td>
</tr>
<tr>
  <td class="method">select_all_order_by_created_at_desc()</td>
</tr>
<tr>
  <td class="method">select_created_at_since_order_by_created_at(1)</td>
</tr>
<tr>
  <td class="method">destroy_all()</td>
</tr>
<tr>
  <td class="method">sort_by_created_at_desc_func(2)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;AllegroFlare::Elements::Notifications::Base*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Elements/Notifications/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Notifications::Base*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Notifications/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/NotificationsFactory.q.yml">quintessence/AllegroFlare/NotificationsFactory.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">create_achievement_unlocked_notification(1)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Notifications::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Notifications/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Notifications::AchievementUnlocked&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Notifications/AchievementUnlocked.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Notifications::AchievementUnlocked*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Notifications/AchievementUnlocked.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/Configuration.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Configuration.q.yml</h3>
     <table>
<tr>
  <td class="property">inventory_index</td>
  <td class="property">AllegroFlare::InventoryIndex</td>
</tr>
<tr>
  <td class="property">af_inventory</td>
  <td class="property">AllegroFlare::Inventory</td>
</tr>
<tr>
  <td class="property">flags</td>
  <td class="property">AllegroFlare::Inventory</td>
</tr>
<tr>
  <td class="property">entity_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;</td>
</tr>
<tr>
  <td class="property">room_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Room*&gt;</td>
</tr>
<tr>
  <td class="property">entity_room_associations</td>
  <td class="property">std::map&lt;std::string, std::string&gt;</td>
</tr>
<tr>
  <td class="property">script_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Script&gt;</td>
</tr>
<tr>
  <td class="property">starting_in_room_identifier</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Inventory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Inventory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryIndex&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryIndex.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Room*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;, &quot;AllegroFlare/Prototypes/FixedRoom2D/Room.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Script&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;AllegroFlare/Prototypes/FixedRoom2D/Script.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">load_original_gametest_default(4)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Inventory*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Inventory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryIndex*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryIndex.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Room*&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;, &quot;AllegroFlare/Prototypes/FixedRoom2D/Room.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Script&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;AllegroFlare/Prototypes/FixedRoom2D/Script.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, std::string&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::RoomFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/RoomFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Configuration&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Configuration.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader.q.yml</h3>
     <table>
<tr>
  <td class="property">source_configuration</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::Configuration*</td>
</tr>
<tr>
  <td class="property">destination_inventory_index</td>
  <td class="property">AllegroFlare::InventoryIndex*</td>
</tr>
<tr>
  <td class="property">destination_af_inventory</td>
  <td class="property">AllegroFlare::Inventory*</td>
</tr>
<tr>
  <td class="property">destination_flags</td>
  <td class="property">AllegroFlare::Inventory*</td>
</tr>
<tr>
  <td class="property">destination_entity_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;*</td>
</tr>
<tr>
  <td class="property">destination_room_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Room*&gt;*</td>
</tr>
<tr>
  <td class="property">destination_entity_room_associations</td>
  <td class="property">std::map&lt;std::string, std::string&gt;*</td>
</tr>
<tr>
  <td class="property">destination_script_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Script&gt;*</td>
</tr>
<tr>
  <td class="property">starting_in_room_identifier</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">load_from_source_configuration()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Inventory*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Inventory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryIndex*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryIndex.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Room*&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;, &quot;AllegroFlare/Prototypes/FixedRoom2D/Room.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Script&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;AllegroFlare/Prototypes/FixedRoom2D/Script.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, std::string&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::RoomFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/RoomFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Configuration*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Configuration.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/Cursor.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Cursor.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">icon_offset_placement</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">info_text_offset_placement</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">info_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">info_text_flags</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">icon_character_num</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">cursor_last_set_at</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">draw()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">move(2)</td>
</tr>
<tr>
  <td class="method">move_to(2)</td>
</tr>
<tr>
  <td class="method">clear_info_text()</td>
</tr>
<tr>
  <td class="method">set_cursor_to_pointer()</td>
</tr>
<tr>
  <td class="method">set_cursor_to_grab()</td>
</tr>
<tr>
  <td class="private_method">draw_unicode_character(4)</td>
</tr>
<tr>
  <td class="private_method">obtain_cursor_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_info_text_font()</td>
</tr>
<tr>
  <td class="private_method">draw_cursor()</td>
</tr>
<tr>
  <td class="private_method">draw_info_text()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">placement</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">on_cursor_interact_script_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">cursor_is_over</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">cursor_entered_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cursor_exited_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cursor_insights_are_hidden</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">show_hover_as_hue_change</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">hidden</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">on_cursor_enter()</td>
</tr>
<tr>
  <td class="method">on_cursor_leave()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ElementID&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ElementID.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.q.yml</h3>
     <table>
<tr>
  <td class="property">entity_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;*</td>
</tr>
<tr>
  <td class="property">entity_room_associations</td>
  <td class="property">std::map&lt;std::string, std::string&gt;*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">select_all_in_room_ordered_by_id(1)</td>
</tr>
<tr>
  <td class="method">select_all()</td>
</tr>
<tr>
  <td class="method">find_dictionary_name_of_entity_that_cursor_is_now_over()</td>
</tr>
<tr>
  <td class="method">find_entity_by_dictionary_name(1)</td>
</tr>
<tr>
  <td class="method">order_by_id(1)</td>
</tr>
<tr>
  <td class="method">get_entities_by_entity_names(1)</td>
</tr>
<tr>
  <td class="method">select_all_entity_names_in_room_name(1)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;int, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;string&quot;, &quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, std::string&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/EntityFactory.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/EntityFactory.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">create_chair_entity(2)</td>
</tr>
<tr>
  <td class="method">create_entity(6)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">audio_controller</td>
  <td class="property">AllegroFlare::AudioController*</td>
</tr>
<tr>
  <td class="property">inventory_index</td>
  <td class="property">AllegroFlare::InventoryIndex</td>
</tr>
<tr>
  <td class="property">af_inventory</td>
  <td class="property">AllegroFlare::Inventory</td>
</tr>
<tr>
  <td class="property">inventory_window</td>
  <td class="property">AllegroFlare::Elements::Inventory</td>
</tr>
<tr>
  <td class="property">flags</td>
  <td class="property">AllegroFlare::Inventory</td>
</tr>
<tr>
  <td class="property">entity_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;</td>
</tr>
<tr>
  <td class="property">room_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Room*&gt;</td>
</tr>
<tr>
  <td class="property">entity_room_associations</td>
  <td class="property">std::map&lt;std::string, std::string&gt;</td>
</tr>
<tr>
  <td class="property">script_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Script&gt;</td>
</tr>
<tr>
  <td class="property">script_runner</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::ScriptRunner</td>
</tr>
<tr>
  <td class="property">entity_collection_helper</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper</td>
</tr>
<tr>
  <td class="property">current_room</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::Room*</td>
</tr>
<tr>
  <td class="property">room_shader</td>
  <td class="property">AllegroFlare::Shader*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">active_dialog</td>
  <td class="property">AllegroFlare::Elements::DialogBoxes::Base*</td>
</tr>
<tr>
  <td class="property">paused</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">subscribed_to_game_event_names</td>
  <td class="property">std::set&lt;std::string&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_font_bin(1)</td>
</tr>
<tr>
  <td class="method">get_subscribed_to_game_event_names()</td>
</tr>
<tr>
  <td class="method">is_subscribed_to_game_event_name(1)</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">load_from_configuration_and_start(1)</td>
</tr>
<tr>
  <td class="method">load_gametest_configuration_and_start()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">enter_room(1)</td>
</tr>
<tr>
  <td class="method">unhover_any_and_all_entities()</td>
</tr>
<tr>
  <td class="method">reset_cursors_to_default_in_all_rooms()</td>
</tr>
<tr>
  <td class="method">get_current_room_dictionary_name(1)</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">process_subscribed_to_game_event(1)</td>
</tr>
<tr>
  <td class="private_method">process_interaction_event(1)</td>
</tr>
<tr>
  <td class="private_method">process_script_event(1)</td>
</tr>
<tr>
  <td class="method">render_entities_in_current_room()</td>
</tr>
<tr>
  <td class="method">get_entities_in_current_room()</td>
</tr>
<tr>
  <td class="method">get_dictionary_name_of_current_room()</td>
</tr>
<tr>
  <td class="method">update_all_rooms()</td>
</tr>
<tr>
  <td class="method">suspend_all_rooms()</td>
</tr>
<tr>
  <td class="method">resume_all_rooms()</td>
</tr>
<tr>
  <td class="method">pause_game()</td>
</tr>
<tr>
  <td class="method">unpause_game()</td>
</tr>
<tr>
  <td class="method">show_inventory()</td>
</tr>
<tr>
  <td class="method">hide_inventory()</td>
</tr>
<tr>
  <td class="method">toggle_inventory()</td>
</tr>
<tr>
  <td class="method">inventory_is_open()</td>
</tr>
<tr>
  <td class="method">advance_dialog()</td>
</tr>
<tr>
  <td class="method">dialog_is_finished()</td>
</tr>
<tr>
  <td class="method">shutdown_dialog()</td>
</tr>
<tr>
  <td class="method">activate_primary_action()</td>
</tr>
<tr>
  <td class="method">move_cursor_up()</td>
</tr>
<tr>
  <td class="method">move_cursor_down()</td>
</tr>
<tr>
  <td class="method">move_cursor_left()</td>
</tr>
<tr>
  <td class="method">move_cursor_right()</td>
</tr>
<tr>
  <td class="method">move_cursor(2)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Cursor&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Cursor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AudioController*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AudioController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Room*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Room.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Room*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;, &quot;AllegroFlare/Prototypes/FixedRoom2D/Room.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Script&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;AllegroFlare/Prototypes/FixedRoom2D/Script.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptRunner&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::InteractionEventData&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Inventory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Inventory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::SpawnDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/SpawnDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectItem&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectItem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::EnterRoom&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/EnterRoom.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEvent*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EventNames::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::RoomFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/RoomFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Inventory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Inventory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryIndex&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryIndex.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ConfigurationLoader&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ConfigurationFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Configuration&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Configuration.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shader*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shader.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData.q.yml</h3>
     <table>
<tr>
  <td class="property">item_interacted_with</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">cursor_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cursor_y</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/Room.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Room.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">entity_collection_helper</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper*</td>
</tr>
<tr>
  <td class="property">cursor</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::Cursor</td>
</tr>
<tr>
  <td class="property">suspended</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">suspended_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">suspend()</td>
</tr>
<tr>
  <td class="method">resume()</td>
</tr>
<tr>
  <td class="method">show()</td>
</tr>
<tr>
  <td class="method">hide()</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">render(1)</td>
</tr>
<tr>
  <td class="method">interact_with_item_under_cursor()</td>
</tr>
<tr>
  <td class="method">move_cursor(3)</td>
</tr>
<tr>
  <td class="method">reset_cursor_to_default()</td>
</tr>
<tr>
  <td class="private_method">emit_interaction_event(3)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Cursor&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Cursor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::RoomDictionary&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/RoomDictionary.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Script&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;AllegroFlare/Prototypes/FixedRoom2D/Script.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptRunner&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::InteractionEventData&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EventNames::INTERACTION_EVENT_NAME&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, std::string&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/RoomDictionary.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/RoomDictionary.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">run()</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/RoomFactory.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/RoomFactory.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">entity_collection_helper</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">create_room(2)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Room*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Room.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;, &quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, std::string&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/Screen.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Screen.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">audio_controller</td>
  <td class="property">AllegroFlare::AudioController*</td>
</tr>
<tr>
  <td class="property">fixed_room_2d</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::FixedRoom2D</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_bitmap_bin(1)</td>
</tr>
<tr>
  <td class="method">set_font_bin(1)</td>
</tr>
<tr>
  <td class="method">set_event_emitter(1)</td>
</tr>
<tr>
  <td class="method">set_audio_controller(1)</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">load_gametest_configuration_and_start()</td>
</tr>
<tr>
  <td class="method">load_game_configuration_and_start(1)</td>
</tr>
<tr>
  <td class="method">on_activate()</td>
</tr>
<tr>
  <td class="method">game_event_func(1)</td>
</tr>
<tr>
  <td class="method">on_deactivate()</td>
</tr>
<tr>
  <td class="method">primary_timer_func()</td>
</tr>
<tr>
  <td class="method">key_char_func(1)</td>
</tr>
<tr>
  <td class="private_method">emit_event_to_set_input_hints()</td>
</tr>
<tr>
  <td class="private_method">emit_event_to_set_input_hints_bar_to_inventory_controls()</td>
</tr>
<tr>
  <td class="private_method">emit_event_to_set_input_hints_bar_to_room_controls()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::RoomDictionary&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/RoomDictionary.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::FixedRoom2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEvent*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EventNames::INTERACTION_EVENT_NAME&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::InteractionEventData*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AudioController*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AudioController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Configuration&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Configuration.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/Script.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Script.q.yml</h3>
     <table>
<tr>
  <td class="property">lines</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">current_line_num</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">markers_index</td>
  <td class="property">std::map&lt;std::string, int&gt;</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">finished</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">get_current_line_text()</td>
</tr>
<tr>
  <td class="method">goto_next_line()</td>
</tr>
<tr>
  <td class="method">goto_marker(1)</td>
</tr>
<tr>
  <td class="method">goto_line_num(1)</td>
</tr>
<tr>
  <td class="method">at_last_line()</td>
</tr>
<tr>
  <td class="private_method">at_valid_line()</td>
</tr>
<tr>
  <td class="private_method">infer_current_line_index_num()</td>
</tr>
<tr>
  <td class="method">parse_command_and_argument(1)</td>
</tr>
<tr>
  <td class="method">build_markers_index(1)</td>
</tr>
<tr>
  <td class="method">is_valid_command_string(1)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::pair&lt;std::string, std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::php::trim&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/UsefulPHP.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, int&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectItem.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectItem.q.yml</h3>
     <table>
<tr>
  <td class="property">item_dictionary_name_to_collect</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/EnterRoom.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/EnterRoom.q.yml</h3>
     <table>
<tr>
  <td class="property">room_dictionary_name_to_enter</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/SpawnDialog.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/SpawnDialog.q.yml</h3>
     <table>
<tr>
  <td class="property">dialog_pages</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner.q.yml</h3>
     <table>
<tr>
  <td class="property">audio_controller</td>
  <td class="property">AllegroFlare::AudioController*</td>
</tr>
<tr>
  <td class="property">af_inventory</td>
  <td class="property">AllegroFlare::Inventory*</td>
</tr>
<tr>
  <td class="property">inventory_window</td>
  <td class="property">AllegroFlare::Elements::Inventory*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">script_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Script&gt;*</td>
</tr>
<tr>
  <td class="property">flags</td>
  <td class="property">AllegroFlare::Inventory*</td>
</tr>
<tr>
  <td class="property">current_internally_running_script</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::Script</td>
</tr>
<tr>
  <td class="property">script_freshly_loaded_via_OPEN_SCRIPT</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">paused_for_dialog_to_finish</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">load_script_by_dictionary_name(1)</td>
</tr>
<tr>
  <td class="private_method">load_script_lines(1)</td>
</tr>
<tr>
  <td class="method">play_or_resume()</td>
</tr>
<tr>
  <td class="private_method">parse_and_run_line(3)</td>
</tr>
<tr>
  <td class="method">parse_command_and_argument(1)</td>
</tr>
<tr>
  <td class="private_method">emit_script_event(1)</td>
</tr>
<tr>
  <td class="private_method">split(2)</td>
</tr>
<tr>
  <td class="private_method">tokenize(2)</td>
</tr>
<tr>
  <td class="private_method">assert_min_token_count(2)</td>
</tr>
<tr>
  <td class="private_method">assert_token_count_eq(2)</td>
</tr>
<tr>
  <td class="private_method">assert_odd_token_count(2)</td>
</tr>
<tr>
  <td class="private_method">trim(1)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AudioController*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AudioController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::pair&lt;std::string, std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Inventory*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Inventory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Inventory*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Inventory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Script&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Script.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Script&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;AllegroFlare/Prototypes/FixedRoom2D/Script.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EventNames::SCRIPT_EVENT_NAME&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::SpawnDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/SpawnDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectItem&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectItem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::EnterRoom&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/EnterRoom.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/Achievements.q.yml">quintessence/AllegroFlare/Screens/Achievements.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">achievements</td>
  <td class="property">AllegroFlare::Achievements*</td>
</tr>
<tr>
  <td class="property">scrollbar_dest_position</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">achievements_list</td>
  <td class="property">AllegroFlare::Elements::AchievementsList</td>
</tr>
<tr>
  <td class="property">game_event_name_to_emit_on_return</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_font_bin(1)</td>
</tr>
<tr>
  <td class="method">refresh_achievements_list()</td>
</tr>
<tr>
  <td class="method">set_event_emitter(1)</td>
</tr>
<tr>
  <td class="method">on_activate()</td>
</tr>
<tr>
  <td class="method">on_deactivate()</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">primary_timer_func()</td>
</tr>
<tr>
  <td class="private_method">update()</td>
</tr>
<tr>
  <td class="private_method">move_scrollbar_position_to(1)</td>
</tr>
<tr>
  <td class="private_method">move_scrollbar_position_up()</td>
</tr>
<tr>
  <td class="private_method">move_scrollbar_position_down()</td>
</tr>
<tr>
  <td class="method">virtual_control_button_down_func(3)</td>
</tr>
<tr>
  <td class="private_method">render()</td>
</tr>
<tr>
  <td class="method">set_placeholder_achievements()</td>
</tr>
<tr>
  <td class="method">build_achievements()</td>
</tr>
<tr>
  <td class="private_method">limit_scrollbar_dest_position()</td>
</tr>
<tr>
  <td class="private_method">emit_event_to_set_input_hints()</td>
</tr>
<tr>
  <td class="method">infer_scrollbar_is_showing()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Achievements*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Achievements.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::AchievementsList&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/AchievementsList.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::tuple&lt;std::string, std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;tuple&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControls&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControls.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min, std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/GameOverScreen.q.yml">quintessence/AllegroFlare/Screens/GameOverScreen.q.yml</h3>
     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">menu_options</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">cursor_position</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="private_method">move_cursor_up()</td>
</tr>
<tr>
  <td class="private_method">move_cursor_down()</td>
</tr>
<tr>
  <td class="private_method">select_menu_option()</td>
</tr>
<tr>
  <td class="method">primary_timer_func()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">draw_primary_text()</td>
</tr>
<tr>
  <td class="method">draw_menu()</td>
</tr>
<tr>
  <td class="private_method">infer_current_menu_option_value()</td>
</tr>
<tr>
  <td class="private_method">infer_current_menu_option_label()</td>
</tr>
<tr>
  <td class="private_method">obtain_title_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_menu_font()</td>
</tr>
<tr>
  <td class="method">virtual_control_button_down_func(3)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControls&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControls.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/GameWonScreen.q.yml">quintessence/AllegroFlare/Screens/GameWonScreen.q.yml</h3>
     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">game_event_name_to_emit_on_submission</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">primary_timer_func()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">draw_primary_text()</td>
</tr>
<tr>
  <td class="method">draw_instruction_text()</td>
</tr>
<tr>
  <td class="private_method">obtain_title_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_instruction_font()</td>
</tr>
<tr>
  <td class="method">virtual_control_button_down_func(3)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_START_TITLE_SCREEN&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControls&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControls.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/PauseScreen.q.yml">quintessence/AllegroFlare/Screens/PauseScreen.q.yml</h3>
     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">title_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">footer_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">background_bitmap_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">title_bitmap_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">title_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">menu_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">menu_selector_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">footer_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">title_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">menu_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">footer_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">show_footer_text</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">menu_options</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">cursor_position</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">title_menu_gutter</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">on_activate()</td>
</tr>
<tr>
  <td class="method">set_menu_options(1)</td>
</tr>
<tr>
  <td class="private_method">move_cursor_up()</td>
</tr>
<tr>
  <td class="private_method">move_cursor_down()</td>
</tr>
<tr>
  <td class="method">activate_menu_option(1)</td>
</tr>
<tr>
  <td class="private_method">select_menu_option()</td>
</tr>
<tr>
  <td class="method">primary_timer_func()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">draw_background()</td>
</tr>
<tr>
  <td class="method">draw_title()</td>
</tr>
<tr>
  <td class="method">draw_footer_text()</td>
</tr>
<tr>
  <td class="method">draw_menu()</td>
</tr>
<tr>
  <td class="private_method">infer_current_menu_option_value()</td>
</tr>
<tr>
  <td class="private_method">infer_current_menu_option_label()</td>
</tr>
<tr>
  <td class="private_method">obtain_title_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_menu_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_footer_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_background_bitmap()</td>
</tr>
<tr>
  <td class="private_method">obtain_title_bitmap()</td>
</tr>
<tr>
  <td class="method">virtual_control_button_down_func(3)</td>
</tr>
<tr>
  <td class="private_method">menu_is_empty()</td>
</tr>
<tr>
  <td class="private_method">menu_has_items()</td>
</tr>
<tr>
  <td class="method">build_default_menu_options()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_START_NEW_GAME&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControls&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControls.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/Storyboard.q.yml">quintessence/AllegroFlare/Screens/Storyboard.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">storyboard_element</td>
  <td class="property">AllegroFlare::Elements::Storyboard</td>
</tr>
<tr>
  <td class="property">auto_advance</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">game_event_name_to_emit_after_completing</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">on_activate()</td>
</tr>
<tr>
  <td class="method">primary_timer_func()</td>
</tr>
<tr>
  <td class="private_method">emit_completion_event()</td>
</tr>
<tr>
  <td class="method">advance()</td>
</tr>
<tr>
  <td class="method">virtual_control_button_down_func(3)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Storyboard&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Storyboard.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_multiline_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControls&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControls.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/TitleScreen.q.yml">quintessence/AllegroFlare/Screens/TitleScreen.q.yml</h3>
     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">title_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">copyright_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">background_bitmap_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">title_bitmap_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">title_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">menu_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">menu_selector_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">menu_selected_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">copyright_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">title_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">menu_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">copyright_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">menu_options</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">menu_position_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">menu_position_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cursor_position</td>
  <td class="property">int</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">on_activate()</td>
</tr>
<tr>
  <td class="method">set_menu_options(1)</td>
</tr>
<tr>
  <td class="private_method">move_cursor_up()</td>
</tr>
<tr>
  <td class="private_method">move_cursor_down()</td>
</tr>
<tr>
  <td class="method">activate_menu_option(1)</td>
</tr>
<tr>
  <td class="private_method">select_menu_option()</td>
</tr>
<tr>
  <td class="method">primary_timer_func()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">draw_background()</td>
</tr>
<tr>
  <td class="method">draw_title()</td>
</tr>
<tr>
  <td class="method">draw_copyright_text()</td>
</tr>
<tr>
  <td class="method">draw_menu()</td>
</tr>
<tr>
  <td class="private_method">infer_current_menu_option_value()</td>
</tr>
<tr>
  <td class="private_method">infer_current_menu_option_label()</td>
</tr>
<tr>
  <td class="private_method">obtain_title_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_menu_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_copyright_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_background_bitmap()</td>
</tr>
<tr>
  <td class="private_method">obtain_title_bitmap()</td>
</tr>
<tr>
  <td class="method">virtual_control_button_down_func(3)</td>
</tr>
<tr>
  <td class="private_method">menu_is_empty()</td>
</tr>
<tr>
  <td class="private_method">menu_has_items()</td>
</tr>
<tr>
  <td class="method">build_default_menu_options()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_START_NEW_GAME&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControls&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControls.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/StoryboardFactory.q.yml">quintessence/AllegroFlare/StoryboardFactory.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="private_property">page_factory</td>
  <td class="private_property">AllegroFlare::StoryboardPageFactory</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_font_bin(1)</td>
</tr>
<tr>
  <td class="method">create_images_storyboard_screen(2)</td>
</tr>
<tr>
  <td class="method">create_advancing_text_storyboard_screen(7)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;ALLEGRO_BITMAP*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Text*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Text.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Base*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Image*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Image.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::AdvancingText*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/AdvancingText.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Storyboard*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Storyboard.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::StoryboardPageFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/StoryboardPageFactory.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/StoryboardPageFactory.q.yml">quintessence/AllegroFlare/StoryboardPageFactory.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">create_text_page(1)</td>
</tr>
<tr>
  <td class="method">create_advancing_text_page(1)</td>
</tr>
<tr>
  <td class="method">create_image_page(1)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Text*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Text.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Image*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Image.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::AdvancingText*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/AdvancingText.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Testing/WithAllegroRenderingFixture.q.yml">quintessence/AllegroFlare/Testing/WithAllegroRenderingFixture.q.yml</h3>
     <table>
<tr>
  <td class="property">display</td>
  <td class="property">ALLEGRO_DISPLAY*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">SetUp()</td>
</tr>
<tr>
  <td class="method">TearDown()</td>
</tr>
<tr>
  <td class="method">get_any_font()</td>
</tr>
<tr>
  <td class="method">sleep_for_frame()</td>
</tr>
<tr>
  <td class="method">sleep_for(1)</td>
</tr>
<tr>
  <td class="method">get_test_name()</td>
</tr>
<tr>
  <td class="method">get_test_suite_name()</td>
</tr>
<tr>
  <td class="method">build_full_test_name_str()</td>
</tr>
<tr>
  <td class="method">build_centered_placement(2)</td>
</tr>
<tr>
  <td class="method">draw_rulers()</td>
</tr>
<tr>
  <td class="method">draw_crosshair(4)</td>
</tr>
<tr>
  <td class="method">test_name_indicates_it_wants_a_screenshot()</td>
</tr>
<tr>
  <td class="method">clear_display()</td>
</tr>
<tr>
  <td class="method">clear()</td>
</tr>
<tr>
  <td class="method">capture_screenshot(1)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Testing::CustomComparison&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Testing/CustomComparison.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_primitives_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_ttf_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_ttf.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_font_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_image_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_image.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:testing::Test&quot;, &quot;headers&quot;=&gt;[&quot;gtest/gtest.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::chrono::milliseconds&quot;, &quot;headers&quot;=&gt;[&quot;chrono&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::this_thread::sleep_for&quot;, &quot;headers&quot;=&gt;[&quot;thread&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Time.q.yml">quintessence/AllegroFlare/Time.q.yml</h3>
     <table>
<tr>
  <td class="property">started_at</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">now()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TimeStamper.q.yml">quintessence/AllegroFlare/TimeStamper.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">generate_now_timestamp_utc()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::time_t&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;, &quot;ctime&quot;, &quot;iomanip&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/UnicodeFontViewer.q.yml">quintessence/AllegroFlare/UnicodeFontViewer.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">font_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">unicode_range_start</td>
  <td class="property">uint32_t</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">previous_page()</td>
</tr>
<tr>
  <td class="method">next_page()</td>
</tr>
<tr>
  <td class="method">as_hex(2)</td>
</tr>
<tr>
  <td class="method">as_int(1)</td>
</tr>
<tr>
  <td class="private_method">draw_unicode_character(6)</td>
</tr>
<tr>
  <td class="private_method">obtain_unicode_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_ui_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_ui_font_mini()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::setfill&quot;, &quot;headers&quot;=&gt;[&quot;iomanip&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_font_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_ttf_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Useful3D/Triangle.q.yml">quintessence/AllegroFlare/Useful3D/Triangle.q.yml</h3>
     <table>
<tr>
  <td class="property">v0</td>
  <td class="property">AllegroFlare::vec3d</td>
</tr>
<tr>
  <td class="property">v1</td>
  <td class="property">AllegroFlare::vec3d</td>
</tr>
<tr>
  <td class="property">v2</td>
  <td class="property">AllegroFlare::vec3d</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">intersect(2)</td>
</tr>
<tr>
  <td class="method">draw(1)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;cross_product&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec3d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Useful3D::build_vertex&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Useful3D::Ray*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful3D/Ray.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Useful3D::IntersectData*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful3D/IntersectData.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Vec2B.q.yml">quintessence/AllegroFlare/Vec2B.q.yml</h3>
     <table>
<tr>
  <td class="property">x</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Vec2I.q.yml">quintessence/AllegroFlare/Vec2I.q.yml</h3>
     <table>
<tr>
  <td class="property">x</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">int</td>
</tr>
    </table>
     <table>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/VirtualControls.q.yml">quintessence/AllegroFlare/VirtualControls.q.yml</h3>
     <table>
<tr>
  <td class="property">BUTTON_UP</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">BUTTON_DOWN</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">BUTTON_LEFT</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">BUTTON_RIGHT</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">BUTTON_A</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">BUTTON_B</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">BUTTON_X</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">BUTTON_Y</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">BUTTON_START</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">BUTTON_RIGHT_BUMPER</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">BUTTON_LEFT_BUMPER</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">PRIMARY_STICK</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">SECONDARY_STICK</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">right_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">left_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">up_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">down_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">a_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">b_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">x_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">y_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">left_bumper_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">right_bumper_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">start_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">primary_stick_position</td>
  <td class="property">AllegroFlare::vec2d</td>
</tr>
<tr>
  <td class="property">secondary_stick_position</td>
  <td class="property">AllegroFlare::vec2d</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">clear()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/VirtualControlsProcessor.q.yml">quintessence/AllegroFlare/VirtualControlsProcessor.q.yml</h3>
     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">keyboard_button_map</td>
  <td class="property">std::map&lt;int, std::pair&lt;int, int&gt;&gt;</td>
</tr>
<tr>
  <td class="property">joystick_button_map</td>
  <td class="property">std::map&lt;int, int&gt;</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">build_sensible_joystick_button_map()</td>
</tr>
<tr>
  <td class="method">build_sensible_keyboard_button_map()</td>
</tr>
<tr>
  <td class="method">handle_raw_keyboard_key_down_event(1)</td>
</tr>
<tr>
  <td class="method">handle_raw_keyboard_key_up_event(1)</td>
</tr>
<tr>
  <td class="method">handle_raw_joystick_button_down_event(1)</td>
</tr>
<tr>
  <td class="method">handle_raw_joystick_button_up_event(1)</td>
</tr>
<tr>
  <td class="method">handle_raw_joystick_axis_change_event(1)</td>
</tr>
<tr>
  <td class="private_method">get_joystick_mapped_virtual_button(1)</td>
</tr>
<tr>
  <td class="private_method">get_keyboard_mapped_player_num_and_virtual_button(1)</td>
</tr>
<tr>
  <td class="method">emit_virtual_controls_button_up_event(3)</td>
</tr>
<tr>
  <td class="method">emit_virtual_controls_button_down_event(3)</td>
</tr>
<tr>
  <td class="method">emit_virtual_controls_axis_change_event(3)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_KEY_*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControls&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControls.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;int, std::pair&lt;int, int&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;utility&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::pair&lt;int, int&gt;&quot;, &quot;headers&quot;=&gt;[&quot;utility&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;int, int&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<h1>Dependents</h1>
<pre>
{
  "AllegroFlare/TerminalColors": [
    "AllegroFlare/AudioController"
  ],
  "AllegroFlare/SampleBin": [
    "AllegroFlare/AudioController",
    "AllegroFlare/AudioController"
  ],
  "AllegroFlare/AudioRepositoryElement": [
    "AllegroFlare/AudioController"
  ],
  "std/map<std/string, AllegroFlare/AudioRepositoryElement>": [
    "AllegroFlare/AudioController"
  ],
  "std/map<std/string, AllegroFlare/Sound>": [
    "AllegroFlare/AudioController"
  ],
  "AllegroFlare/Sound": [
    "AllegroFlare/AudioController"
  ],
  "al_is_audio_initialized": [
    "AllegroFlare/AudioController"
  ],
  "al_is_acodec_addon_initialized": [
    "AllegroFlare/AudioController"
  ],
  "AllegroFlare/BitmapBin": [
    "AllegroFlare/BackgroundFactory",
    "AllegroFlare/Elements/Backgrounds/Image",
    "AllegroFlare/Elements/Backgrounds/Monoplex",
    "AllegroFlare/Elements/Backgrounds/Parallax",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer",
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/MotionFX/Sparkles2",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader",
    "AllegroFlare/Prototypes/FixedRoom2D/EntityFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Room",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "AllegroFlare/Elements/Backgrounds/Monoplex": [
    "AllegroFlare/BackgroundFactory"
  ],
  "AllegroFlare/Elements/Backgrounds/Image": [
    "AllegroFlare/BackgroundFactory"
  ],
  "AllegroFlare/Placement3D": [
    "AllegroFlare/Bone3D"
  ],
  "std/vector<AllegroFlare/Bone3D>": [
    "AllegroFlare/Bone3D"
  ],
  "AllegroFlare/Bone3D": [
    "AllegroFlare/Bone3D",
    "AllegroFlare/Bone3DGraphRenderer"
  ],
  "AllegroFlare/FontBin": [
    "AllegroFlare/Bone3DGraphRenderer",
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/AdvancingText",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/HealthBars/Hearts",
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/LevelSelect",
    "AllegroFlare/Elements/NotificationRenderer",
    "AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked",
    "AllegroFlare/Elements/NotificationsRenderer",
    "AllegroFlare/Elements/Stopwatch",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Text",
    "AllegroFlare/Elements/Text",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo",
    "AllegroFlare/InputHints",
    "AllegroFlare/MotionComposer/TrackView",
    "AllegroFlare/MotionComposer/TrackView",
    "AllegroFlare/MotionFX/Sparkles",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader",
    "AllegroFlare/Prototypes/FixedRoom2D/Cursor",
    "AllegroFlare/Prototypes/FixedRoom2D/Cursor",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Room",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen",
    "AllegroFlare/Screens/Achievements",
    "AllegroFlare/Screens/GameOverScreen",
    "AllegroFlare/Screens/GameWonScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/Storyboard",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/StoryboardFactory",
    "AllegroFlare/StoryboardPageFactory",
    "AllegroFlare/Testing/WithAllegroRenderingFixture",
    "AllegroFlare/UnicodeFontViewer"
  ],
  "ALLEGRO_FONT": [
    "AllegroFlare/Bone3DGraphRenderer",
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/AdvancingText",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/HealthBars/Hearts",
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/LevelSelect",
    "AllegroFlare/Elements/NotificationRenderer",
    "AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked",
    "AllegroFlare/Elements/Stopwatch",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Text",
    "AllegroFlare/Elements/Text",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo",
    "AllegroFlare/InputHints",
    "AllegroFlare/MotionComposer/TrackView",
    "AllegroFlare/MotionFX/Sparkles",
    "AllegroFlare/MotionFX/Sparkles2",
    "AllegroFlare/Prototypes/FixedRoom2D/Cursor",
    "AllegroFlare/Screens/GameOverScreen",
    "AllegroFlare/Screens/GameWonScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/Storyboard",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/Testing/WithAllegroRenderingFixture",
    "AllegroFlare/UnicodeFontViewer"
  ],
  "al_is_system_installed": [
    "AllegroFlare/Bone3DGraphRenderer",
    "AllegroFlare/Elements/DialogBoxFrame",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/ScrollBar",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo",
    "AllegroFlare/InputHints",
    "AllegroFlare/NotificationsFactory",
    "AllegroFlare/Time"
  ],
  "al_is_primitives_addon_initialized": [
    "AllegroFlare/Bone3DGraphRenderer",
    "AllegroFlare/Elements/DialogBoxFrame",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/HealthBars/Basic",
    "AllegroFlare/Elements/HealthBars/Classic",
    "AllegroFlare/Elements/HealthBars/Hearts",
    "AllegroFlare/Elements/NotificationRenderer",
    "AllegroFlare/Elements/ScrollBar",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo",
    "AllegroFlare/InputHints",
    "AllegroFlare/MotionComposer/TrackView",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/UnicodeFontViewer"
  ],
  "al_is_font_addon_initialized": [
    "AllegroFlare/Bone3DGraphRenderer",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo",
    "AllegroFlare/InputHints",
    "AllegroFlare/UnicodeFontViewer"
  ],
  "AllegroFlare/draw_3d_line": [
    "AllegroFlare/Bone3DGraphRenderer"
  ],
  "AllegroFlare/Placement2D": [
    "AllegroFlare/Camera2D",
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/AdvancingText",
    "AllegroFlare/Elements/Backgrounds/Image",
    "AllegroFlare/Elements/Backgrounds/Monoplex",
    "AllegroFlare/Elements/Backgrounds/Parallax",
    "AllegroFlare/Elements/Base",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/LevelSelect",
    "AllegroFlare/Elements/NotificationsRenderer",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/MotionFX/Sparkles",
    "AllegroFlare/MotionFX/Sparkles2",
    "AllegroFlare/Prototypes/FixedRoom2D/Cursor",
    "AllegroFlare/Prototypes/FixedRoom2D/Entities/Base",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "ALLEGRO_BITMAP": [
    "AllegroFlare/Camera2D",
    "AllegroFlare/Elements/Backgrounds/Image",
    "AllegroFlare/Elements/Backgrounds/Parallax",
    "AllegroFlare/Elements/Backgrounds/ParallaxLayer",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/MotionFX/Sparkles2",
    "AllegroFlare/Prototypes/FixedRoom2D/Entities/Base",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/StoryboardPageFactory"
  ],
  "tan": [
    "AllegroFlare/Camera2D"
  ],
  "GLuint": [
    "AllegroFlare/Cubemap"
  ],
  "ALLEGRO_COLOR": [
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/AdvancingText",
    "AllegroFlare/Elements/DialogBoxFrame",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer",
    "AllegroFlare/Elements/HealthBars/Basic",
    "AllegroFlare/Elements/HealthBars/Classic",
    "AllegroFlare/Elements/HealthBars/Hearts",
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/LevelSelect",
    "AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked",
    "AllegroFlare/Elements/ScrollBar",
    "AllegroFlare/Elements/Stopwatch",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/Elements/StoryboardPages/Text",
    "AllegroFlare/Elements/Text",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo",
    "AllegroFlare/InputHints",
    "AllegroFlare/MotionComposer/TrackView",
    "AllegroFlare/MotionFX/Sparkles",
    "AllegroFlare/Prototypes/FixedRoom2D/Cursor",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/Storyboard",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/Testing/WithAllegroRenderingFixture",
    "AllegroFlare/UnicodeFontViewer",
    "AllegroFlare/Useful3D/Triangle"
  ],
  "al_draw_filled_rectangle": [
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/TitleScreen"
  ],
  "al_draw_text": [
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked",
    "AllegroFlare/Elements/Text",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo"
  ],
  "std/vector<std/tuple<std/string, std/string, std/string>>": [
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/LevelSelect",
    "AllegroFlare/Screens/Achievements"
  ],
  "AllegroFlare/Elements/Scrollbar": [
    "AllegroFlare/Elements/AchievementsList"
  ],
  "std/min, std/max": [
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/AdvancingText",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/Screens/Achievements"
  ],
  "AllegroFlare/Color": [
    "AllegroFlare/Elements/AdvancingText",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/LevelSelect",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/Elements/StoryboardPages/Text",
    "AllegroFlare/Screens/Storyboard",
    "AllegroFlare/UnicodeFontViewer"
  ],
  "AllegroFlare/Screens/Base": [
    "AllegroFlare/Elements/AdvancingText",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen",
    "AllegroFlare/Screens/Achievements",
    "AllegroFlare/Screens/GameOverScreen",
    "AllegroFlare/Screens/GameWonScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/Storyboard",
    "AllegroFlare/Screens/TitleScreen"
  ],
  "AllegroFlare/EventEmitter": [
    "AllegroFlare/Elements/AdvancingText",
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/LevelSelect",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Room",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner",
    "AllegroFlare/Screens/Achievements",
    "AllegroFlare/Screens/GameOverScreen",
    "AllegroFlare/Screens/GameWonScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/Storyboard",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/StoryboardFactory",
    "AllegroFlare/VirtualControlsProcessor"
  ],
  "ALLEGRO_EVENT": [
    "AllegroFlare/Elements/AdvancingText",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen",
    "AllegroFlare/Screens/GameOverScreen",
    "AllegroFlare/Screens/GameWonScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/Storyboard",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/VirtualControlsProcessor"
  ],
  "al_draw_multiline_text": [
    "AllegroFlare/Elements/AdvancingText",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Text",
    "AllegroFlare/Screens/Storyboard"
  ],
  "al_draw_rounded_rectangle": [
    "AllegroFlare/Elements/AdvancingText",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo"
  ],
  "AllegroFlare/interpolator/": [
    "AllegroFlare/Elements/AdvancingText",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Image"
  ],
  "fmod": [
    "AllegroFlare/Elements/AdvancingText",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/LevelSelect",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Image"
  ],
  "AllegroFlare/Elements/Backgrounds/Base": [
    "AllegroFlare/Elements/Backgrounds/Image",
    "AllegroFlare/Elements/Backgrounds/Monoplex",
    "AllegroFlare/Elements/Backgrounds/Parallax"
  ],
  "sin": [
    "AllegroFlare/Elements/Backgrounds/Monoplex",
    "AllegroFlare/MotionFX/Sparkles"
  ],
  "AllegroFlare/draw_offset_textured_rectangle": [
    "AllegroFlare/Elements/Backgrounds/Parallax"
  ],
  "std/vector<AllegroFlare/Elements/Backgrounds/ParallaxLayer>": [
    "AllegroFlare/Elements/Backgrounds/Parallax"
  ],
  "AllegroFlare/ElementID": [
    "AllegroFlare/Elements/Base",
    "AllegroFlare/Prototypes/FixedRoom2D/Entities/Base"
  ],
  "al_get_time": [
    "AllegroFlare/Elements/DialogBoxFactory",
    "AllegroFlare/Elements/DialogBoxes/Base",
    "AllegroFlare/Elements/DialogBoxes/Basic",
    "AllegroFlare/Elements/DialogBoxes/YouGotAnItem",
    "AllegroFlare/Elements/Notifications/Base"
  ],
  "AllegroFlare/Elements/DialogBoxes/YouGotAnItem": [
    "AllegroFlare/Elements/DialogBoxFactory",
    "AllegroFlare/Elements/DialogBoxRenderer"
  ],
  "AllegroFlare/Elements/DialogBoxes/Choice": [
    "AllegroFlare/Elements/DialogBoxFactory",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer"
  ],
  "AllegroFlare/Elements/DialogBoxes/Basic": [
    "AllegroFlare/Elements/DialogBoxFactory",
    "AllegroFlare/Elements/DialogBoxFactory",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer"
  ],
  "std/vector<std/pair<std/string, std/string>>": [
    "AllegroFlare/Elements/DialogBoxFactory",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/DialogBoxes/Choice",
    "AllegroFlare/Elements/LevelSelect",
    "AllegroFlare/InputHints",
    "AllegroFlare/Screens/GameOverScreen",
    "AllegroFlare/Screens/GameWonScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/TitleScreen"
  ],
  "AllegroFlare/color/color": [
    "AllegroFlare/Elements/DialogBoxFrame"
  ],
  "al_get_current_display": [
    "AllegroFlare/Elements/DialogBoxFrame",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer"
  ],
  "al_color_html": [
    "AllegroFlare/Elements/DialogBoxFrame",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer"
  ],
  "al_draw_filled_rounded_rectangle": [
    "AllegroFlare/Elements/DialogBoxFrame",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer"
  ],
  "AllegroFlare/Elements/DialogBoxFrame": [
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer"
  ],
  "Blast/StringJoiner": [
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer"
  ],
  "AllegroFlare/Elements/DialogBoxes/Base": [
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxes/Base",
    "AllegroFlare/Elements/DialogBoxes/Basic",
    "AllegroFlare/Elements/DialogBoxes/Choice",
    "AllegroFlare/Elements/DialogBoxes/YouGotAnItem",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer": [
    "AllegroFlare/Elements/DialogBoxRenderer"
  ],
  "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer": [
    "AllegroFlare/Elements/DialogBoxRenderer"
  ],
  "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer": [
    "AllegroFlare/Elements/DialogBoxRenderer"
  ],
  "AllegroFlare/Elements/DialogButton": [
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer"
  ],
  "AllegroFlare/Interpolators/": [
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer",
    "AllegroFlare/MotionFX/Sparkles2"
  ],
  "al_color_name": [
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "al_draw_rectangle": [
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/UnicodeFontViewer"
  ],
  "std/vector<std/vector<std/string>>": [
    "AllegroFlare/Elements/DialogBoxes/Base",
    "AllegroFlare/Elements/Notifications/Base"
  ],
  "al_is_ttf_addon_initialized": [
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo",
    "AllegroFlare/InputHints",
    "AllegroFlare/UnicodeFontViewer"
  ],
  "AllegroFlare/Elements/Base": [
    "AllegroFlare/Elements/HealthBars/Basic",
    "AllegroFlare/Elements/HealthBars/Classic",
    "AllegroFlare/Elements/HealthBars/Hearts",
    "AllegroFlare/Elements/Stopwatch",
    "AllegroFlare/Elements/Text"
  ],
  "std/min": [
    "AllegroFlare/Elements/HealthBars/Basic",
    "AllegroFlare/EncoderDecoders/Base62"
  ],
  "std/max": [
    "AllegroFlare/Elements/HealthBars/Basic"
  ],
  "AllegroFlare/FontAwesome": [
    "AllegroFlare/Elements/HealthBars/Hearts"
  ],
  "int32_t": [
    "AllegroFlare/Elements/HealthBars/Hearts"
  ],
  "AllegroFlare/Inventory": [
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Prototypes/FixedRoom2D/Configuration",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "AllegroFlare/InventoryIndex": [
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/InventoryIndex",
    "AllegroFlare/Prototypes/FixedRoom2D/Configuration",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "X": [
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/LevelSelect"
  ],
  "std/map<int, std/tuple<std/string, std/string, std/string>>": [
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/LevelSelect"
  ],
  "std/tuple<std/string, std/string, std/string>": [
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/LevelSelect",
    "AllegroFlare/InventoryIndexItem"
  ],
  "AllegroFlare/interpolator": [
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/LevelSelect"
  ],
  "ALLEGRO_FLARE_EVENT_SELECT_LEVEL": [
    "AllegroFlare/Elements/LevelSelect"
  ],
  "AllegroFlare/Elements/Notifications/Base": [
    "AllegroFlare/Elements/NotificationRenderer",
    "AllegroFlare/Elements/Notifications/AchievementUnlocked",
    "AllegroFlare/Notifications",
    "AllegroFlare/NotificationsFactory"
  ],
  "AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked": [
    "AllegroFlare/Elements/NotificationRenderer"
  ],
  "AllegroFlare/Elements/Notifications/AchievementUnlocked": [
    "AllegroFlare/Elements/NotificationRenderer",
    "AllegroFlare/NotificationsFactory",
    "AllegroFlare/NotificationsFactory"
  ],
  "std/vector<AllegroFlare/Elements/Notifications/Base>": [
    "AllegroFlare/Elements/NotificationsRenderer",
    "AllegroFlare/Notifications"
  ],
  "AllegroFlare/Elements/NotificationRenderer": [
    "AllegroFlare/Elements/NotificationsRenderer"
  ],
  "std/vector<AllegroFlare/Elements/PlayingCards/Card>": [
    "AllegroFlare/Elements/PlayingCards/Deck"
  ],
  "AllegroFlare/Elements/PlayingCards/Card": [
    "AllegroFlare/Elements/PlayingCards/Deck"
  ],
  "std/shuffle": [
    "AllegroFlare/Elements/PlayingCards/Deck"
  ],
  "AllegroFlare/Elements/PlayingCards/Deck": [
    "AllegroFlare/Elements/PlayingCards/DeckFactory"
  ],
  "AllegroFlare/TimerFormatter": [
    "AllegroFlare/Elements/Stopwatch"
  ],
  "AllegroFlare/Timer": [
    "AllegroFlare/Elements/Stopwatch"
  ],
  "AllegroFlare/Elements/StoryboardPages/Base": [
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/Elements/StoryboardPages/Text",
    "AllegroFlare/StoryboardFactory"
  ],
  "std/vector<AllegroFlare/Elements/StoryboardPages/Base >": [
    "AllegroFlare/Elements/Storyboard"
  ],
  "std/size_t": [
    "AllegroFlare/EncoderDecoders/Base62",
    "AllegroFlare/Network2/Message"
  ],
  "ALLEGRO_FLARE_EVENT_POST_ACHIEVEMENT_UNLOCKED_NOTIFICATION": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_SHOW_INPUT_HINTS_BAR": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_HIDE_INPUT_HINTS_BAR": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR_OPACITY": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_EVENT_SOURCE": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_EXIT_GAME": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_SWITCH_SCREEN": [
    "AllegroFlare/EventEmitter"
  ],
  "AllegroFlare/GameEvent": [
    "AllegroFlare/EventEmitter",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen"
  ],
  "AllegroFlare/GameEventDatas/Base": [
    "AllegroFlare/EventEmitter",
    "AllegroFlare/GameEvent",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectItem",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/EnterRoom",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/SpawnDialog",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "AllegroFlare/php/str_replace": [
    "AllegroFlare/Generators/LoremIpsumGenerator"
  ],
  "AllegroFlare/Random": [
    "AllegroFlare/Generators/PersonNameGenerator"
  ],
  "AllegroFlare/InputDiagrams/KeyboardKey": [
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo"
  ],
  "AllegroFlare/InputDiagrams/KeyboardKeyCombo": [
    "AllegroFlare/InputHints"
  ],
  "void": [
    "AllegroFlare/Integrations/Network"
  ],
  "std/mutex": [
    "AllegroFlare/Integrations/Network"
  ],
  "std/vector<std/string>": [
    "AllegroFlare/Integrations/Network"
  ],
  "std/atomic<bool>": [
    "AllegroFlare/Integrations/Network",
    "AllegroFlare/Integrations/Network"
  ],
  ":testing/Test": [
    "AllegroFlare/Integrations/Network",
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "AllegroFlare/Network2/Client": [
    "AllegroFlare/Integrations/Network"
  ],
  "AllegroFlare/Network2/Server": [
    "AllegroFlare/Integrations/Network"
  ],
  "(void (callback)(std/string))": [
    "AllegroFlare/Integrations/Network"
  ],
  "std/map<int, AllegroFlare/InventoryIndexItem>": [
    "AllegroFlare/InventoryIndex"
  ],
  "AllegroFlare/InventoryIndexItem": [
    "AllegroFlare/InventoryIndex"
  ],
  "AllegroFlare/Timeline/Track": [
    "AllegroFlare/MotionComposer/TrackView"
  ],
  "AllegroFlare/Color/": [
    "AllegroFlare/MotionComposer/TrackView",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Room"
  ],
  "AllegroFlare/Color/Gold": [
    "AllegroFlare/MotionFX/Sparkles"
  ],
  "std/vector<std/tuple<float, float, float, ALLEGRO_COLOR>>": [
    "AllegroFlare/MotionFX/Sparkles"
  ],
  "cos": [
    "AllegroFlare/MotionFX/Sparkles"
  ],
  "AllegroFlare/Timeline/ActorManager": [
    "AllegroFlare/MotionFX/Sparkles2"
  ],
  "AllegroFlare/Timeline/Actor2D": [
    "AllegroFlare/MotionFX/Sparkles2"
  ],
  "chat_message": [
    "AllegroFlare/Network2/Message"
  ],
  "char": [
    "AllegroFlare/Network2/Message"
  ],
  "char[16 + 512]": [
    "AllegroFlare/Network2/Message"
  ],
  "AllegroFlare/EncoderDecoders/Base62": [
    "AllegroFlare/Network2/Message"
  ],
  "AllegroFlare/SHA2": [
    "AllegroFlare/Network2/Message"
  ],
  "std/map<std/string, AllegroFlare/Prototypes/FixedRoom2D/Entities/Base>": [
    "AllegroFlare/Prototypes/FixedRoom2D/Configuration",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader",
    "AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Room",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory"
  ],
  "std/map<std/string, AllegroFlare/Prototypes/FixedRoom2D/Room>": [
    "AllegroFlare/Prototypes/FixedRoom2D/Configuration",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "std/map<std/string, AllegroFlare/Prototypes/FixedRoom2D/Script>": [
    "AllegroFlare/Prototypes/FixedRoom2D/Configuration",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Room",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "std/map<std/string, std/string>": [
    "AllegroFlare/Prototypes/FixedRoom2D/Configuration",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader",
    "AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper",
    "AllegroFlare/Prototypes/FixedRoom2D/Room",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper": [
    "AllegroFlare/Prototypes/FixedRoom2D/Configuration",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Room",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/EntityFactory": [
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory": [
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/Configuration": [
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/Entities/Base": [
    "AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper",
    "AllegroFlare/Prototypes/FixedRoom2D/EntityFactory"
  ],
  "std/vector<AllegroFlare/Prototypes/FixedRoom2D/Entities/Base>": [
    "AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper",
    "AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Room"
  ],
  "std/map<int, AllegroFlare/Prototypes/FixedRoom2D/Entities/Base>": [
    "AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/Cursor": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Room"
  ],
  "AllegroFlare/AudioController": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/Room": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Room"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Room",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen"
  ],
  "AllegroFlare/Elements/Inventory": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "AllegroFlare/Elements/DialogBoxRenderer": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/Elements/DialogBoxFactory": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/SpawnDialog": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectItem": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/EnterRoom": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/EventNames/": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/Shader": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/RoomDictionary": [
    "AllegroFlare/Prototypes/FixedRoom2D/Room",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/EventNames/INTERACTION_EVENT_NAME": [
    "AllegroFlare/Prototypes/FixedRoom2D/Room",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D": [
    "AllegroFlare/Prototypes/FixedRoom2D/Screen"
  ],
  "std/pair<std/string, std/string>": [
    "AllegroFlare/Prototypes/FixedRoom2D/Script",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "AllegroFlare/php/trim": [
    "AllegroFlare/Prototypes/FixedRoom2D/Script"
  ],
  "std/map<std/string, int>": [
    "AllegroFlare/Prototypes/FixedRoom2D/Script"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/Script": [
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/EventNames/SCRIPT_EVENT_NAME": [
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "AllegroFlare/Achievements": [
    "AllegroFlare/Screens/Achievements"
  ],
  "AllegroFlare/Elements/AchievementsList": [
    "AllegroFlare/Screens/Achievements"
  ],
  "AllegroFlare/VirtualControls": [
    "AllegroFlare/Screens/Achievements",
    "AllegroFlare/Screens/GameOverScreen",
    "AllegroFlare/Screens/GameWonScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/Storyboard",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/VirtualControlsProcessor"
  ],
  "ALLEGRO_FLARE_EVENT_START_TITLE_SCREEN": [
    "AllegroFlare/Screens/GameWonScreen"
  ],
  "ALLEGRO_FLARE_EVENT_START_NEW_GAME": [
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/TitleScreen"
  ],
  "AllegroFlare/Elements/Storyboard": [
    "AllegroFlare/Screens/Storyboard"
  ],
  "std/vector<ALLEGRO_BITMAP>": [
    "AllegroFlare/StoryboardFactory"
  ],
  "AllegroFlare/Elements/StoryboardPages/Text": [
    "AllegroFlare/StoryboardFactory",
    "AllegroFlare/StoryboardPageFactory"
  ],
  "AllegroFlare/Elements/StoryboardPages/Image": [
    "AllegroFlare/StoryboardFactory",
    "AllegroFlare/StoryboardPageFactory"
  ],
  "AllegroFlare/Elements/StoryboardPages/AdvancingText": [
    "AllegroFlare/StoryboardFactory",
    "AllegroFlare/StoryboardPageFactory"
  ],
  "AllegroFlare/Screens/Storyboard": [
    "AllegroFlare/StoryboardFactory"
  ],
  "AllegroFlare/StoryboardPageFactory": [
    "AllegroFlare/StoryboardFactory"
  ],
  "AllegroFlare/Testing/CustomComparison": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "al_init_primitives_addon": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "al_init_ttf_addon": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "al_init_font_addon": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "al_init_image_addon": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "ALLEGRO_DISPLAY": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "std/chrono/milliseconds": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "std/this_thread/sleep_for": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "std/time_t": [
    "AllegroFlare/TimeStamper"
  ],
  "std/setfill": [
    "AllegroFlare/UnicodeFontViewer"
  ],
  "cross_product": [
    "AllegroFlare/Useful3D/Triangle"
  ],
  "AllegroFlare/vec3d": [
    "AllegroFlare/Useful3D/Triangle"
  ],
  "AllegroFlare/Useful3D/build_vertex": [
    "AllegroFlare/Useful3D/Triangle"
  ],
  "AllegroFlare/Useful3D/Ray": [
    "AllegroFlare/Useful3D/Triangle"
  ],
  "AllegroFlare/Useful3D/IntersectData": [
    "AllegroFlare/Useful3D/Triangle"
  ],
  "AllegroFlare/vec2d": [
    "AllegroFlare/VirtualControls"
  ],
  "AllegroFlare/EventNames": [
    "AllegroFlare/VirtualControlsProcessor"
  ],
  "ALLEGRO_KEY_": [
    "AllegroFlare/VirtualControlsProcessor"
  ],
  "std/map<int, std/pair<int, int>>": [
    "AllegroFlare/VirtualControlsProcessor"
  ],
  "std/pair<int, int>": [
    "AllegroFlare/VirtualControlsProcessor"
  ],
  "std/map<int, int>": [
    "AllegroFlare/VirtualControlsProcessor"
  ]
}
</pre>
</body>