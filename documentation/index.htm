<!DOCTYPE html>
<head>
<style>
*
{
  font-family: 'Arial';
  padding: 3px 20px;
}
table td
{
  padding: 3px 20px;
}
.property
{
  color: blue;
}
.private_property
{
  color: lightblue;
}

.method
{
  color: red;
}

.private_method
{
  color: pink;
}

.dependency
{
  color: green;
}

.component
{
  padding: 20 10 20 10;
  margin: 20 10 20 10;
  background-color: #dfdfdf;
}

.component h3
{
}
</style>
</head>
<body>
<h1>TOC</h1>
<ul>
  <li><a href="#quintessence/AllegroFlare/AudioController.q.yml">quintessence/AllegroFlare/AudioController.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/AudioProcessing/AudioDataBlock.q.yml">quintessence/AllegroFlare/AudioProcessing/AudioDataBlock.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/AudioProcessing/AudioMixer.q.yml">quintessence/AllegroFlare/AudioProcessing/AudioMixer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/AudioProcessing/Filters/AllPass.q.yml">quintessence/AllegroFlare/AudioProcessing/Filters/AllPass.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/AudioProcessing/Filters/Delay.q.yml">quintessence/AllegroFlare/AudioProcessing/Filters/Delay.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/AudioRepositoryElement.q.yml">quintessence/AllegroFlare/AudioRepositoryElement.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/BackgroundFactory.q.yml">quintessence/AllegroFlare/BackgroundFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Bone3D.q.yml">quintessence/AllegroFlare/Bone3D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Bone3DGraphRenderer.q.yml">quintessence/AllegroFlare/Bone3DGraphRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Camera2D.q.yml">quintessence/AllegroFlare/Camera2D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/CameraControlStrategies2D/Base.q.yml">quintessence/AllegroFlare/CameraControlStrategies2D/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/CameraControlStrategies2D/HorizontalRail.q.yml">quintessence/AllegroFlare/CameraControlStrategies2D/HorizontalRail.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/CameraControlStrategies2D/SmoothSnap.q.yml">quintessence/AllegroFlare/CameraControlStrategies2D/SmoothSnap.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/CameraControlStrategies2D/SmoothSnapWithZoomEffect.q.yml">quintessence/AllegroFlare/CameraControlStrategies2D/SmoothSnapWithZoomEffect.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/CameraControlStrategies2D/Snap.q.yml">quintessence/AllegroFlare/CameraControlStrategies2D/Snap.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Cubemap.q.yml">quintessence/AllegroFlare/Cubemap.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/DeploymentEnvironment.q.yml">quintessence/AllegroFlare/DeploymentEnvironment.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/AchievementsList.q.yml">quintessence/AllegroFlare/Elements/AchievementsList.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/AdvancingText.q.yml">quintessence/AllegroFlare/Elements/AdvancingText.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Backgrounds/Base.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Backgrounds/IconPattern.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/IconPattern.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Backgrounds/Image.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/Image.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Backgrounds/Monoplex.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/Monoplex.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Backgrounds/Parallax.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/Parallax.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Backgrounds/ParallaxLayer.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/ParallaxLayer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Base.q.yml">quintessence/AllegroFlare/Elements/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxFactory.q.yml">quintessence/AllegroFlare/Elements/DialogBoxFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxFrame.q.yml">quintessence/AllegroFlare/Elements/DialogBoxFrame.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxNameTag.q.yml">quintessence/AllegroFlare/Elements/DialogBoxNameTag.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxes/Base.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxes/Basic.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/Basic.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxes/Choice.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/Choice.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxes/YouGotAnItem.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/YouGotAnItem.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogBoxes/YouGotEvidence.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/YouGotEvidence.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogButton.q.yml">quintessence/AllegroFlare/Elements/DialogButton.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogRoll.q.yml">quintessence/AllegroFlare/Elements/DialogRoll.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/DialogRollRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogRollRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/HealthBars/Basic.q.yml">quintessence/AllegroFlare/Elements/HealthBars/Basic.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/HealthBars/Classic.q.yml">quintessence/AllegroFlare/Elements/HealthBars/Classic.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/HealthBars/Hearts.q.yml">quintessence/AllegroFlare/Elements/HealthBars/Hearts.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Inventory.q.yml">quintessence/AllegroFlare/Elements/Inventory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/LevelSelect.q.yml">quintessence/AllegroFlare/Elements/LevelSelect.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/NotificationRenderer.q.yml">quintessence/AllegroFlare/Elements/NotificationRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked.q.yml">quintessence/AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Notifications/AchievementUnlocked.q.yml">quintessence/AllegroFlare/Elements/Notifications/AchievementUnlocked.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Notifications/Base.q.yml">quintessence/AllegroFlare/Elements/Notifications/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/NotificationsRenderer.q.yml">quintessence/AllegroFlare/Elements/NotificationsRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/PlayingCards/Card.q.yml">quintessence/AllegroFlare/Elements/PlayingCards/Card.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/PlayingCards/Deck.q.yml">quintessence/AllegroFlare/Elements/PlayingCards/Deck.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/PlayingCards/DeckFactory.q.yml">quintessence/AllegroFlare/Elements/PlayingCards/DeckFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/RollingCredits/RollingCredits.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/RollingCredits.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/RollingCredits/SectionFactory.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/SectionFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/Base.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/ColumnWithLabels.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/ColumnWithLabels.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/Header.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/Header.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/Text.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/Text.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/RollingCredits/Sections/Base.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/Sections/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/RollingCredits/Sections/ColumnWithLabels.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/Sections/ColumnWithLabels.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/RollingCredits/Sections/Header.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/Sections/Header.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/RollingCredits/Sections/Text.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/Sections/Text.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Score.q.yml">quintessence/AllegroFlare/Elements/Score.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Scrollbar.q.yml">quintessence/AllegroFlare/Elements/Scrollbar.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Stopwatch.q.yml">quintessence/AllegroFlare/Elements/Stopwatch.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Storyboard.q.yml">quintessence/AllegroFlare/Elements/Storyboard.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/StoryboardPages/AdvancingText.q.yml">quintessence/AllegroFlare/Elements/StoryboardPages/AdvancingText.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/StoryboardPages/Base.q.yml">quintessence/AllegroFlare/Elements/StoryboardPages/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/StoryboardPages/Image.q.yml">quintessence/AllegroFlare/Elements/StoryboardPages/Image.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/StoryboardPages/Text.q.yml">quintessence/AllegroFlare/Elements/StoryboardPages/Text.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Text.q.yml">quintessence/AllegroFlare/Elements/Text.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/EncoderDecoders/Base62.q.yml">quintessence/AllegroFlare/EncoderDecoders/Base62.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/EventEmitter.q.yml">quintessence/AllegroFlare/EventEmitter.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/FrameAnimation/Animation.q.yml">quintessence/AllegroFlare/FrameAnimation/Animation.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/FrameAnimation/AsepriteSpriteSheetJSONLoader.q.yml">quintessence/AllegroFlare/FrameAnimation/AsepriteSpriteSheetJSONLoader.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/FrameAnimation/Book.q.yml">quintessence/AllegroFlare/FrameAnimation/Book.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/FrameAnimation/Frame.q.yml">quintessence/AllegroFlare/FrameAnimation/Frame.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GameEvent.q.yml">quintessence/AllegroFlare/GameEvent.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/GameEventDatas/Base.q.yml">quintessence/AllegroFlare/GameEventDatas/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Generators/LoremIpsumGenerator.q.yml">quintessence/AllegroFlare/Generators/LoremIpsumGenerator.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Generators/PersonNameGenerator.q.yml">quintessence/AllegroFlare/Generators/PersonNameGenerator.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/InputDiagrams/KeyboardKey.q.yml">quintessence/AllegroFlare/InputDiagrams/KeyboardKey.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/InputDiagrams/KeyboardKeyCombo.q.yml">quintessence/AllegroFlare/InputDiagrams/KeyboardKeyCombo.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/InputHints.q.yml">quintessence/AllegroFlare/InputHints.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Integrations/CameraProjectionChanges.q.yml">quintessence/AllegroFlare/Integrations/CameraProjectionChanges.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Integrations/Network.q.yml">quintessence/AllegroFlare/Integrations/Network.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/InventoryDictionary.q.yml">quintessence/AllegroFlare/InventoryDictionary.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/InventoryDictionaryItems/Base.q.yml">quintessence/AllegroFlare/InventoryDictionaryItems/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/InventoryDictionaryItems/ClassicItem.q.yml">quintessence/AllegroFlare/InventoryDictionaryItems/ClassicItem.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/InventoryDictionaryItems/WithAttributes.q.yml">quintessence/AllegroFlare/InventoryDictionaryItems/WithAttributes.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/InventoryIndex.q.yml">quintessence/AllegroFlare/InventoryIndex.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/InventoryIndexItem.q.yml">quintessence/AllegroFlare/InventoryIndexItem.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Logger.q.yml">quintessence/AllegroFlare/Logger.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MotionComposer/MessageFactory.q.yml">quintessence/AllegroFlare/MotionComposer/MessageFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MotionComposer/MessageProcessor.q.yml">quintessence/AllegroFlare/MotionComposer/MessageProcessor.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MotionComposer/Messages/AddActor2D.q.yml">quintessence/AllegroFlare/MotionComposer/Messages/AddActor2D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MotionComposer/Messages/Base.q.yml">quintessence/AllegroFlare/MotionComposer/Messages/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MotionComposer/Messages/RunBuildProcess.q.yml">quintessence/AllegroFlare/MotionComposer/Messages/RunBuildProcess.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MotionComposer/Messages/SetPlayheadPosition.q.yml">quintessence/AllegroFlare/MotionComposer/Messages/SetPlayheadPosition.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MotionComposer/Messages/SetScript.q.yml">quintessence/AllegroFlare/MotionComposer/Messages/SetScript.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MotionComposer/TrackView.q.yml">quintessence/AllegroFlare/MotionComposer/TrackView.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MotionFX/Sparkles.q.yml">quintessence/AllegroFlare/MotionFX/Sparkles.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MotionFX/Sparkles2.q.yml">quintessence/AllegroFlare/MotionFX/Sparkles2.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MusicMesh/FontCharacterAtlasBuilder.q.yml">quintessence/AllegroFlare/MusicMesh/FontCharacterAtlasBuilder.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MusicMesh/MusicMesh.q.yml">quintessence/AllegroFlare/MusicMesh/MusicMesh.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/MusicMesh/Stamp.q.yml">quintessence/AllegroFlare/MusicMesh/Stamp.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Network2/Message.q.yml">quintessence/AllegroFlare/Network2/Message.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Network2/URLTokenizer.q.yml">quintessence/AllegroFlare/Network2/URLTokenizer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Notifications.q.yml">quintessence/AllegroFlare/Notifications.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/NotificationsFactory.q.yml">quintessence/AllegroFlare/NotificationsFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Physics/AABB2D.q.yml">quintessence/AllegroFlare/Physics/AABB2D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Physics/Int2D.q.yml">quintessence/AllegroFlare/Physics/Int2D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Physics/TileMapCollisionStepper.q.yml">quintessence/AllegroFlare/Physics/TileMapCollisionStepper.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Physics/TileMapCollisionStepperCollisionInfo.q.yml">quintessence/AllegroFlare/Physics/TileMapCollisionStepperCollisionInfo.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Physics/TileMapCollisionStepperStepResult.q.yml">quintessence/AllegroFlare/Physics/TileMapCollisionStepperStepResult.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/ProfilerRenderer.q.yml">quintessence/AllegroFlare/ProfilerRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/CubeShooter/Entity.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/Entity.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/CubeShooter/EntityFactory.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/EntityFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/CubeShooter/PlayerMovementControl.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/PlayerMovementControl.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/CubeShooter/Runner.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/Runner.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/CubeShooter/Screen.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/Screen.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/CubeShooter/Shaders/DepthDarken.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/Shaders/DepthDarken.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/CubeShooter/Shaders/Fog.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/Shaders/Fog.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/CubeShooter/Shaders/Multiply.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/Shaders/Multiply.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/Configuration.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Configuration.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/Cursor.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Cursor.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CloseDialog.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CloseDialog.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotAnItemDialog.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotAnItemDialog.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotEvidenceDialog.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotEvidenceDialog.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogSystem.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogSystem.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/EntityFactory.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/EntityFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/Room.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Room.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/RoomDictionary.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/RoomDictionary.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/RoomFactory.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/RoomFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/Screen.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Screen.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/Script.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Script.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectEvidence.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectEvidence.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectItem.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectItem.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/EnterRoom.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/EnterRoom.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/InitiateDialog.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/InitiateDialog.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/MindDive/Hud/Hud.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/Hud/Hud.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/MindDive/Hypersync.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/Hypersync.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/MindDive/MindDive.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/MindDive.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/MindDive/Tunnel.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/Tunnel.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/MindDive/TunnelMesh.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/TunnelMesh.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/MindDive/TunnelMeshFactory.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/TunnelMeshFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/MindDive/TunnelMeshSurferCollisionResolver.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/TunnelMeshSurferCollisionResolver.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/MindDive/TunnelMeshTMJDataLoader.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/TunnelMeshTMJDataLoader.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/MindDive/TunnelRenderer.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/TunnelRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/MindDive/TunnelTiles/Base.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/TunnelTiles/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/MindDive/TunnelTiles/Basic.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/TunnelTiles/Basic.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Base.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Doors/Basic2D.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Doors/Basic2D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Enemies/Base.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Enemies/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/FrameAnimated2D.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/FrameAnimated2D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Anchored.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Anchored.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/BackAndForthHorizontal.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/BackAndForthHorizontal.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FallOnTrackingRange.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FallOnTrackingRange.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Flapping.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Flapping.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FlappingWithRandomness.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FlappingWithRandomness.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/HoppingLeft.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/HoppingLeft.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveInDirection.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveInDirection.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveLeft.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveLeft.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveRight.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveRight.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/ReflectOffWalls.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/ReflectOffWalls.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/StayStill.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/StayStill.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Tracking.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Tracking.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/TileMaps/Basic2D.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/TileMaps/Basic2D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/EntityCollectionHelper.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/EntityCollectionHelper.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/Screen.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Screen.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/TMJDataLoader.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/TMJDataLoader.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/Platforming2D/TMJMeshLoader.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/TMJMeshLoader.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/TileDrive/Hud/Hud.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/Hud/Hud.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/TileDrive/Screen.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/Screen.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMesh.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMesh.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshDictionaryRecord.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshDictionaryRecord.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshDriverCollisionResolver.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshDriverCollisionResolver.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshFactory.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshTMJDataLoader.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshTMJDataLoader.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Prototypes/TileDrive/TileDrive.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/TileDrive.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/RenderSurfaces/Base.q.yml">quintessence/AllegroFlare/RenderSurfaces/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/RenderSurfaces/DisplayBackbuffer.q.yml">quintessence/AllegroFlare/RenderSurfaces/DisplayBackbuffer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/RenderSurfaces/DisplayBackbufferSubBitmap.q.yml">quintessence/AllegroFlare/RenderSurfaces/DisplayBackbufferSubBitmap.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/SceneGraph/Entities/Base.q.yml">quintessence/AllegroFlare/SceneGraph/Entities/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/SceneGraph/EntityPool.q.yml">quintessence/AllegroFlare/SceneGraph/EntityPool.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/ScreenCapture.q.yml">quintessence/AllegroFlare/ScreenCapture.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/Achievements.q.yml">quintessence/AllegroFlare/Screens/Achievements.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/CharacterNameInput.q.yml">quintessence/AllegroFlare/Screens/CharacterNameInput.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/GameOverScreen.q.yml">quintessence/AllegroFlare/Screens/GameOverScreen.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/GameWonScreen.q.yml">quintessence/AllegroFlare/Screens/GameWonScreen.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/PauseScreen.q.yml">quintessence/AllegroFlare/Screens/PauseScreen.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/RollingCredits.q.yml">quintessence/AllegroFlare/Screens/RollingCredits.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/Storyboard.q.yml">quintessence/AllegroFlare/Screens/Storyboard.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Screens/TitleScreen.q.yml">quintessence/AllegroFlare/Screens/TitleScreen.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Shaders/AllegroDefault.q.yml">quintessence/AllegroFlare/Shaders/AllegroDefault.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Shaders/Base.q.yml">quintessence/AllegroFlare/Shaders/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Shaders/Cubemap.q.yml">quintessence/AllegroFlare/Shaders/Cubemap.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Shaders/PostProcessing/Blinds.q.yml">quintessence/AllegroFlare/Shaders/PostProcessing/Blinds.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Shaders/PostProcessing/DipToBlack.q.yml">quintessence/AllegroFlare/Shaders/PostProcessing/DipToBlack.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Shaders/PostProcessing/Wipe.q.yml">quintessence/AllegroFlare/Shaders/PostProcessing/Wipe.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/SoftwareKeyboard/KeyboardKey.q.yml">quintessence/AllegroFlare/SoftwareKeyboard/KeyboardKey.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/SoftwareKeyboard/SoftwareKeyboard.q.yml">quintessence/AllegroFlare/SoftwareKeyboard/SoftwareKeyboard.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/StoryboardFactory.q.yml">quintessence/AllegroFlare/StoryboardFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/StoryboardPageFactory.q.yml">quintessence/AllegroFlare/StoryboardPageFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/StringFormatValidator.q.yml">quintessence/AllegroFlare/StringFormatValidator.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/SystemInfo.q.yml">quintessence/AllegroFlare/SystemInfo.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Testing/Rulers.q.yml">quintessence/AllegroFlare/Testing/Rulers.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Testing/TestNameInference.q.yml">quintessence/AllegroFlare/Testing/TestNameInference.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Testing/WithAllegroRenderingFixture.q.yml">quintessence/AllegroFlare/Testing/WithAllegroRenderingFixture.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/AutoTile/FilterMatrix.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/FilterMatrix.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/AutoTile/Filters/Base.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/Filters/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/AutoTile/Filters/Basic.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/Filters/Basic.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/AutoTile/Filters/BasicFloor.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/Filters/BasicFloor.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/AutoTile/Filters/BasicSolid.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/Filters/BasicSolid.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/AutoTile/Filters/Fill.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/Filters/Fill.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/AutoTile/Filters/FortyEightEdges.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/Filters/FortyEightEdges.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/AutoTile/Filters/SixteenEdges.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/Filters/SixteenEdges.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/Basic2D.q.yml">quintessence/AllegroFlare/TileMaps/Basic2D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/MultiMesh.q.yml">quintessence/AllegroFlare/TileMaps/MultiMesh.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/MultiMeshUV.q.yml">quintessence/AllegroFlare/TileMaps/MultiMeshUV.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/MultiMeshUVAtlas.q.yml">quintessence/AllegroFlare/TileMaps/MultiMeshUVAtlas.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TileMaps/PrimMeshAtlasIndexRecord.q.yml">quintessence/AllegroFlare/TileMaps/PrimMeshAtlasIndexRecord.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Time.q.yml">quintessence/AllegroFlare/Time.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/TimeStamper.q.yml">quintessence/AllegroFlare/TimeStamper.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Timeline/ActorFactory.q.yml">quintessence/AllegroFlare/Timeline/ActorFactory.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/UnicodeFontViewer.q.yml">quintessence/AllegroFlare/UnicodeFontViewer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Useful3D/Triangle.q.yml">quintessence/AllegroFlare/Useful3D/Triangle.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Vec2B.q.yml">quintessence/AllegroFlare/Vec2B.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Vec2I.q.yml">quintessence/AllegroFlare/Vec2I.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/VirtualControls.q.yml">quintessence/AllegroFlare/VirtualControls.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/VirtualControlsProcessor.q.yml">quintessence/AllegroFlare/VirtualControlsProcessor.q.yml</a></li>
  <li><a href="#quintessence/Tileo/MeshWithNormals.q.yml">quintessence/Tileo/MeshWithNormals.q.yml</a></li>
  <li><a href="#quintessence/Tileo/Shaders/AllegroDefault.q.yml">quintessence/Tileo/Shaders/AllegroDefault.q.yml</a></li>
  <li><a href="#quintessence/Tileo/Shaders/Base.q.yml">quintessence/Tileo/Shaders/Base.q.yml</a></li>
  <li><a href="#quintessence/Tileo/Shaders/MeshWithNormals.q.yml">quintessence/Tileo/Shaders/MeshWithNormals.q.yml</a></li>
  <li><a href="#quintessence/Tileo/TMJDataLoader.q.yml">quintessence/Tileo/TMJDataLoader.q.yml</a></li>
  <li><a href="#quintessence/Tileo/TMJMeshLoader.q.yml">quintessence/Tileo/TMJMeshLoader.q.yml</a></li>
  <li><a href="#quintessence/Tileo/TileoTileVertexAllegroVertexDeclaration.q.yml">quintessence/Tileo/TileoTileVertexAllegroVertexDeclaration.q.yml</a></li>
  <li><a href="#quintessence/Wicked/CameraControlStrategies2D/Base.q.yml">quintessence/Wicked/CameraControlStrategies2D/Base.q.yml</a></li>
  <li><a href="#quintessence/Wicked/CameraControlStrategies2D/HorizontalRail.q.yml">quintessence/Wicked/CameraControlStrategies2D/HorizontalRail.q.yml</a></li>
  <li><a href="#quintessence/Wicked/CameraControlStrategies2D/SmoothSnap.q.yml">quintessence/Wicked/CameraControlStrategies2D/SmoothSnap.q.yml</a></li>
  <li><a href="#quintessence/Wicked/CameraControlStrategies2D/Snap.q.yml">quintessence/Wicked/CameraControlStrategies2D/Snap.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/Base.q.yml">quintessence/Wicked/Entities/Base.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/Basic2D.q.yml">quintessence/Wicked/Entities/Basic2D.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/Basic2DFactory.q.yml">quintessence/Wicked/Entities/Basic2DFactory.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/Basic3D.q.yml">quintessence/Wicked/Entities/Basic3D.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/CollectionHelper.q.yml">quintessence/Wicked/Entities/CollectionHelper.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/Doors/Basic2D.q.yml">quintessence/Wicked/Entities/Doors/Basic2D.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/Enemies/Base.q.yml">quintessence/Wicked/Entities/Enemies/Base.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/EnemyFactory.q.yml">quintessence/Wicked/Entities/EnemyFactory.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/MovementStrategies2D/Anchored.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/Anchored.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/MovementStrategies2D/BackAndForthHorizontal.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/BackAndForthHorizontal.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/MovementStrategies2D/Base.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/Base.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/MovementStrategies2D/FallOnTrackingRange.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/FallOnTrackingRange.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/MovementStrategies2D/Flapping.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/Flapping.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/MovementStrategies2D/FlappingWithRandomness.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/FlappingWithRandomness.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/MovementStrategies2D/HoppingLeft.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/HoppingLeft.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/MovementStrategies2D/MoveInDirection.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/MoveInDirection.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/MovementStrategies2D/MoveLeft.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/MoveLeft.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/MovementStrategies2D/MoveRight.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/MoveRight.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/MovementStrategies2D/ReflectOffWalls.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/ReflectOffWalls.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/MovementStrategies2D/StayStill.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/StayStill.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/MovementStrategies2D/Tracking.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/Tracking.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/Zones/Base2D.q.yml">quintessence/Wicked/Entities/Zones/Base2D.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/Zones/Base3D.q.yml">quintessence/Wicked/Entities/Zones/Base3D.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/Zones/Rectangle2D.q.yml">quintessence/Wicked/Entities/Zones/Rectangle2D.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Entities/Zones/Rectangle3D.q.yml">quintessence/Wicked/Entities/Zones/Rectangle3D.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Hud.q.yml">quintessence/Wicked/Hud.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Physics/AABB2D.q.yml">quintessence/Wicked/Physics/AABB2D.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Physics/EntityZoneCollisionObserver.q.yml">quintessence/Wicked/Physics/EntityZoneCollisionObserver.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Physics/TileMapCollisionStepper.q.yml">quintessence/Wicked/Physics/TileMapCollisionStepper.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Weapons/Base.q.yml">quintessence/Wicked/Weapons/Base.q.yml</a></li>
  <li><a href="#quintessence/Wicked/Weapons/DrawnBow.q.yml">quintessence/Wicked/Weapons/DrawnBow.q.yml</a></li>
  <li><a href="#quintessence/WickedDemos/ProgramRunner.q.yml">quintessence/WickedDemos/ProgramRunner.q.yml</a></li>
  <li><a href="#quintessence/WickedDemos/TileDemo.q.yml">quintessence/WickedDemos/TileDemo.q.yml</a></li>
  <li><a href="#quintessence/WickedDemos/TileMaps/Basic2D.q.yml">quintessence/WickedDemos/TileMaps/Basic2D.q.yml</a></li>
</ul>
<h1>Components</h1>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/AudioController.q.yml">quintessence/AllegroFlare/AudioController.q.yml</h3>
     <table>
<tr>
  <td class="private_property">sample_bin</td>
  <td class="private_property">AllegroFlare::SampleBin*</td>
</tr>
<tr>
  <td class="private_property">sound_effects_identifier_prefix</td>
  <td class="private_property">std::string</td>
</tr>
<tr>
  <td class="private_property">music_tracks_identifier_prefix</td>
  <td class="private_property">std::string</td>
</tr>
<tr>
  <td class="private_property">sound_effect_elements</td>
  <td class="private_property">std::map&lt;std::string, AllegroFlare::AudioRepositoryElement&gt;</td>
</tr>
<tr>
  <td class="private_property">music_track_elements</td>
  <td class="private_property">std::map&lt;std::string, AllegroFlare::AudioRepositoryElement&gt;</td>
</tr>
<tr>
  <td class="private_property">sound_effects</td>
  <td class="private_property">std::map&lt;std::string, AllegroFlare::Sound*&gt;</td>
</tr>
<tr>
  <td class="private_property">music_tracks</td>
  <td class="private_property">std::map&lt;std::string, AllegroFlare::Sound*&gt;</td>
</tr>
<tr>
  <td class="private_property">current_music_track_identifier</td>
  <td class="private_property">std::string</td>
</tr>
<tr>
  <td class="private_property">global_volume</td>
  <td class="private_property">float</td>
</tr>
<tr>
  <td class="private_property">output_loading_debug_to_cout</td>
  <td class="private_property">bool</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">music_tracks_loaded</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">sound_effects_loaded</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">set_and_load_sound_effect_elements(std::map&lt;std::string, AllegroFlare::AudioRepositoryElement&gt; sound_effect_elements={})</td>
</tr>
<tr>
  <td class="method">set_and_load_music_track_elements(std::map&lt;std::string, AllegroFlare::AudioRepositoryElement&gt; music_track_elements={})</td>
</tr>
<tr>
  <td class="private_method">load_sound_effects()</td>
</tr>
<tr>
  <td class="private_method">load_music_tracks()</td>
</tr>
<tr>
  <td class="method">destruct()</td>
</tr>
<tr>
  <td class="private_method">destruct_all()</td>
</tr>
<tr>
  <td class="private_method">destruct_all_sound_effects()</td>
</tr>
<tr>
  <td class="private_method">destruct_all_music_tracks()</td>
</tr>
<tr>
  <td class="method">stop_all()</td>
</tr>
<tr>
  <td class="method">stop_all_music_tracks()</td>
</tr>
<tr>
  <td class="private_method">stop_all_sound_effects()</td>
</tr>
<tr>
  <td class="method">set_global_volume(float volume=0.1)</td>
</tr>
<tr>
  <td class="method">play_sound_effect(std::string identifier=&quot;a-sound-effect-identifier-that-is-not-set&quot;)</td>
</tr>
<tr>
  <td class="method">play_music_track(std::string identifier=&quot;a-music-track-identifier-that-is-not-set&quot;)</td>
</tr>
<tr>
  <td class="private_method">sound_effect_element_exists(std::string identifier=&quot;a-sound-effect-identifier-that-is-not-set&quot;)</td>
</tr>
<tr>
  <td class="private_method">find_sound_effect_sound_object_by_identifier(std::string identifier=&quot;a-sound-effect-identifier-that-is-not-set&quot;)</td>
</tr>
<tr>
  <td class="private_method">find_sound_effect_element_by_identifier(std::string identifier=&quot;a-sound-effect-identifier-that-is-not-set&quot;)</td>
</tr>
<tr>
  <td class="private_method">find_music_track_sound_object_by_identifier(std::string identifier=&quot;a-music-track-identifier-that-is-not-set&quot;)</td>
</tr>
<tr>
  <td class="private_method">music_track_element_exists(std::string identifier=&quot;a-music-track-identifier-that-is-not-set&quot;)</td>
</tr>
<tr>
  <td class="private_method">find_music_track_element_by_identifier(std::string identifier=&quot;a-music-track-identifier-that-is-not-set&quot;)</td>
</tr>
<tr>
  <td class="method">dump_to_cout()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TerminalColors&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TerminalColors.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SampleBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SampleBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SampleBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SampleBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AudioRepositoryElement&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AudioRepositoryElement.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, AllegroFlare::AudioRepositoryElement&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;, &quot;AllegroFlare/AudioRepositoryElement.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, AllegroFlare::Sound*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;, &quot;AllegroFlare/Sound.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Sound*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Sound.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_audio_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_acodec_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_acodec.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Sound&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Sound.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/AudioProcessing/AudioDataBlock.q.yml">quintessence/AllegroFlare/AudioProcessing/AudioDataBlock.q.yml</h3>
     <table>
<tr>
  <td class="property">block</td>
  <td class="property">std::vector&lt;float&gt;</td>
</tr>
<tr>
  <td class="property">sample_count</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">depth_type</td>
  <td class="property">ALLEGRO_AUDIO_DEPTH</td>
</tr>
<tr>
  <td class="property">depth_type_size</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">frequency</td>
  <td class="property">unsigned int</td>
</tr>
<tr>
  <td class="property">channel_configuration</td>
  <td class="property">ALLEGRO_CHANNEL_CONF</td>
</tr>
<tr>
  <td class="property">channel_count</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">CHANNEL_LEFT</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">CHANNEL_RIGHT</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">sample_head_position</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">move_sample_head_position_by(std::size_t delta=0)</td>
</tr>
<tr>
  <td class="method">set_sample_count(std::size_t sample_count=2048, bool clear=false)</td>
</tr>
<tr>
  <td class="method">get_block_size()</td>
</tr>
<tr>
  <td class="method">get_sample_at_mono(int sample_position=0, int channel_t=CHANNEL_LEFT)</td>
</tr>
<tr>
  <td class="method">set_sample_at_mono(int sample_position=0, int channel_t=CHANNEL_LEFT, float value=0.0f)</td>
</tr>
<tr>
  <td class="method">set_sample_at(int sample_position=0, float left_channel_value=0.0f, float right_channel_value=0.0f)</td>
</tr>
<tr>
  <td class="method">get_sample_at(int sample_position=0)</td>
</tr>
<tr>
  <td class="private_method">clamp_loop_sample_position(int sample_position=0)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_MIXER&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_AUDIO_DEPTH&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_CHANNEL_CONF&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::size_t&quot;, &quot;headers&quot;=&gt;[&quot;cstddef&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/AudioProcessing/AudioMixer.q.yml">quintessence/AllegroFlare/AudioProcessing/AudioMixer.q.yml</h3>
     <table>
<tr>
  <td class="property">parent_mixer</td>
  <td class="property">ALLEGRO_MIXER*</td>
</tr>
<tr>
  <td class="property">mixer</td>
  <td class="property">ALLEGRO_MIXER*</td>
</tr>
<tr>
  <td class="property">audio_depth</td>
  <td class="property">ALLEGRO_AUDIO_DEPTH</td>
</tr>
<tr>
  <td class="property">audio_depth_size</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">frequency</td>
  <td class="property">unsigned int</td>
</tr>
<tr>
  <td class="property">channel_configuration</td>
  <td class="property">ALLEGRO_CHANNEL_CONF</td>
</tr>
<tr>
  <td class="property">channel_count</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">get_mixer()</td>
</tr>
<tr>
  <td class="method">validate_configuration()</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">set_postprocess_callback(void (*callback)(void*, unsigned int, void*) /*callback*/=nullptr, void* user_data=nullptr)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_audio_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_MIXER&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_AUDIO_DEPTH&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_CHANNEL_CONF&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::size_t&quot;, &quot;headers&quot;=&gt;[&quot;cstddef&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;callback&quot;}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/AudioProcessing/Filters/AllPass.q.yml">quintessence/AllegroFlare/AudioProcessing/Filters/AllPass.q.yml</h3>
     <table>
<tr>
  <td class="property">offset_sec</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">gain</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">wet</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">dry</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">mixer</td>
  <td class="property">AllegroFlare::AudioProcessing::AudioMixer</td>
</tr>
<tr>
  <td class="property">data_block</td>
  <td class="property">AllegroFlare::AudioProcessing::AudioDataBlock</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_offset_sec(float offset_sec=1.0f)</td>
</tr>
<tr>
  <td class="method">set_gain(float gain=1.0f)</td>
</tr>
<tr>
  <td class="method">set_wet(float wet=1.0f)</td>
</tr>
<tr>
  <td class="method">set_dry(float dry=1.0f)</td>
</tr>
<tr>
  <td class="method">get_al_mixer()</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">mixer_postprocess_callback(void* buf=nullptr, unsigned int samples=0, void* data=nullptr)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AudioProcessing::AudioDataBlock&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AudioProcessing/AudioDataBlock.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AudioProcessing::AudioMixer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AudioProcessing/AudioMixer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_MIXER&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/AudioProcessing/Filters/Delay.q.yml">quintessence/AllegroFlare/AudioProcessing/Filters/Delay.q.yml</h3>
     <table>
<tr>
  <td class="property">delay_sec</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">decay</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">mixer</td>
  <td class="property">AllegroFlare::AudioProcessing::AudioMixer</td>
</tr>
<tr>
  <td class="property">data_block</td>
  <td class="property">AllegroFlare::AudioProcessing::AudioDataBlock</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_delay_sec(float delay_sec=1.0f)</td>
</tr>
<tr>
  <td class="method">get_al_mixer()</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">mixer_postprocess_callback(void* buf=nullptr, unsigned int samples=0, void* data=nullptr)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AudioProcessing::AudioDataBlock&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AudioProcessing/AudioDataBlock.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AudioProcessing::AudioMixer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AudioProcessing/AudioMixer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_MIXER&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/AudioRepositoryElement.q.yml">quintessence/AllegroFlare/AudioRepositoryElement.q.yml</h3>
     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">loop</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">overplay_strategy</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">volume</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">overplay_strategy_is_ignore()</td>
</tr>
<tr>
  <td class="method">overplay_strategy_is_restart()</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/BackgroundFactory.q.yml">quintessence/AllegroFlare/BackgroundFactory.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">create_monoplex()</td>
</tr>
<tr>
  <td class="method">create_image(std::string image_identifier=&quot;[unset-default-image-identifer-for-background-factory]&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Monoplex*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Monoplex.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Image*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Image.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Image&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Image.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Monoplex&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Monoplex.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Bone3D.q.yml">quintessence/AllegroFlare/Bone3D.q.yml</h3>
     <table>
<tr>
  <td class="property">children</td>
  <td class="property">std::vector&lt;AllegroFlare::Bone3D*&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">add_child(AllegroFlare::Bone3D* bone={})</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;AllegroFlare::Bone3D*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Bone3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Bone3D*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Bone3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Bone3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Bone3D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Bone3DGraphRenderer.q.yml">quintessence/AllegroFlare/Bone3DGraphRenderer.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">root_bone</td>
  <td class="property">AllegroFlare::Bone3D*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">render_recursive(AllegroFlare::Bone3D* bone=nullptr)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Bone3D*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Bone3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_font_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::draw_3d_line&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful3D/Useful3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Bone3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Bone3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Camera2D.q.yml">quintessence/AllegroFlare/Camera2D.q.yml</h3>
     <table>
<tr>
  <td class="property">zoom</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_zoom(AllegroFlare::Vec2D zoom={1.0f, 1.0f})</td>
</tr>
<tr>
  <td class="method">get_inv_zoom()</td>
</tr>
<tr>
  <td class="method">setup_dimentional_projection(ALLEGRO_BITMAP* bitmap=nullptr)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;tan&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/CameraControlStrategies2D/Base.q.yml">quintessence/AllegroFlare/CameraControlStrategies2D/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">camera</td>
  <td class="property">AllegroFlare::Placement2D*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">is_type(std::string possible_type=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/CameraControlStrategies2D/HorizontalRail.q.yml">quintessence/AllegroFlare/CameraControlStrategies2D/HorizontalRail.q.yml</h3>
     <table>
<tr>
  <td class="property">entity_to_follow</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CameraControlStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CameraControlStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/CameraControlStrategies2D/SmoothSnap.q.yml">quintessence/AllegroFlare/CameraControlStrategies2D/SmoothSnap.q.yml</h3>
     <table>
<tr>
  <td class="property">room_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">room_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">entity_to_follow</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">tracking_target_position_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">tracking_target_position_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CameraControlStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CameraControlStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/CameraControlStrategies2D/SmoothSnapWithZoomEffect.q.yml">quintessence/AllegroFlare/CameraControlStrategies2D/SmoothSnapWithZoomEffect.q.yml</h3>
     <table>
<tr>
  <td class="property">room_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">room_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">entity_to_follow</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">tracking_target_position_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">tracking_target_position_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CameraControlStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CameraControlStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fabs&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Useful&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/CameraControlStrategies2D/Snap.q.yml">quintessence/AllegroFlare/CameraControlStrategies2D/Snap.q.yml</h3>
     <table>
<tr>
  <td class="property">entity_to_follow</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CameraControlStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CameraControlStrategies2D/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Cubemap.q.yml">quintessence/AllegroFlare/Cubemap.q.yml</h3>
     <table>
<tr>
  <td class="property">id</td>
  <td class="property">GLuint</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;GLuint&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_opengl.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/DeploymentEnvironment.q.yml">quintessence/AllegroFlare/DeploymentEnvironment.q.yml</h3>
     <table>
<tr>
  <td class="property">environment</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">ENVIRONMENT_UNDEF</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">ENVIRONMENT_TEST</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">ENVIRONMENT_DEVELOPMENT</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">ENVIRONMENT_PRODUCTION</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_environment(std::string environment=ENVIRONMENT_UNDEF)</td>
</tr>
<tr>
  <td class="method">is_undefined()</td>
</tr>
<tr>
  <td class="method">is_production()</td>
</tr>
<tr>
  <td class="method">is_test()</td>
</tr>
<tr>
  <td class="method">is_development()</td>
</tr>
<tr>
  <td class="method">_is_valid(std::string environment=&quot;[unset-environment]&quot;)</td>
</tr>
<tr>
  <td class="method">is_valid()</td>
</tr>
<tr>
  <td class="method">is_invalid()</td>
</tr>
<tr>
  <td class="method">get_data_folder_path()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/AchievementsList.q.yml">quintessence/AllegroFlare/Elements/AchievementsList.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">achievements</td>
  <td class="property">std::vector&lt;std::tuple&lt;std::string, std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">achievements_box_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">achievements_box_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">surface_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">scrollbar_position</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">box_gutter_y</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">move_scrollbar_position(float distance_y=0.0f)</td>
</tr>
<tr>
  <td class="method">set_scrollbar_position(float scrollbar_position=0.0f)</td>
</tr>
<tr>
  <td class="method">set_scrollbar_position_to_max()</td>
</tr>
<tr>
  <td class="method">infer_scrollbar_max_position()</td>
</tr>
<tr>
  <td class="method">scrollbar_is_autohidden_because_list_contents_is_smaller_than_the_container()</td>
</tr>
<tr>
  <td class="method">build_placeholder_achievements()</td>
</tr>
<tr>
  <td class="private_method">count_num_achievements_completed()</td>
</tr>
<tr>
  <td class="private_method">draw_header_title_backfill()</td>
</tr>
<tr>
  <td class="private_method">count_num_achievements()</td>
</tr>
<tr>
  <td class="private_method">build_achievements_count_string()</td>
</tr>
<tr>
  <td class="private_method">draw_achievements_list_title_text_and_completed_title_text()</td>
</tr>
<tr>
  <td class="private_method">infer_container_height()</td>
</tr>
<tr>
  <td class="private_method">infer_container_contents_height()</td>
</tr>
<tr>
  <td class="private_method">infer_container_scroll_range()</td>
</tr>
<tr>
  <td class="private_method">limit_scrollbar_position()</td>
</tr>
<tr>
  <td class="private_method">draw_achievements_list_items_and_scrollbar()</td>
</tr>
<tr>
  <td class="private_method">draw_achievement_box(float x=0.0f, float y=0.0f, std::string status=&quot;[unset-status]&quot;, std::string title=&quot;[unset-title]&quot;, std::string description=&quot;[unset-description]&quot;)</td>
</tr>
<tr>
  <td class="private_method">infer_icon_character_by_status(std::string status=&quot;[unset-status]&quot;)</td>
</tr>
<tr>
  <td class="private_method">infer_icon_color_by_status(std::string status=&quot;[unset-status]&quot;, ALLEGRO_COLOR icon_locked_color=ALLEGRO_COLOR{1, 1, 1, 1}, ALLEGRO_COLOR icon_hidden_color=ALLEGRO_COLOR{1, 1, 1, 1}, ALLEGRO_COLOR icon_achieved_color=ALLEGRO_COLOR{1, 1, 1, 1})</td>
</tr>
<tr>
  <td class="private_method">filter_item_title_through_status(std::string title=&quot;[unset-title]&quot;, std::string status=&quot;[unset-status]&quot;)</td>
</tr>
<tr>
  <td class="private_method">filter_item_description_through_status(std::string description=&quot;[unset-title]&quot;, std::string status=&quot;[unset-status]&quot;)</td>
</tr>
<tr>
  <td class="private_method">obtain_title_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_item_title_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_item_description_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_icon_font()</td>
</tr>
<tr>
  <td class="private_method">draw_unicode_character(ALLEGRO_FONT* font=nullptr, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1}, int x=0, int y=0, uint32_t icon=61444, int flags=0)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::tuple&lt;std::string, std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;tuple&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Scrollbar&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Scrollbar.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min, std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/AdvancingText.q.yml">quintessence/AllegroFlare/Elements/AdvancingText.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">line_height_multiplier</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">line_height_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">revealed_characters_count</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">finished</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">start()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">jump_to_end()</td>
</tr>
<tr>
  <td class="method">reveal_all_characters()</td>
</tr>
<tr>
  <td class="method">all_characters_are_revealed()</td>
</tr>
<tr>
  <td class="private_method">generate_revealed_text()</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_multiline_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min, std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Backgrounds/Base.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">activate()</td>
</tr>
<tr>
  <td class="method">deactivate()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">show()</td>
</tr>
<tr>
  <td class="method">hide()</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Backgrounds/IconPattern.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/IconPattern.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">background_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">icon_a</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">icon_b</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">font_awesome_font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">time</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">draw_unicode_character(ALLEGRO_FONT* font=nullptr, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1}, int32_t icon=61444, int flags=0, float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="method">obtain_font_awesome_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;sin&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Backgrounds/Image.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/Image.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">image_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">image_file_location_prefix</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">reveal_counter</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">reveal_speed</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">obtain_background_bitmap()</td>
</tr>
<tr>
  <td class="method">activate()</td>
</tr>
<tr>
  <td class="method">deactivate()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">infer_opacity()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Backgrounds/Monoplex.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/Monoplex.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">monoplex_1_counter</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">monoplex_2_counter</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">monoplex_3_counter</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;sin&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Backgrounds/Parallax.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/Parallax.q.yml</h3>
     <table>
<tr>
  <td class="property">layers</td>
  <td class="property">std::vector&lt;AllegroFlare::Elements::Backgrounds::ParallaxLayer&gt;</td>
</tr>
<tr>
  <td class="property">offset_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">offset_y</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::draw_offset_textured_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;AllegroFlare::Elements::Backgrounds::ParallaxLayer&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Elements/Backgrounds/ParallaxLayer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::ParallaxLayer&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Elements/Backgrounds/ParallaxLayer.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Backgrounds/ParallaxLayer.q.yml">quintessence/AllegroFlare/Elements/Backgrounds/ParallaxLayer.q.yml</h3>
     <table>
<tr>
  <td class="property">anchor_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">anchor_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">offset_rate</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Base.q.yml">quintessence/AllegroFlare/Elements/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">placement</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ElementID&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ElementID.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxFactory.q.yml">quintessence/AllegroFlare/Elements/DialogBoxFactory.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">build_basic_test_dialog()</td>
</tr>
<tr>
  <td class="method">create_basic_test_dialog()</td>
</tr>
<tr>
  <td class="method">build_basic_dialog(std::vector&lt;std::string&gt; pages={})</td>
</tr>
<tr>
  <td class="method">create_basic_dialog(std::vector&lt;std::string&gt; pages={})</td>
</tr>
<tr>
  <td class="method">create_choice_dialog(std::string prompt=&quot;[unset-prompt]&quot;, std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt; options={})</td>
</tr>
<tr>
  <td class="method">create_you_got_an_item_dialog(std::string item_name=&quot;[unset-item-name]&quot;, std::string item_bitmap_identifier=&quot;[unset-item-bitmap-identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">create_you_got_new_evidence_dialog(std::string evidence_name=&quot;[unset-evidence_name]&quot;, std::string evidence_bitmap_identifier=&quot;[unset-evidence_bitmap_identifier]&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_time&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Choice*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Choice.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Basic*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Basic&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Choice&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Choice.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::YouGotAnItem&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/YouGotAnItem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::YouGotEvidence&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/YouGotEvidence.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxFrame.q.yml">quintessence/AllegroFlare/Elements/DialogBoxFrame.q.yml</h3>
     <table>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">backfill_opacity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">backfill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">border_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">opacity</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::color::color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_current_display&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxNameTag.q.yml">quintessence/AllegroFlare/Elements/DialogBoxNameTag.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">draw_text()</td>
</tr>
<tr>
  <td class="private_method">obtain_dialog_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_current_display&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxFrame&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxFrame.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderer.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">dialog_box</td>
  <td class="property">AllegroFlare::Elements::DialogBoxes::Base*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_current_display&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Basic*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxFrame&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxFrame.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Choice*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Choice.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::YouGotAnItem*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/YouGotAnItem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::YouGotEvidence&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/YouGotEvidence.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxRenderers::ChoiceRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxRenderers::YouGotAnItemRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxRenderers::YouGotEvidenceRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxRenderers::BasicRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Basic&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Choice&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Choice.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::YouGotAnItem&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/YouGotAnItem.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">current_page_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">text_padding_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">text_padding_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">num_revealed_characters</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">is_finished</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">page_is_finished</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">page_finished_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">at_last_page</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">age</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">draw_special_state_empty_text(float width=1, float height=1)</td>
</tr>
<tr>
  <td class="private_method">draw_action_text(std::string text=&quot;[unset-action-text]&quot;, float width=1, float height=1)</td>
</tr>
<tr>
  <td class="method">draw_styled_revealed_text(float max_width=1, std::string text=&quot;[unset-text]&quot;, int num_revealed_characters=999)</td>
</tr>
<tr>
  <td class="private_method">concat_text(std::string source_text=&quot;&quot;, int length=0)</td>
</tr>
<tr>
  <td class="private_method">obtain_dialog_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_current_display&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Basic*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxFrame&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxFrame.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogButton&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogButton.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Interpolators::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Basic&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Interpolators::&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">choice_dialog_box</td>
  <td class="property">AllegroFlare::Elements::DialogBoxes::Choice*</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">text_padding_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">text_padding_y</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">draw_prompt_text()</td>
</tr>
<tr>
  <td class="method">draw_choices_with_cursor_and_current_selection(float start_y=0)</td>
</tr>
<tr>
  <td class="private_method">obtain_dialog_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_choice_dialog_box_prompt()</td>
</tr>
<tr>
  <td class="private_method">obtain_choice_dialog_box_options()</td>
</tr>
<tr>
  <td class="private_method">obtain_choice_dialog_box_cursor_position()</td>
</tr>
<tr>
  <td class="private_method">concat_text(std::string source_text=&quot;&quot;, int length=0)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Choice*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Choice.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxFrame&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxFrame.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Choice&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Choice.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">item_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">item_bitmap_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">age</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">get_live_reveal_counter()</td>
</tr>
<tr>
  <td class="private_method">obtain_notification_text_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_item_name_text_font()</td>
</tr>
<tr>
  <td class="method">opaquify(ALLEGRO_COLOR color={0,0,0,0})</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxFrame&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxFrame.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Interpolators::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Interpolators::&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">evidence_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">evidence_bitmap_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">age</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">DEFAULT_WIDTH</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">DEFAULT_HEIGHT</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">get_live_reveal_counter()</td>
</tr>
<tr>
  <td class="private_method">obtain_notification_text_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_evidence_name_text_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_evidence_description_font()</td>
</tr>
<tr>
  <td class="method">opaquify(ALLEGRO_COLOR color={0,0,0,0})</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxFrame&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxFrame.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Interpolators::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Interpolators::&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxes/Base.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">created_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">infer_age()</td>
</tr>
<tr>
  <td class="method">is_type(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::vector&lt;std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_time&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxes/Basic.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/Basic.q.yml</h3>
     <table>
<tr>
  <td class="property">pages</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">current_page_num</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">finished</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">num_revealed_characters</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">finished_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">page_finished</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">page_finished_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">set_pages(std::vector&lt;std::string&gt; pages={})</td>
</tr>
<tr>
  <td class="method">reset()</td>
</tr>
<tr>
  <td class="method">get_current_page_text()</td>
</tr>
<tr>
  <td class="method">get_current_page_num_chars()</td>
</tr>
<tr>
  <td class="method">advance()</td>
</tr>
<tr>
  <td class="method">next_page()</td>
</tr>
<tr>
  <td class="method">reset_current_page_counters()</td>
</tr>
<tr>
  <td class="method">num_pages()</td>
</tr>
<tr>
  <td class="method">has_no_pages()</td>
</tr>
<tr>
  <td class="method">at_last_page()</td>
</tr>
<tr>
  <td class="private_method">current_page_is_valid()</td>
</tr>
<tr>
  <td class="method">reveal_all_characters()</td>
</tr>
<tr>
  <td class="method">all_characters_are_revealed()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_time&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxes/Choice.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/Choice.q.yml</h3>
     <table>
<tr>
  <td class="property">prompt</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">options</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">cursor_position</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">get_prompt()</td>
</tr>
<tr>
  <td class="method">get_options()</td>
</tr>
<tr>
  <td class="method">get_current_selection_text()</td>
</tr>
<tr>
  <td class="method">get_current_selection_value()</td>
</tr>
<tr>
  <td class="method">move_cursor_position_down()</td>
</tr>
<tr>
  <td class="method">move_cursor_position_up()</td>
</tr>
<tr>
  <td class="private_method">has_valid_cursor_position()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxes/YouGotAnItem.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/YouGotAnItem.q.yml</h3>
     <table>
<tr>
  <td class="property">item_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">item_bitmap_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">finished</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">advance()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_time&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogBoxes/YouGotEvidence.q.yml">quintessence/AllegroFlare/Elements/DialogBoxes/YouGotEvidence.q.yml</h3>
     <table>
<tr>
  <td class="property">evidence_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">evidence_bitmap_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">finished</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">advance()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_time&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogButton.q.yml">quintessence/AllegroFlare/Elements/DialogButton.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">text_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">started_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">at_last_advance</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">obtain_button_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_ttf_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_ttf.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min, std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Basic&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Interpolators::&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogRoll.q.yml">quintessence/AllegroFlare/Elements/DialogRoll.q.yml</h3>
     <table>
<tr>
  <td class="property">log</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">SPEAKER_INTERNAL</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;char*&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/DialogRollRenderer.q.yml">quintessence/AllegroFlare/Elements/DialogRollRenderer.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">roll</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">gutter_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">gutter_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">speaker_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">dialog_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">internal_dialog_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_italic_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogRoll&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogRoll.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogRoll*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogRoll.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/HealthBars/Basic.q.yml">quintessence/AllegroFlare/Elements/HealthBars/Basic.q.yml</h3>
     <table>
<tr>
  <td class="property">value</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">max</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">fill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">backfill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">bar_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">bar_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">min_render_threshold</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/HealthBars/Classic.q.yml">quintessence/AllegroFlare/Elements/HealthBars/Classic.q.yml</h3>
     <table>
<tr>
  <td class="property">max</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">value</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">fill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">empty_box_outline_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">bar_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">bar_spacing</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">bar_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">bar_stroke_thickness</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">fit_placement_width_and_height()</td>
</tr>
<tr>
  <td class="method">calculate_width()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/HealthBars/Hearts.q.yml">quintessence/AllegroFlare/Elements/HealthBars/Hearts.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">max</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">value</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">fill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">empty_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">outline_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">heart_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">heart_spacing</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">drawing_outline</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">font_awesome_solid_font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_awesome_outline_font_name</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">draw_unicode_character(ALLEGRO_FONT* font=nullptr, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1}, int32_t icon=61444, int flags=0, float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="private_method">obtain_font_awesome_solid_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_font_awesome_outline_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontAwesome&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontAwesome.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;int32_t&quot;, &quot;headers&quot;=&gt;[&quot;cstdint&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Inventory.q.yml">quintessence/AllegroFlare/Elements/Inventory.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">af_inventory</td>
  <td class="property">AllegroFlare::Inventory*</td>
</tr>
<tr>
  <td class="property">inventory_index</td>
  <td class="property">AllegroFlare::InventoryIndex*</td>
</tr>
<tr>
  <td class="property">inventory_dictionary</td>
  <td class="property">AllegroFlare::InventoryDictionary*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">place</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">cursor_x</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cursor_y</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">active</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">details_reveal_counter</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">details_num_revealed_characters</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">reveal_counter</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">item_in_details_pane</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">item_in_details_pane_set_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">inventory_items_left_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">inventory_items_top_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">inventory_items_box_size_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">inventory_items_box_size_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">inventory_items_box_gutter_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">inventory_items_box_gutter_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cursor_move_sound_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">show_background</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">show_backframe</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">show_title_text</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">draw_details_pane_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Elements::Inventory*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">draw_details_pane_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">draw_inventory_item_func</td>
  <td class="property">std::function&lt;void(AllegroFlare::Elements::Inventory*, float, float, int, void*)&gt;</td>
</tr>
<tr>
  <td class="property">draw_inventory_item_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">render_selectable_items_before_details_pane</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">inventory_show_sound_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">inventory_hide_sound_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">sound_is_disabled</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">activate()</td>
</tr>
<tr>
  <td class="method">deactivate()</td>
</tr>
<tr>
  <td class="method">refresh()</td>
</tr>
<tr>
  <td class="method">show()</td>
</tr>
<tr>
  <td class="method">hide()</td>
</tr>
<tr>
  <td class="method">toggle_show_hide()</td>
</tr>
<tr>
  <td class="method">move_cursor_up()</td>
</tr>
<tr>
  <td class="method">move_cursor_down()</td>
</tr>
<tr>
  <td class="method">move_cursor_left()</td>
</tr>
<tr>
  <td class="method">move_cursor_right()</td>
</tr>
<tr>
  <td class="method">calc_details_header_reveal_x_offset()</td>
</tr>
<tr>
  <td class="method">calc_details_header_reveal_color()</td>
</tr>
<tr>
  <td class="method">disable_sound()</td>
</tr>
<tr>
  <td class="method">enable_sound()</td>
</tr>
<tr>
  <td class="method">is_sound_disabled()</td>
</tr>
<tr>
  <td class="method">is_sound_enabled()</td>
</tr>
<tr>
  <td class="method">set_num_columns(int num_columns=1)</td>
</tr>
<tr>
  <td class="method">set_num_rows(int num_rows=1)</td>
</tr>
<tr>
  <td class="private_method">set_details_pane()</td>
</tr>
<tr>
  <td class="private_method">opaquify(ALLEGRO_COLOR color={0,0,0,0})</td>
</tr>
<tr>
  <td class="private_method">change_a(ALLEGRO_COLOR color={0,0,0,0}, float alpha=1.0f)</td>
</tr>
<tr>
  <td class="private_method">inv_reveal_counter()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">draw_selectable_items()</td>
</tr>
<tr>
  <td class="method">draw_background()</td>
</tr>
<tr>
  <td class="private_method">draw_backframe()</td>
</tr>
<tr>
  <td class="private_method">draw_title_text()</td>
</tr>
<tr>
  <td class="private_method">draw_inventory_items()</td>
</tr>
<tr>
  <td class="private_method">draw_inventory_boxes()</td>
</tr>
<tr>
  <td class="method">draw_details_item_name(float x=0, float y=0, ALLEGRO_FONT* font=nullptr)</td>
</tr>
<tr>
  <td class="method">draw_details_item_description(float x=0, float y=0, float width=1, ALLEGRO_FONT* font=nullptr)</td>
</tr>
<tr>
  <td class="private_method">draw_details_pane()</td>
</tr>
<tr>
  <td class="private_method">has_valid_size()</td>
</tr>
<tr>
  <td class="method">draw_item_selection_cursor()</td>
</tr>
<tr>
  <td class="private_method">draw_inventory_box(float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="private_method">draw_inventory_item(float x=0.0f, float y=0.0f, int item=0)</td>
</tr>
<tr>
  <td class="method">get_item_definition(int index=0)</td>
</tr>
<tr>
  <td class="method">obtain_title_font()</td>
</tr>
<tr>
  <td class="method">obtain_description_font()</td>
</tr>
<tr>
  <td class="method">obtain_item_name_font()</td>
</tr>
<tr>
  <td class="method">obtain_details_header_font()</td>
</tr>
<tr>
  <td class="method">infer_item_boxes_width()</td>
</tr>
<tr>
  <td class="method">infer_item_boxes_height()</td>
</tr>
<tr>
  <td class="private_method">play_move_cursor_sound()</td>
</tr>
<tr>
  <td class="private_method">play_hide_inventory_sound()</td>
</tr>
<tr>
  <td class="private_method">play_show_inventory_sound()</td>
</tr>
<tr>
  <td class="method">play_sound(std::string sound_identifier=&quot;[unset-play_sound]&quot;)</td>
</tr>
<tr>
  <td class="method">create_placeholder_inventory_index()</td>
</tr>
<tr>
  <td class="method">concat_text(std::string source_text=&quot;&quot;, int length=0)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;X&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;, &quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Inventory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Inventory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryIndex&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryIndex.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryDictionary&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryDictionary.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Inventory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Inventory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::function&quot;, &quot;headers&quot;=&gt;[&quot;functional&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/LevelSelect.q.yml">quintessence/AllegroFlare/Elements/LevelSelect.q.yml</h3>
     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">levels_list</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">place</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">cursor_x</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cursor_y</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">selection_box_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">selection_box_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">selection_box_spacing_x</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">selection_box_spacing_y</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_rows</td>
  <td class="property">int</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">opaquify(ALLEGRO_COLOR color={0,0,0,0})</td>
</tr>
<tr>
  <td class="method">change_a(ALLEGRO_COLOR color={0,0,0,0}, float alpha=1.0f)</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">draw_backfill_and_frame()</td>
</tr>
<tr>
  <td class="private_method">draw_level_select_title_text()</td>
</tr>
<tr>
  <td class="private_method">draw_level_select_boxes_and_cursor()</td>
</tr>
<tr>
  <td class="method">move_cursor_up()</td>
</tr>
<tr>
  <td class="method">move_cursor_down()</td>
</tr>
<tr>
  <td class="method">move_cursor_left()</td>
</tr>
<tr>
  <td class="method">move_cursor_right()</td>
</tr>
<tr>
  <td class="private_method">has_valid_size()</td>
</tr>
<tr>
  <td class="private_method">list_is_empty()</td>
</tr>
<tr>
  <td class="method">draw_selection_cursor(float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="private_method">draw_level_list_item_box(float x=0.0f, float y=0.0f, float w=1.0f, float h=1.0f, std::string label=&quot;[unlabeled]&quot;)</td>
</tr>
<tr>
  <td class="method">activate_selected_menu_option()</td>
</tr>
<tr>
  <td class="private_method">infer_current_menu_option_value()</td>
</tr>
<tr>
  <td class="method">obtain_title_font()</td>
</tr>
<tr>
  <td class="method">obtain_description_font()</td>
</tr>
<tr>
  <td class="method">obtain_item_name_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;X&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;, &quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_SELECT_LEVEL&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/NotificationRenderer.q.yml">quintessence/AllegroFlare/Elements/NotificationRenderer.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">notification</td>
  <td class="property">AllegroFlare::Elements::Notifications::Base*</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">draw_box()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Notifications::Base*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Notifications/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::NotificationRenderers::AchievementUnlocked&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Notifications::AchievementUnlocked&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Notifications/AchievementUnlocked.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Notifications::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Notifications/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked.q.yml">quintessence/AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">created_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">name</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">draw_achievement_box(std::string title=&quot;[unset-title]&quot;, std::string description=&quot;[unset-description]&quot;)</td>
</tr>
<tr>
  <td class="private_method">infer_icon_character_by_status(std::string status=&quot;[unset-status]&quot;)</td>
</tr>
<tr>
  <td class="private_method">infer_icon_color_by_status(std::string status=&quot;[unset-status]&quot;, ALLEGRO_COLOR icon_locked_color=ALLEGRO_COLOR{1, 1, 1, 1}, ALLEGRO_COLOR icon_hidden_color=ALLEGRO_COLOR{1, 1, 1, 1}, ALLEGRO_COLOR icon_achieved_color=ALLEGRO_COLOR{1, 1, 1, 1})</td>
</tr>
<tr>
  <td class="private_method">obtain_item_title_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_item_description_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_icon_font()</td>
</tr>
<tr>
  <td class="private_method">draw_unicode_character(ALLEGRO_FONT* font=nullptr, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1}, int x=0, int y=0, uint32_t icon=61444, int flags=0)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MotionFX::Sparkles2&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MotionFX/Sparkles2.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Notifications/AchievementUnlocked.q.yml">quintessence/AllegroFlare/Elements/Notifications/AchievementUnlocked.q.yml</h3>
     <table>
<tr>
  <td class="property">name</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Notifications::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Notifications/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Notifications/Base.q.yml">quintessence/AllegroFlare/Elements/Notifications/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">created_at</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">infer_age()</td>
</tr>
<tr>
  <td class="method">is_type(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::vector&lt;std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_time&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/NotificationsRenderer.q.yml">quintessence/AllegroFlare/Elements/NotificationsRenderer.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">notifications</td>
  <td class="property">std::vector&lt;AllegroFlare::Elements::Notifications::Base*&gt;</td>
</tr>
<tr>
  <td class="property">surface_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">notification_box_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">notification_box_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">notification_vertical_gutter</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::NotificationRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/NotificationRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Notifications::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Notifications/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/PlayingCards/Card.q.yml">quintessence/AllegroFlare/Elements/PlayingCards/Card.q.yml</h3>
     <table>
<tr>
  <td class="property">value</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">suit</td>
  <td class="property">int</td>
</tr>
    </table>
     <table>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/PlayingCards/Deck.q.yml">quintessence/AllegroFlare/Elements/PlayingCards/Deck.q.yml</h3>
     <table>
<tr>
  <td class="property">cards</td>
  <td class="property">std::vector&lt;AllegroFlare::Elements::PlayingCards::Card&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">put_card_on_top(AllegroFlare::Elements::PlayingCards::Card card={})</td>
</tr>
<tr>
  <td class="method">shuffle()</td>
</tr>
<tr>
  <td class="method">draw_card()</td>
</tr>
<tr>
  <td class="method">empty()</td>
</tr>
<tr>
  <td class="method">clear()</td>
</tr>
<tr>
  <td class="method">num_cards()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;AllegroFlare::Elements::PlayingCards::Card&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Elements/PlayingCards/Card.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::PlayingCards::Card&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Elements/PlayingCards/Card.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::shuffle&quot;, &quot;headers&quot;=&gt;[&quot;random&quot;, &quot;algorithm&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/PlayingCards/DeckFactory.q.yml">quintessence/AllegroFlare/Elements/PlayingCards/DeckFactory.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">generate_standard_52_card_deck()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::PlayingCards::Deck&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/PlayingCards/Deck.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/RollingCredits/RollingCredits.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/RollingCredits.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">sections</td>
  <td class="property">std::vector&lt;AllegroFlare::Elements::RollingCredits::Sections::Base*&gt;</td>
</tr>
<tr>
  <td class="property">surface_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y_offset</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">section_separator_margin</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height_calculated</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">set_sections(std::vector&lt;AllegroFlare::Elements::RollingCredits::Sections::Base*&gt; sections={})</td>
</tr>
<tr>
  <td class="method">calculate_height()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">render_or_calculate_height(bool only_calculate_height_dont_render=false)</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Header&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Header.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::SectionRenderers::Header&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/SectionRenderers/Header.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::ColumnWithLabels&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/ColumnWithLabels.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::SectionRenderers::ColumnWithLabels&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/SectionRenderers/ColumnWithLabels.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Text&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Text.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::SectionRenderers::Text&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/SectionRenderers/Text.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/RollingCredits/SectionFactory.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/SectionFactory.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">create_column_with_labels(std::vector&lt;std::tuple&lt;std::string, std::string&gt;&gt; elements={})</td>
</tr>
<tr>
  <td class="method">create_header(std::string text={})</td>
</tr>
<tr>
  <td class="method">create_text(std::string text={}, std::string alignment=AllegroFlare::Elements::RollingCredits::Sections::Text::ALIGN_LEFT)</td>
</tr>
<tr>
  <td class="method">create_standard_disclaimers_text(std::string text={})</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Header&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Header.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::ColumnWithLabels&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/ColumnWithLabels.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Text&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Text.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/Base.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render(bool only_calculate_height_dont_render=false)</td>
</tr>
<tr>
  <td class="method">is_type(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::vector&lt;std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/ColumnWithLabels.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/ColumnWithLabels.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">elements</td>
  <td class="property">std::vector&lt;std::tuple&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">gutter_width</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render(bool only_calculate_height_dont_render=false)</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::SectionRenderers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/SectionRenderers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::tuple&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;tuple&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/Header.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/Header.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render(bool only_calculate_height_dont_render=false)</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::SectionRenderers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/SectionRenderers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/Text.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/SectionRenderers/Text.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">alignment</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">max_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">_multiline_text_line_number</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render(bool only_calculate_height_dont_render=false)</td>
</tr>
<tr>
  <td class="method">multiline_text_draw_callback(int line_num=0, const char* line=nullptr, int size=0, void* extra=nullptr)</td>
</tr>
<tr>
  <td class="method">count_num_lines_will_render(ALLEGRO_FONT* font=nullptr, float max_width=0.0f, std::string text=&quot;[unset-text]&quot;)</td>
</tr>
<tr>
  <td class="method">get_al_alignment()</td>
</tr>
<tr>
  <td class="method">get_x_offset_by_alignment()</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::SectionRenderers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/SectionRenderers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Text&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Text.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/RollingCredits/Sections/Base.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/Sections/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">is_type(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::vector&lt;std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/RollingCredits/Sections/ColumnWithLabels.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/Sections/ColumnWithLabels.q.yml</h3>
     <table>
<tr>
  <td class="property">elements</td>
  <td class="property">std::vector&lt;std::tuple&lt;std::string, std::string&gt;&gt;</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::tuple&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;tuple&quot;, &quot;string&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/RollingCredits/Sections/Header.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/Sections/Header.q.yml</h3>
     <table>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/RollingCredits/Sections/Text.q.yml">quintessence/AllegroFlare/Elements/RollingCredits/Sections/Text.q.yml</h3>
     <table>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">alignment</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">ALIGN_LEFT</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">ALIGN_RIGHT</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">ALIGN_CENTER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Score.q.yml">quintessence/AllegroFlare/Elements/Score.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">score</td>
  <td class="property">int</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">get_score_str()</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::setfill&quot;, &quot;headers&quot;=&gt;[&quot;iomanip&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Scrollbar.q.yml">quintessence/AllegroFlare/Elements/Scrollbar.q.yml</h3>
     <table>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">position</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">bar_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">handle_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">handle_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">rail_thickness</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">handle_thickness</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Stopwatch.q.yml">quintessence/AllegroFlare/Elements/Stopwatch.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">timer</td>
  <td class="property">AllegroFlare::Timer*</td>
</tr>
<tr>
  <td class="property">color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">fit_placement_width_and_height_to_stopwatch()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">build_ellapsed_time_str()</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TimerFormatter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TimerFormatter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timer*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Storyboard.q.yml">quintessence/AllegroFlare/Elements/Storyboard.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">pages</td>
  <td class="property">std::vector&lt;AllegroFlare::Elements::StoryboardPages::Base *&gt;</td>
</tr>
<tr>
  <td class="property">button_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">current_page_num</td>
  <td class="property">intptr_t</td>
</tr>
<tr>
  <td class="property">can_advance_to_next_page</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">can_advance_started_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">finished</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">reset()</td>
</tr>
<tr>
  <td class="method">permit_advancing_page()</td>
</tr>
<tr>
  <td class="method">deny_advancing_page()</td>
</tr>
<tr>
  <td class="method">advance()</td>
</tr>
<tr>
  <td class="method">advance_page()</td>
</tr>
<tr>
  <td class="private_method">render_next_button()</td>
</tr>
<tr>
  <td class="method">infer_at_last_page()</td>
</tr>
<tr>
  <td class="method">infer_at_or_past_last_page()</td>
</tr>
<tr>
  <td class="method">infer_at_last_advance()</td>
</tr>
<tr>
  <td class="method">infer_current_page()</td>
</tr>
<tr>
  <td class="private_method">obtain_next_button_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Base*&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Elements/StoryboardPages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;AllegroFlare::Elements::StoryboardPages::Base *&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Elements/StoryboardPages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_multiline_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min, std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator::&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/StoryboardPages/AdvancingText.q.yml">quintessence/AllegroFlare/Elements/StoryboardPages/AdvancingText.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">top_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">left_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">right_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">line_height_multiplier</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">line_height_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">revealed_characters_count</td>
  <td class="property">int</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">start()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">advance()</td>
</tr>
<tr>
  <td class="method">generate_revealed_text()</td>
</tr>
<tr>
  <td class="method">reveal_all_characters()</td>
</tr>
<tr>
  <td class="method">all_characters_are_revealed()</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_next_button_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_multiline_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min, std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/StoryboardPages/Base.q.yml">quintessence/AllegroFlare/Elements/StoryboardPages/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">finished</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">start()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">advance()</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/StoryboardPages/Image.q.yml">quintessence/AllegroFlare/Elements/StoryboardPages/Image.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">duration_to_advance_sec</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">reveal_style</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">started_at</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">start()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">advance()</td>
</tr>
<tr>
  <td class="method">infer_age()</td>
</tr>
<tr>
  <td class="method">modify_params_for_hide(AllegroFlare::Placement2D* place=nullptr, ALLEGRO_COLOR* color=nullptr)</td>
</tr>
<tr>
  <td class="method">modify_params_for_reveal(AllegroFlare::Placement2D* place=nullptr, ALLEGRO_COLOR* color=nullptr)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min, std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator::&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator::&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/StoryboardPages/Text.q.yml">quintessence/AllegroFlare/Elements/StoryboardPages/Text.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">top_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">left_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">right_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">line_height_multiplier</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">line_height_padding</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">start()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">advance()</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_multiline_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Text.q.yml">quintessence/AllegroFlare/Elements/Text.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">fit_placement_width_and_height_to_text()</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/EncoderDecoders/Base62.q.yml">quintessence/AllegroFlare/EncoderDecoders/Base62.q.yml</h3>
     <table>
<tr>
  <td class="property">CHARACTERS_LOWERCASE_FIRST</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">encode(int value=0, std::size_t zerofill_count=0)</td>
</tr>
<tr>
  <td class="method">decode(std::string value=&quot;0&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::size_t&quot;, &quot;headers&quot;=&gt;[&quot;cstddef&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/EventEmitter.q.yml">quintessence/AllegroFlare/EventEmitter.q.yml</h3>
     <table>
<tr>
  <td class="property">event_source</td>
  <td class="property">ALLEGRO_EVENT_SOURCE</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">emit_event(uint32_t type=0, intptr_t data1=0, intptr_t data2=0, intptr_t data3=0, intptr_t data4=0)</td>
</tr>
<tr>
  <td class="method">emit_switch_screen_event(std::string screen_identifier_to_switch_to=0)</td>
</tr>
<tr>
  <td class="method">emit_exit_game_event()</td>
</tr>
<tr>
  <td class="method">emit_show_input_hints_bar_event()</td>
</tr>
<tr>
  <td class="method">emit_hide_input_hints_bar_event()</td>
</tr>
<tr>
  <td class="method">emit_set_input_hints_bar_event(std::vector&lt;std::string&gt; tokens={})</td>
</tr>
<tr>
  <td class="method">emit_set_input_hints_bar_text_opacity_event(float opacity=1.0f)</td>
</tr>
<tr>
  <td class="method">emit_set_input_hints_bar_backfill_opacity_event(float opacity=0.35f)</td>
</tr>
<tr>
  <td class="method">emit_set_input_hints_bar_height_event(float height=60.0f)</td>
</tr>
<tr>
  <td class="method">emit_post_unlocked_achievement_notification_event(std::string achievement_name=&quot;[unset-achievement_name]&quot;)</td>
</tr>
<tr>
  <td class="method">emit_play_sound_effect_event(std::string sound_effect_identifier=&quot;[unset-sound-effect-identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">emit_play_music_track_event(std::string music_track_identifier=&quot;[unset-music-track-identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">emit_stop_all_music_tracks_event()</td>
</tr>
<tr>
  <td class="method">emit_virtual_controls_button_up_event(int virtual_button_num=0)</td>
</tr>
<tr>
  <td class="method">emit_virtual_controls_button_down_event(int virtual_button_num=0)</td>
</tr>
<tr>
  <td class="method">emit_game_event(AllegroFlare::GameEvent game_event={})</td>
</tr>
<tr>
  <td class="method">emit_virtual_controls_axis_change_event(int stick=0, int axis=0, float position=0.0f)</td>
</tr>
<tr>
  <td class="method">TODO()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_POST_ACHIEVEMENT_UNLOCKED_NOTIFICATION&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_SHOW_INPUT_HINTS_BAR&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_HIDE_INPUT_HINTS_BAR&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR_TEXT_OPACITY&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR_BACKFILL_OPACITY&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_STOP_ALL_MUSIC_TRACKS&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR_HEIGHT&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT_SOURCE&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_EXIT_GAME&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_SWITCH_SCREEN&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEvent&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/FrameAnimation/Animation.q.yml">quintessence/AllegroFlare/FrameAnimation/Animation.q.yml</h3>
     <table>
<tr>
  <td class="property">sprite_sheet</td>
  <td class="property">AllegroFlare::FrameAnimation::SpriteSheet*</td>
</tr>
<tr>
  <td class="property">name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">frames</td>
  <td class="property">std::vector&lt;AllegroFlare::FrameAnimation::Frame&gt;</td>
</tr>
<tr>
  <td class="property">playmode</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">playspeed_multiplier</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">playhead</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">finished</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">PLAYMODE_UNDEF</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">PLAYMODE_FORWARD_ONCE</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">PLAYMODE_FORWARD_LOOP</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">PLAYMODE_FORWARD_PING_PONG</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">start()</td>
</tr>
<tr>
  <td class="method">set_playspeed_multiplier(float playspeed_multiplier=1.0)</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">draw()</td>
</tr>
<tr>
  <td class="method">get_num_frames()</td>
</tr>
<tr>
  <td class="method">get_frame_at(float time=0.0f)</td>
</tr>
<tr>
  <td class="method">get_frame_now()</td>
</tr>
<tr>
  <td class="method">get_frame_id_now()</td>
</tr>
<tr>
  <td class="method">get_frame_num_now()</td>
</tr>
<tr>
  <td class="method">get_bitmap_at_frame_num(int frame_num=0)</td>
</tr>
<tr>
  <td class="method">get_frame_id_at(float time=0.0f)</td>
</tr>
<tr>
  <td class="method">get_frame_num_at(float time=0.0f)</td>
</tr>
<tr>
  <td class="private_method">get_frame_info_at(float time=0.0f)</td>
</tr>
<tr>
  <td class="method">calculate_duration()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::Frame&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/Frame.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::SpriteSheet&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/SpriteSheet.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/FrameAnimation/AsepriteSpriteSheetJSONLoader.q.yml">quintessence/AllegroFlare/FrameAnimation/AsepriteSpriteSheetJSONLoader.q.yml</h3>
     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">sprite_sheet</td>
  <td class="property">AllegroFlare::FrameAnimation::SpriteSheet*</td>
</tr>
<tr>
  <td class="property">load_tag_names_ending_in_at_char_with_looping_playmode</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">discard_last_at_char_in_tag_names</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">load()</td>
</tr>
<tr>
  <td class="method">_build_animation_frames_for(uint32_t start_frame=0, uint32_t end_frame=0, std::map&lt;int, int&gt; frame_data={})</td>
</tr>
<tr>
  <td class="method">ends_in_at_char(std::string str=&quot;[unset-str]&quot;)</td>
</tr>
<tr>
  <td class="method">strip_appended_at_char(std::string str=&quot;[unset-str]&quot;)</td>
</tr>
<tr>
  <td class="method">_get_playmode_from_direction(std::string direction=&quot;[unset-direction]&quot;, bool playmode_is_looped=true)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::UsefulPHP&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/UsefulPHP.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;nlohmann::json&quot;, &quot;headers&quot;=&gt;[&quot;lib/nlohmann/json.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Errors&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Errors.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::Animation&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/Animation.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::Frame&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/Frame.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::SpriteSheet&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/SpriteSheet.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::Errors&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/Errors.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/FrameAnimation/Book.q.yml">quintessence/AllegroFlare/FrameAnimation/Book.q.yml</h3>
     <table>
<tr>
  <td class="property">png_source_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">json_source_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">sprite_sheet_scale</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">sprite_sheet_cell_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">sprite_sheet_cell_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">sprite_sheet</td>
  <td class="property">AllegroFlare::FrameAnimation::SpriteSheet*</td>
</tr>
<tr>
  <td class="property">dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::FrameAnimation::Animation&gt;</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_png_source_filename(std::string png_source_filename=&quot;[unset-png_source_filename]&quot;)</td>
</tr>
<tr>
  <td class="method">set_json_source_filename(std::string json_source_filename=&quot;[unset-json_source_filename]&quot;)</td>
</tr>
<tr>
  <td class="method">set_sprite_sheet_scale(int sprite_sheet_scale=5)</td>
</tr>
<tr>
  <td class="method">set_sprite_sheet_cell_width(int sprite_sheet_cell_width=48)</td>
</tr>
<tr>
  <td class="method">set_sprite_sheet_cell_height(int sprite_sheet_cell_height=48)</td>
</tr>
<tr>
  <td class="method">get_sprite_sheet()</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">get_still_frame(std::string tag_name=&quot;[unset-tag_name]&quot;)</td>
</tr>
<tr>
  <td class="method">animation_exists(std::string name=&quot;[unset-name]&quot;)</td>
</tr>
<tr>
  <td class="method">find_animation_by_name(std::string name=&quot;[unset-name]&quot;)</td>
</tr>
<tr>
  <td class="private_method">_build_placeholder_dictionary()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::Animation&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/Animation.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::SpriteSheet&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/SpriteSheet.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Errors&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Errors.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::UsefulPHP&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/UsefulPHP.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::AsepriteSpriteSheetJSONLoader&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/AsepriteSpriteSheetJSONLoader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::Animation&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/Animation.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/FrameAnimation/Frame.q.yml">quintessence/AllegroFlare/FrameAnimation/Frame.q.yml</h3>
     <table>
<tr>
  <td class="property">index</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">duration</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GameEvent.q.yml">quintessence/AllegroFlare/GameEvent.q.yml</h3>
     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">data</td>
  <td class="property">AllegroFlare::GameEventDatas::Base*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">get_name()</td>
</tr>
<tr>
  <td class="method">is_type(std::string possible_type=&quot;[unset-possible_type]&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/GameEventDatas/Base.q.yml">quintessence/AllegroFlare/GameEventDatas/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">is_type(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Generators/LoremIpsumGenerator.q.yml">quintessence/AllegroFlare/Generators/LoremIpsumGenerator.q.yml</h3>
     <table>
<tr>
  <td class="property">source_text</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">generate_characters(int num_characters=1)</td>
</tr>
<tr>
  <td class="method">generate_characters_about(int num_characters=1)</td>
</tr>
<tr>
  <td class="method">generate_words(int num_words=1)</td>
</tr>
<tr>
  <td class="method">generate_sentences(int num_sentences=1)</td>
</tr>
<tr>
  <td class="method">generate_paragraphs(int num_paragraphs=1)</td>
</tr>
<tr>
  <td class="private_method">generate_source_text()</td>
</tr>
<tr>
  <td class="private_method">split(std::string text=&quot;&quot;, char delimiter=&#39; &#39;)</td>
</tr>
<tr>
  <td class="private_method">join(std::vector&lt;std::string&gt; tokens={}, std::string delimiter=&quot;, &quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::php::str_replace&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/UsefulPHP.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Generators/PersonNameGenerator.q.yml">quintessence/AllegroFlare/Generators/PersonNameGenerator.q.yml</h3>
     <table>
<tr>
  <td class="property">random</td>
  <td class="property">AllegroFlare::Random</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">victorian_boy_names</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">victorian_girl_names</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">next_boy_name_index</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">next_girl_name_index</td>
  <td class="property">int</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">randomize(uint32_t seed=(uint32_t)time(0))</td>
</tr>
<tr>
  <td class="method">generate_boy_name()</td>
</tr>
<tr>
  <td class="method">generate_girl_name()</td>
</tr>
<tr>
  <td class="method">build_victorian_boy_name_list()</td>
</tr>
<tr>
  <td class="method">build_victorian_girl_name_list()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Random&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Random.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/InputDiagrams/KeyboardKey.q.yml">quintessence/AllegroFlare/InputDiagrams/KeyboardKey.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">keyboard_key_str</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">keyboard_key_box_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">keyboard_key_box_min_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_keyboard_key_box_height(float keyboard_key_box_height=42)</td>
</tr>
<tr>
  <td class="method">render(bool calculate_width_only_and_do_not_draw=false)</td>
</tr>
<tr>
  <td class="method">calculate_width()</td>
</tr>
<tr>
  <td class="method">guarantee_even_number(int potentially_odd_number=0)</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_font_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_ttf_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_ttf.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/InputDiagrams/KeyboardKeyCombo.q.yml">quintessence/AllegroFlare/InputDiagrams/KeyboardKeyCombo.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">keyboard_combo_tokens</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">keyboard_key_font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">keyboard_key_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">keyboard_key_box_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">keyboard_key_box_min_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">token_SPACE_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">token_SPACER_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">token_SEPARATOR_width</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_keyboard_key_box_height(float keyboard_key_box_height=42)</td>
</tr>
<tr>
  <td class="method">render(bool calculate_width_only_and_do_not_draw=false)</td>
</tr>
<tr>
  <td class="method">calculate_width()</td>
</tr>
<tr>
  <td class="method">guarantee_even_number(int potentially_odd_number=0)</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_font_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_ttf_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_ttf.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InputDiagrams::KeyboardKey&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InputDiagrams/KeyboardKey.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/InputHints.q.yml">quintessence/AllegroFlare/InputHints.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">input_hints_tokens</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">keyboard_key_combo_tokens</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">bar_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">backfill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">surface_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">int</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">draw_backfill_bar()</td>
</tr>
<tr>
  <td class="method">draw_keyboard_key_combo_tokens()</td>
</tr>
<tr>
  <td class="method">draw_inputs_hints_tokens()</td>
</tr>
<tr>
  <td class="method">build_placeholder_input_hints_tokens()</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_font_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_ttf_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_ttf.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InputDiagrams::KeyboardKeyCombo&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InputDiagrams/KeyboardKeyCombo.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Integrations/CameraProjectionChanges.q.yml">quintessence/AllegroFlare/Integrations/CameraProjectionChanges.q.yml</h3>
     <table>
<tr>
  <td class="property">framework</td>
  <td class="property">AllegroFlare::Frameworks::Full</td>
</tr>
<tr>
  <td class="property">platforming_2d_screen</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Screen</td>
</tr>
<tr>
  <td class="property">tile_drive_screen</td>
  <td class="property">AllegroFlare::Prototypes::TileDrive::Screen</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">callback(ALLEGRO_EVENT* event=nullptr, void* user_data=nullptr)</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">run()</td>
</tr>
<tr>
  <td class="method">initialize_tile_drive()</td>
</tr>
<tr>
  <td class="method">initialize_platforming_2d()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Frameworks::Full&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Frameworks/Full.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Screen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::TileDrive::Screen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/TileDrive/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2DFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Integrations/Network.q.yml">quintessence/AllegroFlare/Integrations/Network.q.yml</h3>
     <table>
<tr>
  <td class="property">global_abort</td>
  <td class="property">std::atomic&lt;bool&gt;</td>
</tr>
<tr>
  <td class="property">TEST_HOST_NAME</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TEST_PORT_NUM</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">captured_callback_messages</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">get_global_abort_ptr()</td>
</tr>
<tr>
  <td class="method">SetUp()</td>
</tr>
<tr>
  <td class="method">TearDown()</td>
</tr>
<tr>
  <td class="method">run_server_blocking(std::atomic&lt;bool&gt;* global_abort=nullptr)</td>
</tr>
<tr>
  <td class="method">run_client_blocking(std::atomic&lt;bool&gt;* global_abort=nullptr, std::vector&lt;std::string&gt;* messages_queue=nullptr, std::mutex* messages_queue_mutex=nullptr, void (*callback)(std::string, void*)=nullptr, void* callback_data=nullptr)</td>
</tr>
<tr>
  <td class="method">simple_capture_callback(std::string message=&quot;[unset-message]&quot;, void* data=nullptr)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;void*&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::mutex*&quot;, &quot;headers&quot;=&gt;[&quot;mutex&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::atomic&lt;bool&gt;&quot;, &quot;headers&quot;=&gt;[&quot;atomic&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::atomic&lt;bool&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;atomic&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:testing::Test&quot;, &quot;headers&quot;=&gt;[&quot;gtest/gtest.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Network2::Client&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Network2/Client.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Network2::Server&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Network2/Server.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;(void (*callback)(std::string))&quot;, &quot;headers&quot;=&gt;[&quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::atomic&quot;, &quot;headers&quot;=&gt;[&quot;atomic&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::mutex&quot;, &quot;headers&quot;=&gt;[&quot;mutex&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/InventoryDictionary.q.yml">quintessence/AllegroFlare/InventoryDictionary.q.yml</h3>
     <table>
<tr>
  <td class="property">dictionary</td>
  <td class="property">std::map&lt;int, AllegroFlare::InventoryDictionaryItems::Base*&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">size()</td>
</tr>
<tr>
  <td class="method">exists(int id=0)</td>
</tr>
<tr>
  <td class="method">at(int id=0)</td>
</tr>
<tr>
  <td class="method">build_placeholder_inventory_dictionary()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryDictionary&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryDictionary.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryIndexItem&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryIndexItem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryDictionaryItems::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryDictionaryItems/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryDictionaryItems::ClassicItem&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryDictionaryItems/ClassicItem.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/InventoryDictionaryItems/Base.q.yml">quintessence/AllegroFlare/InventoryDictionaryItems/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">is_type(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/InventoryDictionaryItems/ClassicItem.q.yml">quintessence/AllegroFlare/InventoryDictionaryItems/ClassicItem.q.yml</h3>
     <table>
<tr>
  <td class="property">title</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">bitmap_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">description</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">to_tuple()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryDictionaryItems::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryDictionaryItems/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/InventoryDictionaryItems/WithAttributes.q.yml">quintessence/AllegroFlare/InventoryDictionaryItems/WithAttributes.q.yml</h3>
     <table>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryDictionaryItems::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryDictionaryItems/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Attributes&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Attributes.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/InventoryIndex.q.yml">quintessence/AllegroFlare/InventoryIndex.q.yml</h3>
     <table>
<tr>
  <td class="property">index</td>
  <td class="property">std::map&lt;int, AllegroFlare::InventoryIndexItem&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">size()</td>
</tr>
<tr>
  <td class="method">exists(int id=0)</td>
</tr>
<tr>
  <td class="method">at(int id=0)</td>
</tr>
<tr>
  <td class="method">build_placeholder_inventory_index()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;int, AllegroFlare::InventoryIndexItem&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;AllegroFlare/InventoryIndexItem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryIndex&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryIndex.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryIndexItem&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryIndexItem.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/InventoryIndexItem.q.yml">quintessence/AllegroFlare/InventoryIndexItem.q.yml</h3>
     <table>
<tr>
  <td class="property">title</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">bitmap_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">description</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">to_tuple()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::tuple&lt;std::string, std::string, std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;tuple&quot;, &quot;string&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Logger.q.yml">quintessence/AllegroFlare/Logger.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">build_error_message(std::string from=&quot;[unset-from]&quot;, std::string message=&quot;[unset-message]&quot;)</td>
</tr>
<tr>
  <td class="method">build_guard_error_message(std::string from=&quot;[unset-from]&quot;, std::string guard_statement=&quot;[unset-guard_statement]&quot;)</td>
</tr>
<tr>
  <td class="method">build_warning_message(std::string from=&quot;[unset-from]&quot;, std::string message=&quot;[unset-message]&quot;)</td>
</tr>
<tr>
  <td class="method">build_not_included_message(std::string element_not_present=&quot;[unset-missing_element]&quot;, std::vector&lt;std::string&gt; valid_elements={})</td>
</tr>
<tr>
  <td class="method">build_unhandled_case_message()</td>
</tr>
<tr>
  <td class="method">build_info_message(std::string from=&quot;[unset-from]&quot;, std::string message=&quot;[unset-message]&quot;)</td>
</tr>
<tr>
  <td class="method">throw_missing_file_error(std::string from=&quot;[unset-from]&quot;, std::string filename=&quot;[unset-filename]&quot;, std::string filetype=&quot;[unset-filetype]&quot;)</td>
</tr>
<tr>
  <td class="method">info_from(std::string from=&quot;[unset-from]&quot;, std::string message=&quot;[unset-message]&quot;)</td>
</tr>
<tr>
  <td class="method">warn_from(std::string from=&quot;[unset-from]&quot;, std::string message=&quot;[unset-message]&quot;)</td>
</tr>
<tr>
  <td class="method">throw_error(std::string from=&quot;[unset-from]&quot;, std::string message=&quot;[unset-message]&quot;)</td>
</tr>
<tr>
  <td class="method">throw_unhandled_case(std::string from=&quot;[unset-from]&quot;, std::string unhandled_case=&quot;[unset-unhandled_case]&quot;)</td>
</tr>
<tr>
  <td class="private_method">join(std::vector&lt;std::string&gt; tokens={}, std::string delimiter=&quot;, &quot;)</td>
</tr>
<tr>
  <td class="private_method">quote_and_escape_inner_quotes(std::string subject=&quot;[unset-subject]&quot;)</td>
</tr>
<tr>
  <td class="private_method">replace(std::string subject=&quot;[unset-subject]&quot;, std::string search=&quot;[unset-search]&quot;, std::string replace=&quot;[unset-replace]&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ConsoleColors&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ConsoleColors.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MotionComposer/MessageFactory.q.yml">quintessence/AllegroFlare/MotionComposer/MessageFactory.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">build_set_playhead_position_message_json(float position=0.0f)</td>
</tr>
<tr>
  <td class="method">build_toggle_playback_message_json()</td>
</tr>
<tr>
  <td class="method">build_clear_message_json()</td>
</tr>
<tr>
  <td class="method">build_run_build_process_message_json(std::string platform=&quot;[unset-platform]&quot;, std::string source_release_zip_url=&quot;[unset-source_release_zip_url]&quot;, std::string name_of_source_release_folder=&quot;[unset-name_of_source_release_folder]&quot;)</td>
</tr>
<tr>
  <td class="method">build_add_actor2d_with_script_message_json(std::string identifier=&quot;[unset-identifier]&quot;, std::string bitmap_identifier=&quot;[unset-bitmap_identifier]&quot;, std::string script=&quot;[unset-script]&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MotionComposer::Messages::Clear&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MotionComposer/Messages/Clear.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::JSONLoaders::MotionComposer::Messages::Clear&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/JSONLoaders/MotionComposer/Messages/Clear.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MotionComposer::Messages::AddActor2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MotionComposer/Messages/AddActor2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::JSONLoaders::AllegroFlare::MotionComposer::Messages::AddActor2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/JSONLoaders/AllegroFlare/MotionComposer/Messages/AddActor2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MotionComposer::Messages::TogglePlayback&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MotionComposer/Messages/TogglePlayback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::JSONLoaders::MotionComposer::Messages::TogglePlayback&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/JSONLoaders/MotionComposer/Messages/TogglePlayback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MotionComposer::Messages::SetPlayheadPosition*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MotionComposer/Messages/SetPlayheadPosition.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::JSONLoaders::MotionComposer::Messages::SetPlayheadPosition&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/JSONLoaders/MotionComposer/Messages/SetPlayheadPosition.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::JSONLoaders::MotionComposer::Messages::RunBuildProcess&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/JSONLoaders/MotionComposer/Messages/RunBuildProcess.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;nlohmann::json&quot;, &quot;headers&quot;=&gt;[&quot;lib/nlohmann/json.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MotionComposer/MessageProcessor.q.yml">quintessence/AllegroFlare/MotionComposer/MessageProcessor.q.yml</h3>
     <table>
<tr>
  <td class="property">messages_json</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">messages</td>
  <td class="property">std::vector&lt;AllegroFlare::MotionComposer::Messages::Base*&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">push_one(std::string message_json_as_string=&quot;{}&quot;)</td>
</tr>
<tr>
  <td class="method">get_one_message_and_pop()</td>
</tr>
<tr>
  <td class="method">convert_one()</td>
</tr>
<tr>
  <td class="method">process_one()</td>
</tr>
<tr>
  <td class="method">build_message_from_json(std::string json_as_string=&quot;{}&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;nlohmann::json&quot;, &quot;headers&quot;=&gt;[&quot;lib/nlohmann/json.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::JSONLoaders::MotionComposer::Messages::SetPlayheadPosition&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/JSONLoaders/MotionComposer/Messages/SetPlayheadPosition.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::JSONLoaders::MotionComposer::Messages::TogglePlayback&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/JSONLoaders/MotionComposer/Messages/TogglePlayback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::JSONLoaders::MotionComposer::Messages::Clear&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/JSONLoaders/MotionComposer/Messages/Clear.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::JSONLoaders::AllegroFlare::MotionComposer::Messages::AddActor2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/JSONLoaders/AllegroFlare/MotionComposer/Messages/AddActor2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MotionComposer::Messages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MotionComposer/Messages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::JSONLoaders::MotionComposer::Messages::RunBuildProcess&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/JSONLoaders/MotionComposer/Messages/RunBuildProcess.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MotionComposer/Messages/AddActor2D.q.yml">quintessence/AllegroFlare/MotionComposer/Messages/AddActor2D.q.yml</h3>
     <table>
<tr>
  <td class="property">identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">bitmap_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">script</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MotionComposer::Messages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MotionComposer/Messages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timeline::Actor2D*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timeline/Actor2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MotionComposer/Messages/Base.q.yml">quintessence/AllegroFlare/MotionComposer/Messages/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">is_type(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::vector&lt;std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MotionComposer/Messages/RunBuildProcess.q.yml">quintessence/AllegroFlare/MotionComposer/Messages/RunBuildProcess.q.yml</h3>
     <table>
<tr>
  <td class="property">platform</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">source_release_zip_url</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">name_of_source_release_folder</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MotionComposer::Messages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MotionComposer/Messages/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MotionComposer/Messages/SetPlayheadPosition.q.yml">quintessence/AllegroFlare/MotionComposer/Messages/SetPlayheadPosition.q.yml</h3>
     <table>
<tr>
  <td class="property">position</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MotionComposer::Messages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MotionComposer/Messages/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MotionComposer/Messages/SetScript.q.yml">quintessence/AllegroFlare/MotionComposer/Messages/SetScript.q.yml</h3>
     <table>
<tr>
  <td class="property">script_lines</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MotionComposer::Messages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MotionComposer/Messages/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MotionComposer/TrackView.q.yml">quintessence/AllegroFlare/MotionComposer/TrackView.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">track</td>
  <td class="property">AllegroFlare::Timeline::Track*</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">value_min</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">value_max</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">selection_cursor_x</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">icon_font_size</td>
  <td class="property">int</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">draw_selected_node_icon(float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="private_method">draw_node_icon(float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="private_method">draw_centered_unicode_character(ALLEGRO_FONT* font=nullptr, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1}, int x=0, int y=0, uint32_t icon=61445, int flags=0)</td>
</tr>
<tr>
  <td class="private_method">obtain_icon_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_bigger_icon_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_track_values_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timeline::Track*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timeline/Track.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timeline::Track&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timeline/Track.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color::&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MotionFX/Sparkles.q.yml">quintessence/AllegroFlare/MotionFX/Sparkles.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">particles</td>
  <td class="property">std::vector&lt;std::tuple&lt;float, float, float, ALLEGRO_COLOR&gt;&gt;</td>
</tr>
<tr>
  <td class="property">created_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">main_star_placement</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">is_finished()</td>
</tr>
<tr>
  <td class="method">infer_age()</td>
</tr>
<tr>
  <td class="private_method">obtain_icon_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_mini_icon_font()</td>
</tr>
<tr>
  <td class="private_method">draw_centered_unicode_character(ALLEGRO_FONT* font=nullptr, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1}, int x=0, int y=0, uint32_t icon=61445, int flags=0)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color::Gold&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::tuple&lt;float, float, float, ALLEGRO_COLOR&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;tuple&quot;, &quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;sin&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;cos&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MotionFX/Sparkles2.q.yml">quintessence/AllegroFlare/MotionFX/Sparkles2.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">time</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">scale</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">actor_manager</td>
  <td class="property">AllegroFlare::Timeline::ActorManager</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">build_friend_star_script_lines(float rotation=0.0f)</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">obtain_star_bitmap()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timeline::ActorManager&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timeline/ActorManager.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timeline::Actors::Actor2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timeline/Actors/Actor2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Interpolators::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Interpolators::&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MusicMesh/FontCharacterAtlasBuilder.q.yml">quintessence/AllegroFlare/MusicMesh/FontCharacterAtlasBuilder.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">font_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">UNICODE_RANGE_START</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">row_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">column_width</td>
  <td class="property">int</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">todo()</td>
</tr>
<tr>
  <td class="method">get_uv_for_index(uint32_t unicode_index=0)</td>
</tr>
<tr>
  <td class="method">infer_font_descent()</td>
</tr>
<tr>
  <td class="method">create()</td>
</tr>
<tr>
  <td class="private_method">draw_unicode_character(ALLEGRO_FONT* font=nullptr, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1}, uint32_t icon=61444, int flags=0, float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="private_method">obtain_unicode_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_ui_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_ui_font_mini()</td>
</tr>
<tr>
  <td class="method">as_hex(uint32_t value=0, int zero_fill_width=6)</td>
</tr>
<tr>
  <td class="method">as_int(uint32_t value=0)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::setfill&quot;, &quot;headers&quot;=&gt;[&quot;iomanip&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MusicMesh/MusicMesh.q.yml">quintessence/AllegroFlare/MusicMesh/MusicMesh.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">stamps</td>
  <td class="property">std::vector&lt;AllegroFlare::MusicMesh::Stamp&gt;</td>
</tr>
<tr>
  <td class="property">next_id</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">multi_mesh</td>
  <td class="property">AllegroFlare::TileMaps::MultiMesh</td>
</tr>
<tr>
  <td class="property">multi_mesh_uv_atlas</td>
  <td class="property">AllegroFlare::TileMaps::MultiMeshUVAtlas</td>
</tr>
<tr>
  <td class="property">font_character_atlas_builder</td>
  <td class="property">AllegroFlare::MusicMesh::FontCharacterAtlasBuilder</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">add_music_symbol(float x=0, float y=0, uint32_t music_symbol_to_stamp=0)</td>
</tr>
<tr>
  <td class="method">remove_stamp_at(int index_of_stamp=0)</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MusicMesh::Stamp&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MusicMesh/Stamp.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::MultiMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/MultiMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::MultiMeshUVAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/MultiMeshUVAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::MusicMesh::FontCharacterAtlasBuilder&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/MusicMesh/FontCharacterAtlasBuilder.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/MusicMesh/Stamp.q.yml">quintessence/AllegroFlare/MusicMesh/Stamp.q.yml</h3>
     <table>
<tr>
  <td class="property">id</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">multi_mesh_id</td>
  <td class="property">uint32_t</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">reassign_multi_mesh_id(uint32_t new_multi_mesh_id=0)</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Network2/Message.q.yml">quintessence/AllegroFlare/Network2/Message.q.yml</h3>
     <table>
<tr>
  <td class="property">HEADER_LENGTH</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">MAX_BODY_LENGTH</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">MAGIC_HEADER_CHUNK</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">data</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">body_length</td>
  <td class="property">std::size_t</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">todo()</td>
</tr>
<tr>
  <td class="method">data_ptr()</td>
</tr>
<tr>
  <td class="method">body_ptr()</td>
</tr>
<tr>
  <td class="method">length()</td>
</tr>
<tr>
  <td class="method">set_body_length(std::size_t new_length=0)</td>
</tr>
<tr>
  <td class="method">set_body(std::string content=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">get_header()</td>
</tr>
<tr>
  <td class="method">get_body()</td>
</tr>
<tr>
  <td class="method">decode_header_and_validate()</td>
</tr>
<tr>
  <td class="method">validate_body_hash()</td>
</tr>
<tr>
  <td class="method">encode_header()</td>
</tr>
<tr>
  <td class="method">first_4_chars_hash_of(std::string string_to_hash=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">body_size_base62()</td>
</tr>
<tr>
  <td class="method">decode_body_size_chunk()</td>
</tr>
<tr>
  <td class="method">extract_nth_header_chunk(int position=0)</td>
</tr>
<tr>
  <td class="method">ignore()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;chat_message&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Network2/inc/chat_message.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;char*&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::size_t&quot;, &quot;headers&quot;=&gt;[&quot;cstddef&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EncoderDecoders::Base62&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EncoderDecoders/Base62.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SHA2&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SHA2.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Network2/URLTokenizer.q.yml">quintessence/AllegroFlare/Network2/URLTokenizer.q.yml</h3>
     <table>
<tr>
  <td class="property">full_url</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">extract_port()</td>
</tr>
<tr>
  <td class="method">extract_host()</td>
</tr>
<tr>
  <td class="method">split_tokens()</td>
</tr>
<tr>
  <td class="private_method">has_min_length(std::string string=&quot;&quot;, int min=0)</td>
</tr>
<tr>
  <td class="private_method">fits_max_length(std::string string=&quot;&quot;, int max=0)</td>
</tr>
<tr>
  <td class="private_method">only_numerical_characters(std::string string=&quot;&quot;)</td>
</tr>
<tr>
  <td class="private_method">trim(std::string s=&quot;&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::invalid_argument&quot;, &quot;headers&quot;=&gt;[&quot;stdexcept&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::find_if&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Notifications.q.yml">quintessence/AllegroFlare/Notifications.q.yml</h3>
     <table>
<tr>
  <td class="property">notifications</td>
  <td class="property">std::vector&lt;AllegroFlare::Elements::Notifications::Base*&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">size()</td>
</tr>
<tr>
  <td class="method">add(AllegroFlare::Elements::Notifications::Base* notification=nullptr)</td>
</tr>
<tr>
  <td class="method">select_all_order_by_created_at_desc()</td>
</tr>
<tr>
  <td class="method">select_created_at_since_order_by_created_at(float min_created_at=0.0f)</td>
</tr>
<tr>
  <td class="method">destroy_all()</td>
</tr>
<tr>
  <td class="method">sort_by_created_at_desc_func(AllegroFlare::Elements::Notifications::Base* a=nullptr, AllegroFlare::Elements::Notifications::Base* b=nullptr)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;AllegroFlare::Elements::Notifications::Base*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Elements/Notifications/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Notifications::Base*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Notifications/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Notifications::Base&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Elements/Notifications/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::sort&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::copy_if&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/NotificationsFactory.q.yml">quintessence/AllegroFlare/NotificationsFactory.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">create_achievement_unlocked_notification(std::string achievement_name=&quot;[unset-achievement_name]&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Notifications::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Notifications/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Notifications::AchievementUnlocked&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Notifications/AchievementUnlocked.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Notifications::AchievementUnlocked*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Notifications/AchievementUnlocked.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Physics/AABB2D.q.yml">quintessence/AllegroFlare/Physics/AABB2D.q.yml</h3>
     <table>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">w</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">h</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">velocity_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">velocity_y</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">get_left_edge()</td>
</tr>
<tr>
  <td class="method">get_right_edge()</td>
</tr>
<tr>
  <td class="method">get_top_edge()</td>
</tr>
<tr>
  <td class="method">get_bottom_edge()</td>
</tr>
<tr>
  <td class="method">set_left_edge(float x=0.0f)</td>
</tr>
<tr>
  <td class="method">set_right_edge(float x=0.0f)</td>
</tr>
<tr>
  <td class="method">set_top_edge(float y=0.0f)</td>
</tr>
<tr>
  <td class="method">set_bottom_edge(float y=0.0f)</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Physics/Int2D.q.yml">quintessence/AllegroFlare/Physics/Int2D.q.yml</h3>
     <table>
<tr>
  <td class="property">x</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">int</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">rotate()</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Physics/TileMapCollisionStepper.q.yml">quintessence/AllegroFlare/Physics/TileMapCollisionStepper.q.yml</h3>
     <table>
<tr>
  <td class="property">collision_tile_map</td>
  <td class="property">AllegroFlare::TileMaps::TileMap&lt;int&gt;*</td>
</tr>
<tr>
  <td class="property">aabb2d</td>
  <td class="property">AllegroFlare::Physics::AABB2D*</td>
</tr>
<tr>
  <td class="property">tile_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">tile_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">dummy_int2d</td>
  <td class="property">AllegroFlare::Physics::Int2D</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">step()</td>
</tr>
<tr>
  <td class="method">adjacent_to_bottom_edge(float tile_width=16.0f, float tile_height=16.0f)</td>
</tr>
<tr>
  <td class="method">adjacent_to_right_edge(float tile_width=16.0f, float tile_height=16.0f)</td>
</tr>
<tr>
  <td class="method">adjacent_to_top_edge(float tile_width=16.0f, float tile_height=16.0f)</td>
</tr>
<tr>
  <td class="method">get_tile_coords_below_left_foot(float x=0.0f, float y=0.0f, float height=1.0f)</td>
</tr>
<tr>
  <td class="method">get_tile_coords_below_right_foot(float x=0.0f, float y=0.0f, float width=1.0f, float height=1.0f)</td>
</tr>
<tr>
  <td class="method">adjacent_to_left_edge(float tile_width=16.0f, float tile_height=16.0f)</td>
</tr>
<tr>
  <td class="private_method">get_next_collided_tile_coords_1d(float x=0.0f, float y=0.0f, float velocity=0.0f, float depth_of_body=1.0f, float length_of_edge=1.0f, float tile_length_n=1.0f, float tile_length_m=1.0f)</td>
</tr>
<tr>
  <td class="method">get_stepped_tile_collisions(float x=0.0f, float y=0.0f, float velocity_x=0.0f, float velocity_y=0.0f, float width=1.0f, float height=1.0f, float tile_width=1.0f, float tile_height=1.0f)</td>
</tr>
<tr>
  <td class="method">calculate_difference_info(std::vector&lt;AllegroFlare::Physics::Int2D&gt; now_tiles={}, std::vector&lt;AllegroFlare::Physics::Int2D&gt; next_tiles={}, float velocity_x=0.0f, float velocity_y=0.0f)</td>
</tr>
<tr>
  <td class="method">tiles_within_aabb2d(AllegroFlare::Physics::AABB2D aabb2d={})</td>
</tr>
<tr>
  <td class="method">tiles_within(float x=0.0f, float y=0.0f, float width=1.0f, float height=1.0f, float tile_width=1.0f, float tile_height=1.0f)</td>
</tr>
<tr>
  <td class="method">tiles_have_equal_coordinates(AllegroFlare::Physics::Int2D&amp; a=get_dummy_int2d_ref(), AllegroFlare::Physics::Int2D&amp; b=get_dummy_int2d_ref())</td>
</tr>
<tr>
  <td class="private_method">world_coords_to_tile_coords(float world_pos=0.0f, float tile_length=1.0f)</td>
</tr>
<tr>
  <td class="private_method">world_x_coords_to_tile_coords_x(float world_pos_x=0.0f)</td>
</tr>
<tr>
  <td class="private_method">world_y_coords_to_tile_coords_y(float world_pos_y=0.0f)</td>
</tr>
<tr>
  <td class="method">get_tile_left_edge(float tile_x=0.0f, float tile_width=16.0f)</td>
</tr>
<tr>
  <td class="method">get_tile_right_edge(float tile_x=0.0f, float tile_width=16.0f)</td>
</tr>
<tr>
  <td class="method">get_tile_top_edge(float tile_y=0.0f, float tile_height=16.0f)</td>
</tr>
<tr>
  <td class="method">get_tile_bottom_edge(float tile_y=0.0f, float tile_height=16.0f)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::AABB2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/AABB2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;AllegroFlare::Physics::Int2D&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Physics/Int2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::pair&lt;int, int&gt;&quot;, &quot;headers&quot;=&gt;[&quot;utility&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::Int2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/Int2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::TileMapCollisionStepperCollisionInfo&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/TileMapCollisionStepperCollisionInfo.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Physics/TileMapCollisionStepperCollisionInfo.q.yml">quintessence/AllegroFlare/Physics/TileMapCollisionStepperCollisionInfo.q.yml</h3>
     <table>
<tr>
  <td class="property">collided_tile_coordinate</td>
  <td class="property">AllegroFlare::Physics::Int2D</td>
</tr>
<tr>
  <td class="property">tile_value</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">collision_velocity_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">collision_velocity_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">stopped_by_this_collision</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">event</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">EVENT_UNDEFINED</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">EVENT_ENTERED</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">EVENT_EXITED</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">EVENT_COLLIDED_AGAINST</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">EVENT_STAYED_ON</td>
  <td class="property">int</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">is_tile_value(int tile_value=-999)</td>
</tr>
<tr>
  <td class="method">is_event(int event=EVENT_UNDEFINED)</td>
</tr>
<tr>
  <td class="method">build_event_name(int event=0)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::Int2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/Int2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Physics/TileMapCollisionStepperStepResult.q.yml">quintessence/AllegroFlare/Physics/TileMapCollisionStepperStepResult.q.yml</h3>
     <table>
<tr>
  <td class="property">subject_position_before</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">subject_velocity_before</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">subject_position_after</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">subject_velocity_after</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">collisions</td>
  <td class="property">std::vector&lt;AllegroFlare::Physics::TileMapCollisionStepperCollisionInfo&gt;</td>
</tr>
<tr>
  <td class="property">subject_was_stopped_by_collision</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">subject_entered_tile_value(int tile_value=0)</td>
</tr>
<tr>
  <td class="method">subject_is_still_on_or_was_previously_on_tile_value(int tile_value=0)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::TileMapCollisionStepperCollisionInfo&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/TileMapCollisionStepperCollisionInfo.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/ProfilerRenderer.q.yml">quintessence/AllegroFlare/ProfilerRenderer.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">timers</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Timer&gt;*</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timer.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/CubeShooter/Entity.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/Entity.q.yml</h3>
     <table>
<tr>
  <td class="property">placement</td>
  <td class="property">AllegroFlare::Placement3D</td>
</tr>
<tr>
  <td class="property">velocity</td>
  <td class="property">AllegroFlare::Placement3D</td>
</tr>
<tr>
  <td class="property">model_3d</td>
  <td class="property">AllegroFlare::Model3D*</td>
</tr>
<tr>
  <td class="property">created_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">min_bounding_box_coordinates</td>
  <td class="property">AllegroFlare::Vec3D</td>
</tr>
<tr>
  <td class="property">max_bounding_box_coordinates</td>
  <td class="property">AllegroFlare::Vec3D</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">infer_age(float time_now=0.0f)</td>
</tr>
<tr>
  <td class="method">has_attribute(std::string attribute=&quot;[attribute]&quot;)</td>
</tr>
<tr>
  <td class="method">set_attribute(std::string attribute=&quot;[attribute]&quot;)</td>
</tr>
<tr>
  <td class="method">unset_attribute(std::string attribute=&quot;[attribute]&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Model3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Model3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ElementID&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ElementID.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/CubeShooter/EntityFactory.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/EntityFactory.q.yml</h3>
     <table>
<tr>
  <td class="property">scene_root</td>
  <td class="property">AllegroFlare::ElementID*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">model_bin</td>
  <td class="property">AllegroFlare::ModelBin*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">add_cube(float x=0.0f, float y=0.0f, float z=0.0f)</td>
</tr>
<tr>
  <td class="method">add_player_bullet(float x=0.0f, float y=0.0f, float z=0.0f)</td>
</tr>
<tr>
  <td class="method">add_player_ship(float x=0.0f, float y=0.0f, float z=0.0f)</td>
</tr>
<tr>
  <td class="method">add_world_mesh()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::CubeShooter::Entity&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/CubeShooter/Entity.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ElementID&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ElementID.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/CubeShooter/PlayerMovementControl.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/PlayerMovementControl.q.yml</h3>
     <table>
<tr>
  <td class="property">player_controlled_entity</td>
  <td class="property">AllegroFlare::Prototypes::CubeShooter::Entity*</td>
</tr>
<tr>
  <td class="property">position</td>
  <td class="property">AllegroFlare::Vec3D*</td>
</tr>
<tr>
  <td class="property">velocity</td>
  <td class="property">AllegroFlare::Vec3D*</td>
</tr>
<tr>
  <td class="property">max_velocity_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">max_velocity_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">acceleration</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">thruster_max_velocity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">thruster_acceleration_force</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">thruster_active</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">moving_up</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">moving_down</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">moving_left</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">moving_right</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">firing_blaster</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">blaster_fired_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">blaster_refire_rate</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">blaster_fired_on_last_update</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">max_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">min_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">max_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">min_y</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_player_controlled_entity(AllegroFlare::Prototypes::CubeShooter::Entity* player_controlled_entity=nullptr)</td>
</tr>
<tr>
  <td class="method">update(float time_now=0)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::CubeShooter::Entity&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/CubeShooter/Entity.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/CubeShooter/Runner.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/Runner.q.yml</h3>
     <table>
<tr>
  <td class="property">mode</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">framework</td>
  <td class="property">AllegroFlare::Frameworks::Full*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">sample_bin</td>
  <td class="property">AllegroFlare::SampleBin*</td>
</tr>
<tr>
  <td class="property">model_bin</td>
  <td class="property">AllegroFlare::ModelBin*</td>
</tr>
<tr>
  <td class="property">cube_shooter_screen</td>
  <td class="property">AllegroFlare::Prototypes::CubeShooter::Screen</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">EVENT_ACTIVATE_CUBE_SHOOTER_SCREEN</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">MODE_TEST</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">MODE_PRODUCTION</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">MODE_DEVELOPMENT</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">event_map()</td>
</tr>
<tr>
  <td class="method">game_event_func(AllegroFlare::GameEvent* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">RUN(std::string mode=&quot;production&quot;, bool disable_escape_key_will_shutdown=false)</td>
</tr>
<tr>
  <td class="method">is_test_mode(std::string mode=&quot;[unset-mode]&quot;)</td>
</tr>
<tr>
  <td class="method">is_development_mode(std::string mode=&quot;[unset-mode]&quot;)</td>
</tr>
<tr>
  <td class="method">is_production_mode(std::string mode=&quot;[unset-mode]&quot;)</td>
</tr>
<tr>
  <td class="method">in_development_mode()</td>
</tr>
<tr>
  <td class="method">in_production_mode()</td>
</tr>
<tr>
  <td class="method">in_test_mode()</td>
</tr>
<tr>
  <td class="method">is_valid_mode(std::string mode=&quot;[unset-mode]&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Frameworks::Full&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Frameworks/Full.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SampleBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SampleBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEvent&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::CubeShooter::Screen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/CubeShooter/Screen.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/CubeShooter/Screen.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/Screen.q.yml</h3>
     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">sample_bin</td>
  <td class="property">AllegroFlare::SampleBin*</td>
</tr>
<tr>
  <td class="property">model_bin</td>
  <td class="property">AllegroFlare::ModelBin*</td>
</tr>
<tr>
  <td class="property">scene_root</td>
  <td class="property">AllegroFlare::ElementID</td>
</tr>
<tr>
  <td class="property">entity_factory</td>
  <td class="property">AllegroFlare::Prototypes::CubeShooter::EntityFactory</td>
</tr>
<tr>
  <td class="property">player_controlled_entity</td>
  <td class="property">AllegroFlare::Prototypes::CubeShooter::Entity*</td>
</tr>
<tr>
  <td class="property">player_movement_control</td>
  <td class="property">AllegroFlare::Prototypes::CubeShooter::PlayerMovementControl</td>
</tr>
<tr>
  <td class="property">camera</td>
  <td class="property">AllegroFlare::Camera3D</td>
</tr>
<tr>
  <td class="property">shader</td>
  <td class="property">AllegroFlare::Shader*</td>
</tr>
<tr>
  <td class="property">multiply_shader</td>
  <td class="property">AllegroFlare::Prototypes::CubeShooter::Shaders::Multiply</td>
</tr>
<tr>
  <td class="property">fog_shader</td>
  <td class="property">AllegroFlare::Prototypes::CubeShooter::Shaders::Fog</td>
</tr>
<tr>
  <td class="property">depth_darken_shader</td>
  <td class="property">AllegroFlare::Prototypes::CubeShooter::Shaders::DepthDarken</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_event_emitter(AllegroFlare::EventEmitter* event_emitter=nullptr)</td>
</tr>
<tr>
  <td class="method">set_bitmap_bin(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">set_font_bin(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">set_sample_bin(AllegroFlare::SampleBin* sample_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">set_model_bin(AllegroFlare::ModelBin* model_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">load_level()</td>
</tr>
<tr>
  <td class="method">on_activate()</td>
</tr>
<tr>
  <td class="method">on_deactivate()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">collides(AllegroFlare::Prototypes::CubeShooter::Entity* entity_a=nullptr, AllegroFlare::Prototypes::CubeShooter::Entity* entity_b=nullptr)</td>
</tr>
<tr>
  <td class="method">render_crosshair(AllegroFlare::Vec3D position=)</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">primary_timer_func()</td>
</tr>
<tr>
  <td class="method">key_down_func(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">key_up_func(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SampleBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SampleBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::CubeShooter::Entity&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/CubeShooter/Entity.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::CubeShooter::EntityFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/CubeShooter/EntityFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::CubeShooter::PlayerMovementControl&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/CubeShooter/PlayerMovementControl.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ElementID&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ElementID.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Useful&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::CubeShooter::Shaders::DepthDarken&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/CubeShooter/Shaders/DepthDarken.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::CubeShooter::Shaders::Multiply&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/CubeShooter/Shaders/Multiply.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::CubeShooter::Shaders::Fog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/CubeShooter/Shaders/Fog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shader&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shader.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/CubeShooter/Shaders/DepthDarken.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/Shaders/DepthDarken.q.yml</h3>
     <table>
<tr>
  <td class="property">torch_type</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">set_torch_type(int type=0)</td>
</tr>
<tr>
  <td class="method">set_torch_on()</td>
</tr>
<tr>
  <td class="method">set_torch_off()</td>
</tr>
<tr>
  <td class="method">activate()</td>
</tr>
<tr>
  <td class="method">deactivate()</td>
</tr>
<tr>
  <td class="private_method">obtain_vertex_source()</td>
</tr>
<tr>
  <td class="private_method">obtain_fragment_source()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shader&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/CubeShooter/Shaders/Fog.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/Shaders/Fog.q.yml</h3>
     <table>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">tint</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">tint_intensity</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">activate()</td>
</tr>
<tr>
  <td class="private_method">set_values_to_activated_shader()</td>
</tr>
<tr>
  <td class="private_method">obtain_vertex_source()</td>
</tr>
<tr>
  <td class="private_method">obtain_fragment_source()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shader&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/CubeShooter/Shaders/Multiply.q.yml">quintessence/AllegroFlare/Prototypes/CubeShooter/Shaders/Multiply.q.yml</h3>
     <table>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">tint</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">tint_intensity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">pulse_created_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">time_now</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">far_plane</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">activate()</td>
</tr>
<tr>
  <td class="private_method">set_values_to_activated_shader()</td>
</tr>
<tr>
  <td class="private_method">obtain_vertex_source()</td>
</tr>
<tr>
  <td class="private_method">obtain_fragment_source()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shader&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/Configuration.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Configuration.q.yml</h3>
     <table>
<tr>
  <td class="property">inventory_index</td>
  <td class="property">AllegroFlare::InventoryIndex</td>
</tr>
<tr>
  <td class="property">af_inventory</td>
  <td class="property">AllegroFlare::Inventory</td>
</tr>
<tr>
  <td class="property">flags</td>
  <td class="property">AllegroFlare::Inventory</td>
</tr>
<tr>
  <td class="property">entity_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;</td>
</tr>
<tr>
  <td class="property">room_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Room*&gt;</td>
</tr>
<tr>
  <td class="property">entity_room_associations</td>
  <td class="property">std::map&lt;std::string, std::string&gt;</td>
</tr>
<tr>
  <td class="property">script_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Script&gt;</td>
</tr>
<tr>
  <td class="property">starting_room_identifier</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Inventory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Inventory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryIndex&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryIndex.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Room&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Room.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Script&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Script.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">load_original_gametest_default(AllegroFlare::BitmapBin* bitmap_bin=nullptr, AllegroFlare::FontBin* font_bin=nullptr, AllegroFlare::EventEmitter* event_emitter=nullptr, AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper* entity_collection_helper=nullptr)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::RoomFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/RoomFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Configuration&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Configuration.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader.q.yml</h3>
     <table>
<tr>
  <td class="property">source_configuration</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::Configuration*</td>
</tr>
<tr>
  <td class="property">destination_inventory_index</td>
  <td class="property">AllegroFlare::InventoryIndex*</td>
</tr>
<tr>
  <td class="property">destination_af_inventory</td>
  <td class="property">AllegroFlare::Inventory*</td>
</tr>
<tr>
  <td class="property">destination_flags</td>
  <td class="property">AllegroFlare::Inventory*</td>
</tr>
<tr>
  <td class="property">destination_entity_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;*</td>
</tr>
<tr>
  <td class="property">destination_room_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Room*&gt;*</td>
</tr>
<tr>
  <td class="property">destination_entity_room_associations</td>
  <td class="property">std::map&lt;std::string, std::string&gt;*</td>
</tr>
<tr>
  <td class="property">destination_script_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Script&gt;*</td>
</tr>
<tr>
  <td class="property">destination_starting_room_identifier</td>
  <td class="property">std::string*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">load_from_source_configuration()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::RoomFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/RoomFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Inventory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Inventory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryIndex&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryIndex.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Configuration&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Configuration.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Room&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Room.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Script&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Script.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/Cursor.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Cursor.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">icon_offset_placement</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">info_text_offset_placement</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">info_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">info_text_flags</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">icon_character_num</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">cursor_last_set_at</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">draw()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">move(float distance_x=0.0f, float distance_y=0.0f)</td>
</tr>
<tr>
  <td class="method">move_to(float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="method">clear_info_text()</td>
</tr>
<tr>
  <td class="method">set_cursor_to_pointer()</td>
</tr>
<tr>
  <td class="method">set_cursor_to_grab()</td>
</tr>
<tr>
  <td class="private_method">draw_unicode_character(ALLEGRO_FONT* font=nullptr, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1}, uint32_t icon=61444, int flags=0)</td>
</tr>
<tr>
  <td class="private_method">obtain_cursor_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_info_text_font()</td>
</tr>
<tr>
  <td class="private_method">draw_cursor()</td>
</tr>
<tr>
  <td class="private_method">draw_info_text()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CloseDialog.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CloseDialog.q.yml</h3>
     <table>
<tr>
  <td class="property">dialog</td>
  <td class="property">AllegroFlare::Elements::DialogBoxes::Base*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotAnItemDialog.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotAnItemDialog.q.yml</h3>
     <table>
<tr>
  <td class="property">item_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">item_bitmap_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotEvidenceDialog.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotEvidenceDialog.q.yml</h3>
     <table>
<tr>
  <td class="property">evidence_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">evidence_bitmap_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogSystem.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/DialogSystem.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">active_dialog</td>
  <td class="property">AllegroFlare::Elements::DialogBoxes::Base*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_bitmap_bin(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">set_font_bin(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">set_event_emitter(AllegroFlare::EventEmitter* event_emitter=nullptr)</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">a_dialog_is_active()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">process_dialog_event(AllegroFlare::GameEventDatas::Base* game_event_data=nullptr)</td>
</tr>
<tr>
  <td class="method">emit_dialog_switch_in_event()</td>
</tr>
<tr>
  <td class="method">emit_dialog_switch_out_event()</td>
</tr>
<tr>
  <td class="method">spawn_basic_dialog(std::vector&lt;std::string&gt; pages={})</td>
</tr>
<tr>
  <td class="method">spawn_you_got_an_item_dialog(std::string item_name=&quot;[unset-item_name]&quot;, std::string item_bitmap_identifier=&quot;[unset-item_bitmap_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">spawn_you_got_new_evidence_dialog(std::string evidence_name=&quot;[unset-evidence_name]&quot;, std::string evidence_bitmap_identifier=&quot;[unset-evidence_bitmap_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">dialog_advance()</td>
</tr>
<tr>
  <td class="method">dialog_cursor_up()</td>
</tr>
<tr>
  <td class="method">dialog_cursor_down()</td>
</tr>
<tr>
  <td class="method">dialog_is_finished()</td>
</tr>
<tr>
  <td class="method">shutdown_dialog()</td>
</tr>
<tr>
  <td class="method">move_cursor_up()</td>
</tr>
<tr>
  <td class="method">move_cursor_down()</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EventNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::DialogEventDatas::CloseDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CloseDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::YouGotEvidence&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/YouGotEvidence.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEvent&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Basic&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::YouGotAnItem&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/YouGotAnItem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::YouGotAnItem&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/YouGotAnItem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryDictionaryItems::WithAttributes&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryDictionaryItems/WithAttributes.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::DialogEventDatas::CreateYouGotAnItemDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotAnItemDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::DialogEventDatas::CreateYouGotEvidenceDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotEvidenceDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">placement</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">on_cursor_interact_script_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">cursor_is_over</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">cursor_entered_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cursor_exited_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cursor_insights_are_hidden</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">show_hover_as_hue_change</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">hidden</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">on_cursor_enter()</td>
</tr>
<tr>
  <td class="method">on_cursor_leave()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ElementID&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ElementID.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.q.yml</h3>
     <table>
<tr>
  <td class="property">entity_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;*</td>
</tr>
<tr>
  <td class="property">entity_room_associations</td>
  <td class="property">std::map&lt;std::string, std::string&gt;*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">select_all_in_room_ordered_by_id(std::string room_name=&quot;[unset-room_name]&quot;)</td>
</tr>
<tr>
  <td class="method">select_all()</td>
</tr>
<tr>
  <td class="method">find_dictionary_name_of_entity_that_cursor_is_now_over()</td>
</tr>
<tr>
  <td class="method">find_entity_by_dictionary_name(std::string dictionary_listing_name=nullptr)</td>
</tr>
<tr>
  <td class="method">order_by_id(std::vector&lt;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt; entities_to_order={})</td>
</tr>
<tr>
  <td class="method">get_entities_by_entity_names(std::vector&lt;std::string&gt; entity_dictionary_names={})</td>
</tr>
<tr>
  <td class="method">select_all_entity_names_in_room_name(std::string room_name=&quot;[unset-room_name]&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;int, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;string&quot;, &quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, std::string&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/EntityFactory.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/EntityFactory.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">create_chair_entity(float x=1920/2, float y=1080/2)</td>
</tr>
<tr>
  <td class="method">create_entity(std::string bitmap_image_identifier=&quot;[unset-bitmap_identifier]&quot;, float x=1920/2, float y=1080/2, float scale=1.0f, std::string name=&quot;[unset-name]&quot;, std::string on_interact_script_name=&quot;[unset-on_interact_script_name]&quot;)</td>
</tr>
<tr>
  <td class="method">create_entity_bmp(ALLEGRO_BITMAP* bitmap=nullptr, float x=0, float y=0, float scale=1.0f, std::string name=&quot;[unset-name]&quot;, std::string on_interact_script_name=&quot;[unset-on_interact_script_name]&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">inventory_index</td>
  <td class="property">AllegroFlare::InventoryIndex</td>
</tr>
<tr>
  <td class="property">af_inventory</td>
  <td class="property">AllegroFlare::Inventory</td>
</tr>
<tr>
  <td class="property">flags</td>
  <td class="property">AllegroFlare::Inventory</td>
</tr>
<tr>
  <td class="property">entity_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;</td>
</tr>
<tr>
  <td class="property">room_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Room*&gt;</td>
</tr>
<tr>
  <td class="property">entity_room_associations</td>
  <td class="property">std::map&lt;std::string, std::string&gt;</td>
</tr>
<tr>
  <td class="property">script_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Script&gt;</td>
</tr>
<tr>
  <td class="property">script_runner</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::ScriptRunner</td>
</tr>
<tr>
  <td class="property">entity_collection_helper</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper</td>
</tr>
<tr>
  <td class="property">starting_room_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">current_room</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::Room*</td>
</tr>
<tr>
  <td class="property">room_shader</td>
  <td class="property">AllegroFlare::Shader*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">dialog_system</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::DialogSystem</td>
</tr>
<tr>
  <td class="property">paused</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">subscribed_to_game_event_names</td>
  <td class="property">std::set&lt;std::string&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_font_bin(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">get_subscribed_to_game_event_names()</td>
</tr>
<tr>
  <td class="method">is_subscribed_to_game_event_name(std::string game_event_name=&quot;[unset-game_event_name]&quot;)</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">load_configuration(AllegroFlare::Prototypes::FixedRoom2D::Configuration configuration={})</td>
</tr>
<tr>
  <td class="method">enter_start_room()</td>
</tr>
<tr>
  <td class="method">load_gametest_configuration()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">enter_room(std::string room_name=&quot;[unset-room_name]&quot;)</td>
</tr>
<tr>
  <td class="method">unhover_any_and_all_entities()</td>
</tr>
<tr>
  <td class="method">reset_cursors_to_default_in_all_rooms()</td>
</tr>
<tr>
  <td class="method">get_current_room_dictionary_name(AllegroFlare::Prototypes::FixedRoom2D::Room* room=nullptr)</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">render_void_room()</td>
</tr>
<tr>
  <td class="method">process_subscribed_to_game_event(AllegroFlare::GameEvent* game_event=nullptr)</td>
</tr>
<tr>
  <td class="private_method">process_interaction_event(AllegroFlare::GameEventDatas::Base* game_event_data=nullptr)</td>
</tr>
<tr>
  <td class="private_method">process_script_event(AllegroFlare::GameEventDatas::Base* game_event_data=nullptr)</td>
</tr>
<tr>
  <td class="method">render_entities_in_current_room()</td>
</tr>
<tr>
  <td class="method">get_entities_in_current_room()</td>
</tr>
<tr>
  <td class="method">get_dictionary_name_of_current_room()</td>
</tr>
<tr>
  <td class="method">update_all_rooms()</td>
</tr>
<tr>
  <td class="method">suspend_all_rooms()</td>
</tr>
<tr>
  <td class="method">resume_all_rooms()</td>
</tr>
<tr>
  <td class="method">pause_game()</td>
</tr>
<tr>
  <td class="method">unpause_game()</td>
</tr>
<tr>
  <td class="method">dialog_cursor_up()</td>
</tr>
<tr>
  <td class="method">dialog_cursor_down()</td>
</tr>
<tr>
  <td class="method">dialog_is_finished()</td>
</tr>
<tr>
  <td class="method">activate_primary_action()</td>
</tr>
<tr>
  <td class="method">emit_close_current_active_dialog_event()</td>
</tr>
<tr>
  <td class="method">move_cursor_up()</td>
</tr>
<tr>
  <td class="method">move_cursor_down()</td>
</tr>
<tr>
  <td class="method">move_cursor_left()</td>
</tr>
<tr>
  <td class="method">move_cursor_right()</td>
</tr>
<tr>
  <td class="method">move_cursor(float distance_x=0.0, float distance_y=0.0)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Cursor&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Cursor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptRunner&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::InteractionEventData&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Inventory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Inventory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxRenderer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::InitiateDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/InitiateDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectItem&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectItem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::EnterRoom&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/EnterRoom.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::RoomFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/RoomFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Inventory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Inventory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryIndex&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryIndex.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ConfigurationLoader&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ConfigurationFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Configuration&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Configuration.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AudioController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AudioController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEvent&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Room&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Room.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shader&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Script&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Script.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color::&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EventNames::&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::DialogEventDatas::CloseDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CloseDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryDictionaryItems::WithAttributes&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryDictionaryItems/WithAttributes.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::DialogSystem&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/DialogSystem.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData.q.yml</h3>
     <table>
<tr>
  <td class="property">item_interacted_with</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">cursor_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cursor_y</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/Room.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Room.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">entity_collection_helper</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper*</td>
</tr>
<tr>
  <td class="property">cursor</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::Cursor</td>
</tr>
<tr>
  <td class="property">suspended</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">suspended_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">suspend()</td>
</tr>
<tr>
  <td class="method">resume()</td>
</tr>
<tr>
  <td class="method">show()</td>
</tr>
<tr>
  <td class="method">hide()</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">render(std::string this_rooms_dictionary_name__this_injection_is_temporary_measure=&quot;[unset-this_rooms_dictionary_name__this_injection_is_temporary_measure]&quot;)</td>
</tr>
<tr>
  <td class="method">interact_with_item_under_cursor()</td>
</tr>
<tr>
  <td class="method">move_cursor(float distance_x=0.0, float distance_y=0.0, std::vector&lt;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt; entities_in_this_room={})</td>
</tr>
<tr>
  <td class="method">reset_cursor_to_default()</td>
</tr>
<tr>
  <td class="private_method">emit_interaction_event(std::string item_dictionary_name=&quot;[unset-item_dictionary_name]&quot;, float cursor_x=0.0, float cursor_y=0.0)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Cursor&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Cursor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::RoomDictionary&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/RoomDictionary.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptRunner&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::InteractionEventData&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EventNames::INTERACTION_EVENT_NAME&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color::&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/RoomDictionary.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/RoomDictionary.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">run()</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/RoomFactory.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/RoomFactory.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">entity_collection_helper</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">create_room(float width=(1920-200), float height=(1080-200))</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Room*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Room.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;, &quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, std::string&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Room&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Room.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/Screen.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Screen.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">fixed_room_2d</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::FixedRoom2D</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">game_event_name_to_emit_on_exit</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">game_event_name_to_emit_to_open_chronicle</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">DEFAULT_EVENT_NAME_ON_EXIT</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_EVENT_NAME_TO_OPEN_CHRONICLE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_bitmap_bin(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">set_font_bin(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">set_event_emitter(AllegroFlare::EventEmitter* event_emitter=nullptr)</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">load_gametest_configuration()</td>
</tr>
<tr>
  <td class="method">load_configuration(AllegroFlare::Prototypes::FixedRoom2D::Configuration configuration={})</td>
</tr>
<tr>
  <td class="method">enter_start_room()</td>
</tr>
<tr>
  <td class="method">on_activate()</td>
</tr>
<tr>
  <td class="method">game_event_func(AllegroFlare::GameEvent* game_event=nullptr)</td>
</tr>
<tr>
  <td class="method">on_deactivate()</td>
</tr>
<tr>
  <td class="method">primary_timer_func()</td>
</tr>
<tr>
  <td class="method">key_char_func(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">emit_event_to_exit()</td>
</tr>
<tr>
  <td class="method">emit_event_to_open_chronicle()</td>
</tr>
<tr>
  <td class="private_method">emit_event_to_set_input_hints()</td>
</tr>
<tr>
  <td class="private_method">emit_event_to_set_input_hints_bar_to_inventory_controls()</td>
</tr>
<tr>
  <td class="private_method">emit_event_to_set_input_hints_bar_to_room_controls()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::RoomDictionary&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/RoomDictionary.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::FixedRoom2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEvent*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EventNames::INTERACTION_EVENT_NAME&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::InteractionEventData*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AudioController*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AudioController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Configuration&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Configuration.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AudioController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AudioController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEvent&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEvent.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/Script.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/Script.q.yml</h3>
     <table>
<tr>
  <td class="property">lines</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">current_line_num</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">markers_index</td>
  <td class="property">std::map&lt;std::string, int&gt;</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">finished</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">get_current_line_text()</td>
</tr>
<tr>
  <td class="method">goto_next_line()</td>
</tr>
<tr>
  <td class="method">goto_marker(std::string identifier=&quot;[unset-marker-to-goto]&quot;)</td>
</tr>
<tr>
  <td class="method">goto_line_num(int line_num=0)</td>
</tr>
<tr>
  <td class="method">at_last_line()</td>
</tr>
<tr>
  <td class="private_method">at_valid_line()</td>
</tr>
<tr>
  <td class="private_method">infer_current_line_index_num()</td>
</tr>
<tr>
  <td class="method">parse_command_and_argument(std::string script_line={})</td>
</tr>
<tr>
  <td class="method">build_markers_index(std::vector&lt;std::string&gt; script_lines={})</td>
</tr>
<tr>
  <td class="method">is_valid_command_string(std::string command=&quot;[unset-command]&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::pair&lt;std::string, std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::php::trim&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/UsefulPHP.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, int&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectEvidence.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectEvidence.q.yml</h3>
     <table>
<tr>
  <td class="property">evidence_dictionary_name_to_collect</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectItem.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectItem.q.yml</h3>
     <table>
<tr>
  <td class="property">item_dictionary_name_to_collect</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/EnterRoom.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/EnterRoom.q.yml</h3>
     <table>
<tr>
  <td class="property">room_dictionary_name_to_enter</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/InitiateDialog.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/InitiateDialog.q.yml</h3>
     <table>
<tr>
  <td class="property">dialog_pages</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner.q.yml">quintessence/AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner.q.yml</h3>
     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">script_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Script&gt;*</td>
</tr>
<tr>
  <td class="property">current_internally_running_script</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::Script</td>
</tr>
<tr>
  <td class="property">bool_eval_func</td>
  <td class="property">std::function&lt;bool(std::string, AllegroFlare::Prototypes::FixedRoom2D::ScriptRunner*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">bool_eval_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">script_freshly_loaded_via_OPEN_SCRIPT</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">paused_for_dialog_to_finish</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">debug_output</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">load_script_by_dictionary_name(std::string script_dictionary_name=&quot;[unset-script_dictionary_name]&quot;)</td>
</tr>
<tr>
  <td class="method">load_script_lines(std::vector&lt;std::string&gt; script_lines={})</td>
</tr>
<tr>
  <td class="method">play_or_resume()</td>
</tr>
<tr>
  <td class="method">default_bool_eval_func(std::string expression=&quot;[unset-expression]&quot;, AllegroFlare::Prototypes::FixedRoom2D::ScriptRunner* script_runner=nullptr, void* user_data=nullptr)</td>
</tr>
<tr>
  <td class="method">parse_and_run_line(std::string raw_script_line=&quot;[empty-script-line]&quot;, int line_num=0, bool auto_assume_uncommanded_line_is_dialog=true)</td>
</tr>
<tr>
  <td class="method">parse_command_and_argument(std::string script_line={})</td>
</tr>
<tr>
  <td class="private_method">emit_script_event(AllegroFlare::GameEventDatas::Base* event_data=nullptr)</td>
</tr>
<tr>
  <td class="private_method">split(std::string string=&quot;&quot;, char delimiter=&#39; &#39;)</td>
</tr>
<tr>
  <td class="method">tokenize(std::string str=&quot;&quot;, char delim=&#39;|&#39;)</td>
</tr>
<tr>
  <td class="method">assert_min_token_count(std::vector&lt;std::string&gt; tokens={}, int min=0)</td>
</tr>
<tr>
  <td class="method">assert_token_count_eq(std::vector&lt;std::string&gt; tokens={}, int value=0)</td>
</tr>
<tr>
  <td class="method">assert_odd_token_count(std::vector&lt;std::string&gt; tokens={}, int min=0)</td>
</tr>
<tr>
  <td class="private_method">trim(std::string s=&quot;&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Script&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Script.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EventNames::SCRIPT_EVENT_NAME&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::InitiateDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/InitiateDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectItem&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectItem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::CollectEvidence&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectEvidence.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptEventDatas::EnterRoom&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/EnterRoom.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Inventory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Inventory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Inventory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Inventory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Script&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Script.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::ScriptRunner&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::function&quot;, &quot;headers&quot;=&gt;[&quot;functional&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::find_if&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/MindDive/Hud/Hud.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/Hud/Hud.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">timer</td>
  <td class="property">AllegroFlare::Timer*</td>
</tr>
<tr>
  <td class="property">slate_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">slate_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">backbuffer_sub_bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">camera</td>
  <td class="property">AllegroFlare::Camera2D</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">show_win_slate()</td>
</tr>
<tr>
  <td class="method">show_die_slate()</td>
</tr>
<tr>
  <td class="method">show_ready_slate()</td>
</tr>
<tr>
  <td class="method">clear_slate()</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="private_method">render_stopwatch()</td>
</tr>
<tr>
  <td class="private_method">render_slate()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Stopwatch&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Stopwatch.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/MindDive/Hypersync.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/Hypersync.q.yml</h3>
     <table>
<tr>
  <td class="property">song_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">song_bpm</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">timer</td>
  <td class="property">AllegroFlare::Timer</td>
</tr>
<tr>
  <td class="property">audio_stream</td>
  <td class="property">ALLEGRO_AUDIO_STREAM*</td>
</tr>
<tr>
  <td class="property">audio_voice</td>
  <td class="property">ALLEGRO_VOICE*</td>
</tr>
<tr>
  <td class="property">audio_mixer</td>
  <td class="property">ALLEGRO_MIXER*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">stream_is_attached</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">MIN_SONG_BPM</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">latency_sec</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">TODO()</td>
</tr>
<tr>
  <td class="method">set_song_filename(std::string song_filename=&quot;[unset-song-filename.ogg]&quot;)</td>
</tr>
<tr>
  <td class="method">set_song_bpm(float song_bpm=0.0f)</td>
</tr>
<tr>
  <td class="method">get_timer_seconds()</td>
</tr>
<tr>
  <td class="method">get_timer_milliseconds()</td>
</tr>
<tr>
  <td class="method">get_timer_microseconds()</td>
</tr>
<tr>
  <td class="method">get_beat_num(float seconds=0.0f)</td>
</tr>
<tr>
  <td class="method">get_measure_num(float seconds=0.0f)</td>
</tr>
<tr>
  <td class="method">build_beat_clock_str()</td>
</tr>
<tr>
  <td class="method">start()</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">destruct()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT_QUEUE&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_AUDIO_STREAM&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VOICE&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_MIXER&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_acodec_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_acodec.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/MindDive/MindDive.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/MindDive.q.yml</h3>
     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">sample_bin</td>
  <td class="property">AllegroFlare::SampleBin*</td>
</tr>
<tr>
  <td class="property">current_tunnel_mesh</td>
  <td class="property">AllegroFlare::Prototypes::MindDive::TunnelMesh*</td>
</tr>
<tr>
  <td class="property">hypersync</td>
  <td class="property">AllegroFlare::Prototypes::MindDive::Hypersync</td>
</tr>
<tr>
  <td class="property">surfer_position</td>
  <td class="property">AllegroFlare::Vec3D</td>
</tr>
<tr>
  <td class="property">surfer_velocity</td>
  <td class="property">AllegroFlare::Vec3D</td>
</tr>
<tr>
  <td class="property">surfer_accelerator_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">surfer_break_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">timer</td>
  <td class="property">AllegroFlare::Timer</td>
</tr>
<tr>
  <td class="property">camera</td>
  <td class="property">AllegroFlare::Camera3D</td>
</tr>
<tr>
  <td class="property">hud</td>
  <td class="property">AllegroFlare::Prototypes::MindDive::Hud::Hud</td>
</tr>
<tr>
  <td class="property">state</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surfer_attached_to_playhead_track</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">STATE_RACING</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">STATE_WON</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">STATE_PLAYER_DIED</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">STATE_WAITING_START</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">debug_metronome_sound</td>
  <td class="property">AllegroFlare::Sound*</td>
</tr>
<tr>
  <td class="property">music_started_at</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_bitmap_bin(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">set_sample_bin(AllegroFlare::SampleBin* sample_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">set_font_bin(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="private_method">start_timer()</td>
</tr>
<tr>
  <td class="method">pause_timer()</td>
</tr>
<tr>
  <td class="private_method">reset_timer()</td>
</tr>
<tr>
  <td class="private_method">calculate_current_tunnel_mesh_height()</td>
</tr>
<tr>
  <td class="private_method">calculate_current_tunnel_mesh_tile_depth()</td>
</tr>
<tr>
  <td class="method">reset()</td>
</tr>
<tr>
  <td class="method">start_racing()</td>
</tr>
<tr>
  <td class="method">attach_surfer_to_playhead_track()</td>
</tr>
<tr>
  <td class="method">stop_racing_due_to_death()</td>
</tr>
<tr>
  <td class="method">surfer_move_right()</td>
</tr>
<tr>
  <td class="method">surfer_move_left()</td>
</tr>
<tr>
  <td class="method">surfer_press_accelerator()</td>
</tr>
<tr>
  <td class="method">surfer_unpress_accelerator()</td>
</tr>
<tr>
  <td class="method">surfer_press_break()</td>
</tr>
<tr>
  <td class="method">surfer_unpress_break()</td>
</tr>
<tr>
  <td class="method">surfer_stop()</td>
</tr>
<tr>
  <td class="method">surfer_move_horizontal_none()</td>
</tr>
<tr>
  <td class="method">render_tunnel()</td>
</tr>
<tr>
  <td class="method">render_hud()</td>
</tr>
<tr>
  <td class="method">render_surfer()</td>
</tr>
<tr>
  <td class="private_method">evaluate_surfer_past_goal()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">play_around_with_collision_step_result(AllegroFlare::Physics::TileMapCollisionStepperStepResult* step_result=nullptr)</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_audio_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_acodec_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_acodec.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::MindDive::TunnelMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/MindDive/TunnelMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Useful&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Stopwatch&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Stopwatch.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;sin&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;glCullFace&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_opengl.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::MindDive::TunnelMeshFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/MindDive/TunnelMeshFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::MindDive::Hud::Hud&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/MindDive/Hud/Hud.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::MindDive::TunnelMeshSurferCollisionResolver&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/MindDive/TunnelMeshSurferCollisionResolver.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::TileMapCollisionStepperStepResult&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/TileMapCollisionStepperStepResult.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Sound&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Sound.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SampleBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SampleBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::MindDive::Hypersync&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/MindDive/Hypersync.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/MindDive/Tunnel.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/Tunnel.q.yml</h3>
     <table>
<tr>
  <td class="property">tile_map</td>
  <td class="property">AllegroFlare::TileMaps::TileMap&lt;AllegroFlare::Prototypes::MindDive::TunnelTiles::Base*&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">fill()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::MindDive::TunnelTiles::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/MindDive/TunnelTiles/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/MindDive/TunnelMesh.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/TunnelMesh.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">atlas</td>
  <td class="property">AllegroFlare::TileMaps::PrimMeshAtlas</td>
</tr>
<tr>
  <td class="property">prim_mesh</td>
  <td class="property">AllegroFlare::TileMaps::PrimMesh</td>
</tr>
<tr>
  <td class="property">collision_tile_map</td>
  <td class="property">AllegroFlare::TileMaps::TileMap&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">atlas_bitmap_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">atlas_bitmap_tile_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">atlas_bitmap_tile_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_atlas_configuration(std::string atlas_bitmap_filename=&quot;[unset-atlas_bitmap_filename]&quot;, int atlas_bitmap_tile_width=1, int atlas_bitmap_tile_height=1)</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">resize(int num_columns=1, int num_rows=1)</td>
</tr>
<tr>
  <td class="method">rescale_tile_dimentions_to(float tile_width=1, float tile_height=1)</td>
</tr>
<tr>
  <td class="method">infer_real_width()</td>
</tr>
<tr>
  <td class="method">infer_real_height()</td>
</tr>
<tr>
  <td class="method">obtain_tile_width()</td>
</tr>
<tr>
  <td class="method">obtain_tile_height()</td>
</tr>
<tr>
  <td class="method">obtain_num_rows()</td>
</tr>
<tr>
  <td class="method">obtain_num_columns()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">random_fill()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Random&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Random.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_image_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMesh.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/MindDive/TunnelMeshFactory.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/TunnelMeshFactory.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">create_classic_random()</td>
</tr>
<tr>
  <td class="method">create_random_with_walls()</td>
</tr>
<tr>
  <td class="method">create_from_tmj(std::string tmj_filename=&quot;unset-tmj_filename.tmj&quot;)</td>
</tr>
<tr>
  <td class="method">random_fill_from(AllegroFlare::Prototypes::MindDive::TunnelMesh* tunnel_mesh=nullptr, std::vector&lt;std::pair&lt;int, int&gt;&gt; inclusion_list={})</td>
</tr>
<tr>
  <td class="method">random_sparce_placement(AllegroFlare::Prototypes::MindDive::TunnelMesh* tunnel_mesh=nullptr, std::vector&lt;std::pair&lt;int, int&gt;&gt; inclusion_list={}, int one_in_chance=2)</td>
</tr>
<tr>
  <td class="method">random_fill_excluding(AllegroFlare::Prototypes::MindDive::TunnelMesh* tunnel_mesh=nullptr, std::set&lt;int&gt; exclusion_list={})</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::MindDive::TunnelMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/MindDive/TunnelMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Random&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Random.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::MindDive::TunnelMeshTMJDataLoader&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/MindDive/TunnelMeshTMJDataLoader.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/MindDive/TunnelMeshSurferCollisionResolver.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/TunnelMeshSurferCollisionResolver.q.yml</h3>
     <table>
<tr>
  <td class="property">tunnel_mesh</td>
  <td class="property">AllegroFlare::Prototypes::MindDive::TunnelMesh*</td>
</tr>
<tr>
  <td class="property">surfer_position</td>
  <td class="property">AllegroFlare::Vec3D*</td>
</tr>
<tr>
  <td class="property">surfer_velocity</td>
  <td class="property">AllegroFlare::Vec3D*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">resolve_classic()</td>
</tr>
<tr>
  <td class="method">resolve_basic()</td>
</tr>
<tr>
  <td class="method">resolve()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::MindDive::TunnelMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/MindDive/TunnelMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::TileMapCollisionStepper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/TileMapCollisionStepper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::TileMapCollisionStepperStepResult&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/TileMapCollisionStepperStepResult.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/MindDive/TunnelMeshTMJDataLoader.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/TunnelMeshTMJDataLoader.q.yml</h3>
     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">layer_num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">layer_num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">layer_tile_data</td>
  <td class="property">std::vector&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">loaded</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">get_num_columns()</td>
</tr>
<tr>
  <td class="method">get_num_rows()</td>
</tr>
<tr>
  <td class="method">get_tile_width()</td>
</tr>
<tr>
  <td class="method">get_tile_height()</td>
</tr>
<tr>
  <td class="method">get_layer_num_columns()</td>
</tr>
<tr>
  <td class="method">get_layer_num_rows()</td>
</tr>
<tr>
  <td class="method">get_layer_tile_data()</td>
</tr>
<tr>
  <td class="method">load()</td>
</tr>
<tr>
  <td class="private_method">file_exists(std::string filename=&quot;[unset-filename]&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::ifstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;nlohmann::json&quot;, &quot;headers&quot;=&gt;[&quot;lib/nlohmann/json.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::exists&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/MindDive/TunnelRenderer.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/TunnelRenderer.q.yml</h3>
     <table>
<tr>
  <td class="property">tunnel_mesh</td>
  <td class="property">AllegroFlare::Prototypes::MindDive::TunnelMesh*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::MindDive::TunnelMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/MindDive/TunnelMesh.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/MindDive/TunnelTiles/Base.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/TunnelTiles/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">is_type(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/MindDive/TunnelTiles/Basic.q.yml">quintessence/AllegroFlare/Prototypes/MindDive/TunnelTiles/Basic.q.yml</h3>
     <table>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::MindDive::TunnelTiles::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/MindDive/TunnelTiles/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Base.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">parent</td>
  <td class="property">AllegroFlare::ElementID*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">draw()</td>
</tr>
<tr>
  <td class="method">is_type(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ElementID&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ElementID.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.q.yml</h3>
     <table>
<tr>
  <td class="property">place</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">velocity</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">bitmap_placement</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">bitmap_alignment_strategy</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">bitmap_flip_h</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">draw_debug</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">debug_box_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">draw()</td>
</tr>
<tr>
  <td class="method">fit_to_bitmap()</td>
</tr>
<tr>
  <td class="method">disable_bitmap_alignment_strategy()</td>
</tr>
<tr>
  <td class="private_method">assign_alignment_strategy_values(AllegroFlare::Placement2D* parent_placement=nullptr, ALLEGRO_BITMAP* bitmap=nullptr, float* bitmap_x=nullptr, float* bitmap_y=nullptr, float* bitmap_align_x=nullptr, float* bitmap_align_y=nullptr, std::string bitmap_alignment_strategy=&quot;centered&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/EntityFlagNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">animation_book</td>
  <td class="property">AllegroFlare::FrameAnimation::Book*</td>
</tr>
<tr>
  <td class="property">init_entities_drawing_debug</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">enemy_debug_box_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">player_collectable_box_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">goalpost_box_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">create_from_bitmap_filename(std::string map_name=&quot;[map-name-not-set]&quot;, std::string bitmap_filename=&quot;bitmap-filename-that-has-not-been-set.png&quot;, std::string bitmap_alignment_strategy=&quot;centered&quot;)</td>
</tr>
<tr>
  <td class="method">create_for_aabb2d(std::string map_name=&quot;[map-name-not-set]&quot;, float width=(16.0f-1.0f), float height=(16.0f-1.0f))</td>
</tr>
<tr>
  <td class="method">create_frame_animated(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f, float w=0.0f, float h=0.0f, std::string initial_animation_name=&quot;[unset-initial_animation_name]&quot;, std::string bitmap_alignment_strategy=&quot;centered&quot;)</td>
</tr>
<tr>
  <td class="method">create_player_projectile(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f, float width=(8.0f-1.0f), float height=(8.0f-1.0f), AllegroFlare::vec2d vector=AllegroFlare::vec2d(0.0f, 1.0f), float magnitude=1.0f)</td>
</tr>
<tr>
  <td class="method">create_enemy_move_left(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f, float width=(16.0f-1.0f), float height=(16.0f-1.0f))</td>
</tr>
<tr>
  <td class="method">create_tracking_enemy(std::string map_name=&quot;[map-name-not-set]&quot;, AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* tracked_entity=nullptr, float x=0.0f, float y=0.0f, float width=(16.0f-1.0f), float height=(16.0f-1.0f))</td>
</tr>
<tr>
  <td class="method">create_flapping_enemy(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f, float width=(16.0f-1.0f), float height=(16.0f-1.0f), float target_elevation=0.0f, float flap_strength=1.0f, float flap_recovery_rate=0.1f)</td>
</tr>
<tr>
  <td class="method">create_collectable(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="method">create_door(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f, std::string target_map_name=&quot;[unset-target-map-name]&quot;, float target_spawn_x=0.0f, float target_spawn_y=0.0f)</td>
</tr>
<tr>
  <td class="method">create_game_event_door(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f, std::string game_event_name_to_emit=&quot;[unset-game_event_name_to_emit]&quot;)</td>
</tr>
<tr>
  <td class="method">create_goalpost(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="method">create_tile_map(std::string map_json_filename=&quot;[a-map-tmj-filename-that-is-not-set]&quot;, std::string map_name=&quot;[map-name-not-set]&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::MoveLeft&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveLeft.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::MoveRight&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveRight.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::StayStill&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/StayStill.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::BackAndForthHorizontal&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/BackAndForthHorizontal.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::HoppingLeft&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/HoppingLeft.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Tracking&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Tracking.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::FallOnTrackingRange&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FallOnTrackingRange.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::ReflectOffWalls&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/ReflectOffWalls.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::MoveInDirection&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveInDirection.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Flapping&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Flapping.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::FlappingWithRandomness&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FlappingWithRandomness.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/EntityFlagNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Doors::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Doors/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::TileMaps::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/TileMaps/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::TMJMeshLoader&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/TMJMeshLoader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Enemies::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Enemies/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::Book&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/Book.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::FrameAnimated2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/FrameAnimated2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Doors/Basic2D.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Doors/Basic2D.q.yml</h3>
     <table>
<tr>
  <td class="property">game_event_name_to_emit</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">target_map_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">target_spawn_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">target_spawn_y</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Enemies/Base.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/Enemies/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">movement_strategy</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">draw()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/FrameAnimated2D.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/FrameAnimated2D.q.yml</h3>
     <table>
<tr>
  <td class="property">animation_book</td>
  <td class="property">AllegroFlare::FrameAnimation::Book*</td>
</tr>
<tr>
  <td class="property">animation</td>
  <td class="property">AllegroFlare::FrameAnimation::Animation</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">refresh_bitmap()</td>
</tr>
<tr>
  <td class="method">set_animation_playback_rate(float multiplier=1.0f)</td>
</tr>
<tr>
  <td class="method">get_animation_finished()</td>
</tr>
<tr>
  <td class="method">get_current_animation_frame_num()</td>
</tr>
<tr>
  <td class="method">set_animation(std::string animation_name=&quot;[unset-animation_name]&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/EntityFlagNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::Book&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/Book.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FrameAnimation::Animation&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FrameAnimation/Animation.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Anchored.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Anchored.q.yml</h3>
     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">anchor</td>
  <td class="property">AllegroFlare::vec2d</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/BackAndForthHorizontal.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/BackAndForthHorizontal.q.yml</h3>
     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">timer</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">travel_speed</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">travel_duration</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">direction_of_travel_is_left</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FallOnTrackingRange.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FallOnTrackingRange.q.yml</h3>
     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">tracked_entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">range_radius</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">triggered</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Flapping.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Flapping.q.yml</h3>
     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">target_elevation</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">flap_strength</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">flap_recovery_rate</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">flap_recovery_counter</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">can_flap</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="private_method">update_flapability_status()</td>
</tr>
<tr>
  <td class="private_method">decide_to_flap()</td>
</tr>
<tr>
  <td class="method">flap()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FlappingWithRandomness.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FlappingWithRandomness.q.yml</h3>
     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">target_elevation</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">flap_strength</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">flap_recovery_rate</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">flap_recovery_counter</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">can_flap</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">random</td>
  <td class="property">AllegroFlare::Random</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_random_seed(uint32_t random_seed=0)</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">flap()</td>
</tr>
<tr>
  <td class="private_method">update_flapability_status()</td>
</tr>
<tr>
  <td class="private_method">decide_to_flap()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Random&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Random.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/EntityFlagNames.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/HoppingLeft.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/HoppingLeft.q.yml</h3>
     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">jump_force</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">speed</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">landing_delay</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">timer</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveInDirection.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveInDirection.q.yml</h3>
     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">direction</td>
  <td class="property">AllegroFlare::vec2d</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveLeft.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveLeft.q.yml</h3>
     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">speed</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveRight.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveRight.q.yml</h3>
     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">speed</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/ReflectOffWalls.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/ReflectOffWalls.q.yml</h3>
     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">speed</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">moving_right</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">moving_down</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/EntityFlagNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/StayStill.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/StayStill.q.yml</h3>
     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Tracking.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Tracking.q.yml</h3>
     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">tracked_entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">speed</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/TileMaps/Basic2D.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Entities/TileMaps/Basic2D.q.yml</h3>
     <table>
<tr>
  <td class="property">tile_atlas</td>
  <td class="property">AllegroFlare::TileMaps::PrimMeshAtlas*</td>
</tr>
<tr>
  <td class="property">tile_mesh</td>
  <td class="property">AllegroFlare::TileMaps::PrimMesh*</td>
</tr>
<tr>
  <td class="property">collision_tile_mesh</td>
  <td class="property">AllegroFlare::TileMaps::TileMap&lt;int&gt;*</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMesh.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/EntityCollectionHelper.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/EntityCollectionHelper.q.yml</h3>
     <table>
<tr>
  <td class="property">entities</td>
  <td class="property">std::vector&lt;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*&gt;*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">select_collectable_by_player()</td>
</tr>
<tr>
  <td class="method">select_goalposts()</td>
</tr>
<tr>
  <td class="method">select_doors()</td>
</tr>
<tr>
  <td class="method">select_on_map(std::string on_map_name=&quot;[on-map-name-not-set]&quot;)</td>
</tr>
<tr>
  <td class="method">select_on_map_y_sorted(std::string on_map_name=&quot;[on-map-name-not-set]&quot;)</td>
</tr>
<tr>
  <td class="method">find_map_by_name(std::string map_name=&quot;[find-map-name-not-set]&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/EntityFlagNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::TileMaps::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/TileMaps/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/Screen.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/Screen.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">display</td>
  <td class="property">AllegroFlare::Display*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">native_display_resolution_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">native_display_resolution_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">currently_active_map</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::TileMaps::Basic2D*</td>
</tr>
<tr>
  <td class="property">currently_active_map_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">entity_pool</td>
  <td class="property">std::vector&lt;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*&gt;</td>
</tr>
<tr>
  <td class="property">map_dictionary</td>
  <td class="property">std::map&lt;std::string, std::string&gt;</td>
</tr>
<tr>
  <td class="property">gravity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">gravity_reversed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">camera</td>
  <td class="property">AllegroFlare::Camera2D</td>
</tr>
<tr>
  <td class="property">camera_baseline_zoom</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">player_controlled_entity</td>
  <td class="property">AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">show_tile_mesh</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">show_collision_tile_mesh</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">player_controls</td>
  <td class="property">AllegroFlare::VirtualControls</td>
</tr>
<tr>
  <td class="property">camera_control_strategy</td>
  <td class="property">AllegroFlare::CameraControlStrategies2D::Base*</td>
</tr>
<tr>
  <td class="property">backbuffer_sub_bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_map_dictionary(std::map&lt;std::string, std::string&gt; map_dictionary={})</td>
</tr>
<tr>
  <td class="method">set_display(AllegroFlare::Display* display=nullptr)</td>
</tr>
<tr>
  <td class="method">set_event_emitter(AllegroFlare::EventEmitter* event_emitter=nullptr)</td>
</tr>
<tr>
  <td class="method">set_bitmap_bin(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">set_currently_active_map(std::string name=&quot;[unset-current-map-name-to-use]&quot;)</td>
</tr>
<tr>
  <td class="method">find_map_by_name(std::string name=&quot;[unset-map-name]&quot;)</td>
</tr>
<tr>
  <td class="method">on_activate()</td>
</tr>
<tr>
  <td class="method">on_deactivate()</td>
</tr>
<tr>
  <td class="method">initialize_maps()</td>
</tr>
<tr>
  <td class="method">add_entity_to_pool(AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D* entity=nullptr)</td>
</tr>
<tr>
  <td class="method">initialize_camera_control()</td>
</tr>
<tr>
  <td class="method">initialize_player_controls()</td>
</tr>
<tr>
  <td class="method">initialize_backbuffer_sub_bitmap()</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="private_method">initialize_camera()</td>
</tr>
<tr>
  <td class="method">unset_player_controlled_entity_vertical_velocity()</td>
</tr>
<tr>
  <td class="method">unset_player_controlled_entity_horizontal_velocity()</td>
</tr>
<tr>
  <td class="method">set_player_controlled_entity_jump()</td>
</tr>
<tr>
  <td class="method">player_emit_projectile(float magnitude=3.0f)</td>
</tr>
<tr>
  <td class="method">reverse_gravity()</td>
</tr>
<tr>
  <td class="method">update_entities()</td>
</tr>
<tr>
  <td class="private_method">cleanup_entities_flagged_for_deletion()</td>
</tr>
<tr>
  <td class="private_method">check_player_collisions_with_doors()</td>
</tr>
<tr>
  <td class="private_method">update_player_collisions_with_collectables()</td>
</tr>
<tr>
  <td class="private_method">update_player_collisions_with_goalposts()</td>
</tr>
<tr>
  <td class="method">draw_entities()</td>
</tr>
<tr>
  <td class="method">update_player_controls_on_player_controlled_entity()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">draw()</td>
</tr>
<tr>
  <td class="method">toggle_show_collision_tile_mesh()</td>
</tr>
<tr>
  <td class="method">toggle_show_tile_mesh()</td>
</tr>
<tr>
  <td class="method">primary_timer_func()</td>
</tr>
<tr>
  <td class="method">key_char_func(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">key_up_func(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">key_down_func(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">virtual_control_button_down_func(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">virtual_control_button_up_func(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">virtual_control_axis_change_func(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">user_event_func(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">render_collision_tile_mesh()</td>
</tr>
<tr>
  <td class="method">get_tile_atlas()</td>
</tr>
<tr>
  <td class="method">get_tile_mesh()</td>
</tr>
<tr>
  <td class="method">get_collision_tile_mesh()</td>
</tr>
<tr>
  <td class="method">get_current_map_entities()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;int, int&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControls&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControls.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControlsProcessor&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControlsProcessor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2DFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Frameworks::Full&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Frameworks/Full.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::TileMapCollisionStepper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/TileMapCollisionStepper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::AABB2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/AABB2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/EntityFlagNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CameraControlStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CameraControlStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CameraControlStrategies2D::Snap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CameraControlStrategies2D/Snap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CameraControlStrategies2D::SmoothSnap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CameraControlStrategies2D/SmoothSnap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CameraControlStrategies2D::SmoothSnapWithZoomEffect&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CameraControlStrategies2D/SmoothSnapWithZoomEffect.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CameraControlStrategies2D::HorizontalRail&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CameraControlStrategies2D/HorizontalRail.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::EntityCollectionHelper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/EntityCollectionHelper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::TileMaps::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/TileMaps/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Doors::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Doors/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::find&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;tan&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Display&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Display.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/TMJDataLoader.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/TMJDataLoader.q.yml</h3>
     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">layer_num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">layer_num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">layer_tile_data</td>
  <td class="property">std::vector&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">collision_layer_num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">collision_layer_num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">collision_layer_tile_data</td>
  <td class="property">std::vector&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">loaded</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">get_num_columns()</td>
</tr>
<tr>
  <td class="method">get_num_rows()</td>
</tr>
<tr>
  <td class="method">get_tile_width()</td>
</tr>
<tr>
  <td class="method">get_tile_height()</td>
</tr>
<tr>
  <td class="method">get_layer_num_columns()</td>
</tr>
<tr>
  <td class="method">get_layer_num_rows()</td>
</tr>
<tr>
  <td class="method">get_layer_tile_data()</td>
</tr>
<tr>
  <td class="method">get_collision_layer_num_columns()</td>
</tr>
<tr>
  <td class="method">get_collision_layer_num_rows()</td>
</tr>
<tr>
  <td class="method">get_collision_layer_tile_data()</td>
</tr>
<tr>
  <td class="method">load()</td>
</tr>
<tr>
  <td class="private_method">file_exists(std::string filename=&quot;[unset-filename]&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::ifstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;nlohmann::json&quot;, &quot;headers&quot;=&gt;[&quot;lib/nlohmann/json.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::exists&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/Platforming2D/TMJMeshLoader.q.yml">quintessence/AllegroFlare/Prototypes/Platforming2D/TMJMeshLoader.q.yml</h3>
     <table>
<tr>
  <td class="property">BITMAP_ATLAS_FILENAME</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">tmj_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">tile_atlas</td>
  <td class="property">AllegroFlare::TileMaps::PrimMeshAtlas*</td>
</tr>
<tr>
  <td class="property">mesh</td>
  <td class="property">AllegroFlare::TileMaps::PrimMesh*</td>
</tr>
<tr>
  <td class="property">collision_tile_map</td>
  <td class="property">AllegroFlare::TileMaps::TileMap&lt;int&gt;*</td>
</tr>
<tr>
  <td class="property">loaded</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">get_tile_atlas()</td>
</tr>
<tr>
  <td class="method">get_mesh()</td>
</tr>
<tr>
  <td class="method">get_collision_tile_map()</td>
</tr>
<tr>
  <td class="method">load()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ifstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;nlohmann::json&quot;, &quot;headers&quot;=&gt;[&quot;lib/nlohmann/json.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::TMJDataLoader&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/TMJDataLoader.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/TileDrive/Hud/Hud.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/Hud/Hud.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">slate_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">slate_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">backbuffer_sub_bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">camera</td>
  <td class="property">AllegroFlare::Camera2D</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">show_win_slate()</td>
</tr>
<tr>
  <td class="method">show_die_slate()</td>
</tr>
<tr>
  <td class="method">show_ready_slate()</td>
</tr>
<tr>
  <td class="method">clear_slate()</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="private_method">render_slate()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Stopwatch&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Stopwatch.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/TileDrive/Screen.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/Screen.q.yml</h3>
     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">sample_bin</td>
  <td class="property">AllegroFlare::SampleBin*</td>
</tr>
<tr>
  <td class="property">tile_drive</td>
  <td class="property">AllegroFlare::Prototypes::TileDrive::TileDrive</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_bitmap_bin(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">set_sample_bin(AllegroFlare::SampleBin* sample_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">set_font_bin(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">set_event_emitter(AllegroFlare::EventEmitter* event_emitter=nullptr)</td>
</tr>
<tr>
  <td class="method">set_maps_folder(std::string maps_folder=&quot;[unset-maps_folder-arg]&quot;)</td>
</tr>
<tr>
  <td class="method">set_terrain_mesh_dictionary(std::map&lt;std::string, AllegroFlare::Prototypes::TileDrive::TerrainMeshDictionaryRecord&gt; terrain_mesh_dictionary={})</td>
</tr>
<tr>
  <td class="method">set_current_map_identifier(std::string current_map_identifier=&quot;[unset-current_map_identifier-arg]&quot;)</td>
</tr>
<tr>
  <td class="method">set_collision_stepper_step_result_callback(std::function&lt;void(AllegroFlare::Physics::TileMapCollisionStepperStepResult*,AllegroFlare::Prototypes::TileDrive::TileDrive*,void*)&gt; collision_stepper_step_result_callback={}, void* collision_stepper_step_result_callback_user_data=nullptr)</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">primary_timer_func()</td>
</tr>
<tr>
  <td class="method">key_down_func(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">key_up_func(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SampleBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SampleBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::TileDrive::TileDrive&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/TileDrive/TileDrive.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::TileDrive::TerrainMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/TileDrive/TerrainMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::function&quot;, &quot;headers&quot;=&gt;[&quot;functional&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::TileMapCollisionStepperStepResult&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/TileMapCollisionStepperStepResult.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::TileDrive::TerrainMeshDictionaryRecord&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/TileDrive/TerrainMeshDictionaryRecord.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMesh.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMesh.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">atlas</td>
  <td class="property">AllegroFlare::TileMaps::PrimMeshAtlas</td>
</tr>
<tr>
  <td class="property">prim_mesh</td>
  <td class="property">AllegroFlare::TileMaps::PrimMesh</td>
</tr>
<tr>
  <td class="property">collision_tile_map</td>
  <td class="property">AllegroFlare::TileMaps::TileMap&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">atlas_bitmap_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">atlas_bitmap_tile_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">atlas_bitmap_tile_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_atlas_configuration(std::string atlas_bitmap_filename=&quot;[unset-atlas_bitmap_filename]&quot;, int atlas_bitmap_tile_width=1, int atlas_bitmap_tile_height=1)</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">resize(int num_columns=1, int num_rows=1)</td>
</tr>
<tr>
  <td class="method">rescale_tile_dimentions_to(float tile_width=1, float tile_height=1)</td>
</tr>
<tr>
  <td class="method">infer_real_width()</td>
</tr>
<tr>
  <td class="method">infer_real_height()</td>
</tr>
<tr>
  <td class="method">obtain_tile_width()</td>
</tr>
<tr>
  <td class="method">obtain_tile_height()</td>
</tr>
<tr>
  <td class="method">obtain_num_rows()</td>
</tr>
<tr>
  <td class="method">obtain_num_columns()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">random_fill()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Random&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Random.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_image_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMesh.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshDictionaryRecord.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshDictionaryRecord.q.yml</h3>
     <table>
<tr>
  <td class="property">tmj_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">tile_atlas_bitmap_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">tile_atlas_tile_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_atlas_tile_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">terrain_mesh</td>
  <td class="property">AllegroFlare::Prototypes::TileDrive::TerrainMesh*</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::TileDrive::TerrainMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/TileDrive/TerrainMesh.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshDriverCollisionResolver.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshDriverCollisionResolver.q.yml</h3>
     <table>
<tr>
  <td class="property">tunnel_mesh</td>
  <td class="property">AllegroFlare::Prototypes::TileDrive::TerrainMesh*</td>
</tr>
<tr>
  <td class="property">surfer_position</td>
  <td class="property">AllegroFlare::Vec3D*</td>
</tr>
<tr>
  <td class="property">surfer_velocity</td>
  <td class="property">AllegroFlare::Vec3D*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">resolve_classic()</td>
</tr>
<tr>
  <td class="method">resolve_basic()</td>
</tr>
<tr>
  <td class="method">resolve()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::TileDrive::TerrainMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/TileDrive/TerrainMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::TileMapCollisionStepper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/TileMapCollisionStepper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::TileMapCollisionStepperStepResult&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/TileMapCollisionStepperStepResult.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshFactory.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshFactory.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">create_classic_random()</td>
</tr>
<tr>
  <td class="method">create_random_with_walls()</td>
</tr>
<tr>
  <td class="method">create_from_tmj(std::string tmj_filename=&quot;unset-tmj_filename.tmj&quot;, std::string tilemap_bitmap_identifier=&quot;[unset-tilemap_bitmap_identifier]&quot;, int tilemap_tile_width=50, int tilemap_tile_height=50)</td>
</tr>
<tr>
  <td class="method">random_fill_from(AllegroFlare::Prototypes::TileDrive::TerrainMesh* terrain_mesh=nullptr, std::vector&lt;std::pair&lt;int, int&gt;&gt; inclusion_list={})</td>
</tr>
<tr>
  <td class="method">random_sparce_placement(AllegroFlare::Prototypes::TileDrive::TerrainMesh* terrain_mesh=nullptr, std::vector&lt;std::pair&lt;int, int&gt;&gt; inclusion_list={}, int one_in_chance=2)</td>
</tr>
<tr>
  <td class="method">random_fill_excluding(AllegroFlare::Prototypes::TileDrive::TerrainMesh* terrain_mesh=nullptr, std::set&lt;int&gt; exclusion_list={})</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::TileDrive::TerrainMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/TileDrive/TerrainMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Random&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Random.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::TileDrive::TerrainMeshTMJDataLoader&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/TileDrive/TerrainMeshTMJDataLoader.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshTMJDataLoader.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/TerrainMeshTMJDataLoader.q.yml</h3>
     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">layer_num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">layer_num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">layer_tile_data</td>
  <td class="property">std::vector&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">collision_layer_tile_data</td>
  <td class="property">std::vector&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">collision_layer_present</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">loaded</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">get_num_columns()</td>
</tr>
<tr>
  <td class="method">get_num_rows()</td>
</tr>
<tr>
  <td class="method">get_tile_width()</td>
</tr>
<tr>
  <td class="method">get_tile_height()</td>
</tr>
<tr>
  <td class="method">get_layer_num_columns()</td>
</tr>
<tr>
  <td class="method">get_layer_num_rows()</td>
</tr>
<tr>
  <td class="method">get_layer_tile_data()</td>
</tr>
<tr>
  <td class="method">get_collision_layer_tile_data()</td>
</tr>
<tr>
  <td class="method">get_collision_layer_present()</td>
</tr>
<tr>
  <td class="method">load()</td>
</tr>
<tr>
  <td class="private_method">file_exists(std::string filename=&quot;[unset-filename]&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::ifstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;nlohmann::json&quot;, &quot;headers&quot;=&gt;[&quot;lib/nlohmann/json.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::exists&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Prototypes/TileDrive/TileDrive.q.yml">quintessence/AllegroFlare/Prototypes/TileDrive/TileDrive.q.yml</h3>
     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">sample_bin</td>
  <td class="property">AllegroFlare::SampleBin*</td>
</tr>
<tr>
  <td class="property">current_terrain_mesh</td>
  <td class="property">AllegroFlare::Prototypes::TileDrive::TerrainMesh*</td>
</tr>
<tr>
  <td class="property">terrain_mesh_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::TileDrive::TerrainMeshDictionaryRecord&gt;</td>
</tr>
<tr>
  <td class="property">current_map_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">maps_folder</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">driver_position</td>
  <td class="property">AllegroFlare::Vec3D</td>
</tr>
<tr>
  <td class="property">driver_velocity</td>
  <td class="property">AllegroFlare::Vec3D</td>
</tr>
<tr>
  <td class="property">driver_acceleration_velocity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">driver_turn_rotation</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">driver_turning_velocity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">driver_accelerator_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">driver_break_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">collision_stepper_step_result_callback</td>
  <td class="property">std::function&lt; void( AllegroFlare::Physics::TileMapCollisionStepperStepResult*, AllegroFlare::Prototypes::TileDrive::TileDrive*, void* ) &gt;</td>
</tr>
<tr>
  <td class="property">collision_stepper_step_result_callback_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">parallax_background</td>
  <td class="property">AllegroFlare::Elements::Backgrounds::Parallax</td>
</tr>
<tr>
  <td class="property">camera</td>
  <td class="property">AllegroFlare::Camera3D</td>
</tr>
<tr>
  <td class="property">hud</td>
  <td class="property">AllegroFlare::Prototypes::TileDrive::Hud::Hud</td>
</tr>
<tr>
  <td class="property">state</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">STATE_RACING</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">STATE_WON</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">STATE_PLAYER_DIED</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">STATE_WAITING_START</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">debug_metronome_sound</td>
  <td class="property">AllegroFlare::Sound*</td>
</tr>
<tr>
  <td class="property">backbuffer_sub_bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">backbuffer_sub_bitmap_background</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_bitmap_bin(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">set_sample_bin(AllegroFlare::SampleBin* sample_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">set_font_bin(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">set_maps_folder(std::string maps_folder=&quot;[unset-maps_folder-arg]&quot;)</td>
</tr>
<tr>
  <td class="method">set_terrain_mesh_dictionary(std::map&lt;std::string, AllegroFlare::Prototypes::TileDrive::TerrainMeshDictionaryRecord&gt; terrain_mesh_dictionary={})</td>
</tr>
<tr>
  <td class="method">set_current_map_identifier(std::string current_map_identifier=&quot;[unset-current_map_identifier-arg]&quot;)</td>
</tr>
<tr>
  <td class="method">create_new_backbuffer_sub_bitmap()</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="private_method">calculate_current_terrain_mesh_height()</td>
</tr>
<tr>
  <td class="private_method">calculate_current_terrain_mesh_tile_depth()</td>
</tr>
<tr>
  <td class="method">reset()</td>
</tr>
<tr>
  <td class="method">start()</td>
</tr>
<tr>
  <td class="method">driver_turn_right()</td>
</tr>
<tr>
  <td class="method">driver_turn_left()</td>
</tr>
<tr>
  <td class="method">driver_strafe_right()</td>
</tr>
<tr>
  <td class="method">driver_strafe_left()</td>
</tr>
<tr>
  <td class="method">driver_press_accelerator()</td>
</tr>
<tr>
  <td class="method">driver_unpress_accelerator()</td>
</tr>
<tr>
  <td class="method">driver_press_break()</td>
</tr>
<tr>
  <td class="method">driver_unpress_break()</td>
</tr>
<tr>
  <td class="method">driver_stop()</td>
</tr>
<tr>
  <td class="method">driver_strafe_none()</td>
</tr>
<tr>
  <td class="method">driver_turn_none()</td>
</tr>
<tr>
  <td class="method">render_terrain()</td>
</tr>
<tr>
  <td class="method">render_hud()</td>
</tr>
<tr>
  <td class="method">render_driver()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">development_play_around_with_collision_steper_callback(AllegroFlare::Physics::TileMapCollisionStepperStepResult* step_result=nullptr, AllegroFlare::Prototypes::TileDrive::TileDrive* tile_drive=nullptr, void* user_data=nullptr)</td>
</tr>
<tr>
  <td class="method">render_background()</td>
</tr>
<tr>
  <td class="method">render_world()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_audio_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_acodec_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_acodec.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::TileDrive::TerrainMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/TileDrive/TerrainMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Useful&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Stopwatch&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Stopwatch.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;sin&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;glCullFace&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_opengl.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::TileDrive::TerrainMeshFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/TileDrive/TerrainMeshFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::TileDrive::Hud::Hud&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/TileDrive/Hud/Hud.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::TileDrive::TerrainMeshDriverCollisionResolver&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/TileDrive/TerrainMeshDriverCollisionResolver.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::TileMapCollisionStepperStepResult&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/TileMapCollisionStepperStepResult.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Sound&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Sound.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SampleBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SampleBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::MindDive::Hypersync&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/MindDive/Hypersync.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::function&quot;, &quot;headers&quot;=&gt;[&quot;functional&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::TileDrive::TileDrive&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/TileDrive/TileDrive.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::TileDrive::TerrainMeshDictionaryRecord&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/TileDrive/TerrainMeshDictionaryRecord.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Parallax&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Parallax.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/RenderSurfaces/Base.q.yml">quintessence/AllegroFlare/RenderSurfaces/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_as_target()</td>
</tr>
<tr>
  <td class="method">obtain_surface()</td>
</tr>
<tr>
  <td class="method">is_target()</td>
</tr>
<tr>
  <td class="method">get_width()</td>
</tr>
<tr>
  <td class="method">get_height()</td>
</tr>
<tr>
  <td class="method">get_center()</td>
</tr>
<tr>
  <td class="method">get_middle()</td>
</tr>
<tr>
  <td class="method">is_type(std::string possible_type=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">is_a_display_surface()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/RenderSurfaces/DisplayBackbuffer.q.yml">quintessence/AllegroFlare/RenderSurfaces/DisplayBackbuffer.q.yml</h3>
     <table>
<tr>
  <td class="property">display</td>
  <td class="property">ALLEGRO_DISPLAY*</td>
</tr>
<tr>
  <td class="property">display_backbuffer</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_display(ALLEGRO_DISPLAY* display=nullptr)</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">set_as_target()</td>
</tr>
<tr>
  <td class="method">obtain_surface()</td>
</tr>
<tr>
  <td class="method">get_width()</td>
</tr>
<tr>
  <td class="method">get_height()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::RenderSurfaces::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/RenderSurfaces/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/RenderSurfaces/DisplayBackbufferSubBitmap.q.yml">quintessence/AllegroFlare/RenderSurfaces/DisplayBackbufferSubBitmap.q.yml</h3>
     <table>
<tr>
  <td class="property">display</td>
  <td class="property">ALLEGRO_DISPLAY*</td>
</tr>
<tr>
  <td class="property">display_backbuffer_sub_bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_display(ALLEGRO_DISPLAY* display=nullptr)</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">set_as_target()</td>
</tr>
<tr>
  <td class="method">obtain_surface()</td>
</tr>
<tr>
  <td class="method">get_width()</td>
</tr>
<tr>
  <td class="method">get_height()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::RenderSurfaces::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/RenderSurfaces/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/SceneGraph/Entities/Base.q.yml">quintessence/AllegroFlare/SceneGraph/Entities/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">is_type(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ElementID&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ElementID.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/SceneGraph/EntityPool.q.yml">quintessence/AllegroFlare/SceneGraph/EntityPool.q.yml</h3>
     <table>
<tr>
  <td class="property">entity_pool</td>
  <td class="property">std::unordered_set&lt;AllegroFlare::SceneGraph::Entities::Base*&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">add(AllegroFlare::SceneGraph::Entities::Base* entity=nullptr)</td>
</tr>
<tr>
  <td class="method">add(std::vector&lt;AllegroFlare::SceneGraph::Entities::Base*&gt; entities=)</td>
</tr>
<tr>
  <td class="method">remove(AllegroFlare::SceneGraph::Entities::Base* entity=nullptr)</td>
</tr>
<tr>
  <td class="method">remove(std::vector&lt;AllegroFlare::SceneGraph::Entities::Base*&gt; entities={})</td>
</tr>
<tr>
  <td class="method">exists(AllegroFlare::SceneGraph::Entities::Base* entity=nullptr)</td>
</tr>
<tr>
  <td class="method">select_A(std::string attribute=&quot;[unset-attribute]&quot;)</td>
</tr>
<tr>
  <td class="method">select_B(std::vector&lt;std::string&gt; attributes={})</td>
</tr>
<tr>
  <td class="method">select_C(std::string attribute=&quot;[unset-attribute]&quot;, std::string parameter=&quot;[unset-parameter]&quot;)</td>
</tr>
<tr>
  <td class="method">select_D(std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt; attribute_param_pairs={})</td>
</tr>
<tr>
  <td class="method">select_E(std::string attribute=&quot;[unset-attribute]&quot;, std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt; attribute_param_pairs={})</td>
</tr>
<tr>
  <td class="method">select_F(std::vector&lt;std::string&gt; attributes={}, std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt; attribute_param_pairs={})</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SceneGraph::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SceneGraph/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::find&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::unordered_set&quot;, &quot;headers&quot;=&gt;[&quot;unordered_set&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/ScreenCapture.q.yml">quintessence/AllegroFlare/ScreenCapture.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">create_backbuffer_capture()</td>
</tr>
<tr>
  <td class="method">create_frontbuffer_capture()</td>
</tr>
<tr>
  <td class="method">create_capture(bool flip_display_for_capture=false)</td>
</tr>
<tr>
  <td class="method">create_frontbuffer_capture_as_scaled_bitmap(int destination_width=1920, int destination_height=1080)</td>
</tr>
<tr>
  <td class="method">create_backbuffer_capture_as_scaled_bitmap(int destination_width=1920, int destination_height=1080)</td>
</tr>
<tr>
  <td class="method">create_capture_as_scaled_bitmap(int destination_width=1920, int destination_height=1080, bool flip_display_for_capture=false)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/Achievements.q.yml">quintessence/AllegroFlare/Screens/Achievements.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">achievements</td>
  <td class="property">AllegroFlare::Achievements*</td>
</tr>
<tr>
  <td class="property">scrollbar_dest_position</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">achievements_list</td>
  <td class="property">AllegroFlare::Elements::AchievementsList</td>
</tr>
<tr>
  <td class="property">game_event_name_to_emit_on_exit</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">DEFAULT_EVENT_NAME_ON_EXIT</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_font_bin(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">refresh_achievements_list()</td>
</tr>
<tr>
  <td class="method">set_event_emitter(AllegroFlare::EventEmitter* event_emitter=nullptr)</td>
</tr>
<tr>
  <td class="method">on_activate()</td>
</tr>
<tr>
  <td class="method">on_deactivate()</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">primary_timer_func()</td>
</tr>
<tr>
  <td class="private_method">update()</td>
</tr>
<tr>
  <td class="private_method">move_scrollbar_position_to(float position=0.0f)</td>
</tr>
<tr>
  <td class="private_method">move_scrollbar_position_up()</td>
</tr>
<tr>
  <td class="private_method">move_scrollbar_position_down()</td>
</tr>
<tr>
  <td class="method">virtual_control_button_down_func(int player_num=0, int button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">set_placeholder_achievements()</td>
</tr>
<tr>
  <td class="method">build_achievements()</td>
</tr>
<tr>
  <td class="private_method">limit_scrollbar_dest_position()</td>
</tr>
<tr>
  <td class="private_method">emit_event_to_set_input_hints()</td>
</tr>
<tr>
  <td class="method">infer_scrollbar_is_showing()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Achievements*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Achievements.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::AchievementsList&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/AchievementsList.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::tuple&lt;std::string, std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;tuple&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControls&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControls.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min, std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Achievements&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Achievements.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/CharacterNameInput.q.yml">quintessence/AllegroFlare/Screens/CharacterNameInput.q.yml</h3>
     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">software_keyboard</td>
  <td class="property">AllegroFlare::SoftwareKeyboard::SoftwareKeyboard</td>
</tr>
<tr>
  <td class="property">mode</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">MODE_USING_VIRTUAL_CONTROLS</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">MODE_USING_KEYBOARD</td>
  <td class="property">int</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">on_activate()</td>
</tr>
<tr>
  <td class="method">primary_timer_func()</td>
</tr>
<tr>
  <td class="method">set_font_name(std::string font_name=AllegroFlare::SoftwareKeyboard::SoftwareKeyboard::DEFAULT_FONT_NAME)</td>
</tr>
<tr>
  <td class="method">set_font_size(int font_size=1)</td>
</tr>
<tr>
  <td class="method">set_event_to_emit_on_pressing_ok_key(std::string event_to_emit_on_pressing_ok_key=AllegroFlare::SoftwareKeyboard::SoftwareKeyboard::DEFAULT_EVENT_TO_EMIT_ON_PRESSING_OK_KEY)</td>
</tr>
<tr>
  <td class="method">mode_is_using_keyboard()</td>
</tr>
<tr>
  <td class="method">mode_is_using_virtual_controls()</td>
</tr>
<tr>
  <td class="method">set_mode_to_using_keyboard()</td>
</tr>
<tr>
  <td class="method">set_mode_to_using_virtual_controls()</td>
</tr>
<tr>
  <td class="method">virtual_control_button_down_func(int player_num=0, int button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">key_char_func(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SoftwareKeyboard::SoftwareKeyboard&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SoftwareKeyboard/SoftwareKeyboard.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare:::VirtualControls::&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControls.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/GameOverScreen.q.yml">quintessence/AllegroFlare/Screens/GameOverScreen.q.yml</h3>
     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">menu_options</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">cursor_position</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="private_method">move_cursor_up()</td>
</tr>
<tr>
  <td class="private_method">move_cursor_down()</td>
</tr>
<tr>
  <td class="private_method">select_menu_option()</td>
</tr>
<tr>
  <td class="method">primary_timer_func()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">draw_primary_text()</td>
</tr>
<tr>
  <td class="method">draw_menu()</td>
</tr>
<tr>
  <td class="private_method">infer_current_menu_option_value()</td>
</tr>
<tr>
  <td class="private_method">infer_current_menu_option_label()</td>
</tr>
<tr>
  <td class="private_method">obtain_title_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_menu_font()</td>
</tr>
<tr>
  <td class="method">virtual_control_button_down_func(int player_num=0, int button_num=0, bool is_repeat=false)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControls&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControls.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/GameWonScreen.q.yml">quintessence/AllegroFlare/Screens/GameWonScreen.q.yml</h3>
     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">game_event_name_to_emit_on_submission</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">primary_timer_func()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">draw_primary_text()</td>
</tr>
<tr>
  <td class="method">draw_instruction_text()</td>
</tr>
<tr>
  <td class="private_method">obtain_title_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_instruction_font()</td>
</tr>
<tr>
  <td class="method">virtual_control_button_down_func(int player_num=0, int button_num=0, bool is_repeat=false)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_START_TITLE_SCREEN&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControls&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControls.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/PauseScreen.q.yml">quintessence/AllegroFlare/Screens/PauseScreen.q.yml</h3>
     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">title_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">footer_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">background_bitmap_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">title_bitmap_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">title_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">menu_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">menu_selector_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">footer_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">title_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">menu_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">footer_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">show_footer_text</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">menu_options</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">cursor_position</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">title_menu_gutter</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">on_activate()</td>
</tr>
<tr>
  <td class="method">set_menu_options(std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt; menu_options={})</td>
</tr>
<tr>
  <td class="private_method">move_cursor_up()</td>
</tr>
<tr>
  <td class="private_method">move_cursor_down()</td>
</tr>
<tr>
  <td class="method">activate_menu_option(std::string menu_option_name=&quot;[unset-menu-option-name]&quot;)</td>
</tr>
<tr>
  <td class="private_method">select_menu_option()</td>
</tr>
<tr>
  <td class="method">primary_timer_func()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">draw_background()</td>
</tr>
<tr>
  <td class="method">draw_title()</td>
</tr>
<tr>
  <td class="method">draw_footer_text()</td>
</tr>
<tr>
  <td class="method">draw_menu()</td>
</tr>
<tr>
  <td class="private_method">infer_current_menu_option_value()</td>
</tr>
<tr>
  <td class="private_method">infer_current_menu_option_label()</td>
</tr>
<tr>
  <td class="private_method">obtain_title_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_menu_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_footer_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_background_bitmap()</td>
</tr>
<tr>
  <td class="private_method">obtain_title_bitmap()</td>
</tr>
<tr>
  <td class="method">virtual_control_button_down_func(int player_num=0, int button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="private_method">menu_is_empty()</td>
</tr>
<tr>
  <td class="private_method">menu_has_items()</td>
</tr>
<tr>
  <td class="method">build_default_menu_options()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_START_NEW_GAME&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControls&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControls.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/RollingCredits.q.yml">quintessence/AllegroFlare/Screens/RollingCredits.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">rolling_credits_component</td>
  <td class="property">AllegroFlare::Elements::RollingCredits::RollingCredits</td>
</tr>
<tr>
  <td class="property">surface_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y_offset</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y_speed</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cached_calculated_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">game_event_name_to_emit_after_completing</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">scroll_is_past_end</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">on_activate()</td>
</tr>
<tr>
  <td class="method">set_font_bin(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">set_sections(std::vector&lt;AllegroFlare::Elements::RollingCredits::Sections::Base*&gt; sections={})</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="private_method">emit_completion_event()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">primary_timer_func()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::RollingCredits&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/RollingCredits.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;AllegroFlare::Elements::RollingCredits::Sections::Base*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Elements/RollingCredits/Sections/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::Sections::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/Sections/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/Storyboard.q.yml">quintessence/AllegroFlare/Screens/Storyboard.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">storyboard_element</td>
  <td class="property">AllegroFlare::Elements::Storyboard</td>
</tr>
<tr>
  <td class="property">auto_advance</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">game_event_name_to_emit_after_completing</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">on_activate()</td>
</tr>
<tr>
  <td class="method">primary_timer_func()</td>
</tr>
<tr>
  <td class="private_method">emit_completion_event()</td>
</tr>
<tr>
  <td class="private_method">advance()</td>
</tr>
<tr>
  <td class="method">virtual_control_button_down_func(int player_num=0, int button_num=0, bool is_repeat=false)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Storyboard&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Storyboard.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_multiline_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControls&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControls.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Screens/TitleScreen.q.yml">quintessence/AllegroFlare/Screens/TitleScreen.q.yml</h3>
     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">surface_width</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">title_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">copyright_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">background_bitmap_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">title_bitmap_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">title_font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">menu_font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">copyright_font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">title_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">menu_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">menu_selector_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">menu_selector_outline_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">menu_selected_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">copyright_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">menu_selector_outline_stroke_thickness</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">title_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">menu_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">copyright_font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">menu_options</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">title_position_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">title_position_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">menu_position_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">menu_position_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cursor_position</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">menu_move_sound_effect_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">menu_move_sound_effect_enabled</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">menu_select_option_sound_effect_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">menu_select_option_sound_effect_enabled</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">menu_option_selection_activation_delay</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">reveal_duration</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">reveal_started_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">showing_menu</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">showing_copyright</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">state</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">state_is_busy</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">state_changed_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">STATE_UNDEF</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">STATE_REVEALING</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">STATE_AWAITING_USER_INPUT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">STATE_CHOSE_MENU_OPTION</td>
  <td class="property">uint32_t</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">TODO()</td>
</tr>
<tr>
  <td class="method">set_font_name(std::string font_name=&quot;[unset-font_name]&quot;)</td>
</tr>
<tr>
  <td class="method">set_state(uint32_t state=STATE_UNDEF, bool override_if_busy=false)</td>
</tr>
<tr>
  <td class="method">update_state(float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="method">is_valid_state(uint32_t state=STATE_UNDEF)</td>
</tr>
<tr>
  <td class="method">infer_age(float time_of_event=0, float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="method">infer_reveal_age(float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="method">infer_reveal_age_n(float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="method">show_menu()</td>
</tr>
<tr>
  <td class="method">on_activate()</td>
</tr>
<tr>
  <td class="method">skip_to_title()</td>
</tr>
<tr>
  <td class="method">set_menu_options(std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt; menu_options={})</td>
</tr>
<tr>
  <td class="private_method">move_cursor_up()</td>
</tr>
<tr>
  <td class="private_method">move_cursor_down()</td>
</tr>
<tr>
  <td class="method">activate_menu_option(std::string menu_option_name=&quot;[unset-menu-option-name]&quot;)</td>
</tr>
<tr>
  <td class="private_method">select_menu_option()</td>
</tr>
<tr>
  <td class="method">processing_user_input()</td>
</tr>
<tr>
  <td class="method">is_state(uint32_t possible_state=STATE_UNDEF)</td>
</tr>
<tr>
  <td class="method">primary_timer_func()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">draw_background()</td>
</tr>
<tr>
  <td class="method">draw_title()</td>
</tr>
<tr>
  <td class="method">draw_copyright_text()</td>
</tr>
<tr>
  <td class="method">draw_menu()</td>
</tr>
<tr>
  <td class="private_method">infer_current_menu_option_value()</td>
</tr>
<tr>
  <td class="private_method">infer_current_menu_option_label()</td>
</tr>
<tr>
  <td class="method">play_menu_move_sound_effect()</td>
</tr>
<tr>
  <td class="method">play_menu_select_option_sound_effect()</td>
</tr>
<tr>
  <td class="private_method">obtain_title_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_menu_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_copyright_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_background_bitmap()</td>
</tr>
<tr>
  <td class="private_method">obtain_title_bitmap()</td>
</tr>
<tr>
  <td class="method">virtual_control_button_down_func(int player_num=0, int button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="private_method">menu_is_empty()</td>
</tr>
<tr>
  <td class="private_method">menu_has_items()</td>
</tr>
<tr>
  <td class="method">build_default_menu_options()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_START_NEW_GAME&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControls&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControls.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Shaders/AllegroDefault.q.yml">quintessence/AllegroFlare/Shaders/AllegroDefault.q.yml</h3>
     <table>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">activate()</td>
</tr>
<tr>
  <td class="private_method">obtain_vertex_source()</td>
</tr>
<tr>
  <td class="private_method">obtain_fragment_source()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Shaders/Base.q.yml">quintessence/AllegroFlare/Shaders/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">vertex_source_code</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">fragment_source_code</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">is_type(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shader&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shader.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Shaders/Cubemap.q.yml">quintessence/AllegroFlare/Shaders/Cubemap.q.yml</h3>
     <table>
<tr>
  <td class="property">cube_map</td>
  <td class="property">AllegroFlare::Cubemap*</td>
</tr>
<tr>
  <td class="property">camera_position</td>
  <td class="property">AllegroFlare::Vec3D</td>
</tr>
<tr>
  <td class="property">object_placement_transform</td>
  <td class="property">ALLEGRO_TRANSFORM</td>
</tr>
<tr>
  <td class="property">reflecting</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">activate()</td>
</tr>
<tr>
  <td class="method">set_object_placement(AllegroFlare::Placement3D* object_placement=nullptr)</td>
</tr>
<tr>
  <td class="private_method">set_values_to_activated_shader()</td>
</tr>
<tr>
  <td class="private_method">obtain_vertex_source()</td>
</tr>
<tr>
  <td class="private_method">obtain_fragment_source()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Cubemap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Cubemap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_TRANSFORM&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Shaders/PostProcessing/Blinds.q.yml">quintessence/AllegroFlare/Shaders/PostProcessing/Blinds.q.yml</h3>
     <table>
<tr>
  <td class="property">surface_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">transition_playhead_position</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">num_blinds</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">blinds_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">set_transition_playhead_position(float transition_playhead_position=0.0f)</td>
</tr>
<tr>
  <td class="method">set_num_blinds(int num_blinds=14)</td>
</tr>
<tr>
  <td class="method">set_blinds_color(ALLEGRO_COLOR blinds_color=ALLEGRO_COLOR{0, 0, 0, 1})</td>
</tr>
<tr>
  <td class="method">activate()</td>
</tr>
<tr>
  <td class="private_method">obtain_vertex_source()</td>
</tr>
<tr>
  <td class="private_method">obtain_fragment_source()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Shaders/PostProcessing/DipToBlack.q.yml">quintessence/AllegroFlare/Shaders/PostProcessing/DipToBlack.q.yml</h3>
     <table>
<tr>
  <td class="property">surface_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">transition_playhead_position</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">set_transition_playhead_position(float transition_playhead_position=0.0f)</td>
</tr>
<tr>
  <td class="method">set_color(ALLEGRO_COLOR color=ALLEGRO_COLOR{0, 0, 0, 1})</td>
</tr>
<tr>
  <td class="method">activate()</td>
</tr>
<tr>
  <td class="private_method">obtain_vertex_source()</td>
</tr>
<tr>
  <td class="private_method">obtain_fragment_source()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Shaders/PostProcessing/Wipe.q.yml">quintessence/AllegroFlare/Shaders/PostProcessing/Wipe.q.yml</h3>
     <table>
<tr>
  <td class="property">surface_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">transition_playhead_position</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">direction</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">DIRECTION_UNDEF</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DIRECTION_LEFT</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DIRECTION_RIGHT</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">set_transition_playhead_position(float transition_playhead_position=0.0f)</td>
</tr>
<tr>
  <td class="method">set_direction(std::string direction=AllegroFlare::Shaders::PostProcessing::Wipe::DIRECTION_UNDEF)</td>
</tr>
<tr>
  <td class="method">is_valid_direction(std::string possibly_valid_direction=AllegroFlare::Shaders::PostProcessing::Wipe::DIRECTION_UNDEF)</td>
</tr>
<tr>
  <td class="method">activate()</td>
</tr>
<tr>
  <td class="private_method">obtain_vertex_source()</td>
</tr>
<tr>
  <td class="private_method">obtain_fragment_source()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/SoftwareKeyboard/KeyboardKey.q.yml">quintessence/AllegroFlare/SoftwareKeyboard/KeyboardKey.q.yml</h3>
     <table>
<tr>
  <td class="property">label</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">last_pressed_at</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">get_x2()</td>
</tr>
<tr>
  <td class="method">get_center()</td>
</tr>
<tr>
  <td class="method">get_middle()</td>
</tr>
<tr>
  <td class="method">get_y2()</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/SoftwareKeyboard/SoftwareKeyboard.q.yml">quintessence/AllegroFlare/SoftwareKeyboard/SoftwareKeyboard.q.yml</h3>
     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">keys</td>
  <td class="property">tsl::ordered_map&lt;std::string, AllegroFlare::SoftwareKeyboard::KeyboardKey&gt;</td>
</tr>
<tr>
  <td class="property">cursor_pos</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cursor_destination</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">cursor_size_destination</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">show_rectangle_outline_on_keys</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">keyboard_placement</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">prompt_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">result_string</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">num_permitted_chars</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">event_to_emit_on_pressing_ok_key</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">DEFAULT_EVENT_TO_EMIT_ON_PRESSING_OK_KEY</td>
  <td class="property">const char*</td>
</tr>
<tr>
  <td class="property">cursor_location</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">cursor_size</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">bonk_sound_effect_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">DEFAULT_BONK_SOUND_EFFECT_IDENTIFIER</td>
  <td class="property">const char*</td>
</tr>
<tr>
  <td class="property">key_click_sound_effect_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">DEFAULT_KEY_CLICK_SOUND_EFFECT_IDENTIFIER</td>
  <td class="property">const char*</td>
</tr>
<tr>
  <td class="property">erase_sound_effect_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">DEFAULT_ERASE_SOUND_EFFECT_IDENTIFIER</td>
  <td class="property">const char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_FONT_NAME</td>
  <td class="property">const char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_font_bin(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">reset()</td>
</tr>
<tr>
  <td class="method">set_keys(tsl::ordered_map&lt;std::string, AllegroFlare::SoftwareKeyboard::KeyboardKey&gt; keys={})</td>
</tr>
<tr>
  <td class="method">set_keyboard_dimentions(float width=1, float height=1)</td>
</tr>
<tr>
  <td class="method">set_keyboard_position(float x=0, float y=0)</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">press_key_under_cursor()</td>
</tr>
<tr>
  <td class="method">press_key_by_name(std::string name=&quot;[unset-name]&quot;)</td>
</tr>
<tr>
  <td class="private_method">update_cursor_destination()</td>
</tr>
<tr>
  <td class="private_method">infer_current_key_name()</td>
</tr>
<tr>
  <td class="method">jump_cursor_pos_to_index_of_key_name(std::string name=&quot;[unset-name]&quot;)</td>
</tr>
<tr>
  <td class="method">increment_cursor_pos()</td>
</tr>
<tr>
  <td class="method">decrement_cursor_pos()</td>
</tr>
<tr>
  <td class="private_method">draw_result_string_and_boxes()</td>
</tr>
<tr>
  <td class="private_method">build_cursor_color()</td>
</tr>
<tr>
  <td class="private_method">draw_cursor_rectangle(float x=0.0f, float y=0.0f, float w=0.0f, float h=0.0f)</td>
</tr>
<tr>
  <td class="private_method">draw_cursor()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">draw_keyboard_backfill_and_frame()</td>
</tr>
<tr>
  <td class="private_method">key_exists(std::string identifier=&quot;[unset-identifier]&quot;)</td>
</tr>
<tr>
  <td class="private_method">emit_bonk_sound_effect()</td>
</tr>
<tr>
  <td class="private_method">emit_key_click_sound_effect()</td>
</tr>
<tr>
  <td class="private_method">emit_erase_sound_effect()</td>
</tr>
<tr>
  <td class="private_method">obtain_keyboard_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_prompt_text_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_result_text_font()</td>
</tr>
<tr>
  <td class="method">calculate_boilerplate_keyboard_dimentions()</td>
</tr>
<tr>
  <td class="method">move_cursor_down()</td>
</tr>
<tr>
  <td class="method">move_cursor_up()</td>
</tr>
<tr>
  <td class="method">build_boilerplate_keyboard_keys()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;tsl::ordered_map&quot;, &quot;headers&quot;=&gt;[&quot;lib/tsl/ordered_map.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SoftwareKeyboard::KeyboardKey&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SoftwareKeyboard/KeyboardKey.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_font_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::interpolator&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::size_t&quot;, &quot;headers&quot;=&gt;[&quot;cstddef&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::php::trim&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/UsefulPHP.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/StoryboardFactory.q.yml">quintessence/AllegroFlare/StoryboardFactory.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="private_property">page_factory</td>
  <td class="private_property">AllegroFlare::StoryboardPageFactory</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_font_bin(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">create_images_storyboard_screen(std::vector&lt;ALLEGRO_BITMAP*&gt; source_bitmaps={}, int button_font_size=-40)</td>
</tr>
<tr>
  <td class="method">create_advancing_text_storyboard_screen(std::vector&lt;std::string&gt; pages_text={}, int button_font_size=-40, float page_top_padding=400, float page_left_padding=400, float page_right_padding=400, int page_text_font_size=-40, float page_text_line_height_multiplier=1.5)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;ALLEGRO_BITMAP*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Text*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Text.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Base*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Image*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Image.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::AdvancingText*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/AdvancingText.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Storyboard*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Storyboard.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::StoryboardPageFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/StoryboardPageFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Storyboard&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Storyboard.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Image&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Image.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::AdvancingText&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/AdvancingText.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/StoryboardPageFactory.q.yml">quintessence/AllegroFlare/StoryboardPageFactory.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">create_text_page(std::string text=&quot;[unset-text]&quot;)</td>
</tr>
<tr>
  <td class="method">create_advancing_text_page(std::string text=&quot;[unset-text]&quot;)</td>
</tr>
<tr>
  <td class="method">create_image_page(ALLEGRO_BITMAP* image=nullptr)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Text*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Text.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Image*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Image.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::AdvancingText*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/AdvancingText.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Text&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Text.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Image&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Image.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::AdvancingText&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/AdvancingText.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/StringFormatValidator.q.yml">quintessence/AllegroFlare/StringFormatValidator.q.yml</h3>
     <table>
<tr>
  <td class="property">string</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">fits_max_length(std::size_t max=0)</td>
</tr>
<tr>
  <td class="method">fits_min_length(std::size_t min=0)</td>
</tr>
<tr>
  <td class="method">has_only_numerical_characters()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::size_t&quot;}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/SystemInfo.q.yml">quintessence/AllegroFlare/SystemInfo.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">allegro_flare_version()</td>
</tr>
<tr>
  <td class="method">allegro_version()</td>
</tr>
<tr>
  <td class="method">num_available_threads()</td>
</tr>
<tr>
  <td class="method">num_available_threads_are_known()</td>
</tr>
<tr>
  <td class="method">get_processor_type()</td>
</tr>
<tr>
  <td class="method">get_sysname()</td>
</tr>
<tr>
  <td class="method">get_version()</td>
</tr>
<tr>
  <td class="method">get_release()</td>
</tr>
<tr>
  <td class="method">get_hostname()</td>
</tr>
<tr>
  <td class="method">get_machine()</td>
</tr>
<tr>
  <td class="method">operating_system()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Version&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Version.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::thread::hardware_concurrency&quot;, &quot;headers&quot;=&gt;[&quot;thread&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SystemInfoFetcher&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SystemInfoFetcher.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Testing/Rulers.q.yml">quintessence/AllegroFlare/Testing/Rulers.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">draw_dimentional_grid(float x=0.0f, float y=0.0f, float z=0.0f, float spacing=(16*4.8))</td>
</tr>
<tr>
  <td class="method">draw_2d_grid(float x=0.0f, float y=0.0f, float size=1.0f, float spacing=(16*4.8))</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_STATE&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Testing/TestNameInference.q.yml">quintessence/AllegroFlare/Testing/TestNameInference.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">get_test_name()</td>
</tr>
<tr>
  <td class="method">get_test_suite_name()</td>
</tr>
<tr>
  <td class="method">build_full_test_name_str()</td>
</tr>
<tr>
  <td class="method">build_test_snapshot_full_filename()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:testing::Test&quot;, &quot;headers&quot;=&gt;[&quot;gtest/gtest.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Testing/WithAllegroRenderingFixture.q.yml">quintessence/AllegroFlare/Testing/WithAllegroRenderingFixture.q.yml</h3>
     <table>
<tr>
  <td class="property">display</td>
  <td class="property">ALLEGRO_DISPLAY*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin</td>
</tr>
<tr>
  <td class="property">deployment_environment</td>
  <td class="property">AllegroFlare::DeploymentEnvironment</td>
</tr>
<tr>
  <td class="property">test_snapshots_folder</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">SetUp()</td>
</tr>
<tr>
  <td class="method">get_fixtures_path()</td>
</tr>
<tr>
  <td class="method">TearDown()</td>
</tr>
<tr>
  <td class="method">get_any_font()</td>
</tr>
<tr>
  <td class="method">get_display_backbuffer()</td>
</tr>
<tr>
  <td class="method">sleep_for_frame()</td>
</tr>
<tr>
  <td class="method">sleep_for(float length_in_seconds=0.0f)</td>
</tr>
<tr>
  <td class="method">get_test_name()</td>
</tr>
<tr>
  <td class="method">get_test_suite_name()</td>
</tr>
<tr>
  <td class="method">build_full_test_name_str()</td>
</tr>
<tr>
  <td class="method">build_centered_placement(float width=0.0f, float height=0.0f)</td>
</tr>
<tr>
  <td class="method">draw_rulers()</td>
</tr>
<tr>
  <td class="method">draw_crosshair(float x=0.0f, float y=0.0f, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 0, 0, 1}, float size=200.0f)</td>
</tr>
<tr>
  <td class="method">draw_horizontal_crosshair(float x=0.0f, float y=0.0f, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 0, 1}, float size_v=30.0f, float size_h=500.0f)</td>
</tr>
<tr>
  <td class="method">test_name_indicates_it_wants_a_screenshot()</td>
</tr>
<tr>
  <td class="method">clear_display()</td>
</tr>
<tr>
  <td class="method">clear()</td>
</tr>
<tr>
  <td class="method">capture_screenshot(std::string base_filename=&quot;WithAllegroRenderingFixture-screenshot.png&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Testing::CustomComparison&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Testing/CustomComparison.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_primitives_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_ttf_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_ttf.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_font_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_image_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_image.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:testing::Test&quot;, &quot;headers&quot;=&gt;[&quot;gtest/gtest.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::chrono::milliseconds&quot;, &quot;headers&quot;=&gt;[&quot;chrono&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::this_thread::sleep_for&quot;, &quot;headers&quot;=&gt;[&quot;thread&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TerminalColors&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TerminalColors.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DeploymentEnvironment&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DeploymentEnvironment.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/AutoTile/FilterMatrix.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/FilterMatrix.q.yml</h3>
     <table>
<tr>
  <td class="property">matrix</td>
  <td class="property">std::vector&lt;std::vector&lt;int&gt;&gt;</td>
</tr>
<tr>
  <td class="property">axis</td>
  <td class="property">std::pair&lt;int, int&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">build(std::vector&lt;std::vector&lt;int&gt;&gt; matrix={})</td>
</tr>
<tr>
  <td class="method">set_matrix(std::vector&lt;std::vector&lt;int&gt;&gt; matrix={})</td>
</tr>
<tr>
  <td class="method">STATIC_is_valid(std::vector&lt;std::vector&lt;int&gt;&gt; matrix={})</td>
</tr>
<tr>
  <td class="method">resize(int width=1, int height=1)</td>
</tr>
<tr>
  <td class="method">get_width()</td>
</tr>
<tr>
  <td class="method">get_height()</td>
</tr>
<tr>
  <td class="method">get_tile(int x=0, int y=0)</td>
</tr>
<tr>
  <td class="method">set_tile(int x=0, int y=0, int tile_value=0)</td>
</tr>
<tr>
  <td class="method">set_tile_ignore_if_out_of_bounds(int x=0, int y=0, int tile_value=0)</td>
</tr>
<tr>
  <td class="method">tile_matches(int x=0, int y=0, int tile_value=0, bool match_true_if_out_of_bounds=false)</td>
</tr>
<tr>
  <td class="method">tile_matches_with_extruded_boundaries(int x=0, int y=0, int tile_value=0)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::AutoTile::FilterMatrix&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/AutoTile/FilterMatrix.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/AutoTile/Filters/Base.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/Filters/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">input_matrix</td>
  <td class="property">AllegroFlare::TileMaps::AutoTile::FilterMatrix</td>
</tr>
<tr>
  <td class="property">result_matrix</td>
  <td class="property">AllegroFlare::TileMaps::AutoTile::FilterMatrix</td>
</tr>
<tr>
  <td class="property">OUT_OF_BOUNDS_MATCH_TYPE_POSITIVE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">OUT_OF_BOUNDS_MATCH_TYPE_NEGATIVE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">OUT_OF_BOUNDS_MATCH_TYPE_EXTRUDED_EDGE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_OUT_OF_BOUNDS_MATCH_TYPE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">process()</td>
</tr>
<tr>
  <td class="method">iterate_through_input_and_apply_to_result_if_match(std::vector&lt;std::vector&lt;int&gt;&gt; match_matrix={}, std::vector&lt;std::vector&lt;int&gt;&gt; apply_matrix={}, int match_matrix_offset_x=0, int match_matrix_offset_y=0, int apply_matrix_offset_x=0, int apply_matrix_offset_y=0, std::string out_of_bounds_match_type=DEFAULT_OUT_OF_BOUNDS_MATCH_TYPE, bool ignore_if_negative_tile_value_on_match_matrix=true, bool ignore_write_if_negative_tile_value_on_stamp_tile=true, bool ignore_if_stamp_tile_is_out_of_bounds_on_result_matrix=true)</td>
</tr>
<tr>
  <td class="method">matrix_matches(std::vector&lt;std::vector&lt;int&gt;&gt; match_matrix={}, int at_coord_x=0, int at_coord_y=0, int match_matrix_offset_x=0, int match_matrix_offset_y=0, bool ignore_if_negative_tile_value_on_match_matrix=true, std::string out_of_bounds_match_type=DEFAULT_OUT_OF_BOUNDS_MATCH_TYPE)</td>
</tr>
<tr>
  <td class="method">stamp_to_result(std::vector&lt;std::vector&lt;int&gt;&gt; stamp_matrix={}, int at_coord_x=0, int at_coord_y=0, int apply_matrix_offset_x=0, int apply_matrix_offset_y=0, bool ignore_write_if_negative_tile_value_on_stamp_tile=true, bool ignore_if_stamp_tile_is_out_of_bounds_on_result_matrix=true)</td>
</tr>
<tr>
  <td class="method">tile_coord_to_contiguous(int tile_x=0, int tile_y=0, int tile_atlas_num_columns=0)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::AutoTile::FilterMatrix&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/AutoTile/FilterMatrix.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/AutoTile/Filters/Basic.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/Filters/Basic.q.yml</h3>
     <table>
<tr>
  <td class="property">tile_value</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">process()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::AutoTile::Filters::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/AutoTile/Filters/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/AutoTile/Filters/BasicFloor.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/Filters/BasicFloor.q.yml</h3>
     <table>
<tr>
  <td class="property">floor_tile_value</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">process()</td>
</tr>
<tr>
  <td class="method">matrix_matches(std::vector&lt;std::vector&lt;int&gt;&gt; match_matrix={}, int x=0, int y=0)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::AutoTile::Filters::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/AutoTile/Filters/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::AutoTile::FilterMatrix&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/AutoTile/FilterMatrix.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/AutoTile/Filters/BasicSolid.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/Filters/BasicSolid.q.yml</h3>
     <table>
<tr>
  <td class="property">solid_tile_value</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">process()</td>
</tr>
<tr>
  <td class="method">matrix_matches(std::vector&lt;std::vector&lt;int&gt;&gt; match_matrix={}, int x=0, int y=0)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::AutoTile::Filters::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/AutoTile/Filters/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::AutoTile::FilterMatrix&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/AutoTile/FilterMatrix.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/AutoTile/Filters/Fill.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/Filters/Fill.q.yml</h3>
     <table>
<tr>
  <td class="property">tile_value</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">process()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::AutoTile::Filters::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/AutoTile/Filters/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/AutoTile/Filters/FortyEightEdges.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/Filters/FortyEightEdges.q.yml</h3>
     <table>
<tr>
  <td class="property">solid_tile_value</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">forty_eight_edges_tiles_definition</td>
  <td class="property">std::map&lt;uint32_t, int&gt;</td>
</tr>
<tr>
  <td class="property">UNDEF</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP_LEFT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP_RIGHT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP_TIP</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">LEFT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">FULL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">RIGHT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">CENTER</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BOTTOM_LEFT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BOTTOM</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BOTTOM_RIGHT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BOTTOM_TIP</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">LEFT_TIP</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">MIDDLE</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">RIGHT_TIP</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">ISOLATED</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">EMPTY</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">SOLID</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP_BL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP_BR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TL_BR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TR_BL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TL_TR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BL_BR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TL_BL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TR_BR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP_RIGHT_BOTTOM</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">RIGHT_BOTTOM_LEFT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BOTTOM_LEFT_TOP</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">LEFT_TOP_RIGHT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP_BOTTOM</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">LEFT_RIGHT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP_RIGHT_BOTTOM_LEFT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BOTTOM_TL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BOTTOM_TR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP_LEFT_BR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP_RIGHT_BL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BOTTOM_LEFT_TR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BOTTOM_RIGHT_TL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TL_TR_BR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TR_BR_BL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BR_BL_TL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BL_TL_TR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TL_TR_BR_BL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP_BR_BL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">RIGHT_BL_TR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BOTTOM_TL_TR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">LEFT_TR_BR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">LEFT_TR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">LEFT_BR</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">RIGHT_TL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">RIGHT_BL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">process()</td>
</tr>
<tr>
  <td class="method">process_three_edge_filters()</td>
</tr>
<tr>
  <td class="method">process_three_tip_filters()</td>
</tr>
<tr>
  <td class="method">process_two_edge_with_tip_filters()</td>
</tr>
<tr>
  <td class="method">process_one_edge_one_tip()</td>
</tr>
<tr>
  <td class="method">process_one_edge_two_tips()</td>
</tr>
<tr>
  <td class="method">process_two_tip_filters()</td>
</tr>
<tr>
  <td class="method">get_tile_for(uint32_t edge_tile_name=UNDEF)</td>
</tr>
<tr>
  <td class="method">build_default_forty_eight_edges_tiles_definition()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::AutoTile::Filters::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/AutoTile/Filters/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::AutoTile::FilterMatrix&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/AutoTile/FilterMatrix.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/AutoTile/Filters/SixteenEdges.q.yml">quintessence/AllegroFlare/TileMaps/AutoTile/Filters/SixteenEdges.q.yml</h3>
     <table>
<tr>
  <td class="property">solid_tile_value</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">sixteen_edges_tiles_definition</td>
  <td class="property">std::map&lt;uint32_t, int&gt;</td>
</tr>
<tr>
  <td class="property">UNDEF</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP_LEFT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP_RIGHT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TOP_TIP</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">LEFT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">FULL</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">RIGHT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">CENTER</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BOTTOM_LEFT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BOTTOM</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BOTTOM_RIGHT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">BOTTOM_TIP</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">LEFT_TIP</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">MIDDLE</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">RIGHT_TIP</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">ISOLATED</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">process()</td>
</tr>
<tr>
  <td class="method">get_tile_for(uint32_t edge_tile_name=UNDEF)</td>
</tr>
<tr>
  <td class="method">build_default_sixteen_edges_tiles_definition()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::AutoTile::Filters::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/AutoTile/Filters/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::AutoTile::FilterMatrix&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/AutoTile/FilterMatrix.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/Basic2D.q.yml">quintessence/AllegroFlare/TileMaps/Basic2D.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">atlas_bitmap_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">atlas_bitmap_tile_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">atlas_bitmap_tile_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">atlas</td>
  <td class="property">AllegroFlare::TileMaps::PrimMeshAtlas</td>
</tr>
<tr>
  <td class="property">prim_mesh</td>
  <td class="property">AllegroFlare::TileMaps::PrimMesh</td>
</tr>
<tr>
  <td class="property">collision_tile_map</td>
  <td class="property">AllegroFlare::TileMaps::TileMap&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_atlas_configuration(std::string atlas_bitmap_filename=&quot;[unset-atlas_bitmap_filename]&quot;, int atlas_bitmap_tile_width=1, int atlas_bitmap_tile_height=1)</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">get_num_rows()</td>
</tr>
<tr>
  <td class="method">get_num_columns()</td>
</tr>
<tr>
  <td class="method">resize(int num_columns=1, int num_rows=1)</td>
</tr>
<tr>
  <td class="method">rescale_tile_dimentions_to(float tile_width=1, float tile_height=1)</td>
</tr>
<tr>
  <td class="method">random_fill()</td>
</tr>
<tr>
  <td class="method">infer_real_width()</td>
</tr>
<tr>
  <td class="method">infer_real_height()</td>
</tr>
<tr>
  <td class="method">obtain_tile_width()</td>
</tr>
<tr>
  <td class="method">obtain_tile_height()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Random&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Random.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_image_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMesh.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/MultiMesh.q.yml">quintessence/AllegroFlare/TileMaps/MultiMesh.q.yml</h3>
     <table>
<tr>
  <td class="property">num_items</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">vertex_buffer</td>
  <td class="property">ALLEGRO_VERTEX_BUFFER*</td>
</tr>
<tr>
  <td class="property">vertex_decl</td>
  <td class="property">ALLEGRO_VERTEX_DECL*</td>
</tr>
<tr>
  <td class="property">texture</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">vertices_in_use</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">VERTICES_PER_ITEM</td>
  <td class="property">std::size_t</td>
</tr>
<tr>
  <td class="property">atlas</td>
  <td class="property">AllegroFlare::TileMaps::MultiMeshUVAtlas</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">DEFAULT_NUM_ITEMS</td>
  <td class="property">std::size_t</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_atlas(AllegroFlare::TileMaps::MultiMeshUVAtlas atlas={})</td>
</tr>
<tr>
  <td class="method">set_num_items(std::size_t num_items=256)</td>
</tr>
<tr>
  <td class="method">infer_num_items_in_use()</td>
</tr>
<tr>
  <td class="method">infer_largest_index_num_in_use()</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">append(int atlas_item_index_num=0, float x=0, float y=0)</td>
</tr>
<tr>
  <td class="method">append_raw(float x=0, float y=0, float w=1, float h=1, float u1=100.0f, float v1=100.0f, float u2=200.0f, float v2=200.0f)</td>
</tr>
<tr>
  <td class="method">remove(int item_index=0)</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::MultiMeshUVAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/MultiMeshUVAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::size_t&quot;, &quot;headers&quot;=&gt;[&quot;cstddef&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VERTEX_DECL&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VERTEX_BUFFER&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/MultiMeshUV.q.yml">quintessence/AllegroFlare/TileMaps/MultiMeshUV.q.yml</h3>
     <table>
<tr>
  <td class="property">u1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">v1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">u2</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">v2</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">infer_width()</td>
</tr>
<tr>
  <td class="method">infer_height()</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/MultiMeshUVAtlas.q.yml">quintessence/AllegroFlare/TileMaps/MultiMeshUVAtlas.q.yml</h3>
     <table>
<tr>
  <td class="property">index</td>
  <td class="property">std::map&lt;int, AllegroFlare::TileMaps::MultiMeshUV&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">add(int index_num=0, float u1=0.0f, float v1=0.0f, float u2=1.0f, float v2=1.0f)</td>
</tr>
<tr>
  <td class="method">exists(int index_num=0)</td>
</tr>
<tr>
  <td class="method">get(int index_num=0)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::MultiMeshUV&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/MultiMeshUV.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TileMaps/PrimMeshAtlasIndexRecord.q.yml">quintessence/AllegroFlare/TileMaps/PrimMeshAtlasIndexRecord.q.yml</h3>
     <table>
<tr>
  <td class="property">index_num</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">bitmap_source</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">sub_bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">u1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">v1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">u2</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">v2</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Time.q.yml">quintessence/AllegroFlare/Time.q.yml</h3>
     <table>
<tr>
  <td class="property">started_at</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">now()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/TimeStamper.q.yml">quintessence/AllegroFlare/TimeStamper.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">generate_now_timestamp_utc()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::time_t&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;, &quot;ctime&quot;, &quot;iomanip&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Timeline/ActorFactory.q.yml">quintessence/AllegroFlare/Timeline/ActorFactory.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">create_actor2d_with_script(std::string identifier=&quot;[unset-identifier]&quot;, std::string bitmap_identifier=&quot;[unset-bitmap_identifier]&quot;, std::string script=&quot;[unset-bitmap_identifier]&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timeline::Actors::Actor2D*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timeline/Actors/Actor2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timeline::Actors::Actor2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timeline/Actors/Actor2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/UnicodeFontViewer.q.yml">quintessence/AllegroFlare/UnicodeFontViewer.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">font_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">unicode_range_start</td>
  <td class="property">uint32_t</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">previous_page()</td>
</tr>
<tr>
  <td class="method">next_page()</td>
</tr>
<tr>
  <td class="method">as_hex(uint32_t value=0, int zero_fill_width=6)</td>
</tr>
<tr>
  <td class="method">as_int(uint32_t value=0)</td>
</tr>
<tr>
  <td class="private_method">draw_unicode_character(ALLEGRO_FONT* font=nullptr, ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1}, uint32_t icon=61444, int flags=0, float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="private_method">obtain_unicode_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_ui_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_ui_font_mini()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::setfill&quot;, &quot;headers&quot;=&gt;[&quot;iomanip&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_font_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_ttf_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Useful3D/Triangle.q.yml">quintessence/AllegroFlare/Useful3D/Triangle.q.yml</h3>
     <table>
<tr>
  <td class="property">v0</td>
  <td class="property">AllegroFlare::vec3d</td>
</tr>
<tr>
  <td class="property">v1</td>
  <td class="property">AllegroFlare::vec3d</td>
</tr>
<tr>
  <td class="property">v2</td>
  <td class="property">AllegroFlare::vec3d</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">intersect(AllegroFlare::Useful3D::Ray* ray_=nullptr, AllegroFlare::Useful3D::IntersectData* intersect_data=nullptr)</td>
</tr>
<tr>
  <td class="method">draw(ALLEGRO_COLOR color=ALLEGRO_COLOR{1, 1, 1, 1})</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;cross_product&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec3d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Useful3D::build_vertex&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Useful3D::Ray*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful3D/Ray.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Useful3D::IntersectData*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful3D/IntersectData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Useful3D::IntersectData&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful3D/IntersectData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Useful3D::Ray&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful3D/Ray.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Vec2B.q.yml">quintessence/AllegroFlare/Vec2B.q.yml</h3>
     <table>
<tr>
  <td class="property">x</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Vec2I.q.yml">quintessence/AllegroFlare/Vec2I.q.yml</h3>
     <table>
<tr>
  <td class="property">x</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">int</td>
</tr>
    </table>
     <table>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/VirtualControls.q.yml">quintessence/AllegroFlare/VirtualControls.q.yml</h3>
     <table>
<tr>
  <td class="property">BUTTON_UP</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">BUTTON_DOWN</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">BUTTON_LEFT</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">BUTTON_RIGHT</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">BUTTON_A</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">BUTTON_B</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">BUTTON_X</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">BUTTON_Y</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">BUTTON_START</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">BUTTON_RIGHT_BUMPER</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">BUTTON_LEFT_BUMPER</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">PRIMARY_STICK</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">SECONDARY_STICK</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">right_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">left_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">up_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">down_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">a_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">b_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">x_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">y_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">left_bumper_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">right_bumper_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">start_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">primary_stick_position</td>
  <td class="property">AllegroFlare::vec2d</td>
</tr>
<tr>
  <td class="property">secondary_stick_position</td>
  <td class="property">AllegroFlare::vec2d</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">clear()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/VirtualControlsProcessor.q.yml">quintessence/AllegroFlare/VirtualControlsProcessor.q.yml</h3>
     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">keyboard_button_map</td>
  <td class="property">std::map&lt;int, std::pair&lt;int, int&gt;&gt;</td>
</tr>
<tr>
  <td class="property">joystick_button_map</td>
  <td class="property">std::map&lt;int, int&gt;</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">build_sensible_joystick_button_map()</td>
</tr>
<tr>
  <td class="method">build_sensible_keyboard_button_map()</td>
</tr>
<tr>
  <td class="method">handle_raw_keyboard_key_down_event(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">handle_raw_keyboard_key_up_event(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">handle_raw_joystick_button_down_event(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">handle_raw_joystick_button_up_event(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">handle_raw_joystick_axis_change_event(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="private_method">get_joystick_mapped_virtual_button(int native_button_num=-1)</td>
</tr>
<tr>
  <td class="private_method">get_keyboard_mapped_player_num_and_virtual_button(int native_key_num=-1)</td>
</tr>
<tr>
  <td class="method">emit_virtual_controls_button_up_event(int player_num=0, int virtual_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">emit_virtual_controls_button_down_event(int player_num=0, int virtual_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">emit_virtual_controls_axis_change_event(int stick=0, int axis=0, float position=0.0f)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_KEY_&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControls&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControls.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;int, std::pair&lt;int, int&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;utility&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::pair&lt;int, int&gt;&quot;, &quot;headers&quot;=&gt;[&quot;utility&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;int, int&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Tileo/MeshWithNormals.q.yml">quintessence/Tileo/MeshWithNormals.q.yml</h3>
     <table>
<tr>
  <td class="property">tileo_tile_vertex_allegro_vertex_declaration</td>
  <td class="property">Tileo::TileoTileVertexAllegroVertexDeclaration</td>
</tr>
<tr>
  <td class="property">num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">tile_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">atlas</td>
  <td class="property">AllegroFlare::TileMaps::PrimMeshAtlas*</td>
</tr>
<tr>
  <td class="property">normal_atlas</td>
  <td class="property">AllegroFlare::TileMaps::PrimMeshAtlas*</td>
</tr>
<tr>
  <td class="property">tile_ids</td>
  <td class="property">std::vector&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">normal_tile_ids</td>
  <td class="property">std::vector&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">vertexes</td>
  <td class="property">std::vector&lt;TILEO_TILE_VERTEX&gt;</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">destroyed</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">destroy()</td>
</tr>
<tr>
  <td class="method">obtain_vertex_declaration()</td>
</tr>
<tr>
  <td class="method">resize(int num_columns=1, int num_rows=1)</td>
</tr>
<tr>
  <td class="method">set_tile(int tile_x=0, int tile_y=0, int tile_index_num=0)</td>
</tr>
<tr>
  <td class="method">set_normal_tile(int tile_x=0, int tile_y=0, int tile_index_num=0)</td>
</tr>
<tr>
  <td class="private_method">set_tile_uv(int tile_x=0, int tile_y=0, float u1=0.0f, float v1=0.0f, float u2=0.0f, float v2=0.0f)</td>
</tr>
<tr>
  <td class="private_method">set_normal_tile_uv(int tile_x=0, int tile_y=0, float u1=0.0f, float v1=0.0f, float u2=0.0f, float v2=0.0f)</td>
</tr>
<tr>
  <td class="private_method">place_vertexes_into_tile_mesh_shape()</td>
</tr>
<tr>
  <td class="private_method">clear_and_reserve()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tileo::TileoTileVertexAllegroVertexDeclaration&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/TileoTileVertexAllegroVertexDeclaration.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VERTEX_DECL&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;TILEO_TILE_VERTEX&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/TileoTileVertex.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Tileo/Shaders/AllegroDefault.q.yml">quintessence/Tileo/Shaders/AllegroDefault.q.yml</h3>
     <table>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">activate()</td>
</tr>
<tr>
  <td class="private_method">obtain_vertex_source()</td>
</tr>
<tr>
  <td class="private_method">obtain_fragment_source()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tileo::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Tileo/Shaders/Base.q.yml">quintessence/Tileo/Shaders/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">vertex_source_code</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">fragment_source_code</td>
  <td class="property">std::string</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shader&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shader.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Tileo/Shaders/MeshWithNormals.q.yml">quintessence/Tileo/Shaders/MeshWithNormals.q.yml</h3>
     <table>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">activate()</td>
</tr>
<tr>
  <td class="method">set_flat_color(ALLEGRO_COLOR flat_color={}, float intensity=1.0f)</td>
</tr>
<tr>
  <td class="method">set_light_direction(AllegroFlare::vec3d light_direction={0, 0, 0})</td>
</tr>
<tr>
  <td class="method">set_light_spread(int light_spread=0)</td>
</tr>
<tr>
  <td class="method">set_light_attenuation(float light_attenuation=1.0f)</td>
</tr>
<tr>
  <td class="method">set_primary_texture(ALLEGRO_BITMAP* primary_texture_bitmap=nullptr)</td>
</tr>
<tr>
  <td class="method">set_normal_texture(ALLEGRO_BITMAP* normal_texture_bitmap=nullptr)</td>
</tr>
<tr>
  <td class="private_method">obtain_vertex_source()</td>
</tr>
<tr>
  <td class="private_method">obtain_fragment_source()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tileo::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec3d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Tileo/TMJDataLoader.q.yml">quintessence/Tileo/TMJDataLoader.q.yml</h3>
     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">layer_num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">layer_num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">layer_tile_data</td>
  <td class="property">std::vector&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">collision_layer_num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">collision_layer_num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">collision_layer_tile_data</td>
  <td class="property">std::vector&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">loaded</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">get_num_columns()</td>
</tr>
<tr>
  <td class="method">get_num_rows()</td>
</tr>
<tr>
  <td class="method">get_tile_width()</td>
</tr>
<tr>
  <td class="method">get_tile_height()</td>
</tr>
<tr>
  <td class="method">get_layer_num_columns()</td>
</tr>
<tr>
  <td class="method">get_layer_num_rows()</td>
</tr>
<tr>
  <td class="method">get_layer_tile_data()</td>
</tr>
<tr>
  <td class="method">get_collision_layer_num_columns()</td>
</tr>
<tr>
  <td class="method">get_collision_layer_num_rows()</td>
</tr>
<tr>
  <td class="method">get_collision_layer_tile_data()</td>
</tr>
<tr>
  <td class="method">load()</td>
</tr>
<tr>
  <td class="private_method">file_exists(std::string filename=&quot;[unset-filename]&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::ifstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;nlohmann::json&quot;, &quot;headers&quot;=&gt;[&quot;lib/nlohmann/json.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::exists&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Tileo/TMJMeshLoader.q.yml">quintessence/Tileo/TMJMeshLoader.q.yml</h3>
     <table>
<tr>
  <td class="property">BITMAP_ATLAS_FILENAME</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">tmj_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">tile_atlas</td>
  <td class="property">AllegroFlare::TileMaps::PrimMeshAtlas*</td>
</tr>
<tr>
  <td class="property">mesh</td>
  <td class="property">AllegroFlare::TileMaps::PrimMesh*</td>
</tr>
<tr>
  <td class="property">collision_tile_map</td>
  <td class="property">AllegroFlare::TileMaps::TileMap&lt;int&gt;*</td>
</tr>
<tr>
  <td class="property">loaded</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">get_tile_atlas()</td>
</tr>
<tr>
  <td class="method">get_mesh()</td>
</tr>
<tr>
  <td class="method">get_collision_tile_map()</td>
</tr>
<tr>
  <td class="method">load()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ifstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;nlohmann::json&quot;, &quot;headers&quot;=&gt;[&quot;lib/nlohmann/json.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tileo::TMJDataLoader&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/TMJDataLoader.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Tileo/TileoTileVertexAllegroVertexDeclaration.q.yml">quintessence/Tileo/TileoTileVertexAllegroVertexDeclaration.q.yml</h3>
     <table>
<tr>
  <td class="property">vertex_declaration</td>
  <td class="property">ALLEGRO_VERTEX_DECL*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">destroyed</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">get_vertex_declaration()</td>
</tr>
<tr>
  <td class="method">build_empty_vertex()</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">destroy()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VERTEX_DECL&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;TILEO_TILE_VERTEX&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/TileoTileVertex.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/CameraControlStrategies2D/Base.q.yml">quintessence/Wicked/CameraControlStrategies2D/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">camera</td>
  <td class="property">AllegroFlare::Placement2D*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/CameraControlStrategies2D/HorizontalRail.q.yml">quintessence/Wicked/CameraControlStrategies2D/HorizontalRail.q.yml</h3>
     <table>
<tr>
  <td class="property">entity_to_follow</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::CameraControlStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/CameraControlStrategies2D/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/CameraControlStrategies2D/SmoothSnap.q.yml">quintessence/Wicked/CameraControlStrategies2D/SmoothSnap.q.yml</h3>
     <table>
<tr>
  <td class="property">room_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">room_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">entity_to_follow</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::CameraControlStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/CameraControlStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/CameraControlStrategies2D/Snap.q.yml">quintessence/Wicked/CameraControlStrategies2D/Snap.q.yml</h3>
     <table>
<tr>
  <td class="property">entity_to_follow</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::CameraControlStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/CameraControlStrategies2D/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/Base.q.yml">quintessence/Wicked/Entities/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">parent</td>
  <td class="property">AllegroFlare::ElementID*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">draw()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ElementID&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ElementID.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/Basic2D.q.yml">quintessence/Wicked/Entities/Basic2D.q.yml</h3>
     <table>
<tr>
  <td class="property">place</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">velocity</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">bitmap_alignment_strategy</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">bitmap_flip_h</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">debug_box_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">draw()</td>
</tr>
<tr>
  <td class="method">fit_to_bitmap()</td>
</tr>
<tr>
  <td class="private_method">assign_alignment_strategy_values(AllegroFlare::Placement2D* parent_placement=nullptr, ALLEGRO_BITMAP* bitmap=nullptr, float* bitmap_x=nullptr, float* bitmap_y=nullptr, std::string bitmap_alignment_strategy=&quot;centered&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/EntityFlagNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/Basic2DFactory.q.yml">quintessence/Wicked/Entities/Basic2DFactory.q.yml</h3>
     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">enemy_debug_box_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">player_collectable_box_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">goalpost_box_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">create_from_bitmap_filename(std::string map_name=&quot;[map-name-not-set]&quot;, std::string bitmap_filename=&quot;bitmap-filename-that-has-not-been-set.png&quot;, std::string bitmap_alignment_strategy=&quot;centered&quot;)</td>
</tr>
<tr>
  <td class="method">create_for_aabb2d(std::string map_name=&quot;[map-name-not-set]&quot;, float width=(16.0f-1.0f), float height=(16.0f-1.0f))</td>
</tr>
<tr>
  <td class="method">create_player_projectile(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f, float width=(8.0f-1.0f), float height=(8.0f-1.0f), AllegroFlare::vec2d vector=AllegroFlare::vec2d(0.0f, 1.0f), float magnitude=1.0f)</td>
</tr>
<tr>
  <td class="method">create_enemy_move_left(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f, float width=(16.0f-1.0f), float height=(16.0f-1.0f))</td>
</tr>
<tr>
  <td class="method">create_tracking_enemy(std::string map_name=&quot;[map-name-not-set]&quot;, Wicked::Entities::Basic2D* tracked_entity=nullptr, float x=0.0f, float y=0.0f, float width=(16.0f-1.0f), float height=(16.0f-1.0f))</td>
</tr>
<tr>
  <td class="method">create_flapping_enemy(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f, float width=(16.0f-1.0f), float height=(16.0f-1.0f), float target_elevation=0.0f, float flap_strength=1.0f, float flap_recovery_rate=0.1f)</td>
</tr>
<tr>
  <td class="method">create_collectable(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="method">create_door(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f, std::string target_map_name=&quot;[unset-target-map-name]&quot;, float target_spawn_x=0.0f, float target_spawn_y=0.0f)</td>
</tr>
<tr>
  <td class="method">create_game_event_door(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f, std::string game_event_name_to_emit=&quot;[unset-game_event_name_to_emit]&quot;)</td>
</tr>
<tr>
  <td class="method">create_goalpost(std::string map_name=&quot;[map-name-not-set]&quot;, float x=0.0f, float y=0.0f)</td>
</tr>
<tr>
  <td class="method">create_tile_map(std::string map_json_filename=&quot;[a-map-tmj-filename-that-is-not-set]&quot;, std::string map_name=&quot;[map-name-not-set]&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::MoveLeft&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/MoveLeft.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::MoveRight&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/MoveRight.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::StayStill&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/StayStill.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::BackAndForthHorizontal&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/BackAndForthHorizontal.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::HoppingLeft&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/HoppingLeft.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::Tracking&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/Tracking.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::FallOnTrackingRange&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/FallOnTrackingRange.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::ReflectOffWalls&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/ReflectOffWalls.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::MoveInDirection&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/MoveInDirection.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::Flapping&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/Flapping.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::FlappingWithRandomness&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/FlappingWithRandomness.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/EntityFlagNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Doors::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Doors/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;WickedDemos::TileMaps::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;WickedDemos/TileMaps/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tileo::TMJMeshLoader&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/TMJMeshLoader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Enemies::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Enemies/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/Basic3D.q.yml">quintessence/Wicked/Entities/Basic3D.q.yml</h3>
     <table>
<tr>
  <td class="property">place</td>
  <td class="property">AllegroFlare::Placement3D</td>
</tr>
<tr>
  <td class="property">velocity</td>
  <td class="property">AllegroFlare::Placement3D</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">TODO()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/CollectionHelper.q.yml">quintessence/Wicked/Entities/CollectionHelper.q.yml</h3>
     <table>
<tr>
  <td class="property">entities</td>
  <td class="property">std::vector&lt;Wicked::Entities::Basic2D*&gt;*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">select_collectable_by_player()</td>
</tr>
<tr>
  <td class="method">select_goalposts()</td>
</tr>
<tr>
  <td class="method">select_doors()</td>
</tr>
<tr>
  <td class="method">select_on_map(std::string on_map_name=&quot;[on-map-name-not-set]&quot;)</td>
</tr>
<tr>
  <td class="method">find_map_by_name(std::string map_name=&quot;[find-map-name-not-set]&quot;)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/EntityFlagNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;WickedDemos::TileMaps::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;WickedDemos/TileMaps/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/Doors/Basic2D.q.yml">quintessence/Wicked/Entities/Doors/Basic2D.q.yml</h3>
     <table>
<tr>
  <td class="property">game_event_name_to_emit</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">target_map_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">target_spawn_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">target_spawn_y</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/Enemies/Base.q.yml">quintessence/Wicked/Entities/Enemies/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">movement_strategy</td>
  <td class="property">Wicked::Entities::MovementStrategies2D::Base*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">draw()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/EnemyFactory.q.yml">quintessence/Wicked/Entities/EnemyFactory.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">run()</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/MovementStrategies2D/Anchored.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/Anchored.q.yml</h3>
     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">anchor</td>
  <td class="property">AllegroFlare::vec2d</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/MovementStrategies2D/BackAndForthHorizontal.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/BackAndForthHorizontal.q.yml</h3>
     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">timer</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">travel_speed</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">travel_duration</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">direction_of_travel_is_left</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/MovementStrategies2D/Base.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/Base.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/MovementStrategies2D/FallOnTrackingRange.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/FallOnTrackingRange.q.yml</h3>
     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">tracked_entity</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">range_radius</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">triggered</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/MovementStrategies2D/Flapping.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/Flapping.q.yml</h3>
     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">target_elevation</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">flap_strength</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">flap_recovery_rate</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">flap_recovery_counter</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">can_flap</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="private_method">update_flapability_status()</td>
</tr>
<tr>
  <td class="private_method">decide_to_flap()</td>
</tr>
<tr>
  <td class="method">flap()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/MovementStrategies2D/FlappingWithRandomness.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/FlappingWithRandomness.q.yml</h3>
     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">target_elevation</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">flap_strength</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">flap_recovery_rate</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">flap_recovery_counter</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">can_flap</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">random</td>
  <td class="property">AllegroFlare::Random</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_random_seed(uint32_t random_seed=0)</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">flap()</td>
</tr>
<tr>
  <td class="private_method">update_flapability_status()</td>
</tr>
<tr>
  <td class="private_method">decide_to_flap()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Random&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Random.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/EntityFlagNames.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/MovementStrategies2D/HoppingLeft.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/HoppingLeft.q.yml</h3>
     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">jump_force</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">speed</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">landing_delay</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">timer</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/MovementStrategies2D/MoveInDirection.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/MoveInDirection.q.yml</h3>
     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">direction</td>
  <td class="property">AllegroFlare::vec2d</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/MovementStrategies2D/MoveLeft.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/MoveLeft.q.yml</h3>
     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">speed</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/MovementStrategies2D/MoveRight.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/MoveRight.q.yml</h3>
     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">speed</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/MovementStrategies2D/ReflectOffWalls.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/ReflectOffWalls.q.yml</h3>
     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">speed</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">moving_right</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">moving_down</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/EntityFlagNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/MovementStrategies2D/StayStill.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/StayStill.q.yml</h3>
     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/MovementStrategies2D/Tracking.q.yml">quintessence/Wicked/Entities/MovementStrategies2D/Tracking.q.yml</h3>
     <table>
<tr>
  <td class="property">entity</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">tracked_entity</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">speed</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::MovementStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/MovementStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/Zones/Base2D.q.yml">quintessence/Wicked/Entities/Zones/Base2D.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">collides(AllegroFlare::vec2d point={})</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/Zones/Base3D.q.yml">quintessence/Wicked/Entities/Zones/Base3D.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">collides(AllegroFlare::vec3d point={})</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec3d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/Zones/Rectangle2D.q.yml">quintessence/Wicked/Entities/Zones/Rectangle2D.q.yml</h3>
     <table>
<tr>
  <td class="property">x1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">x2</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y2</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">collides(AllegroFlare::vec2d point={})</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Zones::Base2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Zones/Base2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Entities/Zones/Rectangle3D.q.yml">quintessence/Wicked/Entities/Zones/Rectangle3D.q.yml</h3>
     <table>
<tr>
  <td class="property">x1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">z1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">x2</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y2</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">z2</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">collides(AllegroFlare::vec3d point={})</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Zones::Base3D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Zones/Base3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec3d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Hud.q.yml">quintessence/Wicked/Hud.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">score</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">health</td>
  <td class="property">int</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">primary_timer_func()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">draw_health()</td>
</tr>
<tr>
  <td class="method">draw_score()</td>
</tr>
<tr>
  <td class="private_method">obtain_hud_text_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::setfill&quot;, &quot;headers&quot;=&gt;[&quot;iomanip&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Physics/AABB2D.q.yml">quintessence/Wicked/Physics/AABB2D.q.yml</h3>
     <table>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">w</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">h</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">velocity_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">velocity_y</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">get_left_edge()</td>
</tr>
<tr>
  <td class="method">get_right_edge()</td>
</tr>
<tr>
  <td class="method">get_top_edge()</td>
</tr>
<tr>
  <td class="method">get_bottom_edge()</td>
</tr>
<tr>
  <td class="method">set_left_edge(float x=0.0f)</td>
</tr>
<tr>
  <td class="method">set_right_edge(float x=0.0f)</td>
</tr>
<tr>
  <td class="method">set_top_edge(float y=0.0f)</td>
</tr>
<tr>
  <td class="method">set_bottom_edge(float y=0.0f)</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Physics/EntityZoneCollisionObserver.q.yml">quintessence/Wicked/Physics/EntityZoneCollisionObserver.q.yml</h3>
     <table>
<tr>
  <td class="property">collisions_at_start</td>
  <td class="property">std::vector&lt;std::pair&lt;Wicked::Entities::Basic3D*, Wicked::Entities::Zones::Base3D*&gt;&gt;</td>
</tr>
<tr>
  <td class="property">collisions_at_end</td>
  <td class="property">std::vector&lt;std::pair&lt;Wicked::Entities::Basic3D*, Wicked::Entities::Zones::Base3D*&gt;&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">get_collided(std::vector&lt;Wicked::Entities::Basic3D*&gt; entities={}, std::vector&lt;Wicked::Entities::Zones::Base3D*&gt; zones={})</td>
</tr>
<tr>
  <td class="method">collides(Wicked::Entities::Basic3D* entity=nullptr, Wicked::Entities::Zones::Base3D* zone=nullptr)</td>
</tr>
<tr>
  <td class="method">observe_start_state(std::vector&lt;Wicked::Entities::Basic3D*&gt; entities={}, std::vector&lt;Wicked::Entities::Zones::Base3D*&gt; zones={})</td>
</tr>
<tr>
  <td class="method">observe_end_state(std::vector&lt;Wicked::Entities::Basic3D*&gt; entities={}, std::vector&lt;Wicked::Entities::Zones::Base3D*&gt; zones={})</td>
</tr>
<tr>
  <td class="method">collisions_added()</td>
</tr>
<tr>
  <td class="method">collisions_removed()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic3D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Zones::Base3D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Zones/Base3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::set_difference&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Physics/TileMapCollisionStepper.q.yml">quintessence/Wicked/Physics/TileMapCollisionStepper.q.yml</h3>
     <table>
<tr>
  <td class="property">collision_tile_map</td>
  <td class="property">AllegroFlare::TileMaps::TileMap&lt;int&gt;*</td>
</tr>
<tr>
  <td class="property">aabb2d</td>
  <td class="property">Wicked::Physics::AABB2D*</td>
</tr>
<tr>
  <td class="property">tile_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">tile_height</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">step()</td>
</tr>
<tr>
  <td class="method">adjacent_to_bottom_edge(float tile_width=16.0f, float tile_height=16.0f)</td>
</tr>
<tr>
  <td class="method">adjacent_to_right_edge(float tile_width=16.0f, float tile_height=16.0f)</td>
</tr>
<tr>
  <td class="method">adjacent_to_top_edge(float tile_width=16.0f, float tile_height=16.0f)</td>
</tr>
<tr>
  <td class="method">get_tile_coords_below_left_foot(float x=0.0f, float y=0.0f, float height=1.0f)</td>
</tr>
<tr>
  <td class="method">get_tile_coords_below_right_foot(float x=0.0f, float y=0.0f, float width=1.0f, float height=1.0f)</td>
</tr>
<tr>
  <td class="method">adjacent_to_left_edge(float tile_width=16.0f, float tile_height=16.0f)</td>
</tr>
<tr>
  <td class="private_method">get_next_collided_tile_coords(float x=0.0f, float y=0.0f, float velocity=0.0f, float depth_of_body=1.0f, float length_of_edge=1.0f, float tile_length_n=1.0f, float tile_length_m=1.0f)</td>
</tr>
<tr>
  <td class="private_method">world_coords_to_tile_coords(float world_pos=0.0f, float tile_length=1.0f)</td>
</tr>
<tr>
  <td class="private_method">world_x_coords_to_tile_coords_x(float world_pos_x=0.0f)</td>
</tr>
<tr>
  <td class="private_method">world_y_coords_to_tile_coords_y(float world_pos_y=0.0f)</td>
</tr>
<tr>
  <td class="method">get_tile_left_edge(float tile_x=0.0f, float tile_width=16.0f)</td>
</tr>
<tr>
  <td class="method">get_tile_right_edge(float tile_x=0.0f, float tile_width=16.0f)</td>
</tr>
<tr>
  <td class="method">get_tile_top_edge(float tile_y=0.0f, float tile_height=16.0f)</td>
</tr>
<tr>
  <td class="method">get_tile_bottom_edge(float tile_y=0.0f, float tile_height=16.0f)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Physics::AABB2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Physics/AABB2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Wicked::Physics::Int2D&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Wicked/Physics/Int2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::pair&lt;int, int&gt;&quot;, &quot;headers&quot;=&gt;[&quot;utility&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Physics::Int2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Physics/Int2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Weapons/Base.q.yml">quintessence/Wicked/Weapons/Base.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Wicked/Weapons/DrawnBow.q.yml">quintessence/Wicked/Weapons/DrawnBow.q.yml</h3>
     <table>
<tr>
  <td class="property">draw_back_value</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">being_drawn</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">stop_draw()</td>
</tr>
<tr>
  <td class="method">start_draw()</td>
</tr>
<tr>
  <td class="method">get_strength()</td>
</tr>
<tr>
  <td class="method">at_max()</td>
</tr>
<tr>
  <td class="method">get_strength_value_styled()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Weapons::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Weapons/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Interpolators&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/WickedDemos/ProgramRunner.q.yml">quintessence/WickedDemos/ProgramRunner.q.yml</h3>
     <table>
    </table>
     <table>
<tr>
  <td class="method">run()</td>
</tr>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/WickedDemos/TileDemo.q.yml">quintessence/WickedDemos/TileDemo.q.yml</h3>
     <table>
<tr>
  <td class="property">framework</td>
  <td class="property">AllegroFlare::Frameworks::Full*</td>
</tr>
<tr>
  <td class="property">display</td>
  <td class="property">AllegroFlare::Display*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">native_display_resolution_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">native_display_resolution_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">currently_active_map</td>
  <td class="property">WickedDemos::TileMaps::Basic2D*</td>
</tr>
<tr>
  <td class="property">currently_active_map_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">entities</td>
  <td class="property">std::vector&lt;Wicked::Entities::Basic2D*&gt;</td>
</tr>
<tr>
  <td class="property">gravity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">gravity_reversed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">camera</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">hud_projection</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">player_controlled_entity</td>
  <td class="property">Wicked::Entities::Basic2D*</td>
</tr>
<tr>
  <td class="property">show_tile_mesh</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">show_collision_tile_mesh</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">player_controls</td>
  <td class="property">AllegroFlare::VirtualControls</td>
</tr>
<tr>
  <td class="property">XXvirtual_controls_processor</td>
  <td class="property">AllegroFlare::VirtualControlsProcessor</td>
</tr>
<tr>
  <td class="property">showing_player_reticle</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">player_reticle_vector</td>
  <td class="property">AllegroFlare::vec2d</td>
</tr>
<tr>
  <td class="property">bow</td>
  <td class="property">Wicked::Weapons::DrawnBow</td>
</tr>
<tr>
  <td class="property">camera_control_strategy</td>
  <td class="property">Wicked::CameraControlStrategies2D::Base*</td>
</tr>
<tr>
  <td class="property">player_collected_items</td>
  <td class="property">int</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_currently_active_map(std::string name=&quot;[unset-current-map-name-to-use]&quot;)</td>
</tr>
<tr>
  <td class="method">find_map_by_name(std::string name=&quot;[unset-map-name]&quot;)</td>
</tr>
<tr>
  <td class="method">initialize_display_projection()</td>
</tr>
<tr>
  <td class="method">initialize_maps()</td>
</tr>
<tr>
  <td class="method">initialize_hud()</td>
</tr>
<tr>
  <td class="method">setup_projection()</td>
</tr>
<tr>
  <td class="method">initialize_camera_control()</td>
</tr>
<tr>
  <td class="method">initialize_player_controls()</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">setup_orthographic_projection_on_backbuffer()</td>
</tr>
<tr>
  <td class="private_method">setup_camera()</td>
</tr>
<tr>
  <td class="private_method">initialize_entities()</td>
</tr>
<tr>
  <td class="method">unset_player_controlled_entity_vertical_velocity()</td>
</tr>
<tr>
  <td class="method">unset_player_controlled_entity_horizontal_velocity()</td>
</tr>
<tr>
  <td class="method">set_player_controlled_entity_jump()</td>
</tr>
<tr>
  <td class="method">player_emit_projectile(float magnitude=3.0f)</td>
</tr>
<tr>
  <td class="method">reverse_gravity()</td>
</tr>
<tr>
  <td class="method">update_entities()</td>
</tr>
<tr>
  <td class="method">delete_entities_flagged_for_deletion()</td>
</tr>
<tr>
  <td class="method">check_player_collisions_with_doors()</td>
</tr>
<tr>
  <td class="method">update_player_collisions_with_collectables()</td>
</tr>
<tr>
  <td class="method">update_player_collisions_with_goalposts()</td>
</tr>
<tr>
  <td class="method">player_increment_collected_items()</td>
</tr>
<tr>
  <td class="method">draw_entities()</td>
</tr>
<tr>
  <td class="method">draw_hud()</td>
</tr>
<tr>
  <td class="method">run(std::vector&lt;std::string&gt; args={})</td>
</tr>
<tr>
  <td class="method">update_player_controls_on_player_controlled_entity()</td>
</tr>
<tr>
  <td class="method">update()</td>
</tr>
<tr>
  <td class="method">draw_dimentional_grid(float x=0.0f, float y=0.0f, float z=0.0f)</td>
</tr>
<tr>
  <td class="method">draw()</td>
</tr>
<tr>
  <td class="method">draw_player_reticle()</td>
</tr>
<tr>
  <td class="method">toggle_show_collision_tile_mesh()</td>
</tr>
<tr>
  <td class="method">toggle_show_tile_mesh()</td>
</tr>
<tr>
  <td class="method">primary_timer_func()</td>
</tr>
<tr>
  <td class="method">__primary_timer_func()</td>
</tr>
<tr>
  <td class="method">key_char_func(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">_joy_button_down_func(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">_joy_button_up_func(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">_joy_axis_func(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">_key_up_func(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">_key_down_func(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">key_up_func(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">key_down_func(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">virtual_control_button_down_func(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">virtual_control_button_up_func(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">virtual_control_axis_change_func(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">user_event_func(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">render_collision_tile_mesh()</td>
</tr>
<tr>
  <td class="method">get_tile_atlas()</td>
</tr>
<tr>
  <td class="method">get_tile_mesh()</td>
</tr>
<tr>
  <td class="method">get_collision_tile_mesh()</td>
</tr>
<tr>
  <td class="method">get_current_map_entities_ref()</td>
</tr>
<tr>
  <td class="method">get_current_map_entities()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;int, int&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControls&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControls.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControlsProcessor&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControlsProcessor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMesh*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tileo::TMJMeshLoader&quot;, &quot;headers&quot;=&gt;[&quot;Tileo/TMJMeshLoader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Wicked::Entities::Basic2D*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D*&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2DFactory&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2DFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Display*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Display.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Framework*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Framework.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Frameworks::Full&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Frameworks/Full.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Physics::TileMapCollisionStepper&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Physics/TileMapCollisionStepper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Physics::AABB2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Physics/AABB2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::EntityFlagNames&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/EntityFlagNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Weapons::DrawnBow&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Weapons/DrawnBow.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::CameraControlStrategies2D::Base*&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/CameraControlStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::CameraControlStrategies2D::Snap&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/CameraControlStrategies2D/Snap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::CameraControlStrategies2D::SmoothSnap&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/CameraControlStrategies2D/SmoothSnap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::CameraControlStrategies2D::HorizontalRail&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/CameraControlStrategies2D/HorizontalRail.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::CollectionHelper&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/CollectionHelper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;WickedDemos::TileMaps::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;WickedDemos/TileMaps/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Doors::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Doors/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Wicked::Entities::Basic2D*&gt;&amp;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::find&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;tan&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Display&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Display.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::CameraControlStrategies2D::Base&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/CameraControlStrategies2D/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/WickedDemos/TileMaps/Basic2D.q.yml">quintessence/WickedDemos/TileMaps/Basic2D.q.yml</h3>
     <table>
<tr>
  <td class="property">tile_atlas</td>
  <td class="property">AllegroFlare::TileMaps::PrimMeshAtlas*</td>
</tr>
<tr>
  <td class="property">tile_mesh</td>
  <td class="property">AllegroFlare::TileMaps::PrimMesh*</td>
</tr>
<tr>
  <td class="property">collision_tile_mesh</td>
  <td class="property">AllegroFlare::TileMaps::TileMap&lt;int&gt;*</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Wicked::Entities::Basic2D&quot;, &quot;headers&quot;=&gt;[&quot;Wicked/Entities/Basic2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMeshAtlas&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMeshAtlas.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::PrimMesh&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/PrimMesh.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<h1>Dependents</h1>
<pre>
{
  "AllegroFlare/TerminalColors": [
    "AllegroFlare/AudioController",
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "AllegroFlare/SampleBin": [
    "AllegroFlare/AudioController",
    "AllegroFlare/AudioController",
    "AllegroFlare/Prototypes/CubeShooter/Runner",
    "AllegroFlare/Prototypes/CubeShooter/Screen",
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/TileDrive/Screen",
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "AllegroFlare/AudioRepositoryElement": [
    "AllegroFlare/AudioController"
  ],
  "std/map<std/string, AllegroFlare/AudioRepositoryElement>": [
    "AllegroFlare/AudioController"
  ],
  "std/map<std/string, AllegroFlare/Sound>": [
    "AllegroFlare/AudioController"
  ],
  "AllegroFlare/Sound": [
    "AllegroFlare/AudioController",
    "AllegroFlare/AudioController",
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "al_is_audio_initialized": [
    "AllegroFlare/AudioController"
  ],
  "al_is_acodec_addon_initialized": [
    "AllegroFlare/AudioController",
    "AllegroFlare/Prototypes/MindDive/Hypersync",
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "ALLEGRO_MIXER": [
    "AllegroFlare/AudioProcessing/AudioDataBlock",
    "AllegroFlare/AudioProcessing/AudioMixer",
    "AllegroFlare/AudioProcessing/Filters/AllPass",
    "AllegroFlare/AudioProcessing/Filters/Delay",
    "AllegroFlare/Prototypes/MindDive/Hypersync"
  ],
  "ALLEGRO_AUDIO_DEPTH": [
    "AllegroFlare/AudioProcessing/AudioDataBlock",
    "AllegroFlare/AudioProcessing/AudioMixer"
  ],
  "ALLEGRO_CHANNEL_CONF": [
    "AllegroFlare/AudioProcessing/AudioDataBlock",
    "AllegroFlare/AudioProcessing/AudioMixer"
  ],
  "std/size_t": [
    "AllegroFlare/AudioProcessing/AudioDataBlock",
    "AllegroFlare/AudioProcessing/AudioMixer",
    "AllegroFlare/EncoderDecoders/Base62",
    "AllegroFlare/Network2/Message",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard",
    "AllegroFlare/StringFormatValidator",
    "AllegroFlare/TileMaps/MultiMesh"
  ],
  "al_is_system_installed": [
    "AllegroFlare/AudioProcessing/AudioMixer",
    "AllegroFlare/Bone3DGraphRenderer",
    "AllegroFlare/Elements/DialogBoxFrame",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/Scrollbar",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo",
    "AllegroFlare/InputHints",
    "AllegroFlare/NotificationsFactory",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard",
    "AllegroFlare/Testing/Rulers",
    "AllegroFlare/Time",
    "Tileo/TileoTileVertexAllegroVertexDeclaration"
  ],
  "al_is_audio_installed": [
    "AllegroFlare/AudioProcessing/AudioMixer",
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "callback": [
    "AllegroFlare/AudioProcessing/AudioMixer"
  ],
  "AllegroFlare/AudioProcessing/AudioDataBlock": [
    "AllegroFlare/AudioProcessing/Filters/AllPass",
    "AllegroFlare/AudioProcessing/Filters/Delay"
  ],
  "AllegroFlare/AudioProcessing/AudioMixer": [
    "AllegroFlare/AudioProcessing/Filters/AllPass",
    "AllegroFlare/AudioProcessing/Filters/Delay"
  ],
  "AllegroFlare/BitmapBin": [
    "AllegroFlare/BackgroundFactory",
    "AllegroFlare/BackgroundFactory",
    "AllegroFlare/Elements/Backgrounds/Image",
    "AllegroFlare/Elements/Backgrounds/Image",
    "AllegroFlare/Elements/Backgrounds/Monoplex",
    "AllegroFlare/Elements/Backgrounds/Monoplex",
    "AllegroFlare/Elements/Backgrounds/Parallax",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer",
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/NotificationRenderer",
    "AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked",
    "AllegroFlare/Elements/NotificationsRenderer",
    "AllegroFlare/MotionFX/Sparkles2",
    "AllegroFlare/MotionFX/Sparkles2",
    "AllegroFlare/Prototypes/CubeShooter/EntityFactory",
    "AllegroFlare/Prototypes/CubeShooter/Runner",
    "AllegroFlare/Prototypes/CubeShooter/Screen",
    "AllegroFlare/Prototypes/CubeShooter/Shaders/Fog",
    "AllegroFlare/Prototypes/CubeShooter/Shaders/Multiply",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem",
    "AllegroFlare/Prototypes/FixedRoom2D/EntityFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen",
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/MindDive/TunnelMesh",
    "AllegroFlare/Prototypes/MindDive/TunnelMeshFactory",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Prototypes/Platforming2D/TMJMeshLoader",
    "AllegroFlare/Prototypes/TileDrive/Screen",
    "AllegroFlare/Prototypes/TileDrive/TerrainMesh",
    "AllegroFlare/Prototypes/TileDrive/TerrainMeshFactory",
    "AllegroFlare/Prototypes/TileDrive/TileDrive",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/Testing/WithAllegroRenderingFixture",
    "AllegroFlare/TileMaps/Basic2D",
    "AllegroFlare/Timeline/ActorFactory",
    "AllegroFlare/Timeline/ActorFactory",
    "Tileo/TMJMeshLoader",
    "Wicked/Entities/Basic2DFactory"
  ],
  "AllegroFlare/Elements/Backgrounds/Monoplex": [
    "AllegroFlare/BackgroundFactory",
    "AllegroFlare/BackgroundFactory"
  ],
  "AllegroFlare/Elements/Backgrounds/Image": [
    "AllegroFlare/BackgroundFactory",
    "AllegroFlare/BackgroundFactory"
  ],
  "AllegroFlare/Placement3D": [
    "AllegroFlare/Bone3D",
    "AllegroFlare/Prototypes/CubeShooter/Entity",
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/TileDrive/TileDrive",
    "AllegroFlare/Shaders/Cubemap",
    "Wicked/Entities/Basic3D"
  ],
  "std/vector<AllegroFlare/Bone3D>": [
    "AllegroFlare/Bone3D"
  ],
  "AllegroFlare/Bone3D": [
    "AllegroFlare/Bone3D",
    "AllegroFlare/Bone3D",
    "AllegroFlare/Bone3DGraphRenderer",
    "AllegroFlare/Bone3DGraphRenderer"
  ],
  "AllegroFlare/FontBin": [
    "AllegroFlare/Bone3DGraphRenderer",
    "AllegroFlare/Bone3DGraphRenderer",
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/AdvancingText",
    "AllegroFlare/Elements/AdvancingText",
    "AllegroFlare/Elements/Backgrounds/IconPattern",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/DialogRollRenderer",
    "AllegroFlare/Elements/DialogRollRenderer",
    "AllegroFlare/Elements/HealthBars/Hearts",
    "AllegroFlare/Elements/HealthBars/Hearts",
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/LevelSelect",
    "AllegroFlare/Elements/NotificationRenderer",
    "AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked",
    "AllegroFlare/Elements/NotificationsRenderer",
    "AllegroFlare/Elements/RollingCredits/RollingCredits",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/ColumnWithLabels",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/ColumnWithLabels",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/Header",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/Text",
    "AllegroFlare/Elements/Score",
    "AllegroFlare/Elements/Stopwatch",
    "AllegroFlare/Elements/Stopwatch",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Text",
    "AllegroFlare/Elements/StoryboardPages/Text",
    "AllegroFlare/Elements/Text",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo",
    "AllegroFlare/InputHints",
    "AllegroFlare/InputHints",
    "AllegroFlare/MotionComposer/TrackView",
    "AllegroFlare/MotionComposer/TrackView",
    "AllegroFlare/MotionFX/Sparkles",
    "AllegroFlare/MotionFX/Sparkles",
    "AllegroFlare/MusicMesh/FontCharacterAtlasBuilder",
    "AllegroFlare/MusicMesh/MusicMesh",
    "AllegroFlare/ProfilerRenderer",
    "AllegroFlare/Prototypes/CubeShooter/Runner",
    "AllegroFlare/Prototypes/CubeShooter/Screen",
    "AllegroFlare/Prototypes/CubeShooter/Shaders/Fog",
    "AllegroFlare/Prototypes/CubeShooter/Shaders/Multiply",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/Cursor",
    "AllegroFlare/Prototypes/FixedRoom2D/Cursor",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Room",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen",
    "AllegroFlare/Prototypes/MindDive/Hud/Hud",
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/TileDrive/Hud/Hud",
    "AllegroFlare/Prototypes/TileDrive/Screen",
    "AllegroFlare/Prototypes/TileDrive/TileDrive",
    "AllegroFlare/Screens/Achievements",
    "AllegroFlare/Screens/Achievements",
    "AllegroFlare/Screens/CharacterNameInput",
    "AllegroFlare/Screens/GameOverScreen",
    "AllegroFlare/Screens/GameOverScreen",
    "AllegroFlare/Screens/GameWonScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/RollingCredits",
    "AllegroFlare/Screens/RollingCredits",
    "AllegroFlare/Screens/Storyboard",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard",
    "AllegroFlare/StoryboardFactory",
    "AllegroFlare/StoryboardFactory",
    "AllegroFlare/StoryboardPageFactory",
    "AllegroFlare/StoryboardPageFactory",
    "AllegroFlare/Testing/WithAllegroRenderingFixture",
    "AllegroFlare/UnicodeFontViewer",
    "AllegroFlare/UnicodeFontViewer",
    "Wicked/Hud"
  ],
  "ALLEGRO_FONT": [
    "AllegroFlare/Bone3DGraphRenderer",
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/AdvancingText",
    "AllegroFlare/Elements/AdvancingText",
    "AllegroFlare/Elements/Backgrounds/IconPattern",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/DialogRollRenderer",
    "AllegroFlare/Elements/DialogRollRenderer",
    "AllegroFlare/Elements/HealthBars/Hearts",
    "AllegroFlare/Elements/HealthBars/Hearts",
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/LevelSelect",
    "AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked",
    "AllegroFlare/Elements/RollingCredits/RollingCredits",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/ColumnWithLabels",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/ColumnWithLabels",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/Header",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/Text",
    "AllegroFlare/Elements/Score",
    "AllegroFlare/Elements/Stopwatch",
    "AllegroFlare/Elements/Stopwatch",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Text",
    "AllegroFlare/Elements/StoryboardPages/Text",
    "AllegroFlare/Elements/Text",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo",
    "AllegroFlare/InputHints",
    "AllegroFlare/InputHints",
    "AllegroFlare/MotionComposer/TrackView",
    "AllegroFlare/MotionComposer/TrackView",
    "AllegroFlare/MotionFX/Sparkles",
    "AllegroFlare/MotionFX/Sparkles",
    "AllegroFlare/MotionFX/Sparkles2",
    "AllegroFlare/MusicMesh/FontCharacterAtlasBuilder",
    "AllegroFlare/MusicMesh/MusicMesh",
    "AllegroFlare/ProfilerRenderer",
    "AllegroFlare/Prototypes/FixedRoom2D/Cursor",
    "AllegroFlare/Prototypes/FixedRoom2D/Cursor",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem",
    "AllegroFlare/Prototypes/MindDive/Hud/Hud",
    "AllegroFlare/Prototypes/TileDrive/Hud/Hud",
    "AllegroFlare/Screens/GameOverScreen",
    "AllegroFlare/Screens/GameOverScreen",
    "AllegroFlare/Screens/GameWonScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/RollingCredits",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard",
    "AllegroFlare/Testing/WithAllegroRenderingFixture",
    "AllegroFlare/Testing/WithAllegroRenderingFixture",
    "AllegroFlare/UnicodeFontViewer",
    "AllegroFlare/UnicodeFontViewer",
    "Wicked/Hud"
  ],
  "al_is_primitives_addon_initialized": [
    "AllegroFlare/Bone3DGraphRenderer",
    "AllegroFlare/Elements/DialogBoxFrame",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/HealthBars/Basic",
    "AllegroFlare/Elements/HealthBars/Classic",
    "AllegroFlare/Elements/HealthBars/Hearts",
    "AllegroFlare/Elements/NotificationRenderer",
    "AllegroFlare/Elements/Scrollbar",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo",
    "AllegroFlare/InputHints",
    "AllegroFlare/MotionComposer/TrackView",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard",
    "AllegroFlare/Testing/Rulers",
    "AllegroFlare/UnicodeFontViewer",
    "Tileo/TileoTileVertexAllegroVertexDeclaration"
  ],
  "al_is_font_addon_initialized": [
    "AllegroFlare/Bone3DGraphRenderer",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo",
    "AllegroFlare/InputHints",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard",
    "AllegroFlare/UnicodeFontViewer"
  ],
  "AllegroFlare/draw_3d_line": [
    "AllegroFlare/Bone3DGraphRenderer"
  ],
  "AllegroFlare/Placement2D": [
    "AllegroFlare/Camera2D",
    "AllegroFlare/CameraControlStrategies2D/Base",
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/AdvancingText",
    "AllegroFlare/Elements/Backgrounds/IconPattern",
    "AllegroFlare/Elements/Backgrounds/Image",
    "AllegroFlare/Elements/Backgrounds/Monoplex",
    "AllegroFlare/Elements/Backgrounds/Parallax",
    "AllegroFlare/Elements/Base",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/LevelSelect",
    "AllegroFlare/Elements/NotificationsRenderer",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/MotionFX/Sparkles",
    "AllegroFlare/MotionFX/Sparkles2",
    "AllegroFlare/Prototypes/FixedRoom2D/Cursor",
    "AllegroFlare/Prototypes/FixedRoom2D/Entities/Base",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D",
    "AllegroFlare/Prototypes/Platforming2D/Entities/FrameAnimated2D",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard",
    "AllegroFlare/Testing/WithAllegroRenderingFixture",
    "Wicked/CameraControlStrategies2D/Base",
    "Wicked/Entities/Basic2D",
    "WickedDemos/TileDemo"
  ],
  "tan": [
    "AllegroFlare/Camera2D",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "WickedDemos/TileDemo"
  ],
  "ALLEGRO_BITMAP": [
    "AllegroFlare/Camera2D",
    "AllegroFlare/Elements/Backgrounds/Image",
    "AllegroFlare/Elements/Backgrounds/Image",
    "AllegroFlare/Elements/Backgrounds/Parallax",
    "AllegroFlare/Elements/Backgrounds/ParallaxLayer",
    "AllegroFlare/Elements/Backgrounds/ParallaxLayer",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/FrameAnimation/Animation",
    "AllegroFlare/FrameAnimation/Book",
    "AllegroFlare/MotionFX/Sparkles2",
    "AllegroFlare/MotionFX/Sparkles2",
    "AllegroFlare/MusicMesh/FontCharacterAtlasBuilder",
    "AllegroFlare/Prototypes/FixedRoom2D/Entities/Base",
    "AllegroFlare/Prototypes/FixedRoom2D/Entities/Base",
    "AllegroFlare/Prototypes/FixedRoom2D/EntityFactory",
    "AllegroFlare/Prototypes/MindDive/Hud/Hud",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D",
    "AllegroFlare/Prototypes/Platforming2D/Entities/FrameAnimated2D",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Prototypes/TileDrive/Hud/Hud",
    "AllegroFlare/Prototypes/TileDrive/TileDrive",
    "AllegroFlare/RenderSurfaces/Base",
    "AllegroFlare/RenderSurfaces/DisplayBackbuffer",
    "AllegroFlare/RenderSurfaces/DisplayBackbufferSubBitmap",
    "AllegroFlare/ScreenCapture",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/StoryboardFactory",
    "AllegroFlare/StoryboardPageFactory",
    "AllegroFlare/StoryboardPageFactory",
    "AllegroFlare/Testing/WithAllegroRenderingFixture",
    "AllegroFlare/TileMaps/MultiMesh",
    "AllegroFlare/TileMaps/PrimMeshAtlasIndexRecord",
    "Tileo/Shaders/MeshWithNormals",
    "Wicked/Entities/Basic2D"
  ],
  "AllegroFlare/Vec2D": [
    "AllegroFlare/Camera2D",
    "AllegroFlare/Elements/Score",
    "AllegroFlare/MusicMesh/FontCharacterAtlasBuilder",
    "AllegroFlare/Physics/TileMapCollisionStepperStepResult",
    "AllegroFlare/ProfilerRenderer",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem",
    "AllegroFlare/Prototypes/MindDive/Hud/Hud",
    "AllegroFlare/Prototypes/MindDive/TunnelRenderer",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Prototypes/TileDrive/Hud/Hud",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard"
  ],
  "AllegroFlare/CameraControlStrategies2D/Base": [
    "AllegroFlare/CameraControlStrategies2D/HorizontalRail",
    "AllegroFlare/CameraControlStrategies2D/SmoothSnap",
    "AllegroFlare/CameraControlStrategies2D/SmoothSnapWithZoomEffect",
    "AllegroFlare/CameraControlStrategies2D/Snap",
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D": [
    "AllegroFlare/CameraControlStrategies2D/HorizontalRail",
    "AllegroFlare/CameraControlStrategies2D/SmoothSnap",
    "AllegroFlare/CameraControlStrategies2D/SmoothSnapWithZoomEffect",
    "AllegroFlare/CameraControlStrategies2D/Snap",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Doors/Basic2D",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Enemies/Base",
    "AllegroFlare/Prototypes/Platforming2D/Entities/FrameAnimated2D",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Anchored",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/BackAndForthHorizontal",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FallOnTrackingRange",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Flapping",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FlappingWithRandomness",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/HoppingLeft",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveInDirection",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveLeft",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveRight",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/ReflectOffWalls",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/StayStill",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Tracking",
    "AllegroFlare/Prototypes/Platforming2D/Entities/TileMaps/Basic2D",
    "AllegroFlare/Prototypes/Platforming2D/EntityCollectionHelper",
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "fabs": [
    "AllegroFlare/CameraControlStrategies2D/SmoothSnapWithZoomEffect"
  ],
  "AllegroFlare/Useful": [
    "AllegroFlare/CameraControlStrategies2D/SmoothSnapWithZoomEffect",
    "AllegroFlare/Prototypes/CubeShooter/Screen",
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "GLuint": [
    "AllegroFlare/Cubemap"
  ],
  "AllegroFlare/Logger": [
    "AllegroFlare/DeploymentEnvironment",
    "AllegroFlare/Prototypes/Platforming2D/TMJDataLoader"
  ],
  "ALLEGRO_COLOR": [
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/AdvancingText",
    "AllegroFlare/Elements/Backgrounds/IconPattern",
    "AllegroFlare/Elements/DialogBoxFrame",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer",
    "AllegroFlare/Elements/DialogRollRenderer",
    "AllegroFlare/Elements/HealthBars/Basic",
    "AllegroFlare/Elements/HealthBars/Classic",
    "AllegroFlare/Elements/HealthBars/Hearts",
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/LevelSelect",
    "AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/ColumnWithLabels",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/Header",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/Text",
    "AllegroFlare/Elements/Scrollbar",
    "AllegroFlare/Elements/Stopwatch",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/Elements/StoryboardPages/Text",
    "AllegroFlare/Elements/Text",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo",
    "AllegroFlare/InputHints",
    "AllegroFlare/MotionComposer/TrackView",
    "AllegroFlare/MotionFX/Sparkles",
    "AllegroFlare/MusicMesh/FontCharacterAtlasBuilder",
    "AllegroFlare/Prototypes/CubeShooter/Shaders/DepthDarken",
    "AllegroFlare/Prototypes/CubeShooter/Shaders/Fog",
    "AllegroFlare/Prototypes/CubeShooter/Shaders/Multiply",
    "AllegroFlare/Prototypes/FixedRoom2D/Cursor",
    "AllegroFlare/Prototypes/MindDive/Hud/Hud",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory",
    "AllegroFlare/Prototypes/Platforming2D/Entities/FrameAnimated2D",
    "AllegroFlare/Prototypes/TileDrive/Hud/Hud",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/Storyboard",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/Shaders/AllegroDefault",
    "AllegroFlare/Shaders/PostProcessing/Blinds",
    "AllegroFlare/Shaders/PostProcessing/DipToBlack",
    "AllegroFlare/Shaders/PostProcessing/Wipe",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard",
    "AllegroFlare/Testing/WithAllegroRenderingFixture",
    "AllegroFlare/UnicodeFontViewer",
    "AllegroFlare/Useful3D/Triangle",
    "Tileo/Shaders/AllegroDefault",
    "Tileo/Shaders/MeshWithNormals",
    "Wicked/Entities/Basic2D",
    "Wicked/Entities/Basic2DFactory"
  ],
  "al_draw_filled_rectangle": [
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/Testing/Rulers"
  ],
  "al_draw_text": [
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked",
    "AllegroFlare/Elements/Score",
    "AllegroFlare/Elements/Text",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo",
    "AllegroFlare/ProfilerRenderer",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem",
    "AllegroFlare/Prototypes/MindDive/Hud/Hud",
    "AllegroFlare/Prototypes/TileDrive/Hud/Hud"
  ],
  "std/vector<std/tuple<std/string, std/string, std/string>>": [
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Screens/Achievements"
  ],
  "AllegroFlare/Elements/Scrollbar": [
    "AllegroFlare/Elements/AchievementsList"
  ],
  "std/min, std/max": [
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/AdvancingText",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/Screens/Achievements"
  ],
  "std/min": [
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/HealthBars/Basic",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/EncoderDecoders/Base62"
  ],
  "std/max": [
    "AllegroFlare/Elements/AchievementsList",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/HealthBars/Basic",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/Elements/StoryboardPages/Image"
  ],
  "AllegroFlare/Color": [
    "AllegroFlare/Elements/AdvancingText",
    "AllegroFlare/Elements/Backgrounds/IconPattern",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/LevelSelect",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/Elements/StoryboardPages/Text",
    "AllegroFlare/MusicMesh/FontCharacterAtlasBuilder",
    "AllegroFlare/Prototypes/CubeShooter/Screen",
    "AllegroFlare/Prototypes/MindDive/Hud/Hud",
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/TileDrive/Hud/Hud",
    "AllegroFlare/Prototypes/TileDrive/TileDrive",
    "AllegroFlare/Screens/Storyboard",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard",
    "AllegroFlare/UnicodeFontViewer"
  ],
  "AllegroFlare/Screens/Base": [
    "AllegroFlare/Elements/AdvancingText",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Integrations/CameraProjectionChanges",
    "AllegroFlare/Prototypes/CubeShooter/Runner",
    "AllegroFlare/Prototypes/CubeShooter/Screen",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Prototypes/TileDrive/Screen",
    "AllegroFlare/Screens/Achievements",
    "AllegroFlare/Screens/CharacterNameInput",
    "AllegroFlare/Screens/GameOverScreen",
    "AllegroFlare/Screens/GameWonScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/RollingCredits",
    "AllegroFlare/Screens/Storyboard",
    "AllegroFlare/Screens/TitleScreen",
    "WickedDemos/TileDemo"
  ],
  "AllegroFlare/EventEmitter": [
    "AllegroFlare/Elements/AdvancingText",
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/LevelSelect",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Prototypes/CubeShooter/Runner",
    "AllegroFlare/Prototypes/CubeShooter/Screen",
    "AllegroFlare/Prototypes/CubeShooter/Shaders/Fog",
    "AllegroFlare/Prototypes/CubeShooter/Shaders/Multiply",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Room",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner",
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Prototypes/TileDrive/Screen",
    "AllegroFlare/Prototypes/TileDrive/TileDrive",
    "AllegroFlare/Screens/Achievements",
    "AllegroFlare/Screens/Achievements",
    "AllegroFlare/Screens/CharacterNameInput",
    "AllegroFlare/Screens/GameOverScreen",
    "AllegroFlare/Screens/GameOverScreen",
    "AllegroFlare/Screens/GameWonScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/RollingCredits",
    "AllegroFlare/Screens/RollingCredits",
    "AllegroFlare/Screens/Storyboard",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard",
    "AllegroFlare/StoryboardFactory",
    "AllegroFlare/StoryboardFactory",
    "AllegroFlare/VirtualControlsProcessor",
    "AllegroFlare/VirtualControlsProcessor",
    "WickedDemos/TileDemo",
    "WickedDemos/TileDemo"
  ],
  "ALLEGRO_EVENT": [
    "AllegroFlare/Elements/AdvancingText",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Integrations/CameraProjectionChanges",
    "AllegroFlare/Prototypes/CubeShooter/Screen",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Prototypes/TileDrive/Screen",
    "AllegroFlare/Screens/CharacterNameInput",
    "AllegroFlare/Screens/GameOverScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/VirtualControlsProcessor",
    "AllegroFlare/VirtualControlsProcessor",
    "WickedDemos/TileDemo",
    "WickedDemos/TileDemo"
  ],
  "al_draw_multiline_text": [
    "AllegroFlare/Elements/AdvancingText",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Text",
    "AllegroFlare/Screens/Storyboard"
  ],
  "al_draw_rounded_rectangle": [
    "AllegroFlare/Elements/AdvancingText",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/Score",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo",
    "AllegroFlare/ProfilerRenderer",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem",
    "AllegroFlare/Prototypes/MindDive/Hud/Hud",
    "AllegroFlare/Prototypes/MindDive/TunnelRenderer",
    "AllegroFlare/Prototypes/TileDrive/Hud/Hud"
  ],
  "AllegroFlare/interpolator/": [
    "AllegroFlare/Elements/AdvancingText",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/Elements/StoryboardPages/Image"
  ],
  "fmod": [
    "AllegroFlare/Elements/AdvancingText",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/LevelSelect",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/FrameAnimation/Animation",
    "AllegroFlare/Prototypes/MindDive/Hypersync",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard"
  ],
  "AllegroFlare/Elements/Backgrounds/Base": [
    "AllegroFlare/Elements/Backgrounds/IconPattern",
    "AllegroFlare/Elements/Backgrounds/Image",
    "AllegroFlare/Elements/Backgrounds/Monoplex",
    "AllegroFlare/Elements/Backgrounds/Parallax"
  ],
  "sin": [
    "AllegroFlare/Elements/Backgrounds/IconPattern",
    "AllegroFlare/Elements/Backgrounds/Monoplex",
    "AllegroFlare/MotionFX/Sparkles",
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "AllegroFlare/draw_offset_textured_rectangle": [
    "AllegroFlare/Elements/Backgrounds/Parallax"
  ],
  "std/vector<AllegroFlare/Elements/Backgrounds/ParallaxLayer>": [
    "AllegroFlare/Elements/Backgrounds/Parallax"
  ],
  "AllegroFlare/Elements/Backgrounds/ParallaxLayer": [
    "AllegroFlare/Elements/Backgrounds/Parallax"
  ],
  "AllegroFlare/ElementID": [
    "AllegroFlare/Elements/Base",
    "AllegroFlare/Prototypes/CubeShooter/Entity",
    "AllegroFlare/Prototypes/CubeShooter/EntityFactory",
    "AllegroFlare/Prototypes/CubeShooter/Screen",
    "AllegroFlare/Prototypes/FixedRoom2D/Entities/Base",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Base",
    "AllegroFlare/SceneGraph/Entities/Base",
    "Wicked/Entities/Base"
  ],
  "al_get_time": [
    "AllegroFlare/Elements/DialogBoxFactory",
    "AllegroFlare/Elements/DialogBoxes/Base",
    "AllegroFlare/Elements/DialogBoxes/Basic",
    "AllegroFlare/Elements/DialogBoxes/YouGotAnItem",
    "AllegroFlare/Elements/DialogBoxes/YouGotEvidence",
    "AllegroFlare/Elements/Notifications/Base"
  ],
  "AllegroFlare/Elements/DialogBoxes/Choice": [
    "AllegroFlare/Elements/DialogBoxFactory",
    "AllegroFlare/Elements/DialogBoxFactory",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer"
  ],
  "AllegroFlare/Elements/DialogBoxes/Basic": [
    "AllegroFlare/Elements/DialogBoxFactory",
    "AllegroFlare/Elements/DialogBoxFactory",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem"
  ],
  "std/vector<std/pair<std/string, std/string>>": [
    "AllegroFlare/Elements/DialogBoxFactory",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/DialogBoxes/Choice",
    "AllegroFlare/Elements/DialogRoll",
    "AllegroFlare/Elements/DialogRollRenderer",
    "AllegroFlare/InputHints",
    "AllegroFlare/Screens/GameOverScreen",
    "AllegroFlare/Screens/GameWonScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/TitleScreen"
  ],
  "AllegroFlare/Elements/DialogBoxes/YouGotAnItem": [
    "AllegroFlare/Elements/DialogBoxFactory",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem"
  ],
  "AllegroFlare/Elements/DialogBoxes/YouGotEvidence": [
    "AllegroFlare/Elements/DialogBoxFactory",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem"
  ],
  "AllegroFlare/color/color": [
    "AllegroFlare/Elements/DialogBoxFrame"
  ],
  "al_get_current_display": [
    "AllegroFlare/Elements/DialogBoxFrame",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer"
  ],
  "al_color_html": [
    "AllegroFlare/Elements/DialogBoxFrame",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer"
  ],
  "al_draw_filled_rounded_rectangle": [
    "AllegroFlare/Elements/DialogBoxFrame",
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer"
  ],
  "AllegroFlare/Elements/DialogBoxFrame": [
    "AllegroFlare/Elements/DialogBoxNameTag",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer"
  ],
  "AllegroFlare/Elements/DialogBoxes/Base": [
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxes/Base",
    "AllegroFlare/Elements/DialogBoxes/Basic",
    "AllegroFlare/Elements/DialogBoxes/Choice",
    "AllegroFlare/Elements/DialogBoxes/YouGotAnItem",
    "AllegroFlare/Elements/DialogBoxes/YouGotEvidence",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CloseDialog",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer": [
    "AllegroFlare/Elements/DialogBoxRenderer"
  ],
  "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer": [
    "AllegroFlare/Elements/DialogBoxRenderer"
  ],
  "AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer": [
    "AllegroFlare/Elements/DialogBoxRenderer"
  ],
  "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer": [
    "AllegroFlare/Elements/DialogBoxRenderer"
  ],
  "AllegroFlare/Elements/DialogButton": [
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer"
  ],
  "AllegroFlare/Interpolators/": [
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/BasicRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotAnItemRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer",
    "AllegroFlare/Elements/DialogBoxRenderers/YouGotEvidenceRenderer",
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/MotionFX/Sparkles2",
    "AllegroFlare/MotionFX/Sparkles2"
  ],
  "al_color_name": [
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/ProfilerRenderer",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Testing/WithAllegroRenderingFixture",
    "WickedDemos/TileDemo",
    "WickedDemos/TileDemo"
  ],
  "al_draw_rectangle": [
    "AllegroFlare/Elements/DialogBoxRenderers/ChoiceRenderer",
    "AllegroFlare/MusicMesh/FontCharacterAtlasBuilder",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D",
    "AllegroFlare/Prototypes/Platforming2D/Entities/FrameAnimated2D",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/UnicodeFontViewer",
    "Wicked/Entities/Basic2D"
  ],
  "std/vector<std/vector<std/string>>": [
    "AllegroFlare/Elements/DialogBoxes/Base",
    "AllegroFlare/Elements/Notifications/Base",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/Base",
    "AllegroFlare/Elements/RollingCredits/Sections/Base",
    "AllegroFlare/MotionComposer/Messages/Base"
  ],
  "al_is_ttf_addon_initialized": [
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/InputDiagrams/KeyboardKey",
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo",
    "AllegroFlare/InputHints",
    "AllegroFlare/UnicodeFontViewer"
  ],
  "AllegroFlare/interpolator": [
    "AllegroFlare/Elements/DialogButton",
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/LevelSelect",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard"
  ],
  "char": [
    "AllegroFlare/Elements/DialogRoll",
    "AllegroFlare/Network2/Message"
  ],
  "AllegroFlare/Elements/DialogRoll": [
    "AllegroFlare/Elements/DialogRollRenderer",
    "AllegroFlare/Elements/DialogRollRenderer"
  ],
  "AllegroFlare/Elements/Base": [
    "AllegroFlare/Elements/HealthBars/Basic",
    "AllegroFlare/Elements/HealthBars/Classic",
    "AllegroFlare/Elements/HealthBars/Hearts",
    "AllegroFlare/Elements/Stopwatch",
    "AllegroFlare/Elements/Text"
  ],
  "AllegroFlare/FontAwesome": [
    "AllegroFlare/Elements/HealthBars/Hearts"
  ],
  "int32_t": [
    "AllegroFlare/Elements/HealthBars/Hearts"
  ],
  "X": [
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Elements/LevelSelect"
  ],
  "AllegroFlare/Inventory": [
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Prototypes/FixedRoom2D/Configuration",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "AllegroFlare/InventoryIndex": [
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/InventoryIndex",
    "AllegroFlare/Prototypes/FixedRoom2D/Configuration",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/InventoryDictionary": [
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/InventoryDictionary"
  ],
  "AllegroFlare/Elements/Inventory": [
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "std/function": [
    "AllegroFlare/Elements/Inventory",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner",
    "AllegroFlare/Prototypes/TileDrive/Screen",
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "ALLEGRO_FLARE_EVENT_SELECT_LEVEL": [
    "AllegroFlare/Elements/LevelSelect"
  ],
  "AllegroFlare/Elements/Notifications/Base": [
    "AllegroFlare/Elements/NotificationRenderer",
    "AllegroFlare/Elements/NotificationRenderer",
    "AllegroFlare/Elements/Notifications/AchievementUnlocked",
    "AllegroFlare/Elements/NotificationsRenderer",
    "AllegroFlare/Notifications",
    "AllegroFlare/Notifications",
    "AllegroFlare/NotificationsFactory"
  ],
  "AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked": [
    "AllegroFlare/Elements/NotificationRenderer"
  ],
  "AllegroFlare/Elements/Notifications/AchievementUnlocked": [
    "AllegroFlare/Elements/NotificationRenderer",
    "AllegroFlare/NotificationsFactory",
    "AllegroFlare/NotificationsFactory"
  ],
  "AllegroFlare/MotionFX/Sparkles2": [
    "AllegroFlare/Elements/NotificationRenderers/AchievementUnlocked"
  ],
  "AllegroFlare/Elements/NotificationRenderer": [
    "AllegroFlare/Elements/NotificationsRenderer"
  ],
  "std/vector<AllegroFlare/Elements/PlayingCards/Card>": [
    "AllegroFlare/Elements/PlayingCards/Deck"
  ],
  "AllegroFlare/Elements/PlayingCards/Card": [
    "AllegroFlare/Elements/PlayingCards/Deck"
  ],
  "std/shuffle": [
    "AllegroFlare/Elements/PlayingCards/Deck"
  ],
  "AllegroFlare/Elements/PlayingCards/Deck": [
    "AllegroFlare/Elements/PlayingCards/DeckFactory"
  ],
  "AllegroFlare/Elements/RollingCredits/Sections/Base": [
    "AllegroFlare/Elements/RollingCredits/RollingCredits",
    "AllegroFlare/Elements/RollingCredits/Sections/ColumnWithLabels",
    "AllegroFlare/Elements/RollingCredits/Sections/Header",
    "AllegroFlare/Elements/RollingCredits/Sections/Text",
    "AllegroFlare/Screens/RollingCredits"
  ],
  "AllegroFlare/Elements/RollingCredits/Sections/Header": [
    "AllegroFlare/Elements/RollingCredits/RollingCredits",
    "AllegroFlare/Elements/RollingCredits/SectionFactory"
  ],
  "AllegroFlare/Elements/RollingCredits/SectionRenderers/Header": [
    "AllegroFlare/Elements/RollingCredits/RollingCredits"
  ],
  "AllegroFlare/Elements/RollingCredits/Sections/ColumnWithLabels": [
    "AllegroFlare/Elements/RollingCredits/RollingCredits",
    "AllegroFlare/Elements/RollingCredits/SectionFactory"
  ],
  "AllegroFlare/Elements/RollingCredits/SectionRenderers/ColumnWithLabels": [
    "AllegroFlare/Elements/RollingCredits/RollingCredits"
  ],
  "AllegroFlare/Elements/RollingCredits/Sections/Text": [
    "AllegroFlare/Elements/RollingCredits/RollingCredits",
    "AllegroFlare/Elements/RollingCredits/SectionFactory",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/Text"
  ],
  "AllegroFlare/Elements/RollingCredits/SectionRenderers/Text": [
    "AllegroFlare/Elements/RollingCredits/RollingCredits"
  ],
  "AllegroFlare/Elements/RollingCredits/SectionRenderers/Base": [
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/ColumnWithLabels",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/Header",
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/Text"
  ],
  "std/vector<std/tuple<std/string, std/string>>": [
    "AllegroFlare/Elements/RollingCredits/SectionRenderers/ColumnWithLabels",
    "AllegroFlare/Elements/RollingCredits/Sections/ColumnWithLabels"
  ],
  "std/setfill": [
    "AllegroFlare/Elements/Score",
    "AllegroFlare/MusicMesh/FontCharacterAtlasBuilder",
    "AllegroFlare/UnicodeFontViewer",
    "Wicked/Hud"
  ],
  "AllegroFlare/TimerFormatter": [
    "AllegroFlare/Elements/Stopwatch"
  ],
  "AllegroFlare/Timer": [
    "AllegroFlare/Elements/Stopwatch",
    "AllegroFlare/Elements/Stopwatch",
    "AllegroFlare/ProfilerRenderer",
    "AllegroFlare/Prototypes/MindDive/Hud/Hud",
    "AllegroFlare/Prototypes/MindDive/Hypersync",
    "AllegroFlare/Prototypes/MindDive/MindDive"
  ],
  "AllegroFlare/Elements/StoryboardPages/Base": [
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/Storyboard",
    "AllegroFlare/Elements/StoryboardPages/AdvancingText",
    "AllegroFlare/Elements/StoryboardPages/Image",
    "AllegroFlare/Elements/StoryboardPages/Text",
    "AllegroFlare/StoryboardFactory"
  ],
  "std/vector<AllegroFlare/Elements/StoryboardPages/Base >": [
    "AllegroFlare/Elements/Storyboard"
  ],
  "ALLEGRO_FLARE_EVENT_POST_ACHIEVEMENT_UNLOCKED_NOTIFICATION": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_SHOW_INPUT_HINTS_BAR": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_HIDE_INPUT_HINTS_BAR": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR_TEXT_OPACITY": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR_BACKFILL_OPACITY": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_STOP_ALL_MUSIC_TRACKS": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_SET_INPUT_HINTS_BAR_HEIGHT": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_EVENT_SOURCE": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_EXIT_GAME": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_SWITCH_SCREEN": [
    "AllegroFlare/EventEmitter"
  ],
  "AllegroFlare/GameEvent": [
    "AllegroFlare/EventEmitter",
    "AllegroFlare/Prototypes/CubeShooter/Runner",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen"
  ],
  "AllegroFlare/GameEventDatas/Base": [
    "AllegroFlare/EventEmitter",
    "AllegroFlare/GameEvent",
    "AllegroFlare/GameEvent",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CloseDialog",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotAnItemDialog",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotEvidenceDialog",
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectEvidence",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectItem",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/EnterRoom",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/InitiateDialog",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "AllegroFlare/FrameAnimation/Frame": [
    "AllegroFlare/FrameAnimation/Animation",
    "AllegroFlare/FrameAnimation/AsepriteSpriteSheetJSONLoader"
  ],
  "AllegroFlare/FrameAnimation/SpriteSheet": [
    "AllegroFlare/FrameAnimation/Animation",
    "AllegroFlare/FrameAnimation/AsepriteSpriteSheetJSONLoader",
    "AllegroFlare/FrameAnimation/Book"
  ],
  "AllegroFlare/UsefulPHP": [
    "AllegroFlare/FrameAnimation/AsepriteSpriteSheetJSONLoader",
    "AllegroFlare/FrameAnimation/Book"
  ],
  "nlohmann/json": [
    "AllegroFlare/FrameAnimation/AsepriteSpriteSheetJSONLoader",
    "AllegroFlare/MotionComposer/MessageFactory",
    "AllegroFlare/MotionComposer/MessageProcessor",
    "AllegroFlare/Prototypes/MindDive/TunnelMeshTMJDataLoader",
    "AllegroFlare/Prototypes/Platforming2D/TMJDataLoader",
    "AllegroFlare/Prototypes/Platforming2D/TMJMeshLoader",
    "AllegroFlare/Prototypes/TileDrive/TerrainMeshTMJDataLoader",
    "Tileo/TMJDataLoader",
    "Tileo/TMJMeshLoader"
  ],
  "AllegroFlare/Errors": [
    "AllegroFlare/FrameAnimation/AsepriteSpriteSheetJSONLoader",
    "AllegroFlare/FrameAnimation/Book"
  ],
  "AllegroFlare/FrameAnimation/Animation": [
    "AllegroFlare/FrameAnimation/AsepriteSpriteSheetJSONLoader",
    "AllegroFlare/FrameAnimation/Book",
    "AllegroFlare/FrameAnimation/Book",
    "AllegroFlare/Prototypes/Platforming2D/Entities/FrameAnimated2D"
  ],
  "AllegroFlare/FrameAnimation/Errors": [
    "AllegroFlare/FrameAnimation/AsepriteSpriteSheetJSONLoader"
  ],
  "AllegroFlare/FrameAnimation/AsepriteSpriteSheetJSONLoader": [
    "AllegroFlare/FrameAnimation/Book"
  ],
  "AllegroFlare/php/str_replace": [
    "AllegroFlare/Generators/LoremIpsumGenerator"
  ],
  "std/vector<std/string>": [
    "AllegroFlare/Generators/LoremIpsumGenerator",
    "AllegroFlare/Generators/PersonNameGenerator",
    "AllegroFlare/Integrations/Network",
    "AllegroFlare/MotionFX/Sparkles",
    "AllegroFlare/MotionFX/Sparkles2"
  ],
  "AllegroFlare/Random": [
    "AllegroFlare/Generators/PersonNameGenerator",
    "AllegroFlare/Prototypes/MindDive/TunnelMesh",
    "AllegroFlare/Prototypes/MindDive/TunnelMeshFactory",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FlappingWithRandomness",
    "AllegroFlare/Prototypes/TileDrive/TerrainMesh",
    "AllegroFlare/Prototypes/TileDrive/TerrainMeshFactory",
    "AllegroFlare/TileMaps/Basic2D",
    "Wicked/Entities/MovementStrategies2D/FlappingWithRandomness"
  ],
  "AllegroFlare/InputDiagrams/KeyboardKey": [
    "AllegroFlare/InputDiagrams/KeyboardKeyCombo"
  ],
  "AllegroFlare/InputDiagrams/KeyboardKeyCombo": [
    "AllegroFlare/InputHints"
  ],
  "AllegroFlare/Frameworks/Full": [
    "AllegroFlare/Integrations/CameraProjectionChanges",
    "AllegroFlare/Prototypes/CubeShooter/Runner",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "WickedDemos/TileDemo"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Screen": [
    "AllegroFlare/Integrations/CameraProjectionChanges"
  ],
  "AllegroFlare/Prototypes/TileDrive/Screen": [
    "AllegroFlare/Integrations/CameraProjectionChanges"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory": [
    "AllegroFlare/Integrations/CameraProjectionChanges",
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "void": [
    "AllegroFlare/Integrations/Network"
  ],
  "std/mutex": [
    "AllegroFlare/Integrations/Network",
    "AllegroFlare/Integrations/Network"
  ],
  "std/atomic<bool>": [
    "AllegroFlare/Integrations/Network",
    "AllegroFlare/Integrations/Network"
  ],
  ":testing/Test": [
    "AllegroFlare/Integrations/Network",
    "AllegroFlare/Testing/TestNameInference",
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "AllegroFlare/Network2/Client": [
    "AllegroFlare/Integrations/Network"
  ],
  "AllegroFlare/Network2/Server": [
    "AllegroFlare/Integrations/Network"
  ],
  "(void (callback)(std/string))": [
    "AllegroFlare/Integrations/Network"
  ],
  "std/atomic": [
    "AllegroFlare/Integrations/Network"
  ],
  "AllegroFlare/InventoryIndexItem": [
    "AllegroFlare/InventoryDictionary",
    "AllegroFlare/InventoryIndex"
  ],
  "AllegroFlare/InventoryDictionaryItems/Base": [
    "AllegroFlare/InventoryDictionary",
    "AllegroFlare/InventoryDictionaryItems/ClassicItem",
    "AllegroFlare/InventoryDictionaryItems/WithAttributes"
  ],
  "AllegroFlare/InventoryDictionaryItems/ClassicItem": [
    "AllegroFlare/InventoryDictionary"
  ],
  "AllegroFlare/Attributes": [
    "AllegroFlare/InventoryDictionaryItems/WithAttributes"
  ],
  "std/map<int, AllegroFlare/InventoryIndexItem>": [
    "AllegroFlare/InventoryIndex"
  ],
  "std/tuple<std/string, std/string, std/string>": [
    "AllegroFlare/InventoryIndexItem"
  ],
  "std/filesystem": [
    "AllegroFlare/Logger"
  ],
  "AllegroFlare/ConsoleColors": [
    "AllegroFlare/Logger"
  ],
  "AllegroFlare/MotionComposer/Messages/Clear": [
    "AllegroFlare/MotionComposer/MessageFactory"
  ],
  "AllegroFlare/JSONLoaders/MotionComposer/Messages/Clear": [
    "AllegroFlare/MotionComposer/MessageFactory",
    "AllegroFlare/MotionComposer/MessageProcessor"
  ],
  "AllegroFlare/MotionComposer/Messages/AddActor2D": [
    "AllegroFlare/MotionComposer/MessageFactory"
  ],
  "AllegroFlare/JSONLoaders/AllegroFlare/MotionComposer/Messages/AddActor2D": [
    "AllegroFlare/MotionComposer/MessageFactory",
    "AllegroFlare/MotionComposer/MessageProcessor"
  ],
  "AllegroFlare/MotionComposer/Messages/TogglePlayback": [
    "AllegroFlare/MotionComposer/MessageFactory"
  ],
  "AllegroFlare/JSONLoaders/MotionComposer/Messages/TogglePlayback": [
    "AllegroFlare/MotionComposer/MessageFactory",
    "AllegroFlare/MotionComposer/MessageProcessor"
  ],
  "AllegroFlare/MotionComposer/Messages/SetPlayheadPosition": [
    "AllegroFlare/MotionComposer/MessageFactory"
  ],
  "AllegroFlare/JSONLoaders/MotionComposer/Messages/SetPlayheadPosition": [
    "AllegroFlare/MotionComposer/MessageFactory",
    "AllegroFlare/MotionComposer/MessageProcessor"
  ],
  "AllegroFlare/JSONLoaders/MotionComposer/Messages/RunBuildProcess": [
    "AllegroFlare/MotionComposer/MessageFactory",
    "AllegroFlare/MotionComposer/MessageProcessor"
  ],
  "AllegroFlare/MotionComposer/Messages/Base": [
    "AllegroFlare/MotionComposer/MessageProcessor",
    "AllegroFlare/MotionComposer/Messages/AddActor2D",
    "AllegroFlare/MotionComposer/Messages/RunBuildProcess",
    "AllegroFlare/MotionComposer/Messages/SetPlayheadPosition",
    "AllegroFlare/MotionComposer/Messages/SetScript"
  ],
  "AllegroFlare/Timeline/Actor2D": [
    "AllegroFlare/MotionComposer/Messages/AddActor2D"
  ],
  "AllegroFlare/Timeline/Track": [
    "AllegroFlare/MotionComposer/TrackView",
    "AllegroFlare/MotionComposer/TrackView"
  ],
  "AllegroFlare/Color/": [
    "AllegroFlare/MotionComposer/TrackView",
    "AllegroFlare/MotionComposer/TrackView",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Room"
  ],
  "AllegroFlare/Color/Gold": [
    "AllegroFlare/MotionFX/Sparkles"
  ],
  "std/vector<std/tuple<float, float, float, ALLEGRO_COLOR>>": [
    "AllegroFlare/MotionFX/Sparkles"
  ],
  "cos": [
    "AllegroFlare/MotionFX/Sparkles"
  ],
  "AllegroFlare/Timeline/ActorManager": [
    "AllegroFlare/MotionFX/Sparkles2"
  ],
  "AllegroFlare/Timeline/Actors/Actor2D": [
    "AllegroFlare/MotionFX/Sparkles2",
    "AllegroFlare/Timeline/ActorFactory",
    "AllegroFlare/Timeline/ActorFactory"
  ],
  "AllegroFlare/MusicMesh/Stamp": [
    "AllegroFlare/MusicMesh/MusicMesh"
  ],
  "AllegroFlare/TileMaps/MultiMesh": [
    "AllegroFlare/MusicMesh/MusicMesh"
  ],
  "AllegroFlare/TileMaps/MultiMeshUVAtlas": [
    "AllegroFlare/MusicMesh/MusicMesh",
    "AllegroFlare/TileMaps/MultiMesh"
  ],
  "AllegroFlare/MusicMesh/FontCharacterAtlasBuilder": [
    "AllegroFlare/MusicMesh/MusicMesh"
  ],
  "chat_message": [
    "AllegroFlare/Network2/Message"
  ],
  "AllegroFlare/EncoderDecoders/Base62": [
    "AllegroFlare/Network2/Message"
  ],
  "AllegroFlare/SHA2": [
    "AllegroFlare/Network2/Message"
  ],
  "std/invalid_argument": [
    "AllegroFlare/Network2/URLTokenizer"
  ],
  "std/find_if": [
    "AllegroFlare/Network2/URLTokenizer",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "std/vector<AllegroFlare/Elements/Notifications/Base>": [
    "AllegroFlare/Notifications"
  ],
  "std/sort": [
    "AllegroFlare/Notifications"
  ],
  "std/copy_if": [
    "AllegroFlare/Notifications"
  ],
  "std/fmod": [
    "AllegroFlare/Physics/TileMapCollisionStepper",
    "Wicked/Physics/TileMapCollisionStepper"
  ],
  "AllegroFlare/Physics/AABB2D": [
    "AllegroFlare/Physics/TileMapCollisionStepper",
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "std/vector<AllegroFlare/Physics/Int2D>": [
    "AllegroFlare/Physics/TileMapCollisionStepper"
  ],
  "std/pair<int, int>": [
    "AllegroFlare/Physics/TileMapCollisionStepper",
    "AllegroFlare/VirtualControlsProcessor",
    "Wicked/Physics/TileMapCollisionStepper"
  ],
  "AllegroFlare/TileMaps/TileMap": [
    "AllegroFlare/Physics/TileMapCollisionStepper",
    "AllegroFlare/Prototypes/MindDive/Tunnel",
    "AllegroFlare/Prototypes/MindDive/TunnelMesh",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory",
    "AllegroFlare/Prototypes/Platforming2D/Entities/TileMaps/Basic2D",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Prototypes/Platforming2D/TMJMeshLoader",
    "AllegroFlare/Prototypes/TileDrive/TerrainMesh",
    "AllegroFlare/TileMaps/Basic2D",
    "Tileo/TMJMeshLoader",
    "Wicked/Entities/Basic2DFactory",
    "Wicked/Physics/TileMapCollisionStepper",
    "WickedDemos/TileDemo",
    "WickedDemos/TileDemo",
    "WickedDemos/TileMaps/Basic2D"
  ],
  "AllegroFlare/Physics/Int2D": [
    "AllegroFlare/Physics/TileMapCollisionStepper",
    "AllegroFlare/Physics/TileMapCollisionStepperCollisionInfo"
  ],
  "AllegroFlare/Physics/TileMapCollisionStepperCollisionInfo": [
    "AllegroFlare/Physics/TileMapCollisionStepper",
    "AllegroFlare/Physics/TileMapCollisionStepperStepResult"
  ],
  "AllegroFlare/Model3D": [
    "AllegroFlare/Prototypes/CubeShooter/Entity"
  ],
  "AllegroFlare/Vec3D": [
    "AllegroFlare/Prototypes/CubeShooter/Entity",
    "AllegroFlare/Prototypes/CubeShooter/PlayerMovementControl",
    "AllegroFlare/Prototypes/CubeShooter/Screen",
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/MindDive/TunnelMeshSurferCollisionResolver",
    "AllegroFlare/Prototypes/TileDrive/TerrainMeshDriverCollisionResolver",
    "AllegroFlare/Prototypes/TileDrive/TileDrive",
    "AllegroFlare/Shaders/Cubemap"
  ],
  "AllegroFlare/Prototypes/CubeShooter/Entity": [
    "AllegroFlare/Prototypes/CubeShooter/EntityFactory",
    "AllegroFlare/Prototypes/CubeShooter/PlayerMovementControl",
    "AllegroFlare/Prototypes/CubeShooter/Screen"
  ],
  "AllegroFlare/ModelBin": [
    "AllegroFlare/Prototypes/CubeShooter/EntityFactory",
    "AllegroFlare/Prototypes/CubeShooter/Runner",
    "AllegroFlare/Prototypes/CubeShooter/Screen"
  ],
  "AllegroFlare/Prototypes/CubeShooter/Screen": [
    "AllegroFlare/Prototypes/CubeShooter/Runner"
  ],
  "AllegroFlare/Camera3D": [
    "AllegroFlare/Prototypes/CubeShooter/Screen",
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "AllegroFlare/Prototypes/CubeShooter/EntityFactory": [
    "AllegroFlare/Prototypes/CubeShooter/Screen"
  ],
  "AllegroFlare/Prototypes/CubeShooter/PlayerMovementControl": [
    "AllegroFlare/Prototypes/CubeShooter/Screen"
  ],
  "AllegroFlare/Prototypes/CubeShooter/Shaders/DepthDarken": [
    "AllegroFlare/Prototypes/CubeShooter/Screen"
  ],
  "AllegroFlare/Prototypes/CubeShooter/Shaders/Multiply": [
    "AllegroFlare/Prototypes/CubeShooter/Screen"
  ],
  "AllegroFlare/Prototypes/CubeShooter/Shaders/Fog": [
    "AllegroFlare/Prototypes/CubeShooter/Screen"
  ],
  "AllegroFlare/Shader": [
    "AllegroFlare/Prototypes/CubeShooter/Screen",
    "AllegroFlare/Prototypes/CubeShooter/Shaders/DepthDarken",
    "AllegroFlare/Prototypes/CubeShooter/Shaders/Fog",
    "AllegroFlare/Prototypes/CubeShooter/Shaders/Multiply",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Shaders/Base",
    "Tileo/Shaders/Base"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper": [
    "AllegroFlare/Prototypes/CubeShooter/Shaders/Fog",
    "AllegroFlare/Prototypes/CubeShooter/Shaders/Multiply",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Room",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/Entities/Base": [
    "AllegroFlare/Prototypes/FixedRoom2D/Configuration",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader",
    "AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper",
    "AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper",
    "AllegroFlare/Prototypes/FixedRoom2D/EntityFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Room"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/Room": [
    "AllegroFlare/Prototypes/FixedRoom2D/Configuration",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/Script": [
    "AllegroFlare/Prototypes/FixedRoom2D/Configuration",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/EntityFactory": [
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory": [
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/Configuration": [
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory",
    "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/EventNames": [
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CloseDialog": [
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/Elements/DialogBoxRenderer": [
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/InventoryDictionaryItems/WithAttributes": [
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/Elements/DialogBoxFactory": [
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem",
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotAnItemDialog": [
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/DialogEventDatas/CreateYouGotEvidenceDialog": [
    "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem"
  ],
  "std/vector<AllegroFlare/Prototypes/FixedRoom2D/Entities/Base>": [
    "AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper",
    "AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper"
  ],
  "std/map<int, AllegroFlare/Prototypes/FixedRoom2D/Entities/Base>": [
    "AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper"
  ],
  "std/map<std/string, AllegroFlare/Prototypes/FixedRoom2D/Entities/Base>": [
    "AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory"
  ],
  "std/map<std/string, std/string>": [
    "AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper",
    "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/Cursor": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Room"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Room",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/InteractionEventData": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Room",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/InitiateDialog": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectItem": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/EnterRoom": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationLoader": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/ConfigurationFactory": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/AudioController": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/EventNames/": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/DialogSystem": [
    "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/RoomDictionary": [
    "AllegroFlare/Prototypes/FixedRoom2D/Room",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/EventNames/INTERACTION_EVENT_NAME": [
    "AllegroFlare/Prototypes/FixedRoom2D/Room",
    "AllegroFlare/Prototypes/FixedRoom2D/Screen"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/FixedRoom2D": [
    "AllegroFlare/Prototypes/FixedRoom2D/Screen"
  ],
  "std/pair<std/string, std/string>": [
    "AllegroFlare/Prototypes/FixedRoom2D/Script"
  ],
  "AllegroFlare/php/trim": [
    "AllegroFlare/Prototypes/FixedRoom2D/Script",
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard"
  ],
  "std/map<std/string, int>": [
    "AllegroFlare/Prototypes/FixedRoom2D/Script"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/EventNames/SCRIPT_EVENT_NAME": [
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/ScriptEventDatas/CollectEvidence": [
    "AllegroFlare/Prototypes/FixedRoom2D/ScriptRunner"
  ],
  "AllegroFlare/Elements/Stopwatch": [
    "AllegroFlare/Prototypes/MindDive/Hud/Hud",
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/TileDrive/Hud/Hud",
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "AllegroFlare/Camera2D": [
    "AllegroFlare/Prototypes/MindDive/Hud/Hud",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Prototypes/TileDrive/Hud/Hud"
  ],
  "ALLEGRO_EVENT_QUEUE": [
    "AllegroFlare/Prototypes/MindDive/Hypersync"
  ],
  "ALLEGRO_AUDIO_STREAM": [
    "AllegroFlare/Prototypes/MindDive/Hypersync"
  ],
  "ALLEGRO_VOICE": [
    "AllegroFlare/Prototypes/MindDive/Hypersync"
  ],
  "AllegroFlare/Prototypes/MindDive/TunnelMesh": [
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/MindDive/TunnelMeshFactory",
    "AllegroFlare/Prototypes/MindDive/TunnelMeshSurferCollisionResolver",
    "AllegroFlare/Prototypes/MindDive/TunnelRenderer"
  ],
  "glCullFace": [
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "AllegroFlare/Prototypes/MindDive/TunnelMeshFactory": [
    "AllegroFlare/Prototypes/MindDive/MindDive"
  ],
  "AllegroFlare/Prototypes/MindDive/Hud/Hud": [
    "AllegroFlare/Prototypes/MindDive/MindDive"
  ],
  "AllegroFlare/Prototypes/MindDive/TunnelMeshSurferCollisionResolver": [
    "AllegroFlare/Prototypes/MindDive/MindDive"
  ],
  "AllegroFlare/Physics/TileMapCollisionStepperStepResult": [
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/MindDive/TunnelMeshSurferCollisionResolver",
    "AllegroFlare/Prototypes/TileDrive/Screen",
    "AllegroFlare/Prototypes/TileDrive/TerrainMeshDriverCollisionResolver",
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "AllegroFlare/Prototypes/MindDive/Hypersync": [
    "AllegroFlare/Prototypes/MindDive/MindDive",
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "AllegroFlare/Prototypes/MindDive/TunnelTiles/Base": [
    "AllegroFlare/Prototypes/MindDive/Tunnel",
    "AllegroFlare/Prototypes/MindDive/TunnelTiles/Basic"
  ],
  "al_is_image_addon_initialized": [
    "AllegroFlare/Prototypes/MindDive/TunnelMesh",
    "AllegroFlare/Prototypes/TileDrive/TerrainMesh",
    "AllegroFlare/TileMaps/Basic2D"
  ],
  "AllegroFlare/TileMaps/PrimMeshAtlas": [
    "AllegroFlare/Prototypes/MindDive/TunnelMesh",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory",
    "AllegroFlare/Prototypes/Platforming2D/Entities/TileMaps/Basic2D",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Prototypes/Platforming2D/TMJMeshLoader",
    "AllegroFlare/Prototypes/TileDrive/TerrainMesh",
    "AllegroFlare/TileMaps/Basic2D",
    "Tileo/MeshWithNormals",
    "Tileo/TMJMeshLoader",
    "Wicked/Entities/Basic2DFactory",
    "WickedDemos/TileDemo",
    "WickedDemos/TileMaps/Basic2D"
  ],
  "AllegroFlare/TileMaps/PrimMesh": [
    "AllegroFlare/Prototypes/MindDive/TunnelMesh",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory",
    "AllegroFlare/Prototypes/Platforming2D/Entities/TileMaps/Basic2D",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Prototypes/Platforming2D/TMJMeshLoader",
    "AllegroFlare/Prototypes/TileDrive/TerrainMesh",
    "AllegroFlare/TileMaps/Basic2D",
    "Tileo/TMJMeshLoader",
    "Wicked/Entities/Basic2DFactory",
    "WickedDemos/TileDemo",
    "WickedDemos/TileDemo",
    "WickedDemos/TileMaps/Basic2D"
  ],
  "AllegroFlare/Prototypes/MindDive/TunnelMeshTMJDataLoader": [
    "AllegroFlare/Prototypes/MindDive/TunnelMeshFactory"
  ],
  "AllegroFlare/Physics/TileMapCollisionStepper": [
    "AllegroFlare/Prototypes/MindDive/TunnelMeshSurferCollisionResolver",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Prototypes/TileDrive/TerrainMeshDriverCollisionResolver"
  ],
  "std/ifstream": [
    "AllegroFlare/Prototypes/MindDive/TunnelMeshTMJDataLoader",
    "AllegroFlare/Prototypes/Platforming2D/TMJDataLoader",
    "AllegroFlare/Prototypes/TileDrive/TerrainMeshTMJDataLoader",
    "Tileo/TMJDataLoader"
  ],
  "std/filesystem/exists": [
    "AllegroFlare/Prototypes/MindDive/TunnelMeshTMJDataLoader",
    "AllegroFlare/Prototypes/Platforming2D/TMJDataLoader",
    "AllegroFlare/Prototypes/TileDrive/TerrainMeshTMJDataLoader",
    "Tileo/TMJDataLoader"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/Base": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D"
  ],
  "AllegroFlare/Prototypes/Platforming2D/EntityFlagNames": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2D",
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory",
    "AllegroFlare/Prototypes/Platforming2D/Entities/FrameAnimated2D",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FlappingWithRandomness",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/ReflectOffWalls",
    "AllegroFlare/Prototypes/Platforming2D/EntityCollectionHelper",
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "AllegroFlare/vec2d": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Anchored",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Flapping",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FlappingWithRandomness",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveInDirection",
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/VirtualControls",
    "Wicked/Entities/Basic2DFactory",
    "Wicked/Entities/MovementStrategies2D/Anchored",
    "Wicked/Entities/MovementStrategies2D/Flapping",
    "Wicked/Entities/MovementStrategies2D/FlappingWithRandomness",
    "Wicked/Entities/MovementStrategies2D/MoveInDirection",
    "Wicked/Entities/Zones/Base2D",
    "Wicked/Entities/Zones/Rectangle2D",
    "WickedDemos/TileDemo"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveLeft": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveRight": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/StayStill": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/BackAndForthHorizontal": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/HoppingLeft": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Tracking": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FallOnTrackingRange": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/ReflectOffWalls": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveInDirection": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Flapping": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FlappingWithRandomness": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/Doors/Basic2D": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory",
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/TileMaps/Basic2D": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory",
    "AllegroFlare/Prototypes/Platforming2D/EntityCollectionHelper",
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "AllegroFlare/Prototypes/Platforming2D/TMJMeshLoader": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/Enemies/Base": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory"
  ],
  "AllegroFlare/FrameAnimation/Book": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory",
    "AllegroFlare/Prototypes/Platforming2D/Entities/FrameAnimated2D"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/FrameAnimated2D": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Basic2DFactory"
  ],
  "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Base": [
    "AllegroFlare/Prototypes/Platforming2D/Entities/Enemies/Base",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Anchored",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/BackAndForthHorizontal",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FallOnTrackingRange",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Flapping",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/FlappingWithRandomness",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/HoppingLeft",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveInDirection",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveLeft",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/MoveRight",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/ReflectOffWalls",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/StayStill",
    "AllegroFlare/Prototypes/Platforming2D/Entities/MovementStrategies2D/Tracking"
  ],
  "std/map<int, int>": [
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/VirtualControlsProcessor",
    "WickedDemos/TileDemo"
  ],
  "AllegroFlare/VirtualControls": [
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/Screens/Achievements",
    "AllegroFlare/Screens/GameOverScreen",
    "AllegroFlare/Screens/GameWonScreen",
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/Storyboard",
    "AllegroFlare/Screens/TitleScreen",
    "AllegroFlare/VirtualControlsProcessor",
    "WickedDemos/TileDemo"
  ],
  "AllegroFlare/VirtualControlsProcessor": [
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "WickedDemos/TileDemo"
  ],
  "AllegroFlare/EventNames": [
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/VirtualControlsProcessor",
    "WickedDemos/TileDemo"
  ],
  "AllegroFlare/Screen": [
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "WickedDemos/TileDemo"
  ],
  "AllegroFlare/CameraControlStrategies2D/Snap": [
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "AllegroFlare/CameraControlStrategies2D/SmoothSnap": [
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "AllegroFlare/CameraControlStrategies2D/SmoothSnapWithZoomEffect": [
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "AllegroFlare/CameraControlStrategies2D/HorizontalRail": [
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "AllegroFlare/Prototypes/Platforming2D/EntityCollectionHelper": [
    "AllegroFlare/Prototypes/Platforming2D/Screen"
  ],
  "std/find": [
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "AllegroFlare/SceneGraph/EntityPool",
    "WickedDemos/TileDemo"
  ],
  "AllegroFlare/Display": [
    "AllegroFlare/Prototypes/Platforming2D/Screen",
    "WickedDemos/TileDemo",
    "WickedDemos/TileDemo"
  ],
  "ifstream": [
    "AllegroFlare/Prototypes/Platforming2D/TMJMeshLoader",
    "Tileo/TMJMeshLoader"
  ],
  "AllegroFlare/Prototypes/Platforming2D/TMJDataLoader": [
    "AllegroFlare/Prototypes/Platforming2D/TMJMeshLoader"
  ],
  "AllegroFlare/Prototypes/TileDrive/TileDrive": [
    "AllegroFlare/Prototypes/TileDrive/Screen",
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "AllegroFlare/Prototypes/TileDrive/TerrainMesh": [
    "AllegroFlare/Prototypes/TileDrive/Screen",
    "AllegroFlare/Prototypes/TileDrive/TerrainMeshDictionaryRecord",
    "AllegroFlare/Prototypes/TileDrive/TerrainMeshDriverCollisionResolver",
    "AllegroFlare/Prototypes/TileDrive/TerrainMeshFactory",
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "AllegroFlare/Prototypes/TileDrive/TerrainMeshDictionaryRecord": [
    "AllegroFlare/Prototypes/TileDrive/Screen",
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "AllegroFlare/Prototypes/TileDrive/TerrainMeshTMJDataLoader": [
    "AllegroFlare/Prototypes/TileDrive/TerrainMeshFactory"
  ],
  "AllegroFlare/Prototypes/TileDrive/TerrainMeshFactory": [
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "AllegroFlare/Prototypes/TileDrive/Hud/Hud": [
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "AllegroFlare/Prototypes/TileDrive/TerrainMeshDriverCollisionResolver": [
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "AllegroFlare/Elements/Backgrounds/Parallax": [
    "AllegroFlare/Prototypes/TileDrive/TileDrive"
  ],
  "ALLEGRO_DISPLAY": [
    "AllegroFlare/RenderSurfaces/DisplayBackbuffer",
    "AllegroFlare/RenderSurfaces/DisplayBackbufferSubBitmap",
    "AllegroFlare/Testing/WithAllegroRenderingFixture",
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "AllegroFlare/RenderSurfaces/Base": [
    "AllegroFlare/RenderSurfaces/DisplayBackbuffer",
    "AllegroFlare/RenderSurfaces/DisplayBackbufferSubBitmap"
  ],
  "AllegroFlare/SceneGraph/Entities/Base": [
    "AllegroFlare/SceneGraph/EntityPool"
  ],
  "std/unordered_set": [
    "AllegroFlare/SceneGraph/EntityPool"
  ],
  "AllegroFlare/Achievements": [
    "AllegroFlare/Screens/Achievements",
    "AllegroFlare/Screens/Achievements"
  ],
  "AllegroFlare/Elements/AchievementsList": [
    "AllegroFlare/Screens/Achievements"
  ],
  "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard": [
    "AllegroFlare/Screens/CharacterNameInput"
  ],
  "AllegroFlare/:VirtualControls/": [
    "AllegroFlare/Screens/CharacterNameInput"
  ],
  "ALLEGRO_FLARE_EVENT_START_TITLE_SCREEN": [
    "AllegroFlare/Screens/GameWonScreen"
  ],
  "ALLEGRO_FLARE_EVENT_START_NEW_GAME": [
    "AllegroFlare/Screens/PauseScreen",
    "AllegroFlare/Screens/TitleScreen"
  ],
  "AllegroFlare/Elements/RollingCredits/RollingCredits": [
    "AllegroFlare/Screens/RollingCredits"
  ],
  "std/vector<AllegroFlare/Elements/RollingCredits/Sections/Base>": [
    "AllegroFlare/Screens/RollingCredits"
  ],
  "AllegroFlare/Elements/Storyboard": [
    "AllegroFlare/Screens/Storyboard"
  ],
  "AllegroFlare/Shaders/Base": [
    "AllegroFlare/Shaders/AllegroDefault",
    "AllegroFlare/Shaders/Cubemap",
    "AllegroFlare/Shaders/PostProcessing/Blinds",
    "AllegroFlare/Shaders/PostProcessing/DipToBlack",
    "AllegroFlare/Shaders/PostProcessing/Wipe"
  ],
  "AllegroFlare/Cubemap": [
    "AllegroFlare/Shaders/Cubemap"
  ],
  "ALLEGRO_TRANSFORM": [
    "AllegroFlare/Shaders/Cubemap"
  ],
  "tsl/ordered_map": [
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard"
  ],
  "AllegroFlare/SoftwareKeyboard/KeyboardKey": [
    "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard"
  ],
  "std/vector<ALLEGRO_BITMAP>": [
    "AllegroFlare/StoryboardFactory"
  ],
  "AllegroFlare/Elements/StoryboardPages/Text": [
    "AllegroFlare/StoryboardFactory",
    "AllegroFlare/StoryboardPageFactory",
    "AllegroFlare/StoryboardPageFactory"
  ],
  "AllegroFlare/Elements/StoryboardPages/Image": [
    "AllegroFlare/StoryboardFactory",
    "AllegroFlare/StoryboardFactory",
    "AllegroFlare/StoryboardPageFactory",
    "AllegroFlare/StoryboardPageFactory"
  ],
  "AllegroFlare/Elements/StoryboardPages/AdvancingText": [
    "AllegroFlare/StoryboardFactory",
    "AllegroFlare/StoryboardFactory",
    "AllegroFlare/StoryboardPageFactory",
    "AllegroFlare/StoryboardPageFactory"
  ],
  "AllegroFlare/Screens/Storyboard": [
    "AllegroFlare/StoryboardFactory",
    "AllegroFlare/StoryboardFactory"
  ],
  "AllegroFlare/StoryboardPageFactory": [
    "AllegroFlare/StoryboardFactory"
  ],
  "AllegroFlare/Version": [
    "AllegroFlare/SystemInfo"
  ],
  "std/thread/hardware_concurrency": [
    "AllegroFlare/SystemInfo"
  ],
  "AllegroFlare/SystemInfoFetcher": [
    "AllegroFlare/SystemInfo"
  ],
  "ALLEGRO_STATE": [
    "AllegroFlare/Testing/Rulers"
  ],
  "AllegroFlare/Testing/CustomComparison": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "al_init_primitives_addon": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "al_init_ttf_addon": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "al_init_font_addon": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "al_init_image_addon": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "std/chrono/milliseconds": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "std/this_thread/sleep_for": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "AllegroFlare/DeploymentEnvironment": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "AllegroFlare/TileMaps/AutoTile/FilterMatrix": [
    "AllegroFlare/TileMaps/AutoTile/FilterMatrix",
    "AllegroFlare/TileMaps/AutoTile/Filters/Base",
    "AllegroFlare/TileMaps/AutoTile/Filters/BasicFloor",
    "AllegroFlare/TileMaps/AutoTile/Filters/BasicSolid",
    "AllegroFlare/TileMaps/AutoTile/Filters/FortyEightEdges",
    "AllegroFlare/TileMaps/AutoTile/Filters/SixteenEdges"
  ],
  "AllegroFlare/TileMaps/AutoTile/Filters/Base": [
    "AllegroFlare/TileMaps/AutoTile/Filters/Basic",
    "AllegroFlare/TileMaps/AutoTile/Filters/BasicFloor",
    "AllegroFlare/TileMaps/AutoTile/Filters/BasicSolid",
    "AllegroFlare/TileMaps/AutoTile/Filters/Fill",
    "AllegroFlare/TileMaps/AutoTile/Filters/FortyEightEdges",
    "AllegroFlare/TileMaps/AutoTile/Filters/SixteenEdges"
  ],
  "ALLEGRO_VERTEX_DECL": [
    "AllegroFlare/TileMaps/MultiMesh",
    "Tileo/MeshWithNormals",
    "Tileo/TileoTileVertexAllegroVertexDeclaration"
  ],
  "ALLEGRO_VERTEX_BUFFER": [
    "AllegroFlare/TileMaps/MultiMesh"
  ],
  "AllegroFlare/TileMaps/MultiMeshUV": [
    "AllegroFlare/TileMaps/MultiMeshUVAtlas"
  ],
  "std/time_t": [
    "AllegroFlare/TimeStamper"
  ],
  "cross_product": [
    "AllegroFlare/Useful3D/Triangle"
  ],
  "AllegroFlare/vec3d": [
    "AllegroFlare/Useful3D/Triangle",
    "Tileo/Shaders/MeshWithNormals",
    "Wicked/Entities/Zones/Base3D",
    "Wicked/Entities/Zones/Rectangle3D"
  ],
  "AllegroFlare/Useful3D/build_vertex": [
    "AllegroFlare/Useful3D/Triangle"
  ],
  "AllegroFlare/Useful3D/Ray": [
    "AllegroFlare/Useful3D/Triangle",
    "AllegroFlare/Useful3D/Triangle"
  ],
  "AllegroFlare/Useful3D/IntersectData": [
    "AllegroFlare/Useful3D/Triangle",
    "AllegroFlare/Useful3D/Triangle"
  ],
  "ALLEGRO_KEY_": [
    "AllegroFlare/VirtualControlsProcessor"
  ],
  "std/map<int, std/pair<int, int>>": [
    "AllegroFlare/VirtualControlsProcessor"
  ],
  "Tileo/TileoTileVertexAllegroVertexDeclaration": [
    "Tileo/MeshWithNormals"
  ],
  "TILEO_TILE_VERTEX": [
    "Tileo/MeshWithNormals",
    "Tileo/TileoTileVertexAllegroVertexDeclaration"
  ],
  "Tileo/Shaders/Base": [
    "Tileo/Shaders/AllegroDefault",
    "Tileo/Shaders/MeshWithNormals"
  ],
  "Tileo/TMJDataLoader": [
    "Tileo/TMJMeshLoader"
  ],
  "Wicked/Entities/Basic2D": [
    "Wicked/CameraControlStrategies2D/HorizontalRail",
    "Wicked/CameraControlStrategies2D/SmoothSnap",
    "Wicked/CameraControlStrategies2D/Snap",
    "Wicked/Entities/Basic2DFactory",
    "Wicked/Entities/CollectionHelper",
    "Wicked/Entities/Doors/Basic2D",
    "Wicked/Entities/Enemies/Base",
    "Wicked/Entities/MovementStrategies2D/Anchored",
    "Wicked/Entities/MovementStrategies2D/BackAndForthHorizontal",
    "Wicked/Entities/MovementStrategies2D/FallOnTrackingRange",
    "Wicked/Entities/MovementStrategies2D/Flapping",
    "Wicked/Entities/MovementStrategies2D/FlappingWithRandomness",
    "Wicked/Entities/MovementStrategies2D/HoppingLeft",
    "Wicked/Entities/MovementStrategies2D/MoveInDirection",
    "Wicked/Entities/MovementStrategies2D/MoveLeft",
    "Wicked/Entities/MovementStrategies2D/MoveRight",
    "Wicked/Entities/MovementStrategies2D/ReflectOffWalls",
    "Wicked/Entities/MovementStrategies2D/StayStill",
    "Wicked/Entities/MovementStrategies2D/Tracking",
    "WickedDemos/TileDemo",
    "WickedDemos/TileDemo",
    "WickedDemos/TileMaps/Basic2D"
  ],
  "Wicked/CameraControlStrategies2D/Base": [
    "Wicked/CameraControlStrategies2D/HorizontalRail",
    "Wicked/CameraControlStrategies2D/SmoothSnap",
    "Wicked/CameraControlStrategies2D/Snap",
    "WickedDemos/TileDemo",
    "WickedDemos/TileDemo"
  ],
  "Wicked/Entities/Base": [
    "Wicked/Entities/Basic2D",
    "Wicked/Entities/Basic3D",
    "Wicked/Entities/Zones/Base2D",
    "Wicked/Entities/Zones/Base3D"
  ],
  "Wicked/EntityFlagNames": [
    "Wicked/Entities/Basic2D",
    "Wicked/Entities/Basic2DFactory",
    "Wicked/Entities/CollectionHelper",
    "Wicked/Entities/MovementStrategies2D/FlappingWithRandomness",
    "Wicked/Entities/MovementStrategies2D/ReflectOffWalls",
    "WickedDemos/TileDemo"
  ],
  "Wicked/Entities/MovementStrategies2D/MoveLeft": [
    "Wicked/Entities/Basic2DFactory"
  ],
  "Wicked/Entities/MovementStrategies2D/MoveRight": [
    "Wicked/Entities/Basic2DFactory"
  ],
  "Wicked/Entities/MovementStrategies2D/StayStill": [
    "Wicked/Entities/Basic2DFactory"
  ],
  "Wicked/Entities/MovementStrategies2D/BackAndForthHorizontal": [
    "Wicked/Entities/Basic2DFactory"
  ],
  "Wicked/Entities/MovementStrategies2D/HoppingLeft": [
    "Wicked/Entities/Basic2DFactory"
  ],
  "Wicked/Entities/MovementStrategies2D/Tracking": [
    "Wicked/Entities/Basic2DFactory"
  ],
  "Wicked/Entities/MovementStrategies2D/FallOnTrackingRange": [
    "Wicked/Entities/Basic2DFactory"
  ],
  "Wicked/Entities/MovementStrategies2D/ReflectOffWalls": [
    "Wicked/Entities/Basic2DFactory"
  ],
  "Wicked/Entities/MovementStrategies2D/MoveInDirection": [
    "Wicked/Entities/Basic2DFactory"
  ],
  "Wicked/Entities/MovementStrategies2D/Flapping": [
    "Wicked/Entities/Basic2DFactory"
  ],
  "Wicked/Entities/MovementStrategies2D/FlappingWithRandomness": [
    "Wicked/Entities/Basic2DFactory"
  ],
  "Wicked/Entities/Doors/Basic2D": [
    "Wicked/Entities/Basic2DFactory",
    "WickedDemos/TileDemo"
  ],
  "WickedDemos/TileMaps/Basic2D": [
    "Wicked/Entities/Basic2DFactory",
    "Wicked/Entities/CollectionHelper",
    "WickedDemos/TileDemo"
  ],
  "Tileo/TMJMeshLoader": [
    "Wicked/Entities/Basic2DFactory",
    "WickedDemos/TileDemo"
  ],
  "Wicked/Entities/Enemies/Base": [
    "Wicked/Entities/Basic2DFactory"
  ],
  "Wicked/Entities/MovementStrategies2D/Base": [
    "Wicked/Entities/Enemies/Base",
    "Wicked/Entities/MovementStrategies2D/Anchored",
    "Wicked/Entities/MovementStrategies2D/BackAndForthHorizontal",
    "Wicked/Entities/MovementStrategies2D/FallOnTrackingRange",
    "Wicked/Entities/MovementStrategies2D/Flapping",
    "Wicked/Entities/MovementStrategies2D/FlappingWithRandomness",
    "Wicked/Entities/MovementStrategies2D/HoppingLeft",
    "Wicked/Entities/MovementStrategies2D/MoveInDirection",
    "Wicked/Entities/MovementStrategies2D/MoveLeft",
    "Wicked/Entities/MovementStrategies2D/MoveRight",
    "Wicked/Entities/MovementStrategies2D/ReflectOffWalls",
    "Wicked/Entities/MovementStrategies2D/StayStill",
    "Wicked/Entities/MovementStrategies2D/Tracking"
  ],
  "Wicked/Entities/Zones/Base2D": [
    "Wicked/Entities/Zones/Rectangle2D"
  ],
  "Wicked/Entities/Zones/Base3D": [
    "Wicked/Entities/Zones/Rectangle3D",
    "Wicked/Physics/EntityZoneCollisionObserver"
  ],
  "Wicked/Entities/Basic3D": [
    "Wicked/Physics/EntityZoneCollisionObserver"
  ],
  "std/set_difference": [
    "Wicked/Physics/EntityZoneCollisionObserver"
  ],
  "Wicked/Physics/AABB2D": [
    "Wicked/Physics/TileMapCollisionStepper",
    "WickedDemos/TileDemo"
  ],
  "std/vector<Wicked/Physics/Int2D>": [
    "Wicked/Physics/TileMapCollisionStepper"
  ],
  "Wicked/Physics/Int2D": [
    "Wicked/Physics/TileMapCollisionStepper"
  ],
  "Wicked/Weapons/Base": [
    "Wicked/Weapons/DrawnBow"
  ],
  "AllegroFlare/Interpolators": [
    "Wicked/Weapons/DrawnBow"
  ],
  "std/vector<Wicked/Entities/Basic2D>": [
    "WickedDemos/TileDemo"
  ],
  "Wicked/Entities/Basic2DFactory": [
    "WickedDemos/TileDemo"
  ],
  "AllegroFlare/Framework": [
    "WickedDemos/TileDemo"
  ],
  "Wicked/Physics/TileMapCollisionStepper": [
    "WickedDemos/TileDemo"
  ],
  "Wicked/Weapons/DrawnBow": [
    "WickedDemos/TileDemo"
  ],
  "Wicked/CameraControlStrategies2D/Snap": [
    "WickedDemos/TileDemo"
  ],
  "Wicked/CameraControlStrategies2D/SmoothSnap": [
    "WickedDemos/TileDemo"
  ],
  "Wicked/CameraControlStrategies2D/HorizontalRail": [
    "WickedDemos/TileDemo"
  ],
  "Wicked/Entities/CollectionHelper": [
    "WickedDemos/TileDemo"
  ],
  "std/vector<Wicked/Entities/Basic2D>&": [
    "WickedDemos/TileDemo"
  ]
}
</pre>
</body>