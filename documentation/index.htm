<!DOCTYPE html>
<head>
<style>
*
{
  font-family: 'Arial';
  padding: 3px 20px;
}
table td
{
  padding: 3px 20px;
}
.property
{
  color: blue;
}
.private_property
{
  color: lightblue;
}

.method
{
  color: red;
}

.private_method
{
  color: pink;
}

.dependency
{
  color: green;
}

.component
{
  padding: 20 10 20 10;
  margin: 20 10 20 10;
  background-color: #dfdfdf;
}

.component h3
{
}
</style>
</head>
<body>
<h1>TOC</h1>
<ul>
  <li><a href="#quintessence/AllegroFlare/AudioController.q.yml">quintessence/AllegroFlare/AudioController.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/AudioRepositoryElement.q.yml">quintessence/AllegroFlare/AudioRepositoryElement.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Bone3D.q.yml">quintessence/AllegroFlare/Bone3D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Bone3DGraphRenderer.q.yml">quintessence/AllegroFlare/Bone3DGraphRenderer.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Camera2D.q.yml">quintessence/AllegroFlare/Camera2D.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Cubemap.q.yml">quintessence/AllegroFlare/Cubemap.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Base.q.yml">quintessence/AllegroFlare/Elements/Base.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/HealthBars/Classic.q.yml">quintessence/AllegroFlare/Elements/HealthBars/Classic.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Elements/Text.q.yml">quintessence/AllegroFlare/Elements/Text.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/EventEmitter.q.yml">quintessence/AllegroFlare/EventEmitter.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Testing/WithAllegroRenderingFixture.q.yml">quintessence/AllegroFlare/Testing/WithAllegroRenderingFixture.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Useful3D/Triangle.q.yml">quintessence/AllegroFlare/Useful3D/Triangle.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Vec2B.q.yml">quintessence/AllegroFlare/Vec2B.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/Vec2I.q.yml">quintessence/AllegroFlare/Vec2I.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/VirtualControls.q.yml">quintessence/AllegroFlare/VirtualControls.q.yml</a></li>
  <li><a href="#quintessence/AllegroFlare/VirtualControlsProcessor.q.yml">quintessence/AllegroFlare/VirtualControlsProcessor.q.yml</a></li>
</ul>
<h1>Components</h1>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/AudioController.q.yml">quintessence/AllegroFlare/AudioController.q.yml</h3>
     <table>
<tr>
  <td class="private_property">sample_bin</td>
  <td class="private_property">AllegroFlare::SampleBin*</td>
</tr>
<tr>
  <td class="private_property">sound_effects_identifier_prefix</td>
  <td class="private_property">std::string</td>
</tr>
<tr>
  <td class="private_property">music_tracks_identifier_prefix</td>
  <td class="private_property">std::string</td>
</tr>
<tr>
  <td class="private_property">sound_effect_elements</td>
  <td class="private_property">std::map&lt;std::string, AllegroFlare::AudioRepositoryElement&gt;</td>
</tr>
<tr>
  <td class="private_property">music_track_elements</td>
  <td class="private_property">std::map&lt;std::string, AllegroFlare::AudioRepositoryElement&gt;</td>
</tr>
<tr>
  <td class="private_property">sound_effects</td>
  <td class="private_property">std::map&lt;std::string, AllegroFlare::Sound*&gt;</td>
</tr>
<tr>
  <td class="private_property">music_tracks</td>
  <td class="private_property">std::map&lt;std::string, AllegroFlare::Sound*&gt;</td>
</tr>
<tr>
  <td class="private_property">current_music_track_identifier</td>
  <td class="private_property">std::string</td>
</tr>
<tr>
  <td class="private_property">global_volume</td>
  <td class="private_property">float</td>
</tr>
<tr>
  <td class="private_property">output_loading_debug_to_cout</td>
  <td class="private_property">bool</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">music_tracks_loaded</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">sound_effects_loaded</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">set_and_load_sound_effect_elements(1)</td>
</tr>
<tr>
  <td class="method">set_and_load_music_track_elements(1)</td>
</tr>
<tr>
  <td class="private_method">load_sound_effects()</td>
</tr>
<tr>
  <td class="private_method">load_music_tracks()</td>
</tr>
<tr>
  <td class="private_method">destruct()</td>
</tr>
<tr>
  <td class="private_method">destruct_all()</td>
</tr>
<tr>
  <td class="private_method">destruct_all_sound_effects()</td>
</tr>
<tr>
  <td class="private_method">destruct_all_music_tracks()</td>
</tr>
<tr>
  <td class="method">stop_all()</td>
</tr>
<tr>
  <td class="private_method">stop_all_music_tracks()</td>
</tr>
<tr>
  <td class="private_method">stop_all_sound_effects()</td>
</tr>
<tr>
  <td class="method">set_global_volume(1)</td>
</tr>
<tr>
  <td class="method">play_sound_effect_by_identifier(1)</td>
</tr>
<tr>
  <td class="method">play_music_track_by_identifier(1)</td>
</tr>
<tr>
  <td class="private_method">find_sound_effect_by_identifier(1)</td>
</tr>
<tr>
  <td class="private_method">find_music_track_by_identifier(1)</td>
</tr>
<tr>
  <td class="method">dump_to_cout()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TerminalColors&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TerminalColors.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SampleBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SampleBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SampleBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SampleBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, AllegroFlare::AudioRepositoryElement&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;, &quot;AllegroFlare/AudioRepositoryElement.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, AllegroFlare::Sound*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;, &quot;AllegroFlare/Sound.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Sound*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Sound.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_audio_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_audio.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_acodec_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_acodec.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/AudioRepositoryElement.q.yml">quintessence/AllegroFlare/AudioRepositoryElement.q.yml</h3>
     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">loop</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Bone3D.q.yml">quintessence/AllegroFlare/Bone3D.q.yml</h3>
     <table>
<tr>
  <td class="property">children</td>
  <td class="property">std::vector&lt;AllegroFlare::Bone3D*&gt;</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">add_child(1)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;AllegroFlare::Bone3D*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;AllegroFlare/Bone3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Bone3D*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Bone3D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Bone3DGraphRenderer.q.yml">quintessence/AllegroFlare/Bone3DGraphRenderer.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">root_bone</td>
  <td class="property">AllegroFlare::Bone3D*</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">render_recursive(1)</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Bone3D*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Bone3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_font_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::draw_3d_line&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful3D/Useful3D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Camera2D.q.yml">quintessence/AllegroFlare/Camera2D.q.yml</h3>
     <table>
<tr>
  <td class="property">zoom</td>
  <td class="property">float</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">set_zoom(1)</td>
</tr>
<tr>
  <td class="method">setup_dimentional_projection()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;tan&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Cubemap.q.yml">quintessence/AllegroFlare/Cubemap.q.yml</h3>
     <table>
<tr>
  <td class="property">id</td>
  <td class="property">GLuint</td>
</tr>
    </table>
     <table>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;GLuint&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_opengl.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Base.q.yml">quintessence/AllegroFlare/Elements/Base.q.yml</h3>
     <table>
<tr>
  <td class="property">placement</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ElementID&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ElementID.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/HealthBars/Classic.q.yml">quintessence/AllegroFlare/Elements/HealthBars/Classic.q.yml</h3>
     <table>
<tr>
  <td class="property">max</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">value</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Elements/Text.q.yml">quintessence/AllegroFlare/Elements/Text.q.yml</h3>
     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">fit_placement_width_and_height_to_text()</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/EventEmitter.q.yml">quintessence/AllegroFlare/EventEmitter.q.yml</h3>
     <table>
<tr>
  <td class="property">event_source</td>
  <td class="property">ALLEGRO_EVENT_SOURCE</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">emit_event(5)</td>
</tr>
<tr>
  <td class="method">emit_screen_switch_event(1)</td>
</tr>
<tr>
  <td class="method">emit_exit_game_event()</td>
</tr>
<tr>
  <td class="method">emit_play_sound_effect_event(1)</td>
</tr>
<tr>
  <td class="method">emit_play_music_track_event(1)</td>
</tr>
<tr>
  <td class="method">emit_virtual_controls_button_up_event(1)</td>
</tr>
<tr>
  <td class="method">emit_virtual_controls_button_down_event(1)</td>
</tr>
<tr>
  <td class="method">emit_virtual_controls_axis_change_event(3)</td>
</tr>
<tr>
  <td class="method">TODO()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT_SOURCE&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_EXIT_GAME&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_SCREEN_SWITCH_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Testing/WithAllegroRenderingFixture.q.yml">quintessence/AllegroFlare/Testing/WithAllegroRenderingFixture.q.yml</h3>
     <table>
<tr>
  <td class="property">display</td>
  <td class="property">ALLEGRO_DISPLAY*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">SetUp()</td>
</tr>
<tr>
  <td class="method">TearDown()</td>
</tr>
<tr>
  <td class="method">get_any_font()</td>
</tr>
<tr>
  <td class="method">sleep_for_frame()</td>
</tr>
<tr>
  <td class="method">sleep_for(1)</td>
</tr>
<tr>
  <td class="method">get_test_name()</td>
</tr>
<tr>
  <td class="method">get_test_suite_name()</td>
</tr>
<tr>
  <td class="method">build_centered_placement(2)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Testing::CustomComparison&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Testing/CustomComparison.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_primitives_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_ttf_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_ttf.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_font_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_image_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_image.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:testing::Test&quot;, &quot;headers&quot;=&gt;[&quot;gtest/gtest.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::chrono::milliseconds&quot;, &quot;headers&quot;=&gt;[&quot;chrono&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::this_thread::sleep_for&quot;, &quot;headers&quot;=&gt;[&quot;thread&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Useful3D/Triangle.q.yml">quintessence/AllegroFlare/Useful3D/Triangle.q.yml</h3>
     <table>
<tr>
  <td class="property">v0</td>
  <td class="property">AllegroFlare::vec3d</td>
</tr>
<tr>
  <td class="property">v1</td>
  <td class="property">AllegroFlare::vec3d</td>
</tr>
<tr>
  <td class="property">v2</td>
  <td class="property">AllegroFlare::vec3d</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">intersect(2)</td>
</tr>
<tr>
  <td class="method">draw(1)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;cross_product&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec3d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Useful3D::build_vertex&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Useful3D::Ray*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful3D/Ray.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Useful3D::IntersectData*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful3D/IntersectData.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Vec2B.q.yml">quintessence/AllegroFlare/Vec2B.q.yml</h3>
     <table>
<tr>
  <td class="property">x</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/Vec2I.q.yml">quintessence/AllegroFlare/Vec2I.q.yml</h3>
     <table>
<tr>
  <td class="property">x</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">int</td>
</tr>
    </table>
     <table>
    </table>
     <table>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/VirtualControls.q.yml">quintessence/AllegroFlare/VirtualControls.q.yml</h3>
     <table>
<tr>
  <td class="property">BUTTON_UP</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">BUTTON_DOWN</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">BUTTON_LEFT</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">BUTTON_RIGHT</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">BUTTON_A</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">BUTTON_B</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">BUTTON_X</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">BUTTON_Y</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">BUTTON_START</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">BUTTON_RIGHT_BUMPER</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">BUTTON_LEFT_BUMPER</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">PRIMARY_STICK</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">SECONDARY_STICK</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">right_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">left_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">up_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">down_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">a_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">b_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">x_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">y_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">left_bumper_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">right_bumper_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">start_button_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">primary_stick_position</td>
  <td class="property">AllegroFlare::vec2d</td>
</tr>
<tr>
  <td class="property">secondary_stick_position</td>
  <td class="property">AllegroFlare::vec2d</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">clear()</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::vec2d&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/AllegroFlare/VirtualControlsProcessor.q.yml">quintessence/AllegroFlare/VirtualControlsProcessor.q.yml</h3>
     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">keyboard_button_map</td>
  <td class="property">std::map&lt;int, int&gt;</td>
</tr>
<tr>
  <td class="property">joystick_button_map</td>
  <td class="property">std::map&lt;int, int&gt;</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">build_sensible_joystick_button_map()</td>
</tr>
<tr>
  <td class="method">build_sensible_keyboard_button_map()</td>
</tr>
<tr>
  <td class="method">handle_raw_keyboard_key_down_event(1)</td>
</tr>
<tr>
  <td class="method">handle_raw_keyboard_key_up_event(1)</td>
</tr>
<tr>
  <td class="method">handle_raw_joystick_button_down_event(1)</td>
</tr>
<tr>
  <td class="method">handle_raw_joystick_button_up_event(1)</td>
</tr>
<tr>
  <td class="method">handle_raw_joystick_axis_change_event(1)</td>
</tr>
<tr>
  <td class="private_method">get_joystick_mapped_virtual_button(1)</td>
</tr>
<tr>
  <td class="private_method">get_keyboard_mapped_virtual_button(1)</td>
</tr>
<tr>
  <td class="method">emit_virtual_controls_button_up_event(1)</td>
</tr>
<tr>
  <td class="method">emit_virtual_controls_button_down_event(1)</td>
</tr>
<tr>
  <td class="method">emit_virtual_controls_axis_change_event(3)</td>
</tr>
    </table>
     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_KEY_*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControls&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControls.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;int, int&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;]}</td>
</tr>
    </table>
  </div>
</ul>
<h1>Dependents</h1>
<pre>
{
  "AllegroFlare/TerminalColors": [
    "AllegroFlare/AudioController"
  ],
  "AllegroFlare/SampleBin": [
    "AllegroFlare/AudioController",
    "AllegroFlare/AudioController"
  ],
  "std/map<std/string, AllegroFlare/AudioRepositoryElement>": [
    "AllegroFlare/AudioController"
  ],
  "std/map<std/string, AllegroFlare/Sound>": [
    "AllegroFlare/AudioController"
  ],
  "AllegroFlare/Sound": [
    "AllegroFlare/AudioController"
  ],
  "al_is_audio_initialized": [
    "AllegroFlare/AudioController"
  ],
  "al_is_acodec_addon_initialized": [
    "AllegroFlare/AudioController"
  ],
  "AllegroFlare/Placement3D": [
    "AllegroFlare/Bone3D"
  ],
  "std/vector<AllegroFlare/Bone3D>": [
    "AllegroFlare/Bone3D"
  ],
  "AllegroFlare/Bone3D": [
    "AllegroFlare/Bone3D",
    "AllegroFlare/Bone3DGraphRenderer"
  ],
  "AllegroFlare/FontBin": [
    "AllegroFlare/Bone3DGraphRenderer",
    "AllegroFlare/Elements/Text",
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "ALLEGRO_FONT": [
    "AllegroFlare/Bone3DGraphRenderer",
    "AllegroFlare/Elements/Text",
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "al_is_system_installed": [
    "AllegroFlare/Bone3DGraphRenderer"
  ],
  "al_is_primitives_addon_initialized": [
    "AllegroFlare/Bone3DGraphRenderer",
    "AllegroFlare/Elements/HealthBars/Classic"
  ],
  "al_is_font_addon_initialized": [
    "AllegroFlare/Bone3DGraphRenderer"
  ],
  "AllegroFlare/draw_3d_line": [
    "AllegroFlare/Bone3DGraphRenderer"
  ],
  "AllegroFlare/Placement2D": [
    "AllegroFlare/Camera2D",
    "AllegroFlare/Elements/Base",
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "tan": [
    "AllegroFlare/Camera2D"
  ],
  "GLuint": [
    "AllegroFlare/Cubemap"
  ],
  "AllegroFlare/ElementID": [
    "AllegroFlare/Elements/Base"
  ],
  "AllegroFlare/Elements/Base": [
    "AllegroFlare/Elements/HealthBars/Classic",
    "AllegroFlare/Elements/Text"
  ],
  "ALLEGRO_COLOR": [
    "AllegroFlare/Elements/HealthBars/Classic",
    "AllegroFlare/Elements/Text",
    "AllegroFlare/Useful3D/Triangle"
  ],
  "al_draw_text": [
    "AllegroFlare/Elements/Text"
  ],
  "ALLEGRO_EVENT_SOURCE": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_EVENT_EXIT_GAME": [
    "AllegroFlare/EventEmitter"
  ],
  "ALLEGRO_FLARE_SCREEN_SWITCH_EVENT": [
    "AllegroFlare/EventEmitter"
  ],
  "AllegroFlare/Testing/CustomComparison": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "al_init_primitives_addon": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "al_init_ttf_addon": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "al_init_font_addon": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "al_init_image_addon": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "ALLEGRO_DISPLAY": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "AllegroFlare/BitmapBin": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  ":testing/Test": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "std/chrono/milliseconds": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "std/this_thread/sleep_for": [
    "AllegroFlare/Testing/WithAllegroRenderingFixture"
  ],
  "cross_product": [
    "AllegroFlare/Useful3D/Triangle"
  ],
  "AllegroFlare/vec3d": [
    "AllegroFlare/Useful3D/Triangle"
  ],
  "AllegroFlare/Useful3D/build_vertex": [
    "AllegroFlare/Useful3D/Triangle"
  ],
  "AllegroFlare/Useful3D/Ray": [
    "AllegroFlare/Useful3D/Triangle"
  ],
  "AllegroFlare/Useful3D/IntersectData": [
    "AllegroFlare/Useful3D/Triangle"
  ],
  "AllegroFlare/vec2d": [
    "AllegroFlare/VirtualControls"
  ],
  "AllegroFlare/EventNames": [
    "AllegroFlare/VirtualControlsProcessor"
  ],
  "AllegroFlare/EventEmitter": [
    "AllegroFlare/VirtualControlsProcessor"
  ],
  "ALLEGRO_EVENT": [
    "AllegroFlare/VirtualControlsProcessor"
  ],
  "ALLEGRO_KEY_": [
    "AllegroFlare/VirtualControlsProcessor"
  ],
  "AllegroFlare/VirtualControls": [
    "AllegroFlare/VirtualControlsProcessor"
  ],
  "std/map<int, int>": [
    "AllegroFlare/VirtualControlsProcessor"
  ]
}
</pre>
</body>