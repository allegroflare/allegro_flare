



#include <cmath>
#include <string>
#include <vector>
#include <iostream>
#include <algorithm>




#include <allegro_flare/allegro_flare.h>

#include <AllegroFlare/UsefulPHP.hpp>




using namespace allegro_flare;
using namespace AllegroFlare;



#define mapWidth (100)
#define mapHeight (100)



int worldMap[100][100] = {
   { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
      2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
      2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
      2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
      2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
      2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
      2, 2, 2, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 
      0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 27, 0, 3, 2, 0, 
      0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 2, 25, 0, 0, 0, 25, 2, 0, 
      0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 3, 2, 0, 
      0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 
      0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 
      2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 2, 
      0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 3, 2, 2, 
      0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 2, 25, 0, 0, 0, 25, 2, 2, 
      0, 25, 0, 25, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 3, 2, 2, 
      0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 2, 
      0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 
      2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 
      0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 
      0, 0, 0, 3, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 
      0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 
      0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 
      0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 
      0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 
      0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 
      0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 
      0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 
      0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 
      0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 
      0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
      2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 2, 2, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 2, 2, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 
      0, 0, 0, 2, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 2, 2, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 4, 0, 0, 0, 0, 25, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 2, 2, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 
      0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 2, 2, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 4, 0, 0, 0, 0, 25, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 2, 2, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 
      0, 0, 0, 2, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 2, 2, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 2, 2, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 2, 2, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 2, 2, 0, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 
      2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 2, 2, 0, 2, 2, 0, 0, 0, 0, 2, 4, 4, 4, 4, 4, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 2, 2, 0, 2, 2, 0, 0, 0, 0, 4, 4, 0, 0, 0, 4, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 4, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 2, 2, 0, 2, 2, 0, 0, 0, 0, 4, 4, 0, 0, 0, 4, 
      2, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 2, 2, 0, 2, 2, 0, 0, 0, 0, 2, 4, 0, 0, 0, 4, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 4, 0, 0, 0, 4, 
      2, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 2, 0, 2, 2, 2, 2, 0, 2, 2, 4, 4, 4, 4, 4, 
      2, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 
      2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
      2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 
      0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 2, 0, 25, 25, 25, 25, 25, 0, 2, 0, 0, 
      0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 
      0, 0, 27, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 
      0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 
      0, 0, 0, 4, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 
      2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
      2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
      0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 
      0, 0, 3, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
      2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 2 },
   { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
      2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
      2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
      2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
      2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
      2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
      2, 2, 2, 2 }
};




class StrippedTexture
{
public:
   ALLEGRO_BITMAP *parent_texture;
   std::vector<ALLEGRO_BITMAP *> strip;
   int height;

   StrippedTexture(ALLEGRO_BITMAP *parent_texture)
      : parent_texture(parent_texture)
      , strip()
      , height(0)
   {
      if (parent_texture)
      {
         height = al_get_bitmap_height(parent_texture);
         for (int x=0; x<al_get_bitmap_width(parent_texture); x++)
         {
            strip.push_back(al_create_sub_bitmap(parent_texture, x, 0, 1, height));
         }
      }
   }

   ~StrippedTexture()
   {
      for (unsigned i=0; i<strip.size(); i++)
         al_destroy_bitmap(strip[i]);
   }
};




class TextureBank
{
public:
   BitmapBin bitmaps;
   std::vector<StrippedTexture *> textures;

   TextureBank()
      : bitmaps()
      , textures()
   {
      bitmaps.set_full_path("/Users/markoates/Repos/allegro_flare/bin/data/raycast_demo/bitmaps");
   }

   bool load_texture(int index, std::string filename)
   {
      if (index < 0) return false;
      if (index >= (int)textures.size()) textures.resize(index+1, NULL);

      if (textures[index]) delete textures[index];
      textures[index] = new StrippedTexture(bitmaps[filename]);

      if (!textures[index]->parent_texture) return false;
      return false;
   }

   StrippedTexture *get(int index)
   {
      if (index < 0 || index >= (int)textures.size()) return NULL;
      return textures[index];
   }
};




class DepthCache
{
public:
   int tilex, tiley;
   int side;
   float wallx;
   int tileNum;

   DepthCache()
      : tilex(0)
      , tiley(0)
      , side(0)
      , wallx(0)
      , tileNum(0)
   {}
};




enum entity_t
{
   ITEM_UNDEF = 0,
   ITEM_CARD_KEY,
   ITEM_HEALTH
};




class ObjEntity
{
private:
   static float size;

public:
   ALLEGRO_BITMAP *image;
   float x, y;
   int type;
   bool active;

   ObjEntity()
      : image(NULL)
      , type(0)
      , x(random_float(2, 24*2-2))
      , y(random_float(2, 24*2-2))
      , active(false)
   {}

   bool collides(float x, float y)
   {
      float hsize = size/2;
      if (x < this->x-hsize) return false;
      if (x > this->x+hsize) return false;
      if (y < this->y-hsize) return false;
      if (y > this->y+hsize) return false;
      return true;
   }
};
float ObjEntity::size = 0.7f;




class ZObject
{
public:
   DepthCache *wall_stripe;
   ObjEntity *obj_entity;
   float distance;
   int x;
   bool in_use;

   ZObject()
      : wall_stripe(NULL)
      , obj_entity(NULL)
      , distance(0)
      , x(0)
      , in_use(false)
   {}
};




bool sort_depth_cache_ptr_func(const ZObject *dc1, const ZObject *dc2)
{
   return (dc1->distance < dc2->distance);
}




class ProfileTimer2
{
public:
   std::string identifier;
   bool timing;
   double start_time;
   double end_time;

   ProfileTimer2(std::string identifier)
      : identifier(identifier)
      , timing(false)
      , start_time(0)
      , end_time(0)
   {}

   void start()
   {
      if (timing) return;
      timing = true;
      start_time = al_get_time();
   }

   void stop()
   {
      if (!timing) return;
      end_time = al_get_time();
      timing = false;
   }

   double get_time()
   {
      if (!timing) return end_time - start_time;
      return 0.0;
   }
};




class MultiProfileTimer
{
public:
   std::vector<ProfileTimer2 *> timers;

   MultiProfileTimer()
   {}

   void start(std::string identifier)
   {
      get_timer(identifier)->start();
   }

   void stop(std::string identifier)
   {
      get_timer(identifier)->stop();
   }

   double get_time(std::string identifier)
   {
      return get_timer(identifier)->get_time();
   }

   ProfileTimer2 *get_timer(std::string identifier)
   {
      for (unsigned i=0; i<timers.size(); i++)
      {
         if (identifier == timers[i]->identifier) return timers[i];
      }
      ProfileTimer2 *timer = new ProfileTimer2(identifier);
      timers.push_back(timer);
      return timer;
   }

   void draw(ALLEGRO_FONT *font, int x, int y)
   {
      if (!font) return;
      int line_height = al_get_font_line_height(font) * 3 / 2;
      double time;
      for (unsigned i=0; i<timers.size(); i++)
      {
         time = timers[i]->get_time() * 60.0; // for 60.0fps
         al_draw_line(x, y+line_height, x+150, y+line_height, color::dodgerblue, 1);
         al_draw_line(x, y+line_height, x+150*time, y+line_height, (time > 1) ? color::red : color::orange, 8);
         al_draw_text(font, color::lightcoral, x, y, ALLEGRO_FLAGS_EMPTY, timers[i]->identifier.c_str());
         al_draw_text(font, color::black, x+160, y+line_height/2+2, ALLEGRO_FLAGS_EMPTY, php::number_format(time, 4).c_str());
         al_draw_text(font, color::white, x+160, y+line_height/2, ALLEGRO_FLAGS_EMPTY, php::number_format(time, 4).c_str());
         y += line_height;
      }
   }
};




inline float fast_absf(float g)
{
   unsigned int *gg;
   gg=(unsigned int*)&g;
   *(gg)&=2147483647u;
   return g;
}




inline unsigned int fast_absi(int g)
{
   if (g&2147483648u)
      return 2147483648u-(g&2147483647u);
   return (g);
}




class TextNotification
{
public:
   enum style_t
   {
      STYLE_INSTRUCTION = 0,
      STYLE_WARNING,
      STYLE_PICKUP_ITEM,
      STYLE_LAST
   };
   Motion *motion;
   ALLEGRO_FONT *little_font;
   ALLEGRO_FONT *big_font;
   ALLEGRO_FONT *font;
   std::vector<std::string> lines;
   float center_x, center_y;
   bool isd_it_visdible;
   ALLEGRO_COLOR background_color;
   ALLEGRO_COLOR text_color;
   float hide_counter;

   TextNotification(Motion *motion, std::string text, float x, float y)
      : lines(php::explode("\n", text))
      , center_x(x)
      , center_y(y)
      , motion(motion)
      , isd_it_visdible(false)
      , background_color(color::midnightblue)
      , text_color(color::white)
      , little_font(nullptr)
      , big_font(nullptr)
      , font(little_font)
      , hide_counter(0)
   {
      set_style(STYLE_INSTRUCTION);
   }

   void set_fonts(ALLEGRO_FONT *little_font, ALLEGRO_FONT *big_font)
   {
      this->little_font = little_font;
      this->big_font = big_font;
   }

   void set_text(std::string text, int style=STYLE_INSTRUCTION)
   {
      lines = php::explode("\n", text);

      set_style(style);
   }

   void set_style(int style)
   {
      if (style < 0 || style >= STYLE_LAST) style=STYLE_INSTRUCTION;
      switch(style)
      {
         case STYLE_INSTRUCTION:
            background_color = color::midnightblue;
            text_color = color::white;
            font = little_font;
            break;
         case STYLE_WARNING:
            background_color = color::midnightblue;
            text_color = color::white;
            font = little_font;
            break;
         case STYLE_PICKUP_ITEM:
            background_color = color::gold;
            text_color = color::white;
            font = big_font;
            break;
      };
   }

   void draw()
   {
      hide_counter = std::max<int>(0, hide_counter-1);
      if (hide_counter <= 0) isd_it_visdible = false;

      if (!isd_it_visdible) return;

      int line_height = al_get_font_line_height(font);
      float text_padding_x = 80;
      float text_padding_y = 50;
      float text_y = center_y - line_height * lines.size() * 0.5;
      float text_h = line_height * lines.size();
      int text_max_w = 0;

      for(unsigned i=0; i<lines.size(); i++)
         text_max_w = std::max<int>(text_max_w, al_get_text_width(font, lines[i].c_str()));

      // draw the box
      al_draw_filled_rectangle(center_x - text_max_w/2 - text_padding_x/2, center_y - text_h/2 - text_padding_y/2,
            center_x + text_max_w/2 + text_padding_x/2, center_y + text_h/2 + text_padding_y/2,
            color::color(background_color, 0.4));

      // draw the text
      for (unsigned i=0; i<lines.size(); i++)
      {
         al_draw_text(font, text_color, center_x, text_y, ALLEGRO_ALIGN_CENTRE, lines[i].c_str());
         text_y += line_height;
      }
   }

   void spawn()
   {
      hide_counter = 200;
      if (isd_it_visdible) return;
      isd_it_visdible = true;
      // initialize spawn animations here
   }

   void hide()
   {
      if (!isd_it_visdible) return;
      isd_it_visdible = false;
      // initialize hide animations here
   }
};




class Project : public Screen
{
public:
   int player_health;
   int player_ammo_reserve;
   int player_num_card_keys;
   int refire_counter;
   bool trigger_down;
   int magazine_capacity;
   int bullets_in_magazine;

   MultiProfileTimer profiler;
   BitmapBin bitmaps;
   SampleBin samples;


   vec2d direction;
   double dirX;
   double dirY;

   double planeX, planeY;

   float screen_ratio;

   double posX, posY;

   double velocity_y;
   double moveSpeed;


   FontBin fonts;

   std::vector<DepthCache> depth_caches;
   std::vector<ObjEntity> obj_entity_caches;
   std::vector<ZObject *> depth_caches_z_sorted;
   int num_z_buffered_objects;

   TextureBank textures;

   BitmapObject crosshair;
   Motion motion;

   ALLEGRO_COLOR frame_color;
   float frame_width;
   int viewport_width;
   int viewport_height;
   ALLEGRO_BITMAP *viewport_render;
   BitmapObject viewport;

   bool debug;
   bool gun_fired;


   BitmapObject gun_flash_a;
   BitmapObject gun_sprite;

   TextNotification text_notification;



   Project(Display *display)
      : Screen(display)
      , velocity_y(0)
      , fonts()
      , depth_caches()
      , obj_entity_caches()
      , depth_caches_z_sorted()
      , textures()
      , player_health(72)
      , player_ammo_reserve(12)
      , num_z_buffered_objects(0)
      , profiler()
      , crosshair(al_load_bitmap("/Users/markoates/Repos/allegro_flare/bin/data/raycast_demo/bitmaps/crosshair4.png"))
      , trigger_down(false)
      , refire_counter(0)
      , gun_fired(false)
      , text_notification(&motion, "", display->width()/2, display->height()/3*2)
      , frame_width(20)
      , viewport_width(1024/2-frame_width)
      , viewport_height((int)(viewport_width * (float)display->height()/display->width()-frame_width + 100))
      , viewport_render(al_create_bitmap(viewport_width, viewport_height))
      , viewport(viewport_render)
      , bitmaps()
      , player_num_card_keys(0)
      , samples()
      , debug(false)
      , motion(50)
      , gun_flash_a(nullptr)
      , gun_sprite(nullptr)
      , frame_color(color::black)
      , magazine_capacity(8)
      , bullets_in_magazine(magazine_capacity)
   {
      //bitmaps.set_full_path("/Users/markoates/Repos/allegro_flare/bin/data/raycast_demo/bitmaps");

      bitmaps.set_path("/Users/markoates/Repos/allegro_flare/bin/data/raycast_demo/bitmaps");
      samples.set_path("/Users/markoates/Repos/allegro_flare/bin/data/raycast_demo/samples");
      fonts.set_path("data/fonts");


      text_notification.set_fonts(fonts["DroidSans.ttf 30"], fonts["DroidSans.ttf 40"]);


      gun_flash_a.bitmap(bitmaps["gun_flash_a.png"]);
      gun_sprite.bitmap(bitmaps["gun_sprite3.png"]);


      direction = vec2d(-1, 0);
      dirX = -1;
      dirY = 0;

      planeX = 0;

      planeY = 0.75;//0.66; //the 2d raycaster version of camera plane

      posX = 22;
      posY = 12;

      moveSpeed = 0.04;

      al_hide_mouse_cursor(display->al_display);
      depth_caches.resize(viewport_width);
      obj_entity_caches.resize(10 * 2);

      make_some_obj_entities();

      depth_caches_z_sorted.resize(depth_caches.size() + obj_entity_caches.size());

      for (unsigned i=0; i<depth_caches_z_sorted.size(); i++) depth_caches_z_sorted[i] = new ZObject();


      crosshair.align(0.5, 0.5)
         .position(display->width()/2, display->height()/2);


      textures.load_texture(1, "beaten_brick.png");
      //textures.load_texture(2, "mossy_tiles.png"); // < hmm, not sure what this was needed for
      textures.load_texture(3, "beaten_brick.png");
      textures.load_texture(4, "beaten_brick_tall.png");


      std::cout << "" << textures.textures.size() << " texture indexes made." << std::endl;


      viewport.align(0.5, 0.5)
         .stretch_to_fit(display->width()-0, display->height()-0)
         .position(display->width()/2, display->height()/2);

      preprocess_map();



      gun_sprite.position(display->width()-130, display->height());
      gun_sprite.align(1, 1);
      gun_sprite.scale_to_height(display->height()/2);
   }

   void preprocess_map()
   {
      int object_entity_count = 0;

      for (unsigned y=0; y<mapHeight; y++)
         for (unsigned x=0; x<mapWidth; x++)
         {
            if (worldMap[x][y] == 26)
            {
               worldMap[x][y] = 0;
               posX = x;
               posY = y;
            }
            if (worldMap[x][y] == 25) // health
            {
               // health
               obj_entity_caches[object_entity_count].active = true;
               obj_entity_caches[object_entity_count].x = x + 0.5;
               obj_entity_caches[object_entity_count].y = y + 0.5;
               obj_entity_caches[object_entity_count].type = ITEM_HEALTH;
               obj_entity_caches[object_entity_count].image = bitmaps["player_health.png"];
               object_entity_count++;
               worldMap[x][y] = 0;
            }
            if (worldMap[x][y] == 27) // card key
            {
               // health
               obj_entity_caches[object_entity_count].active = true;
               obj_entity_caches[object_entity_count].x = x + 0.5;
               obj_entity_caches[object_entity_count].y = y + 0.5;
               obj_entity_caches[object_entity_count].type = ITEM_CARD_KEY;
               obj_entity_caches[object_entity_count].image = bitmaps["card_key_big.png"];
               object_entity_count++;
               worldMap[x][y] = 0;
            }
         }
   }

   void make_some_obj_entities()
   {
      for (unsigned i=0; i<obj_entity_caches.size(); i+=2)
      {
         obj_entity_caches[i].active = false;
         obj_entity_caches[i].x =0;
         obj_entity_caches[i].y = 0;
         obj_entity_caches[i].type = ITEM_UNDEF;
         obj_entity_caches[i].image = NULL;
      }
   }

   void clear_z_object_buffer()
   {
      for (unsigned i=0; i<depth_caches_z_sorted.size(); i++)
      {
         depth_caches_z_sorted[i]->in_use = false;
      }
   }

   void reload_weapon()
   {
      if (bullets_in_magazine == magazine_capacity) return;

      int bullets_needed_for_full_reload = magazine_capacity - bullets_in_magazine;
      int bullets_to_transfer_to_magazine = std::min<int>(player_ammo_reserve, bullets_needed_for_full_reload);

      if (bullets_to_transfer_to_magazine > 0)
      {
         bullets_in_magazine += bullets_to_transfer_to_magazine;
         player_ammo_reserve -= bullets_to_transfer_to_magazine;
         text_notification.hide();
      }
      else
      {
         //text_notification.set_text("no ammo");
         //text_notification.spawn();
      }
   }

   void test_weapon_fire_and_reload()
   {
      gun_fired = false;
      refire_counter--;
      if(refire_counter < 0) refire_counter = 0;
      if (trigger_down && refire_counter <= 0)
      {
         if (bullets_in_magazine <= 0)
         {
            refire_counter = 10;
            al_play_sample(samples["gun_magazine_empty-01.wav"], 0.6, 0.0, 1.0, ALLEGRO_PLAYMODE_ONCE, NULL);
            if (player_ammo_reserve > 0)
            {
               text_notification.set_text("Press 'R' to reload");
               text_notification.spawn();
               motion.canimate(&gun_sprite.get_attr("y"), display->height()+8, display->height(), Framework::time_now, Framework::time_now+0.1, interpolator::double_fast_in, NULL, NULL);
            }
         }
         else
         {
            refire_counter = 10;
            al_play_sample(samples["gunshot-01.wav"], 1.0, 0.0, 1.0, ALLEGRO_PLAYMODE_ONCE, NULL);
            bullets_in_magazine--;
            gun_fired = true;
            motion.canimate(&gun_sprite.get_attr("y"), display->height()-16, display->height(), Framework::time_now, Framework::time_now+0.2, interpolator::double_fast_in, NULL, NULL);
         }
      }
   }

   void primary_timer_func() override
   {
      profiler.start("primary_timer_func()");



      profiler.start("motion.update()");
      motion.update(Framework::time_now);
      profiler.stop("motion.update()");



      profiler.start("clear_z_object_buffer()");
      clear_z_object_buffer();
      profiler.stop("clear_z_object_buffer()");



      profiler.start("create_depth_caches()");
      create_depth_caches();
      profiler.stop("create_depth_caches()");



      // shoot or not
      test_weapon_fire_and_reload();



      // drawing 
      profiler.start("full render time");
      al_clear_to_color(color::black);

      ALLEGRO_STATE previous_state;
      al_store_state(&previous_state, ALLEGRO_STATE_TARGET_BITMAP);
      al_set_target_bitmap(viewport_render);

      al_clear_to_color(color::black);


      draw_sky();
      //draw_floor();


      profiler.start("draw_depth_caches()");
      draw_depth_caches();
      profiler.stop("draw_depth_caches()");






      al_restore_state(&previous_state);


      viewport.draw();


      draw_hud();
      profiler.stop("full render time");



      ALLEGRO_KEYBOARD_STATE keyboard_state;
      al_get_keyboard_state(&keyboard_state);

      //move forward if no wall in front of you
      if (al_key_down(&keyboard_state, ALLEGRO_KEY_W) || al_key_down(&keyboard_state, ALLEGRO_KEY_UP))
      {
         velocity_y = 1.0;
         if(worldMap[int(posX + dirX * moveSpeed)][int(posY)] == false) posX += dirX * moveSpeed;
         if(worldMap[int(posX)][int(posY + dirY * moveSpeed)] == false) posY += dirY * moveSpeed;
      }
      //move backwards if no wall behind you
      if (al_key_down(&keyboard_state, ALLEGRO_KEY_S) || al_key_down(&keyboard_state, ALLEGRO_KEY_DOWN))
      {
         velocity_y = -1.0;
         if(worldMap[int(posX - dirX * moveSpeed)][int(posY)] == false) posX -= dirX * moveSpeed;
         if(worldMap[int(posX)][int(posY - dirY * moveSpeed)] == false) posY -= dirY * moveSpeed;
      }

      // strafing
      if (al_key_down(&keyboard_state, ALLEGRO_KEY_A))
      {
         float dirX2 = -dirY;
         float dirY2 = dirX;
         if(worldMap[int(posX + dirX2 * moveSpeed)][int(posY)] == false) posX += dirX2 * moveSpeed;
         if(worldMap[int(posX)][int(posY + dirY2 * moveSpeed)] == false) posY += dirY2 * moveSpeed;
      }
      //move backwards if no wall behind you
      if (al_key_down(&keyboard_state, ALLEGRO_KEY_D))
      {
         float dirX2 = -dirY;
         float dirY2 = dirX;
         if(worldMap[int(posX - dirX2 * moveSpeed)][int(posY)] == false) posX -= dirX2 * moveSpeed;
         if(worldMap[int(posX)][int(posY - dirY2 * moveSpeed)] == false) posY -= dirY2 * moveSpeed;
      }
      if (al_key_down(&keyboard_state, ALLEGRO_KEY_RIGHT))
      {
         rotate_view(0.01);
      }
      if (al_key_down(&keyboard_state, ALLEGRO_KEY_LEFT))
      {
         rotate_view(-0.01);
      }


      profiler.stop("primary_timer_func()");
      if (debug) profiler.draw(fonts["DroidSans.ttf 20"], 20, 20);
   }

   void draw_sky()
   {
      ALLEGRO_VERTEX vertex[4];
      vertex[0] = build_vertex(0, 0, 0, color::midnightblue, 0, 0);
      vertex[1] = build_vertex(viewport_width, 0, 0, color::midnightblue, 0, 0);
      vertex[2] = build_vertex(viewport_width, viewport_height/2, 0, color::skyblue, 0, 0);
      vertex[3] = build_vertex(0, viewport_height/2, 0, color::skyblue, 0, 0);

      al_draw_prim(&vertex, NULL, NULL, 0, 4, ALLEGRO_PRIM_TRIANGLE_FAN);
   }

   void draw_floor()
   {
      ALLEGRO_VERTEX vertex[4];
      vertex[0] = build_vertex(0, viewport_height/2, 0, color::midnightblue, 0, 0);
      vertex[1] = build_vertex(viewport_width, viewport_height/2, 0, color::midnightblue, 0, 0);
      vertex[2] = build_vertex(viewport_width, viewport_height, 0, color::darkolivegreen, 0, 0);
      vertex[3] = build_vertex(0, viewport_height, 0, color::darkolivegreen, 0, 0);

      al_draw_prim(&vertex, NULL, NULL, 0, 4, ALLEGRO_PRIM_TRIANGLE_FAN);
   }

   void create_depth_caches()
   {
      for(int x = 0; x < viewport_width; x++)
      {
         //calculate ray position and direction 
         double cameraX = 2 * x / double(viewport_width) - 1; //x-coordinate in camera space
         double rayPosX = posX;
         double rayPosY = posY;
         double rayDirX = dirX + planeX * cameraX;
         double rayDirY = dirY + planeY * cameraX;

         //which box of the map we're in  
         int mapX = int(rayPosX);
         int mapY = int(rayPosY);

         //length of ray from current position to next x or y-side
         double sideDistX;
         double sideDistY;

         //length of ray from one x or y-side to next x or y-side
         double deltaDistX = sqrt(1 + (rayDirY * rayDirY) / (rayDirX * rayDirX));
         double deltaDistY = sqrt(1 + (rayDirX * rayDirX) / (rayDirY * rayDirY));
         double perpWallDist;

         //what direction to step in x or y-direction (either +1 or -1)
         int stepX;
         int stepY;

         int hit = 0; //was there a wall hit?
         int side; //was a NS or a EW wall hit?

         //calculate step and initial sideDist
         if (rayDirX < 0)
         {
            stepX = -1;
            sideDistX = (rayPosX - mapX) * deltaDistX;
         }
         else
         {
            stepX = 1;
            sideDistX = (mapX + 1.0 - rayPosX) * deltaDistX;
         }
         if (rayDirY < 0)
         {
            stepY = -1;
            sideDistY = (rayPosY - mapY) * deltaDistY;
         }
         else
         {
            stepY = 1;
            sideDistY = (mapY + 1.0 - rayPosY) * deltaDistY;
         }
         //perform DDA
         while (hit == 0)
         {
            //jump to next map square, OR in x-direction, OR in y-direction
            if (sideDistX < sideDistY)
            {
               sideDistX += deltaDistX;
               mapX += stepX;
               side = 0;
            }
            else
            {
               sideDistY += deltaDistY;
               mapY += stepY;
               side = 1;
            }
            //Check if ray has hit a wall
            if (worldMap[mapX][mapY] > 0) hit = 1;
         } 
         //Calculate distance projected on camera direction (oblique distance will give fisheye effect!)
         if (side == 0)
            perpWallDist = fast_absf((mapX - rayPosX + (1 - stepX) / 2) / rayDirX);
         else
            perpWallDist = fast_absf((mapY - rayPosY + (1 - stepY) / 2) / rayDirY);



         //calculate value of wallX
         double wallX; //where exactly the wall was hit
         if (side == 1) wallX = rayPosX + ((mapY - rayPosY + (1 - stepY) / 2) / rayDirY) * rayDirX;
         else       wallX = rayPosY + ((mapX - rayPosX + (1 - stepX) / 2) / rayDirX) * rayDirY;
         wallX -= floor((wallX));





         //num_z_buffered_objects++;

         depth_caches[x].tilex = mapX;
         depth_caches[x].tiley = mapY;
         depth_caches[x].side = side;
         depth_caches[x].wallx = wallX;
         depth_caches[x].tileNum = worldMap[mapX][mapY];

         depth_caches_z_sorted[x]->wall_stripe = &depth_caches[x];
         depth_caches_z_sorted[x]->obj_entity = NULL;
         depth_caches_z_sorted[x]->distance = perpWallDist;
         depth_caches_z_sorted[x]->x = x;
         depth_caches_z_sorted[x]->in_use = true;

      }


      // make soem objects
      include_sprite_caches();


      // sort depth caches
      profiler.start("depth_caches sort()");
      std::sort(depth_caches_z_sorted.begin(), depth_caches_z_sorted.end(), sort_depth_cache_ptr_func);
      profiler.stop("depth_caches sort()");
   }

   void mouse_down_func() override
   {
      trigger_down = true;
   }

   void mouse_up_func() override
   {
      trigger_down = false;
   }

   void include_sprite_caches()
   {
      int index=depth_caches.size();

      for (int i=0; i<(int)obj_entity_caches.size(); i++)
      {
         if (!obj_entity_caches[i].active)
         {
            depth_caches_z_sorted[index+i]->in_use = false;
         }
         else
         {
            double spriteX = obj_entity_caches[i].x - posX;
            double spriteY = obj_entity_caches[i].y - posY;

            //transform sprite with the inverse camera matrix
            // [ planeX   dirX ] -1                                       [ dirY      -dirX ]
            // [               ]       =  1/(planeX*dirY-dirX*planeY) *   [                 ]
            // [ planeY   dirY ]                                          [ -planeY  planeX ]

            double invDet = 1.0 / (planeX * dirY - dirX * planeY); //required for correct matrix multiplication

            double transformX = invDet * (dirY * spriteX - dirX * spriteY);
            double transformY = invDet * (-planeY * spriteX + planeX * spriteY); //this is actually the depth inside the screen, that what Z is in 3D       

            int spriteScreenX = int((viewport_width / 2) * (1 + transformX / transformY));

            //calculate height of the sprite on screen
            int spriteHeight = abs(int(viewport_height / (transformY))); //using "transformY" instead of the real distance prevents fisheye


            depth_caches_z_sorted[index+i]->wall_stripe = NULL;
            depth_caches_z_sorted[index+i]->obj_entity = &obj_entity_caches[i];
            depth_caches_z_sorted[index+i]->distance = transformY;
            depth_caches_z_sorted[index+i]->x = spriteScreenX;
            depth_caches_z_sorted[index+i]->in_use = true;
         }
      }
   }

   void draw_hud()
   {
      // draw the gunflash
      gun_flash_a.align(0.5, 0.5);
      gun_flash_a.scale(random_float(0.9, 1.1)+1.9);
      gun_flash_a.rotation(random_float(0, 1));
      gun_flash_a.position(display->width()*0.73-180, display->height()*0.65);

      if (gun_fired)
      {
         set_blender(BLENDER_SCREEN);
         gun_flash_a.draw();
         set_blender(BLENDER_NORMAL);
      }


      // draw the gun sprite
      gun_sprite.draw();



      // draw the frame
      al_draw_rectangle(0, 0, display->width(), display->height(), frame_color, frame_width);



      // draw the text notification
      text_notification.draw();



      // now the health and shit
      ALLEGRO_FONT *numbers_font = fonts["DroidSans.ttf 40"];
      TextObject text("");

      text.align(0.5, 0.5)
         .font(numbers_font)
         .color(color::color(color::white, 0.3));

      al_draw_filled_circle(100, display->height()-100, 65, color::color(color::midnightblue, 0.2));
      text.text(tostring(player_ammo_reserve).c_str())
         .position(100, display->height()-100)
         .draw();

      al_draw_filled_circle(250, display->height()-100, 65, color::color(color::midnightblue, 0.2));
      text.text((tostring(player_health) + "%").c_str())
         .position(250, display->height()-100)
         .draw();


      // crosshair
      al_draw_filled_circle(display->width()-100, display->height()-100, 65, color::color(color::midnightblue, 0.2));
      text.text((tostring(player_num_card_keys)).c_str())
         .position(display->width()-100, display->height()-100)
         .color(color::sienna)
         .draw();

      // draw ammo arc
      float arc_start_angle = TAU * 0.3;
      float arc_end_angle = TAU * 0.7;
      float arc_full_size = (arc_end_angle-arc_start_angle);
      float ammo_percent = ((float) bullets_in_magazine) / magazine_capacity;

      float ammo_arc_cursor = arc_start_angle;
      float ammo_arc_step = arc_full_size / magazine_capacity;
      for (unsigned i=0; i<magazine_capacity; i++)
      {
         al_draw_arc(display->width()/2, display->height()/2, 100, ammo_arc_cursor, ammo_arc_step/2,
               (i < bullets_in_magazine) ? color::color(color::white, 0.1) : color::color(color::black, 0.1), 20);
         ammo_arc_cursor += ammo_arc_step;
      }

      crosshair.draw();


      //al_draw_text(fonts["DroidSans.ttf 30"], color::white, 300, 20, ALLEGRO_ALIGN_CENTER, tostring(posX).c_str());
      //al_draw_text(fonts["DroidSans.ttf 30"], color::white, 300, 40, ALLEGRO_ALIGN_CENTER, tostring(posY).c_str());
   }

   void draw_depth_caches()
   {
      ALLEGRO_COLOR fog_color = color::midnightblue;
      int tile_num;
      float height_scalar=1;
      ALLEGRO_COLOR color;
      float player_z = 0;
      float lineHeight;

      int drawStart, drawStartClipped;
      int drawEnd, drawEndClipped;

      StrippedTexture *texture = NULL;

      float max_distance=14*3, min_distance=0, distance_normal=1;


      for (int x=depth_caches_z_sorted.size()-1; x>=0; x--)
      {
         if (!depth_caches_z_sorted[x]->in_use) continue;

         if (depth_caches_z_sorted[x]->wall_stripe)
         {
            //calculate lowest and highest pixel to fill in current stripe
            lineHeight = abs(int(viewport_height / depth_caches_z_sorted[x]->distance));
            height_scalar=1;

            tile_num = depth_caches_z_sorted[x]->wall_stripe->tileNum;


            color = color::orange;
            switch(tile_num)
            {
               case 1:  color = color::cornflowerblue;  height_scalar = 0.5; break; //red
               case 2:  color = color::darkolivegreen;  height_scalar = 1.0; break; //green
               case 3:  color = color::sienna;   height_scalar = 3.0; break; //blue
               case 4:  color = color::white;  break; //white
               default: color = color::yellow; break; //yellow
            }


            color = color::mix(color, color::white, 0.5);



            drawStart = -lineHeight / 2 * height_scalar+ viewport_height / 2 + player_z;
            drawStartClipped = drawStart;
            if(drawStartClipped < 0) drawStartClipped = 0;
            drawEnd = lineHeight / 2 + viewport_height / 2 + player_z;
            drawEndClipped = drawEnd;
            if(drawEndClipped >= viewport_height) drawEndClipped = viewport_height - 1;

            //max_distance = 14*3;
            //min_distance = 0;

            distance_normal = (max_distance - depth_caches_z_sorted[x]->distance) / max_distance;
            distance_normal = clamp<float>(0.0f, 1.0f, 1.0f - distance_normal);




            //give x and y sides different brightness
            if (depth_caches_z_sorted[x]->wall_stripe->side == 1) { color::change_value(color, 0.7); }

            color = color::mix(color, fog_color, distance_normal);




            // draw a line from a texture map
            texture = NULL;
            if (tile_num == 3) texture = textures.get(4);
            else texture = textures.get(3);


            if (texture)
            {
               int strip_num = depth_caches_z_sorted[x]->wall_stripe->wallx * (al_get_bitmap_width(texture->parent_texture) - 1);
               ALLEGRO_BITMAP *texture_strip = texture->strip[strip_num];
               al_draw_tinted_scaled_bitmap(texture_strip, color,
                     depth_caches_z_sorted[x]->wall_stripe->wallx, 0, 1, texture->height,
                     depth_caches_z_sorted[x]->x, drawStart, 1, drawEnd - drawStart, ALLEGRO_FLAGS_EMPTY);
            }
            else
            {
               // draw just the line
               al_draw_line(depth_caches_z_sorted[x]->x, drawStartClipped, depth_caches_z_sorted[x]->x, drawEndClipped, color, 1);
            }
         }
         else if (depth_caches_z_sorted[x]->obj_entity)
         {
            BitmapObject sprite(depth_caches_z_sorted[x]->obj_entity->image);
            sprite.align(0.5, 0.5);
            if (depth_caches_z_sorted[x]->distance > 0)
            {
               int spriteHeight = abs(int(viewport_height / (depth_caches_z_sorted[x]->distance))); //using "transformY" instead of the real distance prevents fisheye
               ALLEGRO_COLOR item_color = color::dodgerblue;
               bool major_item = false;

               switch(depth_caches_z_sorted[x]->obj_entity->type)
               {
                  case ITEM_CARD_KEY:
                     item_color = color::gold;
                     major_item = true;
                     break;
                  case ITEM_HEALTH:
                     item_color = color::turquoise;
                     break;
               }


               float sh_d8 = spriteHeight/8;
               al_draw_filled_circle(depth_caches_z_sorted[x]->x, viewport_height/2, sh_d8, color::color(item_color, 0.6));
               if (major_item) al_draw_circle(depth_caches_z_sorted[x]->x, viewport_height/2, sh_d8*1.3, color::color(color::white, 0.6), sh_d8*0.15);

               sprite.position(depth_caches_z_sorted[x]->x, viewport_height/2);
               sprite.scale(spriteHeight/600.0);
               sprite.draw();

               // do collision tests here... just cause it's wrauhng

               if (depth_caches_z_sorted[x]->obj_entity->collides(posX, posY))
               {
                  float pickup_frame_time_length = 0.8;
                  std::string notification_text;

                  bool player_picked_up_item = false;
                  switch(depth_caches_z_sorted[x]->obj_entity->type)
                  {
                     case ITEM_CARD_KEY:
                        player_num_card_keys++;
                        al_play_sample(samples["card_key_sound-03.wav"], 1.0, 0.5, 1.0, ALLEGRO_PLAYMODE_ONCE, NULL);
                        notification_text = "card key";
                        pickup_frame_time_length = 3.0;
                        player_picked_up_item = true;
                        break;
                     case ITEM_HEALTH:
                        if (player_health < 100)
                        {
                           player_health = std::min(100, player_health+10);
                           al_play_sample(samples["pickup_health-01.wav"], 1.0, 1.0, 1.0, ALLEGRO_PLAYMODE_ONCE, NULL);
                           player_picked_up_item = true;
                           notification_text = "health + 10";
                        }
                        break;
                  }

                  if (player_picked_up_item)
                  {
                     depth_caches_z_sorted[x]->obj_entity->active = false;
                     animate_color(&motion, &frame_color, item_color, color::black, Framework::time_now, pickup_frame_time_length, interpolator::fast_in);
                     text_notification.set_text(notification_text, TextNotification::STYLE_PICKUP_ITEM);
                     text_notification.background_color = item_color;
                     text_notification.spawn();
                  }
               }
               //pickup_health-01.wav
               //depth_caches_z_sorted[x]->

            }
         }
      }
   }

   void key_down_func() override
   {
      switch(Framework::current_event->keyboard.keycode)
      {
         case ALLEGRO_KEY_F1:
            debug = !debug;
            break;
         case ALLEGRO_KEY_SPACE:
            trigger_down = true;
            break;
         case ALLEGRO_KEY_R:
            reload_weapon();
            break;
         default:
            return;
      }
   }

   void key_up_func() override
   {
      switch(Framework::current_event->keyboard.keycode)
      {
         case ALLEGRO_KEY_SPACE:
            trigger_down = false;
            break;
      }
   }

   void rotate_view(float rotSpeed)
   {
      double oldDirX = dirX;
      dirX = dirX * cos(-rotSpeed) - dirY * sin(-rotSpeed);
      dirY = oldDirX * sin(-rotSpeed) + dirY * cos(-rotSpeed);
      double oldPlaneX = planeX;
      planeX = planeX * cos(-rotSpeed) - planeY * sin(-rotSpeed);
      planeY = oldPlaneX * sin(-rotSpeed) + planeY * cos(-rotSpeed);

      al_set_mouse_xy(display->al_display, display->width()/2, display->height()/2);
   }

   void mouse_axes_func() override
   {
      int dx = Framework::current_event->mouse.dx;
      if (abs(dx) > 0)
      {
         double rotSpeed = Framework::current_event->mouse.dx * 0.001;
         rotate_view(rotSpeed);
      }
   }
};




int main(int argc, char *argv[])
{
   Framework::initialize();
   Display *display = Framework::create_display(1920/2, 1080/2);
   Project *project = new Project(display);
   Framework::run_loop();
   return 0;
}




